{"doc_urls":["title-page.html#Язык-программирования-rust","foreword.html#Предисловие","ch00-00-introduction.html#Введение","ch00-00-introduction.html#Кому-подходит-rust","ch00-00-introduction.html#Команды-разработчиков","ch00-00-introduction.html#Студенты","ch00-00-introduction.html#Компании","ch00-00-introduction.html#Разработчики-open-source","ch00-00-introduction.html#Люди-ценящие-скорость-и-безотказность","ch00-00-introduction.html#Для-кого-эта-книга","ch00-00-introduction.html#Как-использовать-эту-книгу","ch00-00-introduction.html#Исходные-коды","ch01-00-getting-started.html#Начало-работы","ch01-01-installation.html#Установка","ch01-01-installation.html#Условные-обозначения-приказной-строки","ch01-01-installation.html#Установка-rustup-на-linux-или-macos","ch01-01-installation.html#Установка-rustup-на-windows","ch01-01-installation.html#Устранение-возможных-ошибок","ch01-01-installation.html#Обновление-и-удаление","ch01-01-installation.html#Локальная-документация","ch01-02-hello-world.html#Привет-мир","ch01-02-hello-world.html#Создание-папки-проекта","ch01-02-hello-world.html#Написание-и-запуск-первой-rust-программы","ch01-02-hello-world.html#Анатомия-программы-на-rust","ch01-02-hello-world.html#Сборка-и-запуск---это-отдельные-шаги","ch01-03-hello-cargo.html#Привет-cargo","ch01-03-hello-cargo.html#Создание-проекта-с-помощью-cargo","ch01-03-hello-cargo.html#Сборка-и-запуск-cargo-проекта","ch01-03-hello-cargo.html#Сборка-финальной-исполнения-release","ch01-03-hello-cargo.html#cargo-как-Конвенция","ch01-03-hello-cargo.html#Итоги","ch02-00-guessing-game-tutorial.html#Программируем-игру-в-загадки","ch02-00-guessing-game-tutorial.html#Настройка-нового-проекта","ch02-00-guessing-game-tutorial.html#Обработка-догадки","ch02-00-guessing-game-tutorial.html#Хранение-значений-с-помощью-переменных","ch02-00-guessing-game-tutorial.html#Получение-пользовательского-ввода","ch02-00-guessing-game-tutorial.html#Обработка-потенциального-сбоя-с-помощью-вида-result","ch02-00-guessing-game-tutorial.html#Вывод-значений-с-помощью-заполнителей-println","ch02-00-guessing-game-tutorial.html#Тестирование-первой-части","ch02-00-guessing-game-tutorial.html#Генерация-секретного-числа","ch02-00-guessing-game-tutorial.html#Использование-крейта-для-получения-дополнительного-функционала","ch02-00-guessing-game-tutorial.html#Генерация-случайного-числа","ch02-00-guessing-game-tutorial.html#Сравнение-догадки-с-секретным-числом","ch02-00-guessing-game-tutorial.html#Возможность-нескольких-догадок-с-помощью-циклов","ch02-00-guessing-game-tutorial.html#Выход-после-правильной-догадки","ch02-00-guessing-game-tutorial.html#Обработка-недопустимого-ввода","ch02-00-guessing-game-tutorial.html#Заключение","ch03-00-common-programming-concepts.html#Общие-концепции-программирования","ch03-01-variables-and-mutability.html#Переменные-и-изменяемость","ch03-01-variables-and-mutability.html#Константы","ch03-01-variables-and-mutability.html#Затенение-переменных","ch03-02-data-types.html#Виды-Данных","ch03-02-data-types.html#Скалярные-виды-данных","ch03-02-data-types.html#Составные-виды-данных","ch03-03-how-functions-work.html#Функции","ch03-03-how-functions-work.html#Свойства-функции","ch03-03-how-functions-work.html#Указания-и-выражения","ch03-03-how-functions-work.html#Функции-с-возвращаемыми-значениями","ch03-04-comments.html#Комментарии","ch03-05-control-flow.html#Управляющие-конструкции","ch03-05-control-flow.html#Выражения-if","ch03-05-control-flow.html#Повторное-выполнение-кода-с-помощью-циклов","ch03-05-control-flow.html#Итоги","ch04-00-understanding-ownership.html#Понимание-Владения","ch04-01-what-is-ownership.html#Что-такое-владение","ch04-01-what-is-ownership.html#Стек-и-куча","ch04-01-what-is-ownership.html#Правила-владения","ch04-01-what-is-ownership.html#Область-видимости-переменной","ch04-01-what-is-ownership.html#Вид-данных-string","ch04-01-what-is-ownership.html#Память-и-способы-её-выделения","ch04-01-what-is-ownership.html#Владение-и-функции","ch04-01-what-is-ownership.html#Возвращение-значений-и-область-видимости","ch04-02-references-and-borrowing.html#Ссылки-и-заимствование","ch04-02-references-and-borrowing.html#Изменяемые-ссылки","ch04-02-references-and-borrowing.html#Висячие-ссылки","ch04-02-references-and-borrowing.html#Правила-работы-с-ссылками","ch04-03-slices.html#Вид-срезы","ch04-03-slices.html#Строковые-срезы","ch04-03-slices.html#Другие-срезы","ch04-03-slices.html#Итоги","ch05-00-structs.html#Использование-структур-для-структурирования-связанных-данных","ch05-01-defining-structs.html#Определение-и-объявление-структур","ch05-01-defining-structs.html#Использование-сокращённой-объявления-поля","ch05-01-defining-structs.html#Создание-экземпляра-структуры-из-экземпляра-другой-структуры-с-помощью-синтаксиса-обновления-структуры","ch05-01-defining-structs.html#Кортежные-структуры-структуры-без-именованных-полей-для-создания-разных-видов","ch05-01-defining-structs.html#Единично-подобные-структуры-структуры-без-полей","ch05-01-defining-structs.html#Владение-данными-структуры","ch05-02-example-structs.html#Пример-использования-структур","ch05-02-example-structs.html#Рефакторинг-при-помощи-кортежей","ch05-02-example-structs.html#Рефакторинг-при-помощи-структур-добавим-больше-смысла","ch05-02-example-structs.html#Добавление-полезной-функциональности-при-помощи-выводимых-типажей","ch05-03-method-syntax.html#Синтаксис-способа","ch05-03-method-syntax.html#Определение-способов","ch05-03-method-syntax.html#Где-используется-оператор--","ch05-03-method-syntax.html#Способы-с-несколькими-свойствами","ch05-03-method-syntax.html#Ассоциированные-функции","ch05-03-method-syntax.html#Несколько-разделов-impl","ch05-03-method-syntax.html#Итоги","ch06-00-enums.html#Перечисления-и-сопоставление-с-образцом","ch06-01-defining-an-enum.html#Определение-перечисления","ch06-01-defining-an-enum.html#Значения-перечислений","ch06-01-defining-an-enum.html#Перечисление-option-и-его-преимущества-перед-null-значениями","ch06-02-match.html#Управляющая-конструкция-match","ch06-02-match.html#Образцы-привязывающие-значения","ch06-02-match.html#Сопоставление-шаблона-для-option","ch06-02-match.html#match-объемлет-все-варианты-значения","ch06-02-match.html#Универсальные-шаблоны-и-заполнитель-_","ch06-03-if-let.html#Краткое-управление-потоком-выполнения-с-if-let","ch06-03-if-let.html#Итоги","ch07-00-managing-growing-projects-with-packages-crates-and-modules.html#Управление-растущими-проектами-с-помощью-пакетов-крейтов-и-модулей","ch07-01-packages-and-crates.html#Пакеты-и-крейты","ch07-02-defining-modules-to-control-scope-and-privacy.html#Определение-модулей-для-управления-видимости-и-закрытости","ch07-02-defining-modules-to-control-scope-and-privacy.html#Шпаргалка-по-модулям","ch07-02-defining-modules-to-control-scope-and-privacy.html#Группировка-связанного-кода-в-модулях","ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#Пути-для-ссылки-на-элемент-в-дереве-модулей","ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#Раскрываем-приватные-пути-с-помощью-ключевого-слова-pub","ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#Начинаем-относительный-путь-с-помощью-super","ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#Делаем-общедоступными-структуры-и-перечисления","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Подключение-путей-в-область-видимости-с-помощью-ключевого-слова-use","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Создание-идиоматических-путей-с-use","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Предоставление-новых-имён-с-помощью-ключевого-слова-as","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Реэкспорт-имён-с-pub-use","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Использование-внешних-пакетов","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Использование-вложенных-путей-для-уменьшения-длинных-списков-use","ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#Оператор--glob","ch07-05-separating-modules-into-different-files.html#Разделение-модулей-на-разные-файлы","ch07-05-separating-modules-into-different-files.html#Иные-пути-к-файлам","ch07-05-separating-modules-into-different-files.html#Итог","ch08-00-common-collections.html#Общие-собрания","ch08-01-vectors.html#Хранение-списков-значений-в-векторах","ch08-01-vectors.html#Создание-нового-вектора","ch08-01-vectors.html#Изменение-вектора","ch08-01-vectors.html#Чтение-данных-вектора","ch08-01-vectors.html#Перебор-значений-в-векторе","ch08-01-vectors.html#Использование-перечислений-для-хранения-множества-разных-видов","ch08-01-vectors.html#Удаление-элементов-из-вектора","ch08-02-strings.html#Хранение-закодированного-текста-utf-8-в-строках","ch08-02-strings.html#Что-же-такое-строка","ch08-02-strings.html#Создание-новых-строк","ch08-02-strings.html#Обновление-строковых-данных","ch08-02-strings.html#Упорядочевание-в-строках","ch08-02-strings.html#Срезы-строк","ch08-02-strings.html#Способы-для-перебора-строк","ch08-02-strings.html#Строки-не-так-просты","ch08-03-hash-maps.html#Хранение-ключей-со-связанными-значениями-в-hashmap","ch08-03-hash-maps.html#Создание-новой-хеш-карты","ch08-03-hash-maps.html#Доступ-к-данным-в-hashmap","ch08-03-hash-maps.html#Хеш-карты-и-владение","ch08-03-hash-maps.html#Обновление-данных-в-hashmap","ch08-03-hash-maps.html#Функция-хеширования","ch08-03-hash-maps.html#Итоги","ch09-00-error-handling.html#Обработка-ошибок","ch09-01-unrecoverable-errors-with-panic.html#Неустранимые-ошибки-с-макросом-panic","ch09-01-unrecoverable-errors-with-panic.html#Раскручивать-стек-или-прерывать-выполнение-программы-в-ответ-на-панику","ch09-01-unrecoverable-errors-with-panic.html#Использование-обратной-трассировки-panic","ch09-02-recoverable-errors-with-result.html#Исправимые-ошибки-с-result","ch09-02-recoverable-errors-with-result.html#Обработка-различных-ошибок-с-помощью-match","ch09-02-recoverable-errors-with-result.html#Иные-использованию-match-с-result","ch09-02-recoverable-errors-with-result.html#Лаконичные-способы-обработки-ошибок---unwrap-и-expect","ch09-02-recoverable-errors-with-result.html#Проброс-ошибок","ch09-03-to-panic-or-not-to-panic.html#panic-или-не-panic","ch09-03-to-panic-or-not-to-panic.html#Примеры-прототипирование-и-тесты","ch09-03-to-panic-or-not-to-panic.html#Случаи-в-которых-у-вас-больше-сведений-чем-у-сборщика","ch09-03-to-panic-or-not-to-panic.html#Руководство-по-обработке-ошибок","ch09-03-to-panic-or-not-to-panic.html#Создание-пользовательских-видов-для-проверки","ch09-03-to-panic-or-not-to-panic.html#Итоги","ch10-00-generics.html#Обобщённые-виды-типажи-и-время-жизни","ch10-00-generics.html#Удаление-повторения-кода-с-помощью-выделения-общей-функциональности","ch10-01-syntax.html#Обобщённые-виды-данных","ch10-01-syntax.html#В-объявлении-функций","ch10-01-syntax.html#В-определении-структур","ch10-01-syntax.html#В-определениях-перечислений","ch10-01-syntax.html#В-определении-способов","ch10-01-syntax.html#Производительность-кода-использующего-обобщённые-виды","ch10-02-traits.html#Типажи-определение-общего-поведения","ch10-02-traits.html#Определение-типажа","ch10-02-traits.html#Реализация-типажа-у-вида","ch10-02-traits.html#Реализация-поведения-по-умолчанию","ch10-02-traits.html#Типажи-как-свойства","ch10-02-traits.html#Возврат-значений-вида-реализующего-определённый-типаж","ch10-02-traits.html#Использование-ограничений-типажа-для-условной-реализации-способов","ch10-03-lifetime-syntax.html#Валидация-ссылок-при-помощи-времён-жизни","ch10-03-lifetime-syntax.html#Времена-жизни-предотвращают-появление-повисших-ссылок","ch10-03-lifetime-syntax.html#Анализатор-заимствований","ch10-03-lifetime-syntax.html#Обобщённые-времена-жизни-в-функциях","ch10-03-lifetime-syntax.html#Синтаксис-изложении-времени-жизни","ch10-03-lifetime-syntax.html#Изложения-времени-жизни-в-сигнатурах-функций","ch10-03-lifetime-syntax.html#Мышление-в-терминах-времён-жизни","ch10-03-lifetime-syntax.html#Определение-времён-жизни-при-объявлении-структур","ch10-03-lifetime-syntax.html#Правила-неявного-выведения-времени-жизни","ch10-03-lifetime-syntax.html#Изложение-времён-жизни-в-определении-способов","ch10-03-lifetime-syntax.html#Статическое-время-жизни","ch10-03-lifetime-syntax.html#Обобщённые-виды-свойств-ограничения-типажей-и-времена-жизни-вместе","ch10-03-lifetime-syntax.html#Итоги","ch11-00-testing.html#Написание-автоматизированных-тестов","ch11-01-writing-tests.html#Как-писать-тесты","ch11-01-writing-tests.html#Структура-тестирующей-функции","ch11-01-writing-tests.html#Проверка-результатов-с-помощью-макроса-assert","ch11-01-writing-tests.html#Проверка-на-равенство-с-помощью-макросов-assert_eq-и-assert_ne","ch11-01-writing-tests.html#Создание-сообщений-об-ошибках","ch11-01-writing-tests.html#Проверка-с-помощью-макроса-should_panic","ch11-01-writing-tests.html#Использование-result-в-тестах","ch11-02-running-tests.html#Управление-хода-выполнения-тестов","ch11-02-running-tests.html#Выполнение-тестов-параллельно-или-последовательно","ch11-02-running-tests.html#Отображение-результатов-работы-функции","ch11-02-running-tests.html#Запуск-подмножества-тестов-по-имени","ch11-02-running-tests.html#Пренебрежение-тестов","ch11-03-test-organization.html#Организация-тестов","ch11-03-test-organization.html#Модульные-тесты","ch11-03-test-organization.html#Встраиваемые-тесты","ch11-03-test-organization.html#Итоги","ch12-00-an-io-project.html#Проект-с-вводомвыводом-io-создание-окно-выводаного-приложения","ch12-01-accepting-command-line-arguments.html#Принятие-переменных-приказной-строки","ch12-01-accepting-command-line-arguments.html#Чтение-значений-переменных","ch12-01-accepting-command-line-arguments.html#Функция-args-и-недействительный-Юникод-символ-unicode","ch12-01-accepting-command-line-arguments.html#Сохранения-значений-переменных-в-переменные","ch12-02-reading-a-file.html#Чтение-файла","ch12-03-improving-error-handling-and-modularity.html#Рефакторинг-для-улучшения-модульности-и-обработки-ошибок","ch12-03-improving-error-handling-and-modularity.html#Разделение-ответственности-для-двоичных-проектов","ch12-03-improving-error-handling-and-modularity.html#Исправление-ошибок-обработки","ch12-03-improving-error-handling-and-modularity.html#Извлечение-логики-из-main","ch12-03-improving-error-handling-and-modularity.html#Разделение-кода-на-библиотечный-крейт","ch12-04-testing-the-librarys-functionality.html#Развитие-функциональности-библиотеки-разработкой-на-основе-тестов","ch12-04-testing-the-librarys-functionality.html#Написание-теста-с-ошибкой","ch12-04-testing-the-librarys-functionality.html#Написание-кода-для-прохождения-теста","ch12-05-working-with-environment-variables.html#Работа-с-переменными-окружения","ch12-05-working-with-environment-variables.html#Написание-ошибочного-теста-для-функции-search-с-учётом-регистра","ch12-05-working-with-environment-variables.html#Реализация-функции-search_case_insensitive","ch12-06-writing-to-stderr-instead-of-stdout.html#Запись-сообщений-ошибок-в-поток-ошибок-вместо-принятого-потока-вывода","ch12-06-writing-to-stderr-instead-of-stdout.html#Проверка-куда-записываются-ошибки","ch12-06-writing-to-stderr-instead-of-stdout.html#Печать-ошибок-в-поток-ошибок","ch12-06-writing-to-stderr-instead-of-stdout.html#Итоги","ch13-00-functional-features.html#Функциональные-возможности-языка-повторители-и-замыкания","ch13-01-closures.html#Замыкания-анонимные-функции-которые-запечатлевают-захватывают-своё-окружение","ch13-01-closures.html#Захват-переменных-окружения-с-помощью-замыкания","ch13-01-closures.html#Выведение-и-изложение-видов-замыкания","ch13-01-closures.html#Захват-ссылок-или-передача-владения","ch13-01-closures.html#Перемещение-захваченных-значений-из-замыканий-и-трейты-fn","ch13-02-iterators.html#Обработка-последовательности-элементов-с-помощью-повторителей","ch13-02-iterators.html#Типаж-iterator-и-способ-next","ch13-02-iterators.html#Способы-которые-потребляют-повторитель","ch13-02-iterators.html#Способы-которые-создают-другие-повторители","ch13-02-iterators.html#Использование-замыканий-которые-захватывают-переменные-окружения","ch13-03-improving-our-io-project.html#Улучшение-нашего-проекта-с-вводомвыводом","ch13-03-improving-our-io-project.html#Удаляем-clone-используем-повторитель","ch13-03-improving-our-io-project.html#Делаем-код-понятнее-с-помощью-адаптеров-повторителей","ch13-03-improving-our-io-project.html#Выбор-между-циклами-или-повторителями","ch13-04-performance.html#Сравнение-производительности-циклов-и-повторителей","ch13-04-performance.html#Итоги","ch14-00-more-about-cargo.html#Больше-о-cargo-и-cratesio","ch14-01-release-profiles.html#Настройка-сборок-с-профилями-релизов","ch14-02-publishing-to-crates-io.html#Публикация-библиотеки-в-cratesio","ch14-02-publishing-to-crates-io.html#Создание-полезных-комментариев-к-документации","ch14-02-publishing-to-crates-io.html#Экспорт-удобного-общедоступного-api-с-pub-use","ch14-02-publishing-to-crates-io.html#Настройка-учётной-записи-cratesio","ch14-02-publishing-to-crates-io.html#Добавление-метаданных-в-новую-библиотеку","ch14-02-publishing-to-crates-io.html#Публикация-на-cratesio","ch14-02-publishing-to-crates-io.html#Публикация-новой-исполнения-существующей-библиотеки","ch14-02-publishing-to-crates-io.html#Устранение-устаревших-исполнений-с-cratesio-с-помощью-cargo-yank","ch14-03-cargo-workspaces.html#Рабочие-пространства-cargo","ch14-03-cargo-workspaces.html#Создание-рабочего-пространства","ch14-03-cargo-workspaces.html#Добавление-второго-крейта-в-рабочее-пространство","ch14-04-installing-binaries.html#Установка-двоичных-файлов-с-помощью-cargo-install","ch14-05-extending-cargo.html#Расширение-cargo-пользовательскими-приказми","ch14-05-extending-cargo.html#Итоги","ch15-00-smart-pointers.html#Умные-указатели","ch15-01-box.html#Использование-box-для-ссылки-на-данные-в-куче","ch15-01-box.html#Использование-box-для-хранения-данных-в-куче","ch15-01-box.html#Включение-рекурсивных-видов-с-помощью-boxes","ch15-02-deref.html#Обращение-с-умными-указателями-как-с-обычными-ссылками-с-помощью-deref-типажа","ch15-02-deref.html#Следуя-за-указателем-на-значение","ch15-02-deref.html#Использование-box-как-ссылку","ch15-02-deref.html#Определение-собственного-умного-указателя","ch15-02-deref.html#Трактование-вида-как-ссылки-реализуя-типаж-deref","ch15-02-deref.html#Неявные-разыменованные-приведения-с-функциями-и-способами","ch15-02-deref.html#Как-разыменованное-приведение-взаимодействует-с-изменяемостью","ch15-03-drop.html#Запуск-кода-при-очистке-с-помощью-типажа-drop","ch15-03-drop.html#Раннее-удаление-значения-с-помощью-stdmemdrop","ch15-04-rc.html#rc-умный-указатель-с-подсчётом-ссылок","ch15-04-rc.html#Использование-rc-для-совместного-использования-данных","ch15-04-rc.html#Клонирование-rc-увеличивает-количество-ссылок","ch15-05-interior-mutability.html#refcell-и-шаблон-внутренней-изменяемости","ch15-05-interior-mutability.html#Применение-правил-заимствования-во-время-выполнения-с-помощью-refcell","ch15-05-interior-mutability.html#Внутренняя-изменяемость-изменяемое-заимствование-неизменяемого-значения","ch15-05-interior-mutability.html#Наличие-нескольких-владельцев-изменяемых-данных-путём-объединения-видов-rc-и-refcell","ch15-06-reference-cycles.html#Ссылочные-зацикливания-могут-приводить-к-утечке-памяти","ch15-06-reference-cycles.html#Создание-ссылочного-зацикливания","ch15-06-reference-cycles.html#Предотвращение-ссылочной-зацикленности-замена-умного-указателя-rc-на-weak","ch15-06-reference-cycles.html#Итоги","ch16-00-concurrency.html#Многопоточность-без-страха","ch16-01-threads.html#Использование-потоков-для-одновременного-выполнения-кода","ch16-01-threads.html#Создание-нового-потока-с-помощью--spawn","ch16-01-threads.html#Ожидание-завершения-работы-всех-потоков-используя-join","ch16-01-threads.html#Использование-move-замыканий-в-потоках","ch16-02-message-passing.html#Передача-данных-с-помощью-сообщений-между-потоками","ch16-02-message-passing.html#потоки-и-передача-владения","ch16-02-message-passing.html#Отправка-нескольких-значений-и-ожидание-получателем","ch16-02-message-passing.html#Создание-нескольких-отправителей-путём-клонирования-передатчика","ch16-03-shared-state.html#Многопоточное-разделяемое-состояние","ch16-03-shared-state.html#Мьютексы-предоставляют-доступ-к-данным-из-одного-потока-за-раз","ch16-03-shared-state.html#Сходства-refcell--rc-и-mutex--arc","ch16-04-extensible-concurrency-sync-and-send.html#Расширенная-многопоточность-с-помощью-типажей-sync-и-send","ch16-04-extensible-concurrency-sync-and-send.html#Разрешение-передачи-во-владение-между-потоками-с-помощью-send","ch16-04-extensible-concurrency-sync-and-send.html#Разрешение-доступа-из-нескольких-потоков-с-sync","ch16-04-extensible-concurrency-sync-and-send.html#Реализация-send-и-sync-вручную-небезопасна","ch16-04-extensible-concurrency-sync-and-send.html#Итоги","ch17-00-oop.html#Возможности-объектно-ориентированного-программирования-в-rust","ch17-01-what-is-oo.html#Характеристики-объектно-ориентированных-языков","ch17-01-what-is-oo.html#Объекты-содержат-данные-и-поведение","ch17-01-what-is-oo.html#Инкапсуляция-скрывающая-подробности-реализации","ch17-01-what-is-oo.html#Наследование-как-система-видов-и-способ-совместного-использования-кода","ch17-01-what-is-oo.html#Полиморфизм","ch17-02-trait-objects.html#Использование-типаж-объектов-допускающих-значения-разных-видов","ch17-02-trait-objects.html#Определение-типажа-для-общего-поведения","ch17-02-trait-objects.html#Реализации-типажа","ch17-02-trait-objects.html#Типаж-объекты-выполняют-изменяемую-управление-связывание","ch17-03-oo-design-patterns.html#Реализация-объектно-ориентированного-шаблона-проектирования","ch17-03-oo-design-patterns.html#Определение-post-и-создание-нового-экземпляра-в-состоянии-черновика","ch17-03-oo-design-patterns.html#Хранение-текста-содержимого-записи","ch17-03-oo-design-patterns.html#Убедимся-что-содержание-черновика-будет-пустым","ch17-03-oo-design-patterns.html#Запрос-на-проверку-записи-меняет-её-состояние","ch17-03-oo-design-patterns.html#Добавление-approve-для-изменения-поведения-content","ch17-03-oo-design-patterns.html#Соглашенияы-шаблона-Состояние","ch17-03-oo-design-patterns.html#Итоги","ch18-00-patterns.html#Шаблоны-и-сопоставление","ch18-01-all-the-places-for-patterns.html#Все-случаи-где-могут-быть-использованы-шаблоны","ch18-01-all-the-places-for-patterns.html#Ветки-match","ch18-01-all-the-places-for-patterns.html#Условные-выражения-if-let","ch18-01-all-the-places-for-patterns.html#Условные-циклы-while-let","ch18-01-all-the-places-for-patterns.html#Цикл-for","ch18-01-all-the-places-for-patterns.html#Указание-let","ch18-01-all-the-places-for-patterns.html#Свойства-функции","ch18-02-refutability.html#Возможность-опровержения-может-ли-шаблон-не-совпадать","ch18-03-pattern-syntax.html#Синтаксис-шаблонов","ch18-03-pattern-syntax.html#Сопоставление-с-литералом","ch18-03-pattern-syntax.html#Сопоставление-именованных-переменных","ch18-03-pattern-syntax.html#Группа-шаблонов","ch18-03-pattern-syntax.html#Сопоставление-рядов-с-помощью-","ch18-03-pattern-syntax.html#Деструктуризация-для-получения-значений","ch18-03-pattern-syntax.html#Пренебрежение-значений-в-шаблоне","ch18-03-pattern-syntax.html#Дополнительные-условия-оператора-сопоставления-match-guards","ch18-03-pattern-syntax.html#Связывание-","ch18-03-pattern-syntax.html#Итоги","ch19-00-advanced-features.html#Расширенные-возможности","ch19-01-unsafe-rust.html#unsafe-rust","ch19-01-unsafe-rust.html#Небезопасные-сверхспособности","ch19-01-unsafe-rust.html#Разыменование-сырых-указателей","ch19-01-unsafe-rust.html#Вызов-небезопасной-функции-или-способа","ch19-01-unsafe-rust.html#Получение-доступа-и-внесение-изменений-в-изменяемую-статическую-переменную","ch19-01-unsafe-rust.html#Реализация-небезопасных-типажей","ch19-01-unsafe-rust.html#Доступ-к-полям-объединений-union","ch19-01-unsafe-rust.html#Когда-использовать-небезопасный-код","ch19-03-advanced-traits.html#Продвинутые-типажи","ch19-03-advanced-traits.html#Указание-видов-заполнителей-в-определениях-трейтов-с-ассоциированными-видами","ch19-03-advanced-traits.html#Свойства-обобщённого-вида-по-умолчанию-и-перегрузка-операторов","ch19-03-advanced-traits.html#Полностью-квалифицированный-синтаксис-для-устранения-неоднозначности-вызов-способов-с-одинаковым-именем","ch19-03-advanced-traits.html#Использование-супер-типажей-для-требования-функциональности-одного-типажа-в-рамках-другого-типажа","ch19-03-advanced-traits.html#Шаблон-newtype-для-реализация-внешних-типажей-у-внешних-видов","ch19-04-advanced-types.html#Продвинутые-виды","ch19-04-advanced-types.html#Использование-паттерна-newtype-для-обеспечения-безопасности-видов-и-создания-абстракций","ch19-04-advanced-types.html#Создание-синонимов-вида-с-помощью-псевдонимов-вида","ch19-04-advanced-types.html#Вид-never-который-никогда-не-возвращается","ch19-04-advanced-types.html#Виды-с-изменяемым-размером-и-трейт-sized","ch19-05-advanced-functions-and-closures.html#Продвинутые-функции-и-замыкания","ch19-05-advanced-functions-and-closures.html#Указатели-функций","ch19-05-advanced-functions-and-closures.html#Возврат-замыканий","ch19-06-macros.html#Макросы","ch19-06-macros.html#Разница-между-макросами-и-функциями","ch19-06-macros.html#Декларативные-макросы-с-macro_rules-для-общего-мета-программирования","ch19-06-macros.html#Процедурные-макросы-для-генерации-кода-из-атрибутов","ch19-06-macros.html#Как-написать-пользовательский-derive-макрос","ch19-06-macros.html#Макросы-похожие-на-атрибут","ch19-06-macros.html#Макросы-похожие-на-функции","ch19-06-macros.html#Итоги","ch20-00-final-project-a-web-server.html#Финальный-проект-создание-многопоточного-веб-сервера","ch20-01-single-threaded.html#Создание-однопоточного-веб-сервера","ch20-01-single-threaded.html#Прослушивание-tcp-соединения","ch20-01-single-threaded.html#Чтение-запросов","ch20-01-single-threaded.html#Пристальный-взгляд-на-http-запрос","ch20-01-single-threaded.html#Написание-ответа","ch20-01-single-threaded.html#Возвращение-реального-html","ch20-01-single-threaded.html#Проверка-запроса-и-выборочное-возвращение-ответа","ch20-01-single-threaded.html#Рефакторинг","ch20-02-multithreaded.html#Превращение-однопоточного-сервера-в-многопоточный-сервер","ch20-02-multithreaded.html#Подражание-медленного-запроса-в-текущей-реализации-сервера","ch20-02-multithreaded.html#Улучшение-пропускной-способности-с-помощью-пула-потоков","ch20-03-graceful-shutdown-and-cleanup.html#Мягкое-завершение-работы-и-очистка","ch20-03-graceful-shutdown-and-cleanup.html#Реализация-типажа-drop-для-threadpool","ch20-03-graceful-shutdown-and-cleanup.html#Сигнализация-потокам-прекратить-прослушивание-получения-задач","ch20-03-graceful-shutdown-and-cleanup.html#Итоги","appendix-00.html#Дополнительная-сведения","appendix-01-keywords.html#Приложение-a-Ключевые-слова","appendix-01-keywords.html#Используемые-в-настоящее-время-ключевые-слова","appendix-01-keywords.html#Ключевые-слова-зарезервированные-для-будущего-использования","appendix-01-keywords.html#Сырые-определители","appendix-02-operators.html#Дополнение-Б-Операторы-и-обозначения","appendix-02-operators.html#Операторы","appendix-02-operators.html#Обозначения-не-операторы","appendix-03-derivable-traits.html#Дополнение-В-Выводимые-типажи","appendix-03-derivable-traits.html#debug-для-отладочного-вывода","appendix-03-derivable-traits.html#partialeq-и-eq-для-сравнения-равенства","appendix-03-derivable-traits.html#partialord-и-ord-для-сравнения-порядка","appendix-03-derivable-traits.html#clone-и-copy-для-повторения-значений","appendix-03-derivable-traits.html#hash-для-превращения-значения-в-значение-фиксированного-размера","appendix-03-derivable-traits.html#default-для-значений-по-умолчанию","appendix-04-useful-development-tools.html#Дополнение-Г---Средства-разработки","appendix-04-useful-development-tools.html#Самостоятельное-форматирование-с-rustfmt","appendix-04-useful-development-tools.html#Исправление-кода-с-rustfix","appendix-04-useful-development-tools.html#Больше-проверок-с-clippy","appendix-04-useful-development-tools.html#Встраивание-с-ide-с-помощью-rust-analyzer","appendix-05-editions.html#Приложение-e---Издания-языка","appendix-06-translation.html#Приложение-Е-Переводы-книги","appendix-07-nightly-rust.html#Дополнение-Ё---Как-создаётся-rust-и-nightly-rust","appendix-07-nightly-rust.html#Безотказность-без-стагнации","appendix-07-nightly-rust.html#Ту-ту-потоки-выпуска-и-поездка-на-поезде","appendix-07-nightly-rust.html#Ненадежные-функции","appendix-07-nightly-rust.html#rustup-и-роль-ночной-исполнения-rust","appendix-07-nightly-rust.html#Процесс-rfc-и-приказы"],"index":{"documentStore":{"docInfo":{"0":{"body":22,"breadcrumbs":2,"title":1},"1":{"body":22,"breadcrumbs":0,"title":0},"10":{"body":65,"breadcrumbs":0,"title":0},"100":{"body":170,"breadcrumbs":1,"title":0},"101":{"body":135,"breadcrumbs":3,"title":2},"102":{"body":51,"breadcrumbs":2,"title":1},"103":{"body":47,"breadcrumbs":1,"title":0},"104":{"body":68,"breadcrumbs":2,"title":1},"105":{"body":30,"breadcrumbs":2,"title":1},"106":{"body":48,"breadcrumbs":2,"title":1},"107":{"body":68,"breadcrumbs":0,"title":0},"108":{"body":6,"breadcrumbs":0,"title":0},"109":{"body":8,"breadcrumbs":0,"title":0},"11":{"body":1,"breadcrumbs":0,"title":0},"110":{"body":54,"breadcrumbs":0,"title":0},"111":{"body":4,"breadcrumbs":0,"title":0},"112":{"body":74,"breadcrumbs":0,"title":0},"113":{"body":57,"breadcrumbs":0,"title":0},"114":{"body":74,"breadcrumbs":0,"title":0},"115":{"body":102,"breadcrumbs":1,"title":1},"116":{"body":28,"breadcrumbs":1,"title":1},"117":{"body":59,"breadcrumbs":0,"title":0},"118":{"body":62,"breadcrumbs":2,"title":1},"119":{"body":72,"breadcrumbs":2,"title":1},"12":{"body":9,"breadcrumbs":0,"title":0},"120":{"body":25,"breadcrumbs":1,"title":0},"121":{"body":38,"breadcrumbs":3,"title":2},"122":{"body":45,"breadcrumbs":1,"title":0},"123":{"body":65,"breadcrumbs":2,"title":1},"124":{"body":7,"breadcrumbs":2,"title":1},"125":{"body":83,"breadcrumbs":4,"title":0},"126":{"body":19,"breadcrumbs":4,"title":0},"127":{"body":3,"breadcrumbs":4,"title":0},"128":{"body":6,"breadcrumbs":0,"title":0},"129":{"body":2,"breadcrumbs":0,"title":0},"13":{"body":11,"breadcrumbs":0,"title":0},"130":{"body":45,"breadcrumbs":0,"title":0},"131":{"body":17,"breadcrumbs":0,"title":0},"132":{"body":55,"breadcrumbs":0,"title":0},"133":{"body":29,"breadcrumbs":0,"title":0},"134":{"body":21,"breadcrumbs":0,"title":0},"135":{"body":12,"breadcrumbs":0,"title":0},"136":{"body":9,"breadcrumbs":4,"title":2},"137":{"body":21,"breadcrumbs":2,"title":0},"138":{"body":67,"breadcrumbs":2,"title":0},"139":{"body":154,"breadcrumbs":2,"title":0},"14":{"body":1,"breadcrumbs":0,"title":0},"140":{"body":108,"breadcrumbs":2,"title":0},"141":{"body":18,"breadcrumbs":2,"title":0},"142":{"body":16,"breadcrumbs":2,"title":0},"143":{"body":11,"breadcrumbs":2,"title":0},"144":{"body":15,"breadcrumbs":2,"title":1},"145":{"body":23,"breadcrumbs":1,"title":0},"146":{"body":39,"breadcrumbs":2,"title":1},"147":{"body":22,"breadcrumbs":1,"title":0},"148":{"body":82,"breadcrumbs":2,"title":1},"149":{"body":12,"breadcrumbs":1,"title":0},"15":{"body":33,"breadcrumbs":3,"title":3},"150":{"body":23,"breadcrumbs":1,"title":0},"151":{"body":12,"breadcrumbs":0,"title":0},"152":{"body":4,"breadcrumbs":2,"title":1},"153":{"body":34,"breadcrumbs":1,"title":0},"154":{"body":109,"breadcrumbs":2,"title":1},"155":{"body":93,"breadcrumbs":2,"title":1},"156":{"body":40,"breadcrumbs":2,"title":1},"157":{"body":38,"breadcrumbs":4,"title":3},"158":{"body":81,"breadcrumbs":3,"title":2},"159":{"body":306,"breadcrumbs":1,"title":0},"16":{"body":20,"breadcrumbs":2,"title":2},"160":{"body":8,"breadcrumbs":4,"title":2},"161":{"body":6,"breadcrumbs":2,"title":0},"162":{"body":32,"breadcrumbs":2,"title":0},"163":{"body":13,"breadcrumbs":2,"title":0},"164":{"body":86,"breadcrumbs":2,"title":0},"165":{"body":9,"breadcrumbs":2,"title":0},"166":{"body":16,"breadcrumbs":0,"title":0},"167":{"body":61,"breadcrumbs":0,"title":0},"168":{"body":0,"breadcrumbs":0,"title":0},"169":{"body":73,"breadcrumbs":0,"title":0},"17":{"body":25,"breadcrumbs":0,"title":0},"170":{"body":85,"breadcrumbs":0,"title":0},"171":{"body":35,"breadcrumbs":0,"title":0},"172":{"body":128,"breadcrumbs":0,"title":0},"173":{"body":34,"breadcrumbs":0,"title":0},"174":{"body":3,"breadcrumbs":0,"title":0},"175":{"body":31,"breadcrumbs":0,"title":0},"176":{"body":74,"breadcrumbs":0,"title":0},"177":{"body":106,"breadcrumbs":0,"title":0},"178":{"body":118,"breadcrumbs":0,"title":0},"179":{"body":47,"breadcrumbs":0,"title":0},"18":{"body":9,"breadcrumbs":0,"title":0},"180":{"body":45,"breadcrumbs":0,"title":0},"181":{"body":4,"breadcrumbs":0,"title":0},"182":{"body":50,"breadcrumbs":0,"title":0},"183":{"body":46,"breadcrumbs":0,"title":0},"184":{"body":57,"breadcrumbs":0,"title":0},"185":{"body":17,"breadcrumbs":0,"title":0},"186":{"body":102,"breadcrumbs":0,"title":0},"187":{"body":45,"breadcrumbs":0,"title":0},"188":{"body":26,"breadcrumbs":0,"title":0},"189":{"body":86,"breadcrumbs":0,"title":0},"19":{"body":4,"breadcrumbs":0,"title":0},"190":{"body":37,"breadcrumbs":0,"title":0},"191":{"body":12,"breadcrumbs":0,"title":0},"192":{"body":19,"breadcrumbs":0,"title":0},"193":{"body":4,"breadcrumbs":0,"title":0},"194":{"body":21,"breadcrumbs":0,"title":0},"195":{"body":4,"breadcrumbs":0,"title":0},"196":{"body":162,"breadcrumbs":0,"title":0},"197":{"body":126,"breadcrumbs":1,"title":1},"198":{"body":106,"breadcrumbs":2,"title":2},"199":{"body":59,"breadcrumbs":0,"title":0},"2":{"body":11,"breadcrumbs":0,"title":0},"20":{"body":13,"breadcrumbs":0,"title":0},"200":{"body":128,"breadcrumbs":1,"title":1},"201":{"body":35,"breadcrumbs":2,"title":2},"202":{"body":18,"breadcrumbs":0,"title":0},"203":{"body":9,"breadcrumbs":0,"title":0},"204":{"body":48,"breadcrumbs":0,"title":0},"205":{"body":55,"breadcrumbs":0,"title":0},"206":{"body":49,"breadcrumbs":0,"title":0},"207":{"body":1,"breadcrumbs":0,"title":0},"208":{"body":56,"breadcrumbs":0,"title":0},"209":{"body":165,"breadcrumbs":0,"title":0},"21":{"body":27,"breadcrumbs":0,"title":0},"210":{"body":3,"breadcrumbs":0,"title":0},"211":{"body":31,"breadcrumbs":1,"title":1},"212":{"body":26,"breadcrumbs":0,"title":0},"213":{"body":28,"breadcrumbs":0,"title":0},"214":{"body":29,"breadcrumbs":2,"title":2},"215":{"body":24,"breadcrumbs":0,"title":0},"216":{"body":43,"breadcrumbs":0,"title":0},"217":{"body":15,"breadcrumbs":0,"title":0},"218":{"body":142,"breadcrumbs":0,"title":0},"219":{"body":151,"breadcrumbs":0,"title":0},"22":{"body":26,"breadcrumbs":1,"title":1},"220":{"body":103,"breadcrumbs":1,"title":1},"221":{"body":56,"breadcrumbs":0,"title":0},"222":{"body":7,"breadcrumbs":0,"title":0},"223":{"body":69,"breadcrumbs":0,"title":0},"224":{"body":104,"breadcrumbs":0,"title":0},"225":{"body":1,"breadcrumbs":0,"title":0},"226":{"body":31,"breadcrumbs":1,"title":1},"227":{"body":154,"breadcrumbs":1,"title":1},"228":{"body":4,"breadcrumbs":2,"title":0},"229":{"body":12,"breadcrumbs":2,"title":0},"23":{"body":24,"breadcrumbs":1,"title":1},"230":{"body":36,"breadcrumbs":2,"title":0},"231":{"body":3,"breadcrumbs":2,"title":0},"232":{"body":5,"breadcrumbs":0,"title":0},"233":{"body":1,"breadcrumbs":0,"title":0},"234":{"body":54,"breadcrumbs":0,"title":0},"235":{"body":66,"breadcrumbs":0,"title":0},"236":{"body":72,"breadcrumbs":0,"title":0},"237":{"body":144,"breadcrumbs":1,"title":1},"238":{"body":31,"breadcrumbs":0,"title":0},"239":{"body":55,"breadcrumbs":2,"title":2},"24":{"body":62,"breadcrumbs":0,"title":0},"240":{"body":25,"breadcrumbs":0,"title":0},"241":{"body":46,"breadcrumbs":0,"title":0},"242":{"body":29,"breadcrumbs":0,"title":0},"243":{"body":3,"breadcrumbs":0,"title":0},"244":{"body":134,"breadcrumbs":1,"title":1},"245":{"body":42,"breadcrumbs":0,"title":0},"246":{"body":5,"breadcrumbs":0,"title":0},"247":{"body":77,"breadcrumbs":0,"title":0},"248":{"body":9,"breadcrumbs":0,"title":0},"249":{"body":5,"breadcrumbs":4,"title":2},"25":{"body":23,"breadcrumbs":3,"title":1},"250":{"body":81,"breadcrumbs":2,"title":0},"251":{"body":4,"breadcrumbs":4,"title":1},"252":{"body":116,"breadcrumbs":3,"title":0},"253":{"body":131,"breadcrumbs":6,"title":3},"254":{"body":18,"breadcrumbs":4,"title":1},"255":{"body":104,"breadcrumbs":3,"title":0},"256":{"body":36,"breadcrumbs":4,"title":1},"257":{"body":7,"breadcrumbs":3,"title":0},"258":{"body":29,"breadcrumbs":6,"title":3},"259":{"body":3,"breadcrumbs":4,"title":1},"26":{"body":97,"breadcrumbs":3,"title":1},"260":{"body":60,"breadcrumbs":3,"title":0},"261":{"body":418,"breadcrumbs":3,"title":0},"262":{"body":64,"breadcrumbs":7,"title":2},"263":{"body":14,"breadcrumbs":4,"title":1},"264":{"body":5,"breadcrumbs":3,"title":0},"265":{"body":29,"breadcrumbs":0,"title":0},"266":{"body":10,"breadcrumbs":2,"title":1},"267":{"body":30,"breadcrumbs":2,"title":1},"268":{"body":225,"breadcrumbs":2,"title":1},"269":{"body":10,"breadcrumbs":2,"title":1},"27":{"body":120,"breadcrumbs":3,"title":1},"270":{"body":34,"breadcrumbs":1,"title":0},"271":{"body":29,"breadcrumbs":2,"title":1},"272":{"body":55,"breadcrumbs":1,"title":0},"273":{"body":67,"breadcrumbs":2,"title":1},"274":{"body":98,"breadcrumbs":1,"title":0},"275":{"body":25,"breadcrumbs":1,"title":0},"276":{"body":61,"breadcrumbs":2,"title":1},"277":{"body":89,"breadcrumbs":2,"title":1},"278":{"body":7,"breadcrumbs":2,"title":1},"279":{"body":94,"breadcrumbs":2,"title":1},"28":{"body":10,"breadcrumbs":3,"title":1},"280":{"body":52,"breadcrumbs":2,"title":1},"281":{"body":7,"breadcrumbs":2,"title":1},"282":{"body":33,"breadcrumbs":2,"title":1},"283":{"body":194,"breadcrumbs":1,"title":0},"284":{"body":71,"breadcrumbs":3,"title":2},"285":{"body":7,"breadcrumbs":0,"title":0},"286":{"body":106,"breadcrumbs":0,"title":0},"287":{"body":274,"breadcrumbs":2,"title":2},"288":{"body":9,"breadcrumbs":0,"title":0},"289":{"body":10,"breadcrumbs":0,"title":0},"29":{"body":14,"breadcrumbs":3,"title":1},"290":{"body":5,"breadcrumbs":0,"title":0},"291":{"body":62,"breadcrumbs":1,"title":1},"292":{"body":172,"breadcrumbs":1,"title":1},"293":{"body":118,"breadcrumbs":1,"title":1},"294":{"body":81,"breadcrumbs":0,"title":0},"295":{"body":26,"breadcrumbs":0,"title":0},"296":{"body":25,"breadcrumbs":0,"title":0},"297":{"body":19,"breadcrumbs":0,"title":0},"298":{"body":3,"breadcrumbs":0,"title":0},"299":{"body":165,"breadcrumbs":0,"title":0},"3":{"body":1,"breadcrumbs":1,"title":1},"30":{"body":13,"breadcrumbs":2,"title":0},"300":{"body":22,"breadcrumbs":4,"title":4},"301":{"body":4,"breadcrumbs":4,"title":2},"302":{"body":22,"breadcrumbs":3,"title":1},"303":{"body":22,"breadcrumbs":3,"title":1},"304":{"body":10,"breadcrumbs":4,"title":2},"305":{"body":7,"breadcrumbs":2,"title":0},"306":{"body":7,"breadcrumbs":2,"title":1},"307":{"body":3,"breadcrumbs":1,"title":0},"308":{"body":14,"breadcrumbs":1,"title":0},"309":{"body":64,"breadcrumbs":1,"title":0},"31":{"body":5,"breadcrumbs":0,"title":0},"310":{"body":11,"breadcrumbs":1,"title":0},"311":{"body":5,"breadcrumbs":1,"title":0},"312":{"body":30,"breadcrumbs":1,"title":0},"313":{"body":78,"breadcrumbs":1,"title":0},"314":{"body":119,"breadcrumbs":1,"title":0},"315":{"body":7,"breadcrumbs":1,"title":0},"316":{"body":25,"breadcrumbs":1,"title":0},"317":{"body":44,"breadcrumbs":2,"title":1},"318":{"body":33,"breadcrumbs":1,"title":0},"319":{"body":22,"breadcrumbs":1,"title":0},"32":{"body":53,"breadcrumbs":0,"title":0},"320":{"body":71,"breadcrumbs":1,"title":0},"321":{"body":115,"breadcrumbs":3,"title":2},"322":{"body":155,"breadcrumbs":1,"title":0},"323":{"body":5,"breadcrumbs":1,"title":0},"324":{"body":7,"breadcrumbs":0,"title":0},"325":{"body":1,"breadcrumbs":0,"title":0},"326":{"body":33,"breadcrumbs":1,"title":1},"327":{"body":35,"breadcrumbs":0,"title":0},"328":{"body":21,"breadcrumbs":0,"title":0},"329":{"body":28,"breadcrumbs":0,"title":0},"33":{"body":45,"breadcrumbs":0,"title":0},"330":{"body":56,"breadcrumbs":0,"title":0},"331":{"body":38,"breadcrumbs":0,"title":0},"332":{"body":71,"breadcrumbs":0,"title":0},"333":{"body":0,"breadcrumbs":0,"title":0},"334":{"body":11,"breadcrumbs":0,"title":0},"335":{"body":62,"breadcrumbs":0,"title":0},"336":{"body":14,"breadcrumbs":0,"title":0},"337":{"body":38,"breadcrumbs":0,"title":0},"338":{"body":162,"breadcrumbs":0,"title":0},"339":{"body":183,"breadcrumbs":0,"title":0},"34":{"body":41,"breadcrumbs":0,"title":0},"340":{"body":112,"breadcrumbs":2,"title":2},"341":{"body":30,"breadcrumbs":0,"title":0},"342":{"body":4,"breadcrumbs":0,"title":0},"343":{"body":9,"breadcrumbs":0,"title":0},"344":{"body":12,"breadcrumbs":3,"title":2},"345":{"body":16,"breadcrumbs":1,"title":0},"346":{"body":55,"breadcrumbs":1,"title":0},"347":{"body":196,"breadcrumbs":1,"title":0},"348":{"body":41,"breadcrumbs":1,"title":0},"349":{"body":31,"breadcrumbs":1,"title":0},"35":{"body":29,"breadcrumbs":0,"title":0},"350":{"body":7,"breadcrumbs":2,"title":1},"351":{"body":4,"breadcrumbs":1,"title":0},"352":{"body":2,"breadcrumbs":0,"title":0},"353":{"body":67,"breadcrumbs":0,"title":0},"354":{"body":97,"breadcrumbs":0,"title":0},"355":{"body":183,"breadcrumbs":0,"title":0},"356":{"body":84,"breadcrumbs":0,"title":0},"357":{"body":55,"breadcrumbs":1,"title":1},"358":{"body":3,"breadcrumbs":0,"title":0},"359":{"body":27,"breadcrumbs":1,"title":1},"36":{"body":52,"breadcrumbs":1,"title":1},"360":{"body":116,"breadcrumbs":0,"title":0},"361":{"body":101,"breadcrumbs":1,"title":1},"362":{"body":89,"breadcrumbs":1,"title":1},"363":{"body":0,"breadcrumbs":0,"title":0},"364":{"body":86,"breadcrumbs":0,"title":0},"365":{"body":30,"breadcrumbs":0,"title":0},"366":{"body":10,"breadcrumbs":0,"title":0},"367":{"body":9,"breadcrumbs":0,"title":0},"368":{"body":68,"breadcrumbs":1,"title":1},"369":{"body":28,"breadcrumbs":0,"title":0},"37":{"body":23,"breadcrumbs":1,"title":1},"370":{"body":281,"breadcrumbs":1,"title":1},"371":{"body":20,"breadcrumbs":0,"title":0},"372":{"body":20,"breadcrumbs":0,"title":0},"373":{"body":1,"breadcrumbs":0,"title":0},"374":{"body":16,"breadcrumbs":0,"title":0},"375":{"body":18,"breadcrumbs":0,"title":0},"376":{"body":76,"breadcrumbs":1,"title":1},"377":{"body":109,"breadcrumbs":0,"title":0},"378":{"body":34,"breadcrumbs":1,"title":1},"379":{"body":48,"breadcrumbs":0,"title":0},"38":{"body":24,"breadcrumbs":0,"title":0},"380":{"body":49,"breadcrumbs":1,"title":1},"381":{"body":74,"breadcrumbs":0,"title":0},"382":{"body":23,"breadcrumbs":0,"title":0},"383":{"body":0,"breadcrumbs":0,"title":0},"384":{"body":34,"breadcrumbs":0,"title":0},"385":{"body":627,"breadcrumbs":0,"title":0},"386":{"body":9,"breadcrumbs":0,"title":0},"387":{"body":101,"breadcrumbs":2,"title":2},"388":{"body":164,"breadcrumbs":0,"title":0},"389":{"body":4,"breadcrumbs":0,"title":0},"39":{"body":5,"breadcrumbs":0,"title":0},"390":{"body":1,"breadcrumbs":0,"title":0},"391":{"body":1,"breadcrumbs":0,"title":0},"392":{"body":35,"breadcrumbs":0,"title":0},"393":{"body":13,"breadcrumbs":0,"title":0},"394":{"body":55,"breadcrumbs":0,"title":0},"395":{"body":1,"breadcrumbs":1,"title":0},"396":{"body":159,"breadcrumbs":1,"title":0},"397":{"body":125,"breadcrumbs":1,"title":0},"398":{"body":15,"breadcrumbs":1,"title":0},"399":{"body":4,"breadcrumbs":2,"title":1},"4":{"body":11,"breadcrumbs":0,"title":0},"40":{"body":200,"breadcrumbs":0,"title":0},"400":{"body":17,"breadcrumbs":3,"title":2},"401":{"body":31,"breadcrumbs":3,"title":2},"402":{"body":31,"breadcrumbs":3,"title":2},"403":{"body":12,"breadcrumbs":2,"title":1},"404":{"body":20,"breadcrumbs":2,"title":1},"405":{"body":2,"breadcrumbs":1,"title":0},"406":{"body":19,"breadcrumbs":2,"title":1},"407":{"body":73,"breadcrumbs":2,"title":1},"408":{"body":70,"breadcrumbs":2,"title":1},"409":{"body":18,"breadcrumbs":4,"title":3},"41":{"body":85,"breadcrumbs":0,"title":0},"410":{"body":38,"breadcrumbs":2,"title":1},"411":{"body":16,"breadcrumbs":1,"title":0},"412":{"body":1,"breadcrumbs":7,"title":3},"413":{"body":3,"breadcrumbs":4,"title":0},"414":{"body":64,"breadcrumbs":4,"title":0},"415":{"body":8,"breadcrumbs":4,"title":0},"416":{"body":50,"breadcrumbs":6,"title":2},"417":{"body":15,"breadcrumbs":5,"title":1},"42":{"body":191,"breadcrumbs":0,"title":0},"43":{"body":74,"breadcrumbs":0,"title":0},"44":{"body":13,"breadcrumbs":0,"title":0},"45":{"body":101,"breadcrumbs":0,"title":0},"46":{"body":8,"breadcrumbs":0,"title":0},"47":{"body":7,"breadcrumbs":0,"title":0},"48":{"body":88,"breadcrumbs":0,"title":0},"49":{"body":16,"breadcrumbs":0,"title":0},"5":{"body":3,"breadcrumbs":0,"title":0},"50":{"body":72,"breadcrumbs":0,"title":0},"51":{"body":22,"breadcrumbs":0,"title":0},"52":{"body":187,"breadcrumbs":0,"title":0},"53":{"body":147,"breadcrumbs":0,"title":0},"54":{"body":37,"breadcrumbs":0,"title":0},"55":{"body":66,"breadcrumbs":0,"title":0},"56":{"body":77,"breadcrumbs":0,"title":0},"57":{"body":80,"breadcrumbs":0,"title":0},"58":{"body":28,"breadcrumbs":0,"title":0},"59":{"body":1,"breadcrumbs":0,"title":0},"6":{"body":3,"breadcrumbs":0,"title":0},"60":{"body":170,"breadcrumbs":0,"title":0},"61":{"body":194,"breadcrumbs":0,"title":0},"62":{"body":2,"breadcrumbs":0,"title":0},"63":{"body":3,"breadcrumbs":0,"title":0},"64":{"body":4,"breadcrumbs":0,"title":0},"65":{"body":1,"breadcrumbs":0,"title":0},"66":{"body":1,"breadcrumbs":0,"title":0},"67":{"body":20,"breadcrumbs":0,"title":0},"68":{"body":24,"breadcrumbs":1,"title":1},"69":{"body":196,"breadcrumbs":0,"title":0},"7":{"body":3,"breadcrumbs":2,"title":2},"70":{"body":17,"breadcrumbs":0,"title":0},"71":{"body":27,"breadcrumbs":0,"title":0},"72":{"body":69,"breadcrumbs":0,"title":0},"73":{"body":93,"breadcrumbs":0,"title":0},"74":{"body":54,"breadcrumbs":0,"title":0},"75":{"body":0,"breadcrumbs":0,"title":0},"76":{"body":90,"breadcrumbs":0,"title":0},"77":{"body":154,"breadcrumbs":0,"title":0},"78":{"body":17,"breadcrumbs":0,"title":0},"79":{"body":5,"breadcrumbs":0,"title":0},"8":{"body":8,"breadcrumbs":0,"title":0},"80":{"body":3,"breadcrumbs":0,"title":0},"81":{"body":78,"breadcrumbs":0,"title":0},"82":{"body":32,"breadcrumbs":0,"title":0},"83":{"body":67,"breadcrumbs":0,"title":0},"84":{"body":21,"breadcrumbs":0,"title":0},"85":{"body":20,"breadcrumbs":0,"title":0},"86":{"body":110,"breadcrumbs":0,"title":0},"87":{"body":41,"breadcrumbs":0,"title":0},"88":{"body":18,"breadcrumbs":0,"title":0},"89":{"body":39,"breadcrumbs":0,"title":0},"9":{"body":0,"breadcrumbs":0,"title":0},"90":{"body":176,"breadcrumbs":0,"title":0},"91":{"body":4,"breadcrumbs":0,"title":0},"92":{"body":94,"breadcrumbs":0,"title":0},"93":{"body":60,"breadcrumbs":0,"title":0},"94":{"body":76,"breadcrumbs":0,"title":0},"95":{"body":27,"breadcrumbs":0,"title":0},"96":{"body":23,"breadcrumbs":1,"title":1},"97":{"body":1,"breadcrumbs":0,"title":0},"98":{"body":4,"breadcrumbs":0,"title":0},"99":{"body":30,"breadcrumbs":1,"title":0}},"docs":{"0":{"body":"От Стива Клабника и Кэрол Николс, при поддержке других участников сообщества Rust В этой исполнения учебника предполагается, что вы используете Rust 1.67.1 (выпущен 09.02.2023) или новее. См. раздел «Установка» главы 1 для установки или обновления Rust. HTML-исполнение книги доступна онлайн по адресам https://doc.rust-lang.org/stable/book/ (англ.) и https://doc.rust-lang.ru/book (рус.) и офлайн. При установке Rust с помощью rustup: просто запустите rustup docs --book, чтобы её открыть. Также доступны несколько переводов от сообщества. Этот материал доступен в виде печатной книги в мягкой обложке и в формате электронной книги от No Starch Press . 🚨 Предпочитаете более интерактивный процесс обучения? Попробуйте другую исполнение Rust Book, в которой есть: управлениеные вопросы, цветовое выделение, наглядные визуализации и многое другое : https://rust-book.cs.brown.edu","breadcrumbs":"Язык программирования Rust » Язык программирования Rust","id":"0","title":"Язык программирования Rust"},"1":{"body":"Не всегда было ясно, но язык программирования Rust в основном посвящён расширению возможностей : независимо от того, какой код вы пишете сейчас, Rust позволяет вам достичь большего, чтобы программировать уверенно в более широком ряде областей, чем вы делали раньше. Возьмём, к примеру, работу «системного уровня», которая касается низкоуровневых подробностей управления памятью, представления данных и многопоточности. Традиционно эта область программирования считается загадочной, доступной лишь немногим избранным, посвятившим долгие годы изучению всех её печально известных подводных камней. И даже те, кто практикуют это, делают всё с осторожностью, чтобы их код не был уязвим для эксплойтов, сбоев или повреждений. Rust разрушает эти преграды, устраняя старые подводные камни и предоставляя дружелюбный, отполированный набор средств, который поможет вам на этом пути. Программисты, которым необходимо «погрузиться» в низкоуровневое управление, могут сделать это с помощью Rust, не беря на себя привычный риск аварий или дыр в безопасности и не изучая тонкости изменчивых наборов средств. Более того, язык предназначен для того, чтобы легко вести вас к надёжному коду, который эффективен с точки зрения скорости и использования памяти. Программисты, которые уже работают с низкоуровневым кодом, могут использовать Rust для повышения своих чувства собственной значимости. Например, внедрение параллелизма в Rust является операцией с относительно низким риском: сборщик поймает для вас классические ошибки. И вы можете заняться более агрессивной оптимизацией в своём коде с уверенностью, что не будете случайно добавлять в код сбои или уязвимости. Но Rust не ограничивается низкоуровневым системным программированием. Он достаточно выразителен и эргономичен, чтобы приложения CLI (Command Line Interface – окно выводаные программы), веб-серверы и многие другие виды кода были довольно приятными для написания — позже вы найдёте простые примеры того и другого в книге. Работа с Rust позволяет вырабатывать навыки, которые переносятся из одной предметной области в другую; вы можете изучить Rust, написав веб-приложение, а затем применить те же навыки для Raspberry Pi. Эта книга полностью раскрывает потенциал Rust для расширения возможностей его пользователей. Это дружелюбный и доступный материал, призванный помочь вам повысить уровень не только ваших знаний о Rust, но и ваших возможностей и уверенности как программиста в целом. Так что погружайтесь, готовьтесь учиться и добро пожаловать в сообщество Rust! — Nicholas Matsakis и Aaron Turon","breadcrumbs":"Предисловие » Предисловие","id":"1","title":"Предисловие"},"10":{"body":"В целом, книга предполагает, что вы будете читать последовательно от начала до конца. Более поздние главы опираются на концепции, изложенные в предыдущих главах, а предыдущие главы могут не углубляться в подробности именно темы, так как в последующих главах они будут рассматриваться более подробно. В этой книге вы найдёте два вида глав: главы о концепциях и главы с проектом. В главах о концепциях вы узнаете о каком-либо особенности Rust. В главах проекта мы будем вместе создавать небольшие программы, применяя то, что вы уже узнали. Главы 2, 12 и 20 - это главы проекта; остальные - главы о концепциях. Глава 1 объясняет, как установить Rust, как написать программу \"Hello, world!\" и как использовать Cargo, менеджер пакетов и средство сборки Rust. Глава 2 - это практическое введение в написание программы на Rust, в которой вам предлагается создать игру для угадывания чисел. Здесь мы рассмотрим концепции на высоком уровне, а в последующих главах будет предоставлена дополнительная сведения. Если вы хотите сразу же приступить к работе, глава 2 - самое подходящее место для этого. В главе 3 рассматриваются возможности Rust, схожие с возможностями других языков программирования, а в главе 4 вы узнаете о системе владения Rust. Если вы особенно дотошный ученик и предпочитаете изучить каждую подробность, прежде чем переходить к следующей, возможно, вы захотите пропустить главу 2 и сразу перейти к главе 3, вернувшись к главе 2, когда захотите поработать над проектом, применяя изученные подробности. Глава 5 описывает структуры и способы, а глава 6 охватывает перечисления, выражения match и конструкции управления потоком if let. Вы будете использовать структуры и перечисления для создания пользовательских видов в Rust. В главе 7 вы узнаете о системе модулей Rust, о правилах организации приватности вашего кода и его публичном внешней оболочке прикладного программирования (API). В главе 8 обсуждаются некоторые распространённые структуры данных - собрания, которые предоставляет стандартная библиотека, такие как векторы, строки и HashMaps. В главе 9 рассматриваются философия и способы обработки ошибок в Rust. В главе 10 рассматриваются шаблонные виды данных, типажи и времена жизни, позволяющие написать код, который может использоваться разными видами. Глава 11 посвящена тестированию, которое даже с заверениями безопасности в Rust необходимо для обеспечения правильной логики вашей программы. В главе 12 мы создадим собственную реализацию подмножества функциональности средства приказной строки grep, предназначенного для поиска текста в файлах. Для этого мы будем использовать многие концепции, которые обсуждались в предыдущих главах. В главе 13 рассматриваются замыкания и повторители: особенности Rust, пришедшие из функциональных языков программирования. В главе 14 мы более подробно рассмотрим Cargo и поговорим о лучших способах распространения ваших библиотек среди других разработчиков. В главе 15 обсуждаются умные указатели, которые предоставляет стандартная библиотека, и типажи, обеспечивающие их функциональность. В главе 16 мы рассмотрим различные модели параллельного программирования и поговорим о возможности Rust для безбоязненного многопоточно программирования. В главе 17 рассматривается сравнение идиом Rust с принципами объектно-ориентированного программирования, которые наверняка вам знакомы. Глава 18 - это справочник по шаблонам и сопоставлению с образцами, которые являются мощными способами выражения идей в программах на Rust. Глава 19 содержит множество важных дополнительных тем, включая небезопасный Rust, макросы и многое другое о времени жизни, типажах, видах, функциях и замыканиях. В главе 20 мы завершим проект, в котором реализуем низкоуровневый многопоточный веб-сервер! Наконец, некоторые приложения содержат полезную сведения о языке в более справочном формате. В приложении A рассматриваются ключевые слова Rust, в приложении B — операторы и символы Rust, в приложении C — производные типажи, предоставляемые встроенной библиотекой, в приложении D — некоторые полезные средства разработки, а в приложении E — издания Rust. В приложении F вы найдёте переводы книги, а в приложении G мы расскажем о том, как создаётся Rust и что такое nightly Rust. Нет неправильного способа читать эту книгу: если вы хотите пропустить главу - сделайте это! Возможно, вам придётся вернуться к предыдущим главам, если возникнет недопонимание. Делайте все, как вам удобно. Важной частью процесса обучения Rust является изучение того, как читать сообщения об ошибках, которые отображает сборщик: они приведут вас к работающему коду. Мы изучим много примеров, которые не собираются и отображают ошибки в сообщениях сборщика в разных ситуациях. Знайте, что если вы введёте и запустите случайный пример, он может не собраться! Убедитесь, что вы прочитали окружающий текст, чтобы понять, не предназначен ли пример, который вы пытаетесь запустить, для отображения ошибки. Ferris также поможет вам различить код, который не предназначен для работы: Ferris Пояснения Этот код не собирается! Этот код вызывает панику! Этот код не приводит к желаемому поведению. В большинстве случаев мы приведём вас к правильной исполнения любого кода, который не собирается.","breadcrumbs":"Введение » Как использовать эту книгу","id":"10","title":"Как использовать эту книгу"},"100":{"body":"Экземпляры каждого варианта перечисления IpAddrKind можно создать следующим образом: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:instance}} Обратите внимание, что варианты перечисления находятся в пространстве имён вместе с его определителем, а для их обособления мы используем двойное двоеточие. Это удобно тем, что теперь оба значения IpAddrKind::V4 и IpAddrKind::V6 относятся к одному виду: IpAddrKind. Затем мы можем, например, определить функцию, которая принимает любой из вариантов IpAddrKind: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn}} Можно вызвать эту функцию с любым из вариантов: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:fn_call}} Использование перечислений позволяет получить ещё больше преимуществ. Если подумать о нашем виде для IP-адреса, то выяснится, что на данный момент у нас нет возможности хранить собственно сам IP-адрес ; мы будем знать только его вид . Учитывая, что недавно в главе 5 вы узнали о структурах, у вас может возникнуть соблазн решить эту проблему с помощью структур, как показано в приложении 6-1. {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-01/src/main.rs:here}} Приложение 6-1. Сохранение данных и IpAddrKind IP-адреса с использованием struct Здесь мы определили структуру IpAddr, у которой есть два поля: kind вида IpAddrKind (перечисление, которое мы определили ранее) и address вида String. У нас есть два экземпляра этой структуры. Первый - home, который является IpAddrKind::V4 в качестве значения kind с соответствующим адресом 127.0.0.1. Второй экземпляр - loopback. Он в качестве значения kind имеет другой вариант IpAddrKind, V6, и с ним ассоциирован адрес ::1. Мы использовали структуру для объединения значений kind и address вместе, таким образом вид формата адреса теперь ассоциирован со значением. Однако представление этой же концепции с помощью перечисления более лаконично: вместо того, чтобы помещать перечисление в структуру, мы можем поместить данные непосредственно в любой из вариантов перечисления. Это новое определение перечисления IpAddr гласит, что оба варианта V4 и V6 будут иметь соответствующие значения String: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-02-enum-with-data/src/main.rs:here}} Мы прикрепляем данные к каждому варианту перечисления напрямую, поэтому нет необходимости в дополнительной структуре. Здесь также легче увидеть ещё одну подробность того, как работают перечисления: имя каждого варианта перечисления, который мы определяем, также становится функцией, которая создаёт экземпляр перечисления. То есть IpAddr::V4() - это вызов функции, который принимает String и возвращает экземпляр вида IpAddr. Мы самостоятельно получаем эту функцию-конструктор, определяемую в результате определения перечисления. Ещё одно преимущество использования перечисления вместо структуры заключается в том, что каждый вариант перечисления может иметь разное количество ассоциированных данных представленных в разных видах. Исполнение 4 для IP адресов всегда будет содержать четыре цифровых компонента, которые будут иметь значения между 0 и 255. При необходимости сохранить адреса вида V4 как четыре значения вида u8, а также описать адреса вида V6 как единственное значение вида String, мы не смогли бы с помощью структуры. Перечисления решают эту задачу легко: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-03-variants-with-different-data/src/main.rs:here}} Мы показали несколько различных способов определения структур данных для хранения IP-адресов четвёртой и шестой исполнений. Однако, как оказалось, желание хранить IP-адреса и указывать их вид настолько распространено, что в встроенной библиотеке есть определение, которое мы можем использовать! Давайте посмотрим, как стандартная библиотека определяет IpAddr: в ней есть точно такое же перечисление с вариантами, которое мы определили и использовали, но она помещает данные об адресе внутрь этих вариантов в виде двух различных структур, которые имеют различные определения для каждого из вариантов: struct Ipv4Addr { // --snip--\n} struct Ipv6Addr { // --snip--\n} enum IpAddr { V4(Ipv4Addr), V6(Ipv6Addr),\n} Этот код отображает что мы можем добавлять любой вид данных в значение перечисления: строку, число, структуру и пр. Вы даже можете включить в перечисление другие перечисления! Стандартные виды данных не очень сложны, хотя, потенциально, могут быть очень сложными (вложенность данных может быть очень глубокой). Обратите внимание, что хотя определение перечисления IpAddr есть в встроенной библиотеке, мы смогли объявлять и использовать свою собственную реализацию с подобным названием без каких-либо конфликтов, потому что мы не добавили определение встроенной библиотеки в область видимости кода. Подробнее об этом поговорим в Главе 7. Рассмотрим другой пример перечисления в приложении 6-2: в этом примере каждый элемент перечисления имеет свой особый вид данных внутри: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}} Приложение 6-2. Перечисление Message, в каждом из вариантов которого хранятся разные количества и виды значений. Это перечисление имеет 4 элемента: Quit - пустой элемент без ассоциированных данных, Move имеет именованные поля, как и структура. Write - элемент с единственной строкой вида String, ChangeColor - кортеж из трёх значений вида i32. Определение перечисления с вариантами, такими как в приложении 6-2, похоже на определение значений различных видов внутри структур, за исключением того, что перечисление не использует ключевое слово struct и все варианты сгруппированы внутри вида Message. Следующие структуры могут содержать те же данные, что и предыдущие варианты перечислений: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-04-structs-similar-to-message-enum/src/main.rs:here}} Но когда мы использовали различные структуры, каждая из которых имеет свои собственные виды, мы не могли легко определять функции, которые принимают любые виды сообщений, как это можно сделать с помощью перечисления вида Message, объявленного в приложении 6-2, который является единым видом. Есть ещё одно сходство между перечислениями и структурами: так же, как мы можем определять способы для структур с помощью impl раздела, мы можем определять и способы для перечисления. Вот пример способа с именем call, который мы могли бы определить в нашем перечислении Message: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-05-methods-on-enums/src/main.rs:here}} В теле способа будет использоваться self для получения значение того объекта, у которого мы вызвали этот способ. В этом примере мы создали переменную m, содержащую значение Message::Write(String::from(\"hello\")), и именно это значение будет представлять self в теле способа call при выполнении m.call(). Теперь посмотрим на другое наиболее часто используемое перечисление из встроенной библиотеки, которое является очень распространённым и полезным: Option.","breadcrumbs":"Перечисления и сопоставление с образцом » Определение Enum » Значения перечислений","id":"100","title":"Значения перечислений"},"101":{"body":"В этом разделе рассматривается пример использования Option, ещё одного перечисления, определённого в встроенной библиотеке. Вид Option кодирует очень распространённый сценарий, в котором значение может быть чем-то, а может быть ничем. Например, если вы запросите первый элемент из непустого списка, вы получите значение. Если вы запросите первый элемент пустого списка, вы ничего не получите. Выражение этой концепции в терминах системы видов означает, что сборщик может проверить, обработали ли вы все случаи, которые должны были обработать; эта функциональность может предотвратить ошибки, которые чрезвычайно распространены в других языках программирования. Дизайн языка программирования часто рассматривается с точки зрения того, какие функции вы включаете в него, но те функции, которые вы исключаете, также важны. Например в Rust нет такого функционала как null значения, однако он есть во многих других языках. Null значение - это значение, которое означает, что значения нет. В языках с null значением переменные всегда могут находиться в одном из двух состояний: нет значения (null) или есть значение (not-null) . В своей презентации 2009 года «Null ссылки: ошибка в миллиард долларов» Тони Хоар (Tony Hoare), изобретатель null, сказал следующее: Я называю это своей ошибкой на миллиард долларов. В то время я разрабатывал первую комплексную систему видов для ссылок на объектно-ориентированном языке. Моя цель состояла в том, чтобы обеспечить, что любое использование ссылок должно быть абсолютно безопасным, с самостоятельной проверкой сборщиком. Но я не мог устоять перед соблазном вставить пустую ссылку просто потому, что это было так легко реализовать. Это привело к бесчисленным ошибкам, уязвимостям и системным сбоям, которые, вероятно, причинили боль и ущерб на миллиард долларов за последние сорок лет. Проблема с null значениями заключается в том, что если вы попытаетесь использовать null значение в качестве not-null значения, вы получите ошибку определённого рода. Поскольку свойство null или not-null распространено повсеместно, сделать такую ошибку очень просто. Тем не менее, концепция, которую null пытается выразить, является полезной: null - это значение, которое в настоящее время по какой-то причине недействительно или отсутствует. Проблема на самом деле не в концепции, а в именно реализации. Таким образом, в Rust нет значений null, но есть перечисление, которое может закодировать концепцию присутствия или отсутствия значения. Это перечисление Option<T> , и оно определено встроенной библиотекой следующим образом: enum Option<T> { None, Some(T),\n} Перечисление Option<T> настолько полезно, что оно даже включено в прелюдию; вам не нужно явно вводить его в область видимости. Его варианты также включены в прелюдию: вы можете использовать Some и None напрямую, без префикса Option::. При всём при этом, Option<T> является обычным перечислением, а Some(T) и None представляют собой его варианты. <T> - это особенность Rust, о которой мы ещё не говорили. Это свойство обобщённого вида, и мы рассмотрим его более подробно в главе 10. На данный момент всё, что вам нужно знать, это то, что <T> означает, что вариант Some Option может содержать один фрагмент данных любого вида, и что каждый определенный вид, который используется вместо T делает общий Option<T> другим видом. Вот несколько примеров использования Option для хранения числовых и строковых видов: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-06-option-examples/src/main.rs:here}} Вид some_number - Option<i32>. Вид some_char - Option<char>, это другой вид. Rust может вывести эти виды, потому что мы указали значение внутри варианта Some. Для absent_number Rust требует, чтобы мы аннотировали общий вид для Option: сборщик не может вывести вид, который будет в Some, глядя только на значение None. Здесь мы сообщаем Rust, что absent_number должен иметь вид Option<i32>. Когда есть значение Some, мы знаем, что значение присутствует и содержится внутри Some. Когда есть значение None, это означает то же самое, что и null в некотором смысле: у нас нет действительного значения. Так почему наличие Option<T> лучше, чем null? Вкратце, поскольку Option<T> и T (где T может быть любым видом) относятся к разным видам, сборщик не позволит нам использовать значение Option<T> даже если бы оно было определённо допустимым значением. Например, этот код не будет собираться, потому что он пытается добавить i8 к значению вида Option<i8>: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/src/main.rs:here}} Если мы запустим этот код, то получим такое сообщение об ошибке: {{#include ../listings/ch06-enums-and-pattern-matching/no-listing-07-cant-use-option-directly/output.txt}} Сильно! Фактически, это сообщение об ошибке означает, что Rust не понимает, как сложить i8 и Option<i8>, потому что это разные виды. Когда у нас есть значение вида наподобие i8, сборщик заверяет, что у нас всегда есть допустимое значение вида. Мы можем уверенно продолжать работу, не проверяя его на null перед использованием. Однако, когда у нас есть значение вида Option<T> (где T - это любое значение любого вида T, упакованное в Option, например значение вида i8 или String), мы должны беспокоиться о том, что значение вида T возможно не имеет значения (является вариантом None), и сборщик позаботится о том, чтобы мы обработали такой случай, прежде чем мы бы попытались использовать None значение. Другими словами, вы должны преобразовать Option<T> в T прежде чем вы сможете выполнять действия с этим T. Как правило, это помогает выявить одну из наиболее распространённых проблем с null: предполагая, что что-то не равно null, когда оно на самом деле равно null. Устранение риска ошибочного предположения касательно не-null значения помогает вам быть более уверенным в своём коде. Чтобы иметь значение, которое может быть null, вы должны явно описать вид этого значения с помощью Option<T>. Затем, когда вы используете это значение, вы обязаны явно обрабатывать случай, когда значение равно null. Везде, где значение имеет вид, отличный от Option<T>, вы можете смело рассчитывать на то, что значение не равно null. Это продуманное проектное решение в Rust, ограничивающее распространение null и увеличивающее безопасность кода на Rust. Итак, как же получить значение T из варианта Some, если у вас на руках есть только объект Option<T>, и как можно его, вообще, использовать? Перечисление Option<T> имеет большое количество способов, полезных в различных ситуациях; вы можете ознакомиться с ними в его документации . Знакомство с способами перечисления Option<T> будет чрезвычайно полезным в вашем путешествии с Rust. В общем случае, чтобы использовать значение Option<T>, нужен код, который будет обрабатывать все варианты перечисления Option<T>. Вам понадобится некоторый код, который будет работать только тогда, когда у вас есть значение Some(T), и этому коду разрешено использовать внутри T. Также вам понадобится другой код, который будет работать, если у вас есть значение None, и у этого кода не будет доступного значения T. Выражение match — это конструкция управления потоком выполнения программы, которая делает именно это при работе с перечислениями: она запускает разный код в зависимости от того, какой вариант перечисления имеется, и этот код может использовать данные, находящиеся внутри совпавшего варианта.","breadcrumbs":"Перечисления и сопоставление с образцом » Определение Enum » Перечисление Option и его преимущества перед Null-значениями","id":"101","title":"Перечисление Option и его преимущества перед Null-значениями"},"102":{"body":"В Rust есть чрезвычайно мощный механизм управления потоком, именуемый match, который позволяет сравнивать значение с различными шаблонами и затем выполнять код в зависимости от того, какой из шаблонов совпал. Шаблоны могут состоять из литеральных значений, имён переменных, подстановочных знаков и многого другого; в главе 18 рассматриваются все различные виды шаблонов и то, что они делают. Сила match заключается в выразительности шаблонов и в том, что сборщик проверяет, что все возможные случаи обработаны. Думайте о выражении match как о машине для сортировки монет: монеты скользят по дорожке с различными по размеру отверстиями, и каждая монета падает через первое попавшееся отверстие, в которое она поместилась. Таким же образом значения проходят через каждый шаблон в match, и при первом же \"подходящем\" шаблоне значение попадает в соответствующий раздел кода, который будет использоваться во время выполнения. Говоря о монетах, давайте используем их в качестве примера, используя match! Для этого мы напишем функцию, которая будет получать на вход неизвестную монету Соединённых Штатов и, подобно счётной машине, определять, какая это монета, и возвращать её стоимость в центах, как показано в приложении 6-3. {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-03/src/main.rs:here}} Приложение 6-3: Перечисление и выражение match, использующее в качестве шаблонов его варианты Давайте разберём match в функции value_in_cents. Сначала пишется ключевое слово match, затем следует выражение, которое в данном случае является значением coin. Это выглядит очень похоже на условное выражение, используемое в if, но есть большая разница: с if выражение должно возвращать булево значение, а здесь это может быть любой вид. Вид coin в этом примере — перечисление вида Coin, объявленное в строке 1. Далее идут ветки match. Ветки состоят из двух частей: шаблон и некоторый код. Здесь первая ветка имеет шаблон, который является значением Coin::Penny, затем идёт оператор =>, который разделяет шаблон и код для выполнения. Код в этом случае - это просто значение 1. Каждая ветка отделяется от последующей при помощи запятой. Когда выполняется выражение match, оно сравнивает полученное значение с образцом каждого ответвления по порядку. Если образец совпадает со значением, то выполняется код, связанный с этим образцом. Если этот образец не соответствует значению, то выполнение продолжается со следующей ветки, так же, как в автомате по сортировке монет. У нас может быть столько ответвлений, сколько нужно: в приложении 6-3 наш match состоит из четырёх ответвлений. Код, связанный с каждым ответвлением, является выражением, а полученное значение выражения в соответствующем ответвлении — это значение, которое возвращается для всего выражения match. Обычно фигурные скобки не используются, если код совпадающей ветви невелик, как в приложении 6-3, где каждая ветвь просто возвращает значение. Если вы хотите выполнить несколько строк кода в одной ветви, вы должны использовать фигурные скобки, а запятая после этой ветви необязательна. Например, следующий код печатает \"Lucky penny!\" каждый раз, когда способ вызывается с Coin::Penny, но при этом он возвращает последнее значение раздела - 1: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-08-match-arm-multiple-lines/src/main.rs:here}}","breadcrumbs":"Перечисления и сопоставление с образцом » Конструкция потока управления match » Управляющая конструкция match","id":"102","title":"Управляющая конструкция match"},"103":{"body":"Есть ещё одно полезное качество у веток в выражении match: они могут привязываться к частям тех значений, которые совпали с шаблоном. Благодаря этому можно извлекать значения из вариантов перечисления. В качестве примера, давайте изменим один из вариантов перечисления так, чтобы он хранил в себе данные. С 1999 по 2008 год Соединённые Штаты чеканили 25 центов с различным дизайном на одной стороне для каждого из 50 штатов. Ни одна другая монета не получила дизайна штата, только четверть доллара имела эту дополнительную особенность. Мы можем добавить эту сведения в наш enum путём изменения варианта Quarter и включить в него значение UsState, как сделано в приложении 6-4. {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-04/src/main.rs:here}} Приложение 6-4: Перечисление Coin, в котором вариант Quarter также сохраняет значение UsState Представьте, что ваш друг пытается собрать четвертаки всех 50 штатов. Сортируя монеты по виду, мы также будем сообщать название штата, к которому относится каждый четвертак, чтобы, если у нашего друга нет такой монеты, он мог добавить её в свою собрание. В выражении match для этого кода мы добавляем переменную с именем state в шаблон, который соответствует значениям варианта Coin::Quarter. Когда Coin::Quarter совпадёт с шаблоном, переменная state будет привязана к значению штата этого четвертака. Затем мы сможем использовать state в коде этой ветки, вот так: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-09-variable-in-pattern/src/main.rs:here}} Если мы сделаем вызов функции value_in_cents(Coin::Quarter(UsState::Alaska)), то coin будет иметь значение Coin::Quarter(UsState::Alaska). Когда мы будем сравнивать это значение с каждой из веток, ни одна из них не будет совпадать, пока мы не достигнем варианта Coin::Quarter(state). В этот момент state привяжется к значению UsState::Alaska. Затем мы сможем использовать эту привязку в выражении println!, получив таким образом внутреннее значение варианта Quarter перечисления Coin.","breadcrumbs":"Перечисления и сопоставление с образцом » Конструкция потока управления match » Образцы, привязывающие значения","id":"103","title":"Образцы, привязывающие значения"},"104":{"body":"В предыдущем разделе мы хотели получить внутреннее значение T для случая Some при использовании Option<T>; мы можем обработать вид Option<T> используя match, как уже делали с перечислением Coin! Вместо сравнения монет мы будем сравнивать варианты Option<T>, независимо от этого изменения механизм работы выражения match останется прежним. Допустим, мы хотим написать функцию, которая принимает Option<i32> и если есть значение внутри, то добавляет 1 к существующему значению. Если значения нет, то функция должна возвращать значение None и не пытаться выполнить какие-либо действия. Такую функцию довольно легко написать благодаря выражению match, код будет выглядеть как в приложении 6-5. {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:here}} Приложение 6-5: Функция, использующая выражение match для Option<i32> Давайте более подробно рассмотрим первое выполнение plus_one. Когда мы вызываем plus_one(five), переменная x в теле plus_one будет иметь значение Some(5). Затем мы сравниваем это значение с каждой ветвью сопоставления: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}} Значение Some(5) не соответствует образцу None, поэтому мы продолжаем со следующим ответвлением: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:second_arm}} Совпадает ли Some(5) с образцом Some(i)? Да, это так! У нас такой же вариант. Тогда переменная i привязывается к значению, содержащемуся внутри Some, поэтому i получает значение 5. Затем выполняется код ассоциированный для данного ответвления, поэтому мы добавляем 1 к значению i и создаём новое значение Some со значением 6 внутри. Теперь давайте рассмотрим второй вызов plus_one в приложении 6-5, где x является None. Мы входим в выражение match и сравниваем значение с первым ответвлением: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-05/src/main.rs:first_arm}} Оно совпадает! Для данной ветки шаблон (None) не подразумевает наличие какого-то значения к которому можно было бы что-то добавить, поэтому программа останавливается и возвращает значение которое находится справа от => - т.е. None. Так как шаблон первой ветки совпал, то никакие другие шаблоны веток не сравниваются. Комбинирование match и перечислений полезно во многих ситуациях. Вы часто будете видеть подобную сочетание в коде на Rust: сделать сопоставление значений перечисления используя match, привязать переменную к данным внутри значения, выполнить код на основе привязанных данных. Сначала это может показаться немного сложным, но как только вы привыкнете, то захотите чтобы такая возможность была бы во всех языках. Это неизменно любимый пользователями приём.","breadcrumbs":"Перечисления и сопоставление с образцом » Конструкция потока управления match » Сопоставление шаблона для Option<T>","id":"104","title":"Сопоставление шаблона для Option<T>"},"105":{"body":"Есть ещё один особенность match, который мы должны обсудить: шаблоны должны покрывать все возможные варианты. Рассмотрим эту исполнение нашей функции plus_one, которая содержит ошибку и не собирается: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/src/main.rs:here}} Мы не обработали вариант None, поэтому этот код вызовет изъян в программе. К счастью, Rust знает и умеет ловить такой случай. Если мы попытаемся собрать такой код, мы получим ошибку сборки: {{#include ../listings/ch06-enums-and-pattern-matching/no-listing-10-non-exhaustive-match/output.txt}} Rust знает, что мы не описали все возможные случаи, и даже знает, какой именно из шаблонов мы упустили! Сопоставления в Rust являются исчерпывающими : мы должны покрыть все возможные варианты, чтобы код был корректным. Особенно в случае Option<T>, когда Rust не даёт нам забыть обработать явным образом значение None, тем самым он защищает нас от предположения, что у нас есть значение, в то время как у нас может быть и null, что делает невозможным совершить ошибку на миллиард долларов, о которой говорилось ранее.","breadcrumbs":"Перечисления и сопоставление с образцом » Конструкция потока управления match » Match объемлет все варианты значения","id":"105","title":"Match объемлет все варианты значения"},"106":{"body":"Используя перечисления, мы также можем выполнять особые действия для нескольких определённых значений, а для всех остальных значений выполнять одно действие по умолчанию. Представьте, что мы реализуем игру, в которой при выпадении 3 игрок не двигается, а получает новую модную шляпу. Если выпадает 7, игрок теряет шляпу. При всех остальных значениях ваш игрок перемещается на столько-то мест на игровом поле. Вот match, реализующий эту логику, в котором результат броска костей жёстко закодирован, а не является случайным значением, а вся остальная логика представлена функциями без тел, поскольку их реализация не входит в рамки данного примера: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-15-binding-catchall/src/main.rs:here}} Для первых двух веток шаблонами являются литеральные значения 3 и 7. Для последней ветки, которая охватывает все остальные возможные значения, шаблоном является переменная, которую мы решили назвать other. Код, выполняемый для ветки other, использует эту переменную, передавая её в функцию move_player. Этот код собирается, даже если мы не перечислили все возможные значения u8, потому что последний паттерн будет соответствовать всем значениям, не указанным в определенном списке. Этот универсальный шаблон удовлетворяет требованию, что соответствие должно быть исчерпывающим. Обратите внимание, что мы должны поместить ветку с универсальным шаблоном последней, потому что шаблоны оцениваются по порядку. Rust предупредит нас, если мы добавим ветки после универсального шаблона, потому что эти последующие ветки никогда не будут выполняться! В Rust также есть шаблон, который можно использовать, когда мы не хотим использовать значение в универсальном шаблоне: _, который является особым шаблоном, который соответствует любому значению и не привязывается к этому значению. Это говорит Rust, что мы не собираемся использовать это значение, поэтому Rust не будет предупреждать нас о неиспользуемой переменной. Давайте изменим правила игры так: если выпадает что-то, кроме 3 или 7, нужно бросить ещё раз. Нам не нужно использовать значение в этом случае, поэтому мы можем изменить наш код, чтобы использовать _ вместо переменной с именем other: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-16-underscore-catchall/src/main.rs:here}} Этот пример также удовлетворяет требованию исчерпывающей полноты, поскольку мы явно пренебрегаем все остальные значения в последней ветке; мы ничего не забыли. Если мы изменим правила игры ещё раз, чтобы в ваш ход не происходило ничего другого, если вы бросаете не 3 или 7, мы можем выразить это, используя единичное значение (пустой вид кортежа, о котором мы упоминали в разделе \"Кортежи\" ) в качестве кода, который идёт вместе с веткой _: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-17-underscore-unit/src/main.rs:here}} Здесь мы явно говорим Rust, что не собираемся использовать никакое другое значение, которое не соответствует шаблонам в предыдущих ветках, и не хотим запускать никакой код в этом случае. Подробнее о шаблонах и совпадениях мы поговорим в Главе 18 . Пока же мы перейдём к синтаксису if let, который может быть полезен в ситуациях, когда выражение match слишком многословно.","breadcrumbs":"Перечисления и сопоставление с образцом » Конструкция потока управления match » Универсальные шаблоны и заполнитель _","id":"106","title":"Универсальные шаблоны и заполнитель _"},"107":{"body":"Синтаксис if let позволяет скомбинировать if и let в менее многословную конструкцию, и затем обработать значения соответствующе только одному шаблону, одновременно пренебрегая все остальные. Рассмотрим программу в приложении 6-6, которая обрабатывает сопоставление значения Option<u8> в переменной config_max, но хочет выполнить код только в том случае, если значение является вариантом Some. {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-06/src/main.rs:here}} Приложение 6-6. Выражение match, которое выполнит код только при значении равном Some Если значение равно Some, мы распечатываем значение в варианте Some, привязывая значение к переменной max в шаблоне. Мы не хотим ничего делать со значением None. Чтобы удовлетворить выражение match, мы должны добавить _ => () после обработки первой и единственной ветки, и добавление шаблонного кода раздражает. Вместо этого, мы могли бы написать это более коротким способом, используя if let. Следующий код ведёт себя так же, как выражение match в приложении 6-6: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-12-if-let/src/main.rs:here}} Синтаксис if let принимает шаблон и выражение, разделённые знаком равенства. Он работает так же, как match, когда в него на вход передадут выражение и подходящим шаблоном для этого выражения окажется первая ветка. В данном случае шаблоном является Some(max), где max привязывается к значению внутри Some. Затем мы можем использовать max в теле раздела if let так же, как мы использовали max в соответствующей ветке match. Код в разделе if let не запускается, если значение не соответствует шаблону. Используя if let мы меньше печатаем, меньше делаем отступов и меньше получаем шаблонного кода. Тем не менее, мы теряем полную проверку всех вариантов, предоставляемую выражением match. Выбор между match и if let зависит от того, что вы делаете в вашем определенном случае и является ли получение краткости при потере полноты проверки подходящим соглашением. Другими словами, вы можете думать о конструкции if let как о синтаксическом сахаре для match, который выполнит код если входное значение будет соответствовать единственному шаблону, и пропренебрегает все остальные значения. Можно добавлять else к if let. Разделкода, который находится внутри else подобен по смыслу блоку кода ветки связанной с шаблоном _ выражения match (которое эквивалентно сборной конструкции if let и else). Вспомним объявление перечисления Coin в приложении 6-4, где вариант Quarter также содержит внутри значение штата вида UsState. Если бы мы хотели посчитать все монеты не являющиеся четвертями, а для четвертей печатать название штата, то мы могли бы сделать это с помощью выражения match таким образом: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-13-count-and-announce-match/src/main.rs:here}} Или мы могли бы использовать выражение if let и else так: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-14-count-and-announce-if-let-else/src/main.rs:here}} Если у вас есть ситуация в которой ваша программа имеет логику которая слишком многословна для того чтобы её выражать используя match, помните, о том, что также в вашем наборе средств Rust есть if let.","breadcrumbs":"Перечисления и сопоставление с образцом » Лаконичный поток управления с if let » Краткое управление потоком выполнения с if let","id":"107","title":"Краткое управление потоком выполнения с if let"},"108":{"body":"Мы рассмотрели как использовать перечисления для создания пользовательских видов, которые могут быть одним из наборов перечисляемых значений. Мы показали, как вид Option<T> из встроенной библиотеки помогает использовать систему видов для предотвращения ошибок. А когда значения перечисления имеют данные внутри них, можно использовать match или if let, чтобы извлечь и пользоваться значением, в зависимости от того, сколько случаев нужно обработать. Теперь ваши программы на Rust могут выражать концепции вашей предметной области, используя структуры и перечисления. Создание и использование пользовательских видов в API обеспечивает типобезопасность: сборщик позаботится о том, чтобы функции получали значения только того вида, который они ожидают. Чтобы предоставить вашим пользователям хорошо организованный API, который прост в использовании и предоставляет только то, что нужно вашим пользователям, надо поговорить о модулях в Rust.","breadcrumbs":"Перечисления и сопоставление с образцом » Лаконичный поток управления с if let » Итоги","id":"108","title":"Итоги"},"109":{"body":"По мере роста кодовой хранилища ваших программ, организация проекта будет иметь большое значение, ведь отслеживание всей программы в голове будет становиться всё более сложным. Группируя связанные функции и разделяя код по основным функциональностям (фичам, feature), вы делаете более прозрачным понимание о том, где искать код реализующий определённую функцию и где стоит вносить изменения для того чтобы изменить её поведение. Программы, которые мы писали до сих пор, были в одном файле одного модуля. По мере роста проекта, мы можем организовывать код иначе, разделив его на несколько модулей и несколько файлов. Пакет может содержать несколько двоичных крейтов и опционально один крейт библиотеки. Пакет может включать в себя много двоичных крейтов и опционально один библиотечный крейт. По мере роста пакета вы можете извлекать части программы в отдельные крейты, которые затем станут внешними зависимостями для основного кода нашей программы. Эта глава охватывает все эти техники. В свою очередь для очень крупных проектов, состоящих из набора взаимосвязанных пакетов развивающихся вместе, Cargo предоставляет рабочие пространства, workspaces , их мы рассмотрим за пределами данной главы, в разделе \"Рабочие пространства Cargo\" Главы 14. Мы также обсудим инкапсуляцию подробностей, которая позволяет использовать код снова на более высоком уровне: единожды реализовав какую-то действие, другой код может вызывать этот код через публичный внешняя оболочка, не зная как работает реализация. То, как вы пишете код, определяет какие части общедоступны для использования другим кодом и какие части являются закрытыми деталями реализации для которых вы оставляете право на изменения только за собой. Это ещё один способ ограничить количество подробностей, которые вы должны держать в голове. Связанное понятие - это область видимости: вложенный среда в котором написан код имеющий набор имён, которые определены «в текущей области видимости». При чтении, письме и сборки кода, программистам и сборщикам необходимо знать, относится ли определенное имя в определённом месте к переменной, к функции, к структуре, к перечислению, к модулю, к константе или другому элементу и что означает этот элемент. Можно создавать области видимости и изменять какие имена входят или выходят за их рамки. Нельзя иметь два элемента с тем же именем в одной области; есть доступные средства для разрешения конфликтов имён. Rust имеет ряд функций, которые позволяют управлять организацией кода, в том числе управлять тем какие подробности открыты, какие подробности являются частными, какие имена есть в каждой области вашей программы. Эти функции иногда вместе именуемые модульной системой включают в себя: Пакеты: Функционал Cargo позволяющий собирать, тестировать и делиться крейтами Крейты: Дерево модулей, которое создаёт библиотечный или исполняемый файл Модули и use: Позволяют вместе управлять организацию, область видимости и скрытие путей Пути: способ именования элемента, такого как структура, функция или модуль В этой главе мы рассмотрим все эти функции, обсудим как они взаимодействуют и объясним, как использовать их для управления областью видимости. К концу у вас должно появиться солидное понимание модульной системы и умение работать с областями видимости на уровне профессионала!","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Управление растущими проектами с помощью пакетов, крейтов и модулей","id":"109","title":"Управление растущими проектами с помощью пакетов, крейтов и модулей"},"11":{"body":"Файлы с исходным кодом, используемым в этой книге, можно найти на GitHub .","breadcrumbs":"Введение » Исходные коды","id":"11","title":"Исходные коды"},"110":{"body":"Первые части модульной системы, которые мы рассмотрим — это пакеты и крейты. Крейт — это наименьший объем кода, который сборщик Rust рассматривает за раз. Даже если вы запустите rustc вместо cargo и передадите один файл с исходным кодом (как мы уже делали в разделе «Написание и запуск программы на Rust» Главы 1), сборщик считает этот файл крейтом. Крейты могут содержать модули, и модули могут быть определены в других файлах, которые собираются вместе с крейтом, как мы увидим в следующих разделах. Крейт может быть одним из двух видов: двоичный крейт или библиотечный крейт. Бинарные крейты — это программы, которые вы можете собрать в исполняемые файлы, которые вы можете запускать, например программу приказной строки или сервер. У каждого двоичного крейта должна быть функция с именем main, которая определяет, что происходит при запуске исполняемого файла. Все крейты, которые мы создали до сих пор, были двоичными крейтами. Библиотечные крейты не имеют функции main и не собираются в исполняемый файл. Вместо этого они определяют функциональность, предназначенную для совместного использования другими проектами. Например, крейт rand, который мы использовали в Главе 2 обеспечивает функциональность, которая генерирует случайные числа. В большинстве случаев, когда Rustaceans говорят «крейт», они имеют в виду библиотечный крейт, и они используют «крейт» взаимозаменяемо с общей концепцией программирования «библиотека». Корневой модуль крейта — это исходный файл, из которого сборщик Rust начинает собирать корневой модуль вашего крейта (мы подробно объясним модули в разделе «Определение модулей для управления видимости и закрытости» ). Пакет — это набор из одного или нескольких крейтов, предоставляющий набор функциональности. Пакет содержит файл Cargo.toml , в котором описывается, как собирать эти крейты. На самом деле Cargo — это пакет, содержащий двоичный крейт для средства приказной строки, который вы использовали для создания своего кода. Пакет Cargo также содержит библиотечный крейт, от которого зависит двоичный крейт. Другие проекты тоже могут зависеть от библиотечного крейта Cargo, чтобы использовать ту же логику, что и средство приказной строки Cargo. Пакет может содержать сколько угодно двоичных крейтов, но не более одного библиотечного крейта. Пакет должен содержать хотя бы один крейт, библиотечный или двоичный. Давайте пройдёмся по тому, что происходит, когда мы создаём пакет. Сначала введём приказ cargo new: $ cargo new my-project Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs После того, как мы запустили cargo new, мы используем ls, чтобы увидеть, что создал Cargo. В каталоге проекта есть файл Cargo.toml , дающий нам пакет. Также есть каталог src , содержащий main.rs . Откройте Cargo.toml в текстовом редакторе и обратите внимание, что в нём нет упоминаний о src/main.rs . Cargo следует соглашению о том, что src/main.rs — это корневой модуль двоичного крейта с тем же именем, что и у пакета. Точно так же Cargo знает, что если каталог пакета содержит src/lib.rs , пакет содержит библиотечный крейт с тем же именем, что и пакет, а src/lib.rs является корневым модулем этого крейта. Cargo передаёт файлы корневого модуля крейта в rustc для сборки библиотечного или двоичного крейта. Здесь у нас есть пакет, который содержит только src/main.rs , что означает, что он содержит только двоичный крейт с именем my-project. Если пакет содержит src/main.rs и src/lib.rs , он имеет два крейта: двоичный и библиотечный, оба с тем же именем, что и пакет. Пакет может иметь несколько двоичных крейтов, помещая их файлы в каталог src/bin : каждый файл будет отдельным двоичным крейтом.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Пакеты и крейты » Пакеты и крейты","id":"110","title":"Пакеты и крейты"},"111":{"body":"В этом разделе мы поговорим о модулях и других частях системы модулей, а именно: путях (paths), которые позволяют именовать элементы; ключевом слове use, которое приносит путь в область видимости; ключевом слове pub, которое делает элементы общедоступными. Мы также обсудим ключевое слово as, внешние пакеты и оператор glob. А пока давайте сосредоточимся на модулях! Во-первых, мы начнём со списка правил, чтобы вам было легче ориентироваться при организации кода в будущем. Затем мы подробно объясним каждое из правил.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Определение модулей для управления областью действия и конфиденциальностью » Определение модулей для управления видимости и закрытости","id":"111","title":"Определение модулей для управления видимости и закрытости"},"112":{"body":"Здесь мы даём краткий обзор того, как модули, пути, ключевое слово use и ключевое слово pub работают в сборщике и как большинство разработчиков организуют свой код. В этой главе мы рассмотрим примеры каждого из этих правил, и это удобный момент чтобы напомнить о том, как работают модули. Начнём с корня крейта : при сборки сборщик сначала ищет корневой модуль крейта (обычно это src/lib.rs для библиотечного крейта или src/main.rs для двоичного крейта) для сборки кода. Объявление модулей : В файле корневого модуля крейта вы можете объявить новые модули; скажем, вы объявляете модуль “garden” с помощью mod garden;. Сборщик будет искать код модуля в следующих местах: в этом же файле, между фигурных скобок, которые заменяют точку с запятой после mod garden в файле src/garden.rs в файле src/garden/mod.rs Объявление подмодулей : В любом файле, кроме корневого модуля крейта, вы можете объявить подмодули. К примеру, вы можете объявить mod vegetables; в src/garden.rs . Сборщик будет искать код подмодуля в каталоге с именем родительского модуля в следующих местах: в этом же файле, сразу после mod vegetables, между фигурных скобок, которые заменяют точку с запятой в файле src/garden/vegetables.rs в файле src/garden/vegetables/mod.rs Пути к коду в модулях : После того, как модуль станет частью вашего крейта и если допускают правила приватности, вы можете ссылаться на код в этом модуле из любого места вашего крейта, используя путь к коду. Например, вид Asparagus, в подмодуле vegetables модуля garden, будет найден по пути crate::garden::vegetables::Asparagus. Скрытие или общедоступность : Код в модуле по умолчанию скрыт от родительского модуля. Чтобы сделать модуль общедоступным, объявите его как pub mod вместо mod. Чтобы сделать элементы общедоступного модуля тоже общедоступными, используйте pub перед их объявлением. Ключевое слово use : Внутри области видимости использование ключевого слова use создаёт псевдонимы для элементов, чтобы уменьшить повторение длинных путей. В любой области видимости, в которой может обращаться к crate::garden::vegetables::Asparagus, вы можете создать псевдоним use crate::garden::vegetables::Asparagus; и после этого вам нужно просто писать Asparagus, чтобы использовать этот вид в этой области видимости. Мы создали двоичный крейт backyard, который отображает эти правила. Директория крейта, также названная как backyard, содержит следующие файлы и папки: backyard\n├── Cargo.lock\n├── Cargo.toml\n└── src ├── garden │ └── vegetables.rs ├── garden.rs └── main.rs Файл корневого модуля крейта в нашем случае src/main.rs , и его содержимое: Файл: src/main.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/main.rs}} Строка pub mod garden; говорит сборщику о подключении кода, найденном в src/garden.rs : Файл: src/garden.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden.rs}} А здесь pub mod vegetables; указывает на подключаемый код в src/garden/vegetables.rs . Этот код: {{#rustdoc_include ../listings/ch07-managing-growing-projects/quick-reference-example/src/garden/vegetables.rs}} Теперь давайте рассмотрим подробности этих правил и отобразим их в действии!","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Определение модулей для управления областью действия и конфиденциальностью » Шпаргалка по модулям","id":"112","title":"Шпаргалка по модулям"},"113":{"body":"Модули позволяют упорядочивать код внутри крейта для удобочитаемости и лёгкого повторного использования. Модули также позволяют нам управлять приватностью элементов, поскольку код внутри модуля по умолчанию является закрытым. Частные элементы — это внутренние подробности реализации, недоступные для внешнего использования. Мы можем сделать модули и элементы внутри них общедоступными, что позволит внешнему коду использовать их и зависеть от них. В качестве примера, давайте напишем библиотечный крейт предоставляющий функциональность ресторана. Мы определим сигнатуры функций, но оставим их тела пустыми, чтобы сосредоточиться на организации кода, вместо реализации кода для ресторана. В ресторанной индустрии некоторые части ресторана называются фронтом дома , а другие задней частью дома . Фронт дома это там где находятся клиенты; здесь размещаются места клиентов, официанты принимают заказы и оплаты, а бармены делают напитки. Задняя часть дома это где шеф-повара и повара работают на кухне, работают посудомоечные машины, а менеджеры занимаются административной деятельностью. Чтобы структурировать крейт подобно тому, как работает настоящий ресторан, можно организовать размещение функций во вложенных модулях. Создадим новую библиотеку (библиотечный крейт) с именем restaurant выполнив приказ cargo new restaurant --lib; затем вставим код из приложения 7-1 в src/lib.rs для определения некоторых модулей и сигнатур функций. Это секция фронта дома: Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-01/src/lib.rs}} Приложение 7-1: Модуль front_of_house , содержащий другие модули, которые в свою очередь содержат функции Мы определяем модуль, начиная с ключевого слова mod, затем определяем название модуля (в данном случае front_of_house) и размещаем фигурные скобки вокруг тела модуля. Внутри модулей, можно иметь другие модули, как в случае с модулями hosting и serving. Модули также могут содержать определения для других элементов, таких как структуры, перечисления, константы, типажи или — как в приложении 7-1 — функции. Используя модули, мы можем сгруппировать связанные определения вместе и сказать почему они являются связанными. Программистам будет легче найти необходимую функциональность в сгруппированном коде, вместо того чтобы искать её в одном общем списке. Программисты, добавляющие новые функции в этот код, будут знать, где разместить код для поддержания порядка в программе. Как мы упоминали ранее, файлы src/main.rs и src/lib.rs называются корневыми модулями крейта . Причина такого именования в том, что содержимое любого из этих двух файлов образует модуль с именем crate в корне структуры модулей крейта, известной как дерево модулей . В приложении 7-2 показано дерево модулей для структуры модулей, приведённой в коде приложения 7-1. crate └── front_of_house ├── hosting │ ├── add_to_waitlist │ └── seat_at_table └── serving ├── take_order ├── serve_order └── take_payment Приложение 7-2: Древо модулей для программы из Приложения 7-1 Это дерево показывает, как некоторые из модулей вкладываются друг в друга; например, hosting находится внутри front_of_house. Дерево также показывает, что некоторые модули являются братьями (siblings) друг для друга, то есть они определены в одном модуле; hosting и serving это братья которые определены внутри front_of_house. Если модуль A содержится внутри модуля B, мы говорим, что модуль A является потомком (child) модуля B, а модуль B является родителем (parent) модуля A. Обратите внимание, что родителем всего дерева модулей является неявный модуль с именем crate. Дерево модулей может напомнить вам дерево каталогов файловой системы на компьютере; это очень удачное сравнение! По подобию с каталогами в файловой системе, мы используется модули для организации кода. И так же, как нам надо искать файлы в каталогах на компьютере, нам требуется способ поиска нужных модулей.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Определение модулей для управления областью действия и конфиденциальностью » Группировка связанного кода в модулях","id":"113","title":"Группировка связанного кода в модулях"},"114":{"body":"Чтобы показать Rust, где найти элемент в дереве модулей, мы используем путь так же, как мы используем путь при навигации по файловой системе. Чтобы вызвать функцию, нам нужно знать её путь. Пути бывают двух видов: абсолютный путь - это полный путь, начинающийся от корневого модуля крейта; для кода из внешнего крейта абсолютный путь начинается с имени крейта, а для кода из текущего крейта он начинается с литерала crate. относительный путь начинается с текущего модуля и использует ключевые слова self, super или определитель в текущем модуле. Как абсолютные, так и относительные, пути состоят из одного или нескольких определителей, разделённых двойными двоеточиями (::). Вернёмся к приложению 7-1, скажем, мы хотим вызвать функцию add_to_waitlist. Это то же самое, что спросить: какой путь у функции add_to_waitlist? В приложении 7-3 мы немного упростили код приложения 7-1, удалив некоторые модули и функции. Мы покажем два способа вызова функции add_to_waitlist из новой функции eat_at_restaurant, определённой в корневом модуле крейта. Эти пути правильные, но остаётся ещё одна проблема, которая не позволит этому примеру собраться как есть. Мы скоро объясним почему. Функция eat_at_restaurant является частью общедоступного API нашего библиотечного крейта, поэтому мы помечаем её ключевым словом pub. В разделе \"Раскрываем приватные пути с помощью ключевого слова pub\" мы рассмотрим более подробно pub. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-03/src/lib.rs}} Приложение 7-3. Вызов функции add_to_waitlist с использованием абсолютного и относительного пути При первом вызове функции add_to_waitlist из eat_at_restaurant мы используем абсолютный путь. Функция add_to_waitlist определена в том же крейте, что и eat_at_restaurant, и это означает, что мы можем использовать ключевое слово crate в начале абсолютного пути. Затем мы добавляем каждый из последующих дочерних модулей, пока не составим путь до add_to_waitlist. Вы можете представить себе файловую систему с такой же структурой: мы указываем путь /front_of_house/hosting/add_to_waitlist для запуска программы add_to_waitlist; использование имени crate в качестве корневого модуля крейта подобно использованию / для указания корня файловой системы в вашей оболочке. Второй раз, когда мы вызываем add_to_waitlist из eat_at_restaurant, мы используем относительный путь. Путь начинается с имени модуля front_of_house, определённого на том же уровне дерева модулей, что и eat_at_restaurant. Для эквивалентной файловой системы использовался бы путь front_of_house/hosting/add_to_waitlist. Начало пути с имени модуля означает, что путь является относительным. Выбор, использовать относительный или абсолютный путь, является решением, которое вы примете на основании вашего проекта. Решение должно зависеть от того, с какой вероятностью вы переместите объявление элемента отдельно от или вместе с кодом использующим этот элемент. Например, в случае перемещения модуля front_of_house и его функции eat_at_restaurant в другой модуль с именем customer_experience, будет необходимо обновить абсолютный путь до add_to_waitlist, но относительный путь всё равно будет действителен. Однако, если мы переместим отдельно функцию eat_at_restaurant в модуль с именем dining, то абсолютный путь вызова add_to_waitlist останется прежним, а относительный путь нужно будет обновить. Мы предпочитаем указывать абсолютные пути, потому что это позволяет проще перемещать определения кода и вызовы элементов независимо друг от друга. Давайте попробуем собрать код из приложения 7-3 и выяснить, почему он ещё не собирается. Ошибка, которую мы получаем, показана в приложении 7-4. {{#include ../listings/ch07-managing-growing-projects/listing-07-03/output.txt}} Приложение 7-4. Ошибки сборки при сборке кода из приложения 7-3 Сообщения об ошибках говорят о том, что модуль hosting является приватным. Другими словами, у нас есть правильные пути к модулю hosting и функции add_to_waitlist, но Rust не позволяет нам использовать их, потому что у него нет доступа к приватным разделам. В Rust все элементы (функции, способы, структуры, перечисления, модули и константы) по умолчанию являются приватными для родительских модулей. Если вы хотите сделать элемент, например функцию или структуру, приватным, вы помещаете его в модуль. Элементы в родительском модуле не могут использовать приватные элементы внутри дочерних модулей, но элементы в дочерних модулях могут использовать элементы у своих модулях-предках. Это связано с тем, что дочерние модули оборачивают и скрывают подробности своей реализации, но дочерние модули могут видеть среда, в котором они определены. Продолжая нашу метафору, подумайте о правилах приватности как о задней части ресторана: то, что там происходит, скрыто от клиентов ресторана, но офис-менеджеры могут видеть и делать всё в ресторане, которым они управляют. В Rust решили, что система модулей должна функционировать таким образом, чтобы по умолчанию скрывать подробности реализации. Таким образом, вы знаете, какие части внутреннего кода вы можете изменять не нарушая работы внешнего кода. Тем не менее, Rust даёт нам возможность открывать внутренние части кода дочерних модулей для внешних модулей-предков, используя ключевое слово pub, чтобы сделать элемент общедоступным.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Пути для ссылки на элемент в дереве модулей » Пути для ссылки на элемент в дереве модулей","id":"114","title":"Пути для ссылки на элемент в дереве модулей"},"115":{"body":"Давайте вернёмся к ошибке в приложении 7-4, которая говорит, что модуль hosting является приватным. Мы хотим, чтобы функция eat_at_restaurant из родительского модуля имела доступ к функции add_to_waitlist в дочернем модуле, поэтому мы помечаем модуль hosting ключевым словом pub, как показано в приложении 7-5. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-05/src/lib.rs}} Приложение 7-5. Объявление модуля hosting как pub для его использования из eat_at_restaurant К сожалению, код в приложении 7-5 всё ещё приводит к ошибке, как показано в приложении 7-6. {{#include ../listings/ch07-managing-growing-projects/listing-07-05/output.txt}} Приложение 7-6: Ошибки сборки при сборке кода в приложении 7-5 Что произошло? Добавление ключевого слова pub перед mod hosting сделало модуль общедоступным. После этого изменения, если мы можем получить доступ к модулю front_of_house, то мы можем получить доступ к модулю hosting. Но содержимое модуля hosting всё ещё является приватным: превращение модуля в общедоступный модуль не делает его содержимое общедоступным. Ключевое слово pub позволяет внешнему коду в модулях-предках обращаться только к модулю, без доступа ко внутреннему коду. Поскольку модули являются дополнениями, мы мало что можем сделать, просто сделав модуль общедоступным; нам нужно пойти дальше и сделать один или несколько элементов в модуле общедоступными. Ошибки в приложении 7-6 говорят, что функция add_to_waitlist является приватной. Правила приватности применяются к структурам, перечислениям, функциям и способам, также как и к модулям. Давайте также сделаем функцию add_to_waitlist общедоступной, добавив ключевое слово pub перед её определением, как показано в приложении 7-7. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-07/src/lib.rs}} Приложение 7-7. Добавление ключевого слова pub к mod hosting и к fn add_to_waitlist позволяет нам вызывать функцию из eat_at_restaurant Теперь код собирается! Чтобы понять, почему добавление ключевого слова pub позволяет нам использовать эти пути для add_to_waitlist в соответствии с правилами приватности, давайте рассмотрим абсолютный и относительный пути. В случае абсолютного пути мы начинаем с crate, корня дерева модулей нашего крейта. Модуль front_of_house определён в корневом модуле крейта. Хотя front_of_house не является общедоступным, но поскольку функция eat_at_restaurant определена в том же модуле, что и front_of_house (то есть, eat_at_restaurant и front_of_house являются потомками одного родителя), мы можем ссылаться на front_of_house из eat_at_restaurant. Далее идёт модуль hosting, помеченный как pub. Мы можем получить доступ к родительскому модулю модуля hosting, поэтому мы можем получить доступ и к hosting. Наконец, функция add_to_waitlist помечена как pub, и так как мы можем получить доступ к её родительскому модулю, то вызов этой функции разрешён! В случае относительного пути логика такая же как для абсолютного пути, за исключением первого шага: вместо того, чтобы начинать с корневого модуля крейта, путь начинается с front_of_house. Модуль front_of_house определён в том же модуле, что и eat_at_restaurant, поэтому относительный путь, начинающийся с модуля, в котором определена eat_at_restaurant тоже работает. Тогда, по причине того, что hosting и add_to_waitlist помечены как pub, остальная часть пути работает и вызов этой функции разрешён! Если вы планируете предоставить общий доступ к своему библиотечному крейту, чтобы другие проекты могли использовать ваш код, ваш общедоступный API — это ваш контракт с пользователями вашего крейта, определяющий, как они могут взаимодействовать с вашим кодом. Есть много соображений по поводу управления изменениями в вашем общедоступном API, чтобы сделать необременительным для людей зависимость от вашего крейта. Эти соображения выходят за рамки этой книги; если вам важна эта тема, см. The Rust API Guidelines . Лучшие практики для пакетов с двоичным и библиотечным крейтами Мы упоминали, что пакет может содержать как корневой модуль двоичного крейта src/main.rs , так и корневой модуль библиотечного крейта src/lib.rs , и оба крейта будут по умолчанию иметь имя пакета. Как правило, пакеты с таким шаблоном, содержащим как библиотечный, так и двоичный крейт, будут иметь достаточно кода в двоичном крейте, чтобы запустить исполняемый файл, который вызывает код из библиотечного крейта. Это позволяет другим проектам извлечь выгоду из большей части функциональности, предоставляемой пакетом, поскольку код библиотечного крейта можно использовать совместно. Дерево модулей должно быть определено в src/lib.rs . Затем любые общедоступные элементы можно использовать в двоичном крейте, начав пути с имени пакета. Двоичный крейт становится пользователем библиотечного крейта точно так же, как полностью внешний крейт использует библиотечный крейт: он может использовать только общедоступный API. Это поможет вам разработать хороший API; вы не только автор, но и пользователь! В Главе 12 мы эту практику организации кода с помощью окно выводаной программы, которая будет содержать как двоичный, так и библиотечный крейты.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Пути для ссылки на элемент в дереве модулей » Раскрываем приватные пути с помощью ключевого слова pub","id":"115","title":"Раскрываем приватные пути с помощью ключевого слова pub"},"116":{"body":"Также можно построить относительные пути, которые начинаются в родительском модуле, используя ключевое слово super в начале пути. Это похоже на синтаксис начала пути файловой системы ... Использование super позволяет нам сослаться на элемент, который, как мы знаем, находится в родительском модуле, что может упростить переупорядочение дерева модулей, чем когда модуль тесно связан с родителем, но родитель может когда-нибудь быть перемещён в другое место в дереве модулей. Рассмотрим код в приложении 7-8, где моделируется ситуация, в которой повар исправляет неправильный заказ и лично приносит его клиенту. Функция fix_incorrect_order вызывает функцию deliver_order, определённую в родительском модуле, указывая путь к deliver_order, начинающийся с super: Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-08/src/lib.rs}} Приложение 7-8: Вызов функции с использованием относительного пути, начинающегося с super Функция fix_incorrect_order находится в модуле back_of_house, поэтому мы можем использовать super для перехода к родительскому модулю модуля back_of_house, который в этом случае является crate, корневым модулем. В этом модуле мы ищем deliver_order и находим его. Успех! Мы думаем, что модуль back_of_house и функция deliver_order, скорее всего, останутся в тех же родственных отношениях друг с другом, и должны будут перемещены вместе, если мы решим реорганизовать дерево модулей крейта. Поэтому мы использовали super, чтобы в будущем у нас было меньше мест для обновления кода, если этот код будет перемещён в другой модуль.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Пути для ссылки на элемент в дереве модулей » Начинаем относительный путь с помощью super","id":"116","title":"Начинаем относительный путь с помощью super"},"117":{"body":"Мы также можем использовать pub для обозначения структур и перечислений как общедоступных, но есть несколько дополнительных подробностей использования pub со структурами и перечислениями. Если мы используем pub перед определением структуры, мы делаем структуру общедоступной, но поля структуры по-прежнему остаются приватными. Мы можем сделать каждое поле общедоступным или нет в каждом определенном случае. В приложении 7-9 мы определили общедоступную структуру back_of_house::Breakfast с общедоступным полем toast и с приватным полем seasonal_fruit. Это моделирует случай в ресторане, когда клиент может выбрать вид хлеба, который подаётся с едой, а шеф-повар решает какие фрукты сопровождают еду, исходя из того, что сезонно и что есть в наличии. Доступные фрукты быстро меняются, поэтому клиенты не могут выбирать фрукты или даже увидеть, какие фрукты они получат. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-09/src/lib.rs}} Приложение 7-9: Структура с общедоступными и приватными полями Поскольку поле toast в структуре back_of_house::Breakfast является открытым, то в функции eat_at_restaurant можно писать и читать поле toast, используя точечную нотацию. Обратите внимание, что мы не можем использовать поле seasonal_fruit в eat_at_restaurant, потому что seasonal_fruit является приватным. Попробуйте убрать комментирование с последней строки для значения поля seasonal_fruit, чтобы увидеть какую ошибку вы получите! Также обратите внимание, что поскольку back_of_house::Breakfast имеет приватное поле, то структура должна предоставить публичную ассоциированную функцию, которая создаёт экземпляр Breakfast (мы назвали её summer). Если Breakfast не имел бы такой функции, мы бы не могли создать экземпляр Breakfast внутри eat_at_restaurant, потому что мы не смогли бы установить значение приватного поля seasonal_fruit в функции eat_at_restaurant. В отличии от структуры, если мы сделаем общедоступным перечисление, то все его варианты будут общедоступными. Нужно только указать pub перед ключевым словом enum, как показано в приложении 7-10. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-10/src/lib.rs}} Приложение 7-10. Определяя перечисление общедоступным мы делаем все его варианты общедоступными Поскольку мы сделали общедоступным перечисление Appetizer, то можно использовать варианты Soup и Salad в функции eat_at_restaurant. Перечисления не очень полезны, если их варианты не являются общедоступными: было бы досадно каждый раз аннотировать все варианты перечисления как pub. По этой причине по умолчанию варианты перечислений являются общедоступными. Структуры часто полезны, если их поля не являются общедоступными, поэтому поля структуры следуют общему правилу, согласно которому, всё по умолчанию является приватным, если не указано pub. Есть ещё одна ситуация с pub, которую мы не освещали, и это последняя особенность модульной системы: ключевое слово use. Мы сначала опишем use само по себе, а затем покажем как сочетать pub и use вместе.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Пути для ссылки на элемент в дереве модулей » Делаем общедоступными структуры и перечисления","id":"117","title":"Делаем общедоступными структуры и перечисления"},"118":{"body":"Необходимость записывать пути к функциям вызова может показаться неудобной и повторяющейся. В приложении 7-7 независимо от того, выбирали ли мы абсолютный или относительный путь к функции add_to_waitlist , каждый раз, когда мы хотели вызвать add_to_waitlist , нам приходилось также указывать front_of_house и hosting . К счастью, есть способ упростить этот процесс: мы можем один раз создать псевдоним на путь при помощи ключевого слова use, а затем использовать более короткое имя везде в области видимости. В приложении 7-11 мы подключили модуль crate::front_of_house::hosting в область действия функции eat_at_restaurant, поэтому нам достаточно только указать hosting::add_to_waitlist для вызова функции add_to_waitlist внутри eat_at_restaurant. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-11/src/lib.rs}} Приложение 7-11. Добавление модуля в область видимости при помощи use Добавление use и пути в область видимости подобно созданию символической ссылки в файловой системе. С добавлением use crate::front_of_house::hosting в корневой модуль крейта, hosting становится допустимым именем в этой области, как если бы модуль hosting был определён в корневом модуле крейта. Пути, подключённые в область видимости с помощью use, также проверяются на доступность, как и любые другие пути. Обратите внимание, что use создаёт псевдоним только для той именно области, в которой это объявление use и находится. В приложении 7-12 функция eat_at_restaurant перемещается в новый дочерний модуль с именем customer, область действия которого отличается от области действия указания use, поэтому тело функции не будет собираться: Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-12/src/lib.rs}} Приложение 7-12. Указание use применяется только в её собственной области видимости Ошибка сборщика показывает, что данный псевдоним не может использоваться в модуле customer: {{#include ../listings/ch07-managing-growing-projects/listing-07-12/output.txt}} Обратите внимание, что есть также предупреждение о том, что use не используется в своей области! Чтобы решить эту проблему, можно переместить use в модуль customer, или же можно сослаться на псевдоним в родительском модуле с помощью super::hosting в дочернем модуле customer.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Подключение путей в область видимости с помощью ключевого слова use","id":"118","title":"Подключение путей в область видимости с помощью ключевого слова use"},"119":{"body":"В приложении 7-11 вы могли бы задаться вопросом, почему мы указали use crate::front_of_house::hosting, а затем вызвали hosting::add_to_waitlist внутри eat_at_restaurant вместо указания в use полного пути прямо до функции add_to_waitlist для получения того же результата, что в приложении 7-13. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-13/src/lib.rs}} Приложение 7-13: Добавление функции add_to_waitlist в область видимости с use неидиоматическим способом Хотя приложениеи 7-11 и 7-13 выполняют одну и ту же задачу, приложение 7-11 является идиоматическим способом подключения функции в область видимости с помощью use. Подключение родительского модуля функции в область видимости при помощи use означает, что мы должны указывать родительский модуль при вызове функции. Указание родительского модуля при вызове функции даёт понять, что функция не определена местно, но в то же время сводя к минимуму повторение полного пути. В коде приложения 7-13 не ясно, где именно определена add_to_waitlist. С другой стороны, при подключении структур, перечислений и других элементов используя use, идиоматически правильным будет указывать полный путь. Приложение 7-14 показывает идиоматический способ подключения структуры встроенной библиотеки HashMap в область видимости двоичного крейта. Файл: src/main.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-14/src/main.rs}} Приложение 7-14. Включение HashMap в область видимости идиоматическим способом За этой идиомой нет веской причины: это просто соглашение, которое появилось само собой. Люди привыкли читать и писать код на Rust таким образом. Исключением из этой идиомы является случай, когда мы подключаем два элемента с одинаковыми именами в область видимости используя указанию use — Rust просто не позволяет этого сделать. Приложение 7-15 показывает, как подключить в область действия два вида с одинаковыми именами Result, но из разных родительских модулей и как на них ссылаться. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-15/src/lib.rs:here}} Приложение 7-15. Для включения двух видов с одинаковыми именами в одну область видимости необходимо использовать их родительские модули. Как видите, использование имени родительских модулей позволяет различать два вида Result. Если бы вместо этого мы указали use std::fmt::Result и use std::io::Result, мы бы имели два вида Result в одной области видимости, и Rust не смог бы понять какой из двух Result мы имели в виду, когда нашёл бы их употребление в коде.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Создание идиоматических путей с use","id":"119","title":"Создание идиоматических путей с use"},"12":{"body":"Начнём наше путешествие в Rust! Нужно много всего изучить, но каждое путешествие с чего-то начинается. В этой главе мы обсудим: установку Rust на Linux, macOS и Windows, написание программы, печатающей Hello, world!, использование cargo, менеджера пакетов и системы сборки в одном лице для Rust.","breadcrumbs":"С чего начать » Начало работы","id":"12","title":"Начало работы"},"120":{"body":"Есть другое решение проблемы добавления двух видов с одинаковыми именами в одну и ту же область видимости используя use: после пути можно указать as и новое местное имя (псевдоним) для вида. Приложение 7-16 показывает как по-другому написать код из приложения 7-15, путём переименования одного из двух видов Result используя as. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-16/src/lib.rs:here}} Приложение 7-16: Переименование вида, когда он включён в область видимости с помощью ключевого слова as Во второй указания use мы выбрали новое имя IoResult для вида std::io::Result, которое теперь не будет конфликтовать с видом Result из std::fmt, который также подключён в область видимости. Приложения 7-15 и 7-16 считаются идиоматичными, поэтому выбор за вами!","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Предоставление новых имён с помощью ключевого слова as","id":"120","title":"Предоставление новых имён с помощью ключевого слова as"},"121":{"body":"Когда мы подключаем имя в область видимости, используя ключевое слово use, то имя, доступное в новой области видимости, является приватным. Чтобы позволить коду, который вызывает наш код, ссылаться на это имя, как если бы оно было определено в области видимости данного кода, можно объединить pub и use. Этот способ называется реэкспортом (re-exporting) , потому что мы подключаем элемент в область видимости, но также делаем этот элемент доступным для подключения в других областях видимости. Приложение 7-17 показывает код из приложения 7-11, где use в корневом модуле заменено на pub use. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-17/src/lib.rs}} Приложение 7-17. Предоставление имени для использования любым кодом из новой области при помощи pub use До этого изменения внешний код должен был вызывать функцию add_to_waitlist , используя путь restaurant::front_of_house::hosting::add_to_waitlist() . Теперь, когда это объявление pub use повторно экспортировало модуль hosting из корневого модуля, внешний код теперь может использовать вместо него путь restaurant::hosting::add_to_waitlist() . Реэкспорт полезен, когда внутренняя структура вашего кода отличается от того, как программисты, вызывающие ваш код, думают о предметной области. Например, по подобию с рестораном люди, управляющие им, думают о «передней части дома» и «задней части дома». Но клиенты, посещающие ресторан, вероятно, не будут думать о частях ресторана в таких терминах. Используя pub use , мы можем написать наш код с одной структурой, но сделать общедоступной другую структуру. Благодаря этому наша библиотека хорошо организована для программистов, работающих над библиотекой, и для программистов, вызывающих библиотеку. Мы рассмотрим ещё один пример pub use и его влияние на документацию вашего крейта в разделе «Экспорт удобного общедоступного API с pub use» Главы 14.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Реэкспорт имён с pub use","id":"121","title":"Реэкспорт имён с pub use"},"122":{"body":"В Главе 2 мы запрограммировали игру угадывания числа, где использовался внешний пакет с именем rand для генерации случайного числа. Чтобы использовать rand в нашем проекте, мы добавили эту строку в Cargo.toml : Файл: Cargo.toml {{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:9:}} Добавление rand в качестве зависимости в Cargo.toml указывает Cargo загрузить пакет rand и все его зависимости из crates.io и сделать rand доступным для нашего проекта. Затем, чтобы подключить определения rand в область видимости нашего пакета, мы добавили строку use начинающуюся с названия пакета rand и списка элементов, которые мы хотим подключить в область видимости. Напомним, что в разделе \"Генерация случайного числа\" Главы 2, мы подключили трейт Rng в область видимости и вызвали функцию rand::thread_rng: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:ch07-04}} Члены сообщества Rust сделали много пакетов доступными на ресурсе crates.io , и добавление любого из них в ваш пакет включает в себя одни и те же шаги: добавить внешние пакеты в файл Cargo.toml вашего пакета, использовать use для подключения элементов внешних пакетов в область видимости. Обратите внимание, что стандартная библиотека std также является крейтом, внешним по отношению к нашему пакету. Поскольку стандартная библиотека поставляется с языком Rust, нам не нужно изменять Cargo.toml для подключения std. Но нам нужно ссылаться на неё при помощи use, чтобы добавить элементы оттуда в область видимости нашего пакета. Например, с HashMap мы использовали бы эту строку: use std::collections::HashMap; Это абсолютный путь, начинающийся с std, имени крейта встроенной библиотеки.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Использование внешних пакетов","id":"122","title":"Использование внешних пакетов"},"123":{"body":"Если мы используем несколько элементов, определённых в одном крейте или в том же модуле, то перечисление каждого элемента в отдельной строке может занимать много вертикального пространства в файле. Например, эти две указания use используются в программе угадывания числа (приложение 2-4) для подключения элементов из std в область видимости: Файл: src/main.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-01-use-std-unnested/src/main.rs:here}} Вместо этого, мы можем использовать вложенные пути, чтобы добавить эти элементы в область видимости одной строкой. Мы делаем это, как показано в приложении 7-18, указывая общую часть пути, за которой следуют два двоеточия, а затем фигурные скобки вокруг списка тех частей продолжения пути, которые отличаются. Файл: src/main.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-18/src/main.rs:here}} Приложение 7-18. Указание вложенного пути для добавления нескольких элементов с одинаковым префиксом в область видимости В больших программах, подключение множества элементов из одного пакета или модуля с использованием вложенных путей может значительно сократить количество необходимых отдельных указаний use! Можно использовать вложенный путь на любом уровне, что полезно при объединении двух указаний use, которые имеют общую часть пути. Например, в приложении 7-19 показаны две указания use: одна подключает std::io, а другая подключает std::io::Write в область видимости. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-19/src/lib.rs}} Приложение 7-19: Две указания use, в которых один путь является частью другого Общей частью этих двух путей является std::io, и это полный первый путь. Чтобы объединить эти два пути в одной указания use, мы можем использовать ключевое слово self во вложенном пути, как показано в приложении 7-20. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-20/src/lib.rs}} Приложение 7-20: Объединение путей из Приложения 7-19 в одну указанию use Эта строка подключает std::io и std::io::Write в область видимости.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Использование вложенных путей для уменьшения длинных списков use","id":"123","title":"Использование вложенных путей для уменьшения длинных списков use"},"124":{"body":"Если мы хотим включить в область видимости все общедоступные элементы, определённые в пути, мы можем указать этот путь, за которым следует оператор *: use std::collections::*; Эта указание use подключает все открытые элементы из модуля std::collections в текущую область видимости. Будьте осторожны при использовании оператора *! Он может усложнить понимание, какие имена находятся в области видимости и где были определены имена, используемые в вашей программе. Оператор * часто используется при тестировании для подключения всего что есть в модуле tests; мы поговорим об этом в разделе \"Как писать тесты\" Главы 11. Оператор * также иногда используется как часть шаблона самостоятельного импорта (prelude) : смотрите документацию по встроенной библиотеке для получения дополнительной сведений об этом шаблоне.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Введение путей в область видимости с помощью ключевого слова use » Оператор * (glob)","id":"124","title":"Оператор * (glob)"},"125":{"body":"До сих пор все примеры в этой главе определяли несколько модулей в одном файле. Когда модули становятся большими, вы можете захотеть переместить их определения в отдельные файлы, чтобы упростить навигацию по коду. Например, давайте начнём с кода из приложения 7-17, в котором было несколько модулей ресторана. Мы будем извлекать модули в файлы вместо того, чтобы определять все модули в корневом модуле крейта. В нашем случае корневой модуль крейта - src/lib.rs , но это разделение также работает и с двоичными крейтами, у которых корневой модуль крейта — src/main.rs . Сначала мы извлечём модуль front_of_house в свой собственный файл. Удалите код внутри фигурных скобок для модуля front_of_house, оставив только объявление mod front_of_house;, так что теперь src/lib.rs содержит код, показанный в приложении 7-21. Обратите внимание, что этот вариант не ссобирается, пока мы не создадим файл src/front_of_house.rs из приложении 7-22. Файл: src/lib.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/lib.rs}} Приложение 7-21. Объявление модуля front_of_house, чьё содержимое будет в src/front_of_house.rs Затем поместим код, который был в фигурных скобках, в новый файл с именем src/front_of_house.rs , как показано в приложении 7-22. Сборщик знает, что нужно искать в этом файле, потому что он наткнулся в корневом модуле крейта на объявление модуля с именем front_of_house. Файл: src/front_of_house.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/listing-07-21-and-22/src/front_of_house.rs}} Приложение 7-22. Определение содержимого модуля front_of_house в файле src/front_of_house.rs Обратите внимание, что вам нужно только один раз загрузить файл с помощью объявления mod в вашем дереве модулей. Как только сборщик узнает, что файл является частью проекта (и узнает, где в дереве модулей находится код из-за того, куда вы поместили указанию mod), другие файлы в вашем проекте должны ссылаться на код загруженного файла, используя путь к месту, где он был объявлен, как описано в разделе «Пути для ссылки на элемент в дереве модулей» . Другими словами, mod — это не действие «включения», которую вы могли видеть в других языках программирования. Далее мы извлечём модуль hosting в его собственный файл. Процесс немного отличается, потому что hosting является дочерним модулем для front_of_house, а не корневого модуля. Мы поместим файл для hosting в новый каталог, который будет назван по имени его предка в дереве модулей, в данном случае это src/front_of_house/ . Чтобы начать перенос hosting, мы меняем src/front_of_house.rs так, чтобы он содержал только объявление модуля hosting: Файл: src/front_of_house.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house.rs}} Затем мы создаём каталог src/front_of_house и файл hosting.rs , в котором будут определения, сделанные в модуле hosting: Файл: src/front_of_house/hosting.rs {{#rustdoc_include ../listings/ch07-managing-growing-projects/no-listing-02-extracting-hosting/src/front_of_house/hosting.rs}} Если вместо этого мы поместим hosting.rs в каталог src , сборщик будет думать, что код в hosting.rs это модуль hosting, объявленный в корне крейта, а не объявленный как дочерний модуль front_of_house. Правила сборщика для проверки какие файлы содержат код каких модулей предполагают, что каталоги и файлы точно соответствуют дереву модулей.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Separating Modules into Different Files » Разделение модулей на разные файлы","id":"125","title":"Разделение модулей на разные файлы"},"126":{"body":"До сих пор мы рассматривали наиболее идиоматические пути к файлам, используемые сборщиком Rust, но Rust также поддерживает и старый стиль пути к файлу. Для модуля с именем front_of_house, объявленного в корневом модуле крейта, сборщик будет искать код модуля в: src/front_of_house.rs (что мы рассматривали) src/front_of_house/mod.rs (старый стиль, всё ещё поддерживаемый путь) Для модуля с именем hosting, который является подмодулем front_of_house, сборщик будет искать код модуля в: src/front_of_house/hosting.rs (что мы рассматривали) src/front_of_house/hosting/mod.rs (старый стиль, всё ещё поддерживаемый путь) Если вы используете оба стиля для одного и того же модуля, вы получите ошибку сборщика. Использование сочетания обоих стилей для разных модулей в одном проекте разрешено, но это может сбивать с толку людей, перемещающихся по вашему проекту. Основным недостатком стиля, в котором используются файлы с именами mod.rs , является то, что в вашем проекте может оказаться много файлов с именами mod.rs , что может привести к путанице, если вы одновременно откроете их в редакторе. Мы перенесли код каждого модуля в отдельный файл, а дерево модулей осталось прежним. Вызовы функций в eat_at_restaurant будут работать без каких-либо изменений, несмотря на то, что определения находятся в разных файлах. Этот способ позволяет перемещать модули в новые файлы по мере увеличения их размеров. Обратите внимание, что указание pub use crate::front_of_house::hosting в src/lib.rs также не изменилась, и use не влияет на то, какие файлы собираются как часть крейта. Ключевое слово mod объявляет модули, и Rust ищет в файле с тем же именем, что и у модуля, код, который входит в этот модуль.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Separating Modules into Different Files » Иные пути к файлам","id":"126","title":"Иные пути к файлам"},"127":{"body":"Rust позволяет разбить пакет на несколько крейтов и крейт - на модули, так что вы можете ссылаться на элементы, определённые в одном модуле, из другого модуля. Это можно делать при помощи указания абсолютных или относительных путей. Эти пути можно добавить в область видимости указанием use, поэтому вы можете пользоваться более короткими путями для многократного использования элементов в этой области видимости. Код модуля по умолчанию является приватным, но можно сделать определения общедоступными, добавив ключевое слово pub. В следующей главе мы рассмотрим некоторые собрания структур данных из встроенной библиотеки, которые вы можете использовать в своём правильноно организованном коде.","breadcrumbs":"Управление растущими проектами с помощью пакетов, крейтов и модулей » Separating Modules into Different Files » Итог","id":"127","title":"Итог"},"128":{"body":"Стандартная библиотека содержит несколько полезных структур данных, которые называются собраниями . Большая часть других видов данных представляют собой хранение определенного значения, но особенностью собраний является хранение множества однотипных значений. В отличии от массива или кортежа данные собраний хранятся в куче, а это значит, что размер собрания может быть неизвестен в момент сборки программы. Он может изменяться (увеличиваться, уменьшаться) во время работы программы. Каждый вид собраний имеет свои возможности и отличается по производительности, так что выбор именно собрания зависит от ситуации и является умением разработчика, вырабатываемым со временем. В этой главе будет рассмотрено несколько собраний: Вектор (vector) - позволяет нам сохранять различное количество последовательно хранящихся значений, Строка (string) - это последовательность символов. Мы же упоминали вид String ранее, но в данной главе мы поговорим о нем подробнее. Хеш-таблица (hash map) - собрание которая позволяет хранить перечень ассоциаций значения с ключом (перечень пар ключ:значение). Является именно реализацией более общей структуры данных называемой map . Для того, чтобы узнать о других видах собраний предоставляемых встроенной библиотекой смотрите документацию . Мы обсудим как создавать и обновлять векторы, строки и хеш-таблицы, а также объясним что делает каждую из них особенной.","breadcrumbs":"Общие собрания » Общие собрания","id":"128","title":"Общие собрания"},"129":{"body":"Первым видом собрания, который мы разберём, будет Vec<T>, также известный как вектор (vector). Векторы позволяют хранить более одного значения в единой структуре данных, хранящей элементы в памяти один за другим. Векторы могут хранить данные только одного вида. Их удобно использовать, когда нужно хранить список элементов, например, список текстовых строк из файла, или список цен товаров в корзине покупок.","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Хранение списков значений в векторах","id":"129","title":"Хранение списков значений в векторах"},"13":{"body":"Первым шагом является установка Rust. Мы загрузим Rust, используя средство приказной строки rustup, предназначенный для управлениями исполнениями Rust и другими связанными с ним средствами. Вам понадобится интернет-соединение для его загрузки. Примечание: если вы по каким-то причинам предпочитаете не использовать rustup, пожалуйста, посетите страницу «Другие способы установки Rust» для получения дополнительных опций. Следующие шаги устанавливают последнюю безотказную исполнение сборщика Rust. Благодаря заверениям безотказности Rust все примеры в книге, которые собираются, будут собираться и в новых исполнениях Rust. Вывод может немного отличаться в разных исполнениях, поскольку Rust часто улучшает сообщения об ошибках и предупреждения. Другими словами, любая новая, безотказная исполнение Rust, которую вы установите с помощью этих шагов, должна работать с содержимым этой книги так, как ожидается.","breadcrumbs":"С чего начать » Установка » Установка","id":"13","title":"Установка"},"130":{"body":"Чтобы создать новый пустой вектор, мы вызываем функцию Vec::new, как показано в приложении 8-1. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-01/src/main.rs:here}} Приложение 8-1: Создание нового пустого вектора для хранения значений вида i32 Обратите внимание, что здесь мы добавили изложение вида. Поскольку мы не вставляем никаких значений в этот вектор, Rust не знает, какие элементы мы собираемся хранить. Это важный момент. Векторы реализованы с использованием обобщённых видов; мы рассмотрим, как использовать обобщённые виды с вашими собственными видами в Главе 10. А пока знайте, что вид Vec<T>, предоставляемый встроенной библиотекой, может хранить любой вид. Когда мы создаём новый вектор для хранения определенного вида, мы можем указать этот вид в угловых скобках. В приложении 8-1 мы сообщили Rust, что Vec<T> в v будет хранить элементы вида i32. Чаще всего вы будете создавать Vec<T> с начальными значениями и Rust может определить вид сохраняемых вами значений, но иногда вам всё же придётся указывать изложение вида. Для удобства Rust предоставляет макрос vec!, который создаст новый вектор, содержащий заданные вами значения. В приложении 8-2 создаётся новый Vec<i32>, который будет хранить значения 1, 2 и 3. Числовым видом является i32, потому что это вид по умолчанию для целочисленных значений, о чём упоминалось в разделе “Виды данных” Главы 3. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-02/src/main.rs:here}} Приложение 8-2: Создание нового вектора, содержащего значения Поскольку мы указали начальные значения вида i32, Rust может сделать вывод, что вид переменной v это Vec<i32> и изложение вида здесь не нужна. Далее мы посмотрим как изменять вектор.","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Создание нового вектора","id":"130","title":"Создание нового вектора"},"131":{"body":"Чтобы создать вектор и затем добавить к нему элементы, можно использовать способ push показанный в приложении 8-3. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-03/src/main.rs:here}} Приложение 8-3: Использование способа push для добавления значений в вектор Как и с любой переменной, если мы хотим изменить её значение, нам нужно сделать её изменяемой с помощью ключевого слова mut, что обсуждалось в Главе 3. Все числа которые мы помещаем в вектор имеют вид i32 по этому Rust с лёгкостью выводит вид вектора, по этой причине нам не нужна здесь изложение вида вектора Vec<i32>.","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Изменение вектора","id":"131","title":"Изменение вектора"},"132":{"body":"Есть два способа сослаться на значение, хранящееся в векторе: с помощью порядкового казателя или способа get . В следующих примерах для большей ясности мы указали виды значений, возвращаемых этими функциями. В приложении 8-4 показаны оба способа доступа к значению в векторе: либо с помощью синтаксиса упорядочевания и с помощью способа get. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-04/src/main.rs:here}} Приложение 8-4. Использование синтаксиса упорядочевания и способа get для доступа к элементу в векторе Обратите внимание здесь на пару подробностей. Мы используем значение порядкового казателя 2 для получения третьего элемента: векторы упорядочеваются начиная с нуля. Указывая & и [] мы получаем ссылку на элемент по указанному порядковому казателю. Когда мы используем способ get содержащего порядковый указатель, переданный в качестве переменной, мы получаем вид Option<&T>, который мы можем проверить с помощью match. Причина, по которой Rust предоставляет два способа ссылки на элемент, заключается в том, что вы можете выбрать, как программа будет себя вести, когда вы попытаетесь использовать значение порядкового казателя за пределами ряда существующих элементов. В качестве примера давайте посмотрим, что происходит, когда у нас есть вектор из пяти элементов, а затем мы пытаемся получить доступ к элементу с порядковым казателем 100 с помощью каждого способа, как показано в приложении 8-5. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-05/src/main.rs:here}} Приложение 8-5. Попытка доступа к элементу с порядковым казателем 100 в векторе, содержащем пять элементов Когда мы запускаем этот код, первая строка с &v[100] вызовет панику программы, потому что происходит попытка получить ссылку на несуществующий элемент. Такой подход лучше всего использовать, когда вы хотите, чтобы ваша программа аварийно завершила работу при попытке доступа к элементу за пределами вектора. Когда способу get передаётся порядковый указатель, который находится за пределами вектора, он без паники возвращает None. Вы могли бы использовать такой подход, если доступ к элементу за пределами рядавектора происходит время от времени при нормальных обстоятельствах. Тогда ваш код будет иметь логику для обработки наличия Some(&element) или None, как обсуждалось в Главе 6. Например, порядковый казательможет исходить от человека, вводящего число. Если пользователь случайно введёт слишком большое число, то программа получит значение None и у вас будет возможность сообщить пользователю, сколько элементов находится в текущем векторе, и дать ему возможность ввести допустимое значение. Такое поведение было бы более дружелюбным для пользователя, чем внезапный сбой программы из-за опечатки! Когда у программы есть действительная ссылка, borrow checker (средство проверки заимствований), обеспечивает соблюдение правил владения и заимствования (описанные в Главе 4), чтобы обеспечить, что эта ссылка и любые другие ссылки на содержимое вектора остаются действительными. Вспомните правило, которое гласит, что у вас не может быть изменяемых и неизменяемых ссылок в одной и той же области. Это правило применяется в приложении 8-6, где мы храним неизменяемую ссылку на первый элемент вектора и затем пытаемся добавить элемент в конец вектора. Данная программа не будет работать, если мы также попробуем сослаться на данный элемент позже в функции: {{#rustdoc_include ../listings/ch08-common-collections/listing-08-06/src/main.rs:here}} Приложение 8-6. Попытка добавить некоторый элемент в вектор, в то время когда есть ссылка на элемент вектора Сборка этого кода приведёт к ошибке: {{#include ../listings/ch08-common-collections/listing-08-06/output.txt}} Код в приложении 8-6 может выглядеть так, как будто он должен работать. Почему ссылка на первый элемент должна заботиться об изменениях в конце вектора? Эта ошибка возникает из-за особенности того, как работают векторы: поскольку векторы размещают значения в памяти друг за другом, добавление нового элемента в конец вектора может потребовать выделения новой памяти и копирования старых элементов в новое пространство, если нет достаточного места, чтобы разместить все элементы друг за другом там, где в данный момент хранится вектор. В этом случае ссылка на первый элемент будет указывать на освобождённую память. Правила заимствования предотвращают попадание программ в такую ситуацию. Примечание: Дополнительные сведения о реализации вида Vec<T> смотрите в разделе \"The Rustonomicon\" .","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Чтение данных вектора","id":"132","title":"Чтение данных вектора"},"133":{"body":"Для доступа к каждому элементу вектора по очереди, мы повторяем все элементы, вместо использования порядковых указателей для доступа к одному за раз. В приложении 8-7 показано, как использовать цикл for для получения неизменяемых ссылок на каждый элемент в векторе значений вида i32 и их вывода. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-07/src/main.rs:here}} Приложение 8-7. Печать каждого элемента векторе, при помощи повторения по элементам вектора с помощью цикла for Мы также можем повторять изменяемые ссылки на каждый элемент изменяемого вектора, чтобы вносить изменения во все элементы. Цикл for в приложении 8-8 добавит 50 к каждому элементу. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-08/src/main.rs:here}} Приложение 8-8. Повторение и изменение элементов вектора по изменяемым ссылкам Чтобы изменить значение на которое ссылается изменяемая ссылка, мы должны использовать оператор разыменования ссылки * для получения значения по ссылке в переменной i прежде чем использовать оператор +=. Мы поговорим подробнее об операторе разыменования в разделе “Следование по указателю к значению с помощью оператора разыменования” Главы 15. Перебор вектора, будь то неизменяемый или изменяемый, безопасен из-за правил проверки заимствования. Если бы мы попытались вставить или удалить элементы в телах цикла for в приложениях 8-7 и 8-8, мы бы получили ошибку сборщика, подобную той, которую мы получили с кодом в приложении 8-6. Ссылка на вектор, содержащийся в цикле for, предотвращает одновременную модификацию всего вектора.","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Перебор значений в векторе","id":"133","title":"Перебор значений в векторе"},"134":{"body":"Векторы могут хранить значения только одинакового вида. Это может быть неудобно; определённо могут быть случаи когда надо хранить список элементов разных видов. К счастью, варианты перечисления определены для одного и того же вида перечисления, поэтому, когда нам нужен один вид для представления элементов разных видов, мы можем определить и использовать перечисление! Например, мы хотим получить значения из строки в электронной таблице где некоторые столбцы строки содержат целые числа, некоторые числа с плавающей точкой, а другие - строковые значения. Можно определить перечисление, варианты которого будут содержать разные виды значений и тогда все варианты перечисления будут считаться одним и тем же видом: видом самого перечисления. Затем мы можем создать вектор для хранения этого перечисления и, в конечном счёте, для хранения различных видов. Мы покажем это в приложении 8-9. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-09/src/main.rs:here}} Приложение 8-9: Определение enum для хранения значений разных видов в одном векторе Rust должен знать, какие виды будут в векторе во время сборки, чтобы точно знать сколько памяти в куче потребуется для хранения каждого элемента. Мы также должны чётко указать, какие виды разрешены в этом векторе. Если бы Rust позволял вектору содержать любой вид, то был бы шанс что один или несколько видов вызовут ошибки при выполнении действий над элементами вектора. Использование перечисления вместе с выражением match означает, что во время сборки Rust заверяет, что все возможные случаи будут обработаны, как обсуждалось в главе 6. Если вы не знаете исчерпывающий набор видов, которые программа получит во время выполнения для хранения в векторе, то техника использования перечисления не сработает. Вместо этого вы можете использовать типаж-объект, который мы рассмотрим в главе 17. Теперь, когда мы обсудили некоторые из наиболее распространённых способов использования векторов, обязательно ознакомьтесь с документацией по API вектора , чтобы узнать о множестве полезных способов, определённых в Vec<T> встроенной библиотеки. Например, в дополнение к способу push, существует способ pop, который удаляет и возвращает последний элемент.","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Использование перечислений для хранения множества разных видов","id":"134","title":"Использование перечислений для хранения множества разных видов"},"135":{"body":"Подобно структурам struct, вектор высвобождает свою память когда выходит из области видимости, что показано в приложении 8-10. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-10/src/main.rs:here}} Приложение 8-10. Показано как удаляется вектор и его элементы Когда вектор удаляется, всё его содержимое также удаляется: удаление вектора означает и удаление значений, которые он содержит. Средство проверки заимствования заверяет, что любые ссылки на содержимое вектора используются только тогда, когда сам вектор действителен. Давайте перейдём к следующему виду собрания: String!","breadcrumbs":"Общие собрания » Хранение списков значений с векторами » Удаление элементов из вектора","id":"135","title":"Удаление элементов из вектора"},"136":{"body":"Мы говорили о строках в главе 4, но сейчас мы рассмотрим их более подробно. Новички в Rust обычно застревают на строках из-за сочетания трёх причин: склонность Rust сборщика к выявлению возможных ошибок, более сложная структура данных чем считают многие программисты и UTF-8. Эти факторы объединяются таким образом, что тема может показаться сложной, если вы пришли из других языков программирования. Полезно обсуждать строки в среде собраний, потому что строки реализованы в виде набора байтов, плюс некоторые способы для обеспечения полезной функциональности, когда эти байты преобразуются как текст. В этом разделе мы поговорим об действиех над String таких как создание, обновление и чтение, которые есть у каждого вида собраний. Мы также обсудим какими особенностями String отличается от других собраний, а именно каким образом упорядочевание в String осложняется различием между тем как люди и компьютеры преобразуют данные заключённые в String.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Хранение закодированного текста UTF-8 в строках","id":"136","title":"Хранение закодированного текста UTF-8 в строках"},"137":{"body":"Сначала мы определим, что мы подразумеваем под термином строка (string). В Rust есть только один строковый вид в ядре языка - срез строки str, обычно используемый в заимствованном виде как &str. В Главе 4 мы говорили о срезах строк, string slices , которые являются ссылками на некоторые строковые данные в кодировке UTF-8. Например, строковые литералы хранятся в двоичном файле программы и поэтому являются срезами строк. Вид String предоставляемый встроенной библиотекой Rust, не встроен в ядро языка и является расширяемым, изменяемым, владеющим, строковым видом в UTF-8 кодировке. Когда Rustaceans говорят о \"строках\" то, они обычно имеют в виду виды String или строковые срезы &str, а не просто один из них. Хотя этот раздел в основном посвящён String, оба вида усиленно используются в встроенной библиотеке Rust, оба, и String и строковые срезы, кодируются в UTF-8.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Что же такое строка?","id":"137","title":"Что же такое строка?"},"138":{"body":"Многие из тех же действий, которые доступны Vec<T> , доступны также в String, потому что String фактически реализован как обёртка вокруг вектора байтов с некоторыми дополнительными заверениями, ограничениями и возможностями. Примером функции, которая одинаково работает с Vec<T> и String, является функция new, создающая новый экземпляр вида, и показана в Приложении 8-11. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-11/src/main.rs:here}} Приложение 8-11. Создание новой пустой String строки Эта строка создаёт новую пустую строковую переменную с именем s, в которую мы можем затем загрузить данные. Часто у нас есть некоторые начальные данные, которые мы хотим назначить строке. Для этого мы используем способ to_string доступный для любого вида, который реализует типаж Display, как у строковых литералов. Приложение 8-12 показывает два примера. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-12/src/main.rs:here}} Приложение 8-12: Использование способа to_string для создания экземпляра вида String из строкового литерала Эти выражения создают строку с initial contents. Мы также можем использовать функцию String::from для создания String из строкового литерала. Код приложения 8-13 является эквивалентным коду из приложения 8-12, который использует функцию to_string: {{#rustdoc_include ../listings/ch08-common-collections/listing-08-13/src/main.rs:here}} Приложение 8-13: Использование функции String::from для создания экземпляра вида String из строкового литерала Поскольку строки используются для очень многих вещей, можно использовать множество API для строк, предоставляющих множество возможностей. Некоторые из них могут показаться избыточными, но все они занимаются своим делом! В данном случае String::from и to_string делают одно и тоже, поэтому выбор зависит от стиля который вам больше импонирует. Запомните, что строки хранятся в кодировке UTF-8, поэтому можно использовать любые правильно кодированные данные в них, как показано в приложении 8-14: {{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:here}} Приложение 8-14: Хранение приветствий в строках на разных языках Все это допустимые String значения.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Создание новых строк","id":"138","title":"Создание новых строк"},"139":{"body":"Строка String может увеличиваться в размере, а её содержимое может меняться, по подобию как содержимое Vec<T> при вставке в него большего количества данных. Кроме того, можно использовать оператор + или макрос format! для объединения значений String. Присоединение к строке с помощью push_str и push Мы можем нарастить String используя способ push_str который добавит в исходное значение новый строковый срез, как показано в приложении 8-15. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-15/src/main.rs:here}} Приложение 8-15. Добавление среза строки к String с помощью способа push_str После этих двух строк кода s будет содержать foobar. Способ push_str принимает строковый срез, потому что мы не всегда хотим владеть входным свойствоом. Например, код в приложении 8-16 показывает вариант, когда будет не желательно поведение, при котором мы не сможем использовать s2 после его добавления к содержимому значения переменной s1. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-16/src/main.rs:here}} Приложение 8-16: Использование среза строки после добавления её содержимого к другой String Если способ push_str стал бы владельцем переменнойs2, мы не смогли бы напечатать его значение в последней строке. Однако этот код работает так, как мы ожидали! Способ push принимает один символ в качестве свойства и добавляет его к String. В приложении 8-17 показан код, добавляющий букву “l” к String используя способ push. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-17/src/main.rs:here}} Приложение 8-17: Добавление одного символа в String значение используя push В результате s будет содержать lol. Объединение строк с помощью оператора + или макроса format! Часто хочется объединять две существующие строки. Один из возможных способов — это использование оператора + из приложения 8-18: {{#rustdoc_include ../listings/ch08-common-collections/listing-08-18/src/main.rs:here}} Приложение 8-18: Использование оператора + для объединения двух значений String в новое String значение Строка s3 будет содержать Hello, world!. Причина того, что s1 после добавления больше недействительна и причина, по которой мы использовали ссылку на s2 имеют отношение к сигнатуре вызываемого способа при использовании оператора +. Оператор + использует способ add, чья сигнатура выглядит примерно так: fn add(self, s: &str) -> String { В встроенной библиотеке вы увидите способ add определённым с использованием обобщённых и связанных видов. Здесь мы видим сигнатуру с определенными видами, заменяющими обобщённый, что происходит когда вызывается данный способ со значениями String. Мы обсудим обобщённые виды в Главе 10. Эта сигнатура даёт нам ключ для понимания особенностей оператора +. Во-первых, перед s2 мы видим &, что означает что мы складываем ссылку на вторую строку с первой строкой. Это происходит из-за свойства s в функции add: мы можем добавить только &str к String; мы не можем сложить два значения String. Но подождите — вид &s2 это &String, а не &str, как определён второй свойство в add. Так почему код в приложении 8-18 собирается? Причина, по которой мы можем использовать &s2 в вызове add заключается в том, что сборщик может принудительно привести (coerce) переменная вида &String к виду &str. Когда мы вызываем способ add в Rust используется принудительное приведение (deref coercion), которое превращает &s2 в &s2[..]. Мы подробно обсудим принудительное приведение в Главе 15. Так как add не забирает во владение свойство s, s2 по прежнему будет действительной строкой String после применения действия. Во-вторых, как можно видеть в сигнатуре, add забирает во владение self, потому что self не имеет &. Это означает, что s1 в приложении 8-18 будет перемещён в вызов add и больше не будет действителен после этого вызова. Не смотря на то, что код let s3 = s1 + &s2; выглядит как будто он скопирует обе строки и создаёт новую, эта указание фактически забирает во владение переменную s1, присоединяет к ней копию содержимого s2, а затем возвращает владение результатом. Другими словами, это выглядит как будто код создаёт множество копий, но это не так; данная реализация более эффективна, чем копирование. Если нужно объединить несколько строк, поведение оператора + становится громоздким: {{#rustdoc_include ../listings/ch08-common-collections/no-listing-01-concat-multiple-strings/src/main.rs:here}} Здесь переменная s будет содержать tic-tac-toe. С множеством символов + и \" становится трудно понять, что происходит. Для более сложного комбинирования строк можно использовать макрос format!: {{#rustdoc_include ../listings/ch08-common-collections/no-listing-02-format/src/main.rs:here}} Этот код также устанавливает переменную s в значение tic-tac-toe. Макрос format! работает тем же способом что макрос println!, но вместо вывода на экран возвращает вид String с содержимым. Исполнение кода с использованием format! значительно легче читается, а также код, сгенерированный макросом format!, использует ссылки, а значит не забирает во владение ни один из его свойств.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Обновление строковых данных","id":"139","title":"Обновление строковых данных"},"14":{"body":"В этой главе и во всей книге мы будем выполнять некоторые приказы, используемые в окне вызова. Строки, которые вы должны вводить в окне вызова, начинаются с $. Вам не нужно вводить символ $; это подсказка приказной строки, отображаемая для обозначения начала каждой приказы. Строки, которые не начинаются с $, обычно показывают вывод предыдущей приказы. Кроме того, в примерах, своеобразных для PowerShell, будет использоваться >, а не $.","breadcrumbs":"С чего начать » Установка » Условные обозначения приказной строки","id":"14","title":"Условные обозначения приказной строки"},"140":{"body":"Доступ к отдельным символам в строке, при помощи ссылки на них по порядковому казателю, является допустимой и распространённой операцией во многих других языках программирования. Тем не менее, если вы попытаетесь получить доступ к частям String, используя синтаксис упорядочевания в Rust, то вы получите ошибку. Рассмотрим неверный код в приложении 8-19. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-19/src/main.rs:here}} Приложение 8-19: Попытка использовать синтаксис порядкового казателя со строкой Этот код приведёт к следующей ошибке: {{#include ../listings/ch08-common-collections/listing-08-19/output.txt}} Ошибка и примечание говорит, что в Rust строки не поддерживают упорядочевание. Но почему так? Чтобы ответить на этот вопрос, нужно обсудить то, как Rust хранит строки в памяти. Внутреннее представление Вид String является оболочкой над видом Vec<u8>. Давайте посмотрим на несколько закодированных корректным образом в UTF-8 строк из примера приложения 8-14. Начнём с этой: {{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:spanish}} В этом случае len будет 4, что означает вектор, хранит строку \"Hola\" длиной 4 байта. Каждая из этих букв занимает 1 байт при кодировании в UTF-8. Но как насчёт следующей строки? (Обратите внимание, что эта строка начинается с заглавной кириллической \"З\", а не цифры 3.) {{#rustdoc_include ../listings/ch08-common-collections/listing-08-14/src/main.rs:russian}} Отвечая на вопрос, какова длина строки, вы можете ответить 12. Однако ответ Rust - 24, что равно числу байт, необходимых для кодирования «Здравствуйте» в UTF-8, так происходит, потому что каждое скалярное значение Unicode символа в этой строке занимает 2 байта памяти. Следовательно, порядковый казательпо байтам строки не всегда бы соответствовал действительному скалярному Unicode значению. Для отображения рассмотрим этот недопустимый код Rust: let hello = \"Здравствуйте\";\nlet answer = &hello[0]; Каким должно быть значение переменной answer? Должно ли оно быть значением первой буквы З? При кодировке в UTF-8, первый байт значения З равен 208, а второй - 151, поэтому значение в answer на самом деле должно быть 208, но само по себе 208 не является действительным символом. Возвращение 208, скорее всего не то, что хотел бы получить пользователь: ведь он ожидает первую букву этой строки; тем не менее, это единственный байт данных, который в Rust доступен по порядковому указателю 0. Пользователи обычно не хотят получить значение байта, даже если строка содержит только латинские буквы: если &\"hello\"[0] было бы допустимым кодом, который вернул значение байта, то он вернул бы 104, а не h. Таким образом, чтобы предотвратить возврат непредвиденного значения, вызывающего ошибки которые не могут быть сразу обнаружены, Rust просто не собирает такой код и предотвращает недопонимание на ранних этапах процесса разработки. Байты, скалярные значения и кластеры графем! Боже мой! Ещё один момент, касающийся UTF-8, заключается в том, что на самом деле существует три способа рассмотрения строк с точки зрения Rust: как байты, как скалярные значения и как кластеры графем (самая близкая вещь к тому, что мы назвали бы буквами ). Если посмотреть на слово языка хинди «नमस्ते», написанное в транскрипции Devanagari, то оно хранится как вектор значений u8 который выглядит следующим образом: [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135] Эти 18 байт являются именно тем, как компьютеры в конечном итоге сохранят в памяти эту строку. Если мы посмотрим на 18 байт как на скалярные Unicode значения, которые являются Rust видом char, то байты будут выглядеть так: ['न', 'म', 'स', '्', 'त', 'े'] Здесь есть шесть значений вида char, но четвёртый и шестой являются не буквами: они диакритики, особые обозначения которые не имеют смысла сами по себе. Наконец, если мы посмотрим на байты как на кластеры графем, то получим то, что человек назвал бы словом на хинди состоящем из четырёх букв: [\"न\", \"म\", \"स्\", \"ते\"] Rust предоставляет различные способы преобразования необработанных строковых данных, которые компьютеры хранят так, чтобы каждой программе можно было выбрать необходимую преобразование, независимо от того, на каком человеческом языке представлены эти данные. Последняя причина, по которой Rust не позволяет нам упорядочивать String для получения символов является то, что программисты ожидают, что действия упорядочевания всегда имеют постоянное время (O(1)) выполнения. Но невозможно обеспечить такую производительность для String, потому что Rust понадобилось бы пройтись по содержимому от начала до порядкового указателя, чтобы определить, сколько было действительных символов.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Упорядочевание в строках","id":"140","title":"Упорядочевание в строках"},"141":{"body":"Упорядочевание строк часто является плохой идеей, потому что не ясно каким должен быть возвращаемый вид такой действия: байтовым значением, символом, кластером графем или срезом строки. Поэтому Rust просит вас быть более определенным, если действительно требуется использовать порядковые указатели для создания срезов строк. Вместо упорядочевания с помощью числового порядкового казателя [], вы можете использовать оператор ряда[] при создании среза строки в котором содержится указание на то, срез каких байтов надо делать: let hello = \"Здравствуйте\"; let s = &hello[0..4]; Здесь переменная s будет вида &str который содержит первые 4 байта строки. Ранее мы упоминали, что каждый из этих символов был по 2 байта, что означает, что s будет содержать \"Зд\". Что бы произошло, если бы мы использовали &hello[0..1]? Ответ: Rust бы запаниковал во время выполнения точно так же, как если бы обращались к недействительному порядковому указателю в векторе: {{#include ../listings/ch08-common-collections/output-only-01-not-char-boundary/output.txt}} Вы должны использовать ряды для создания срезов строк с осторожностью, потому что это может привести к сбою вашей программы.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Срезы строк","id":"141","title":"Срезы строк"},"142":{"body":"Лучший способ работать с фрагментами строк — чётко указать, нужны ли вам символы или байты. Для отдельных скалярных значений в Юникоде используйте способ chars. Вызов chars у \"Зд\" выделяет и возвращает два значения вида char, и вы можете выполнить повторение по результату для доступа к каждому элементу: for c in \"Зд\".chars() { println!(\"{c}\");\n} Код напечатает следующее: З\nд Способ bytes возвращает каждый байт, который может быть подходящим в другой предметной области: for b in \"Зд\".bytes() { println!(\"{b}\");\n} Этот код выведет четыре байта, составляющих эту строку: 208\n151\n208\n180 Но делая так, обязательно помните, что валидные скалярные Unicode значения могут состоять более чем из одного байта. Извлечение кластеров графем из строк, как в случае с языком хинди, является сложным, поэтому эта функциональность не предусмотрена встроенной библиотекой. На crates.io есть доступные библиотеки, если Вам нужен данный функционал.","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Способы для перебора строк","id":"142","title":"Способы для перебора строк"},"143":{"body":"Подводя итог, становится ясно, что строки сложны. Различные языки программирования реализуют различные варианты того, как представить эту сложность для программиста. В Rust решили сделать правильную обработку данных String поведением по умолчанию для всех программ Rust, что означает, что программисты должны заранее продумать обработку UTF-8 данных. Этот соглашение раскрывает большую сложность строк, чем в других языках программирования, но это предотвращает от необходимости обрабатывать ошибки, связанные с не-ASCII символами которые могут появиться в ходе разработки позже. Хорошая новость состоит в том что стандартная библиотека предлагает множество функциональных возможностей, построенных на основе видов String и &str, чтобы помочь правильно обрабатывать эти сложные ситуации. Обязательно ознакомьтесь с документацией для полезных способов, таких как contains для поиска в строке и replace для замены частей строки другой строкой. Давайте переключимся на что-то немного менее сложное: HashMap!","breadcrumbs":"Общие собрания » Хранение закодированного текста UTF-8 со строками » Строки не так просты","id":"143","title":"Строки не так просты"},"144":{"body":"Последняя собрание, которую мы рассмотрим, будет hash map (хеш-карта). Вид HashMap<K, V> хранит ключи вида K на значения вида V. Данная структура организует и хранит данные с помощью функции хеширования . Во множестве языков программирования реализована данная структура, но часто с разными наименованиями: такими как hash, map, object, hash table, dictionary или ассоциативный массив. Хеш-карты полезны, когда нужно искать данные не используя порядковый указатель, как это например делается в векторах, а с помощью ключа, который может быть любого вида. Например, в игре вы можете отслеживать счёт каждой приказы в хеш-карте, в которой каждый ключ - это название приказы, а значение - счёт приказы. Имея имя приказы, вы можете получить её счёт из хеш-карты. В этом разделе мы рассмотрим основной API хеш-карт. Остальной набор полезных функций скрывается в объявлении вида HashMap<K, V>. Как и прежде, советуем обратиться к документации по встроенной библиотеке для получения дополнительной сведений.","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Хранение ключей со связанными значениями в HashMap","id":"144","title":"Хранение ключей со связанными значениями в HashMap"},"145":{"body":"Создать пустую хеш-карту можно с помощью new, а добавить в неё элементы - с помощью insert. В приложении 8-20 мы отслеживаем счёт двух приказов, синей Blue и жёлтой Yellow . Синяя приказ набрала 10 очков, а жёлтая приказ - 50. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-20/src/main.rs:here}} Приложение 8-20: Создание новой хеш-карты и вставка в неё пары ключей и значений Обратите внимание, что нужно сначала указать строку use std::collections::HashMap; для её подключения из собраний встроенной библиотеки. Из трёх собраний данная является наименее используемой, поэтому она не подключается в область видимости функцией самостоятельного импорта (prelude). Хеш-карты также имеют меньшую поддержку со стороны встроенной библиотеки; например, нет встроенного макроса для их конструирования. Подобно векторам, хеш-карты хранят свои данные в куче. Здесь вид HashMap имеет в качестве вида ключей String, а в качестве вида значений вид i32. Как и векторы, HashMap однородны: все ключи должны иметь одинаковый вид и все значения должны иметь тоже одинаковый вид.","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Создание новой хеш-карты","id":"145","title":"Создание новой хеш-карты"},"146":{"body":"Мы можем получить значение из HashMap по ключу, с помощью метода get, как показано в приложении 8-21. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-21/src/main.rs:here}} Приложение 8-21: Доступ к очкам приказы \"Blue\", которые хранятся в хеш-карте Здесь score будет иметь количество очков, связанное с приказом \"Blue\", результат будет 10. Способ get возвращает Option<&V>; если для какого-то ключа нет значения в HashMap, get вернёт None. Из-за такого подхода программе следует обрабатывать Option, вызывая copied для получения Option<i32> вместо Option<&i32>, затем unwrap_or для установки score в ноль, если scores не содержит данных по этому ключу. Мы можем перебирать каждую пару ключ/значение в HashMap таким же образом, как мы делали с векторами, используя цикл for: {{#rustdoc_include ../listings/ch08-common-collections/no-listing-03-iterate-over-hashmap/src/main.rs:here}} Этот код будет печатать каждую пару в произвольном порядке: Yellow: 50\nBlue: 10","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Доступ к данным в HashMap","id":"146","title":"Доступ к данным в HashMap"},"147":{"body":"Для видов, которые реализуют типаж Copy, например i32, значения копируются в HashMap. Для значений со владением, таких как String, значения будут перемещены в хеш-карту и она станет владельцем этих значений, как показано в приложении 8-22. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-22/src/main.rs:here}} Приложение 8-22: Показывает, что ключи и значения находятся во владении HashMap, как только они были вставлены Мы не можем использовать переменные field_name и field_value после того, как их значения были перемещены в HashMap вызовом метода insert. Если мы вставим в HashMap ссылки на значения, то они не будут перемещены в HashMap. Значения, на которые указывают ссылки, должны быть действительными хотя бы до тех пор, пока хеш-карта действительна. Мы поговорим подробнее об этих вопросах в разделе \"Валидация ссылок при помощи времён жизни\" главы 10.","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Хеш-карты и владение","id":"147","title":"Хеш-карты и владение"},"148":{"body":"Хотя количество ключей и значений может увеличиваться в HashMap, каждый ключ может иметь только одно значение, связанное с ним в один момент времени (обратное утверждение неверно: приказы \"Blue\" и \"Yellow\" могут хранить в хеш-карте scores одинаковое количество очков, например 10). Когда вы хотите изменить данные в хеш-карте, необходимо решить, как обрабатывать случай, когда ключ уже имеет назначенное значение. Можно заменить старое значение новым, полностью пренебрегая старое. Можно сохранить старое значение и пренебрегать новое, или добавлять новое значение, если только ключ ещё не имел значения. Или можно было бы объединить старое значение и новое значение. Давайте посмотрим, как сделать каждый из вариантов! Перезапись старых значений Если мы вставим ключ и значение в HashMap, а затем вставим тот же ключ с новым значением, то старое значение связанное с этим ключом, будет заменено на новое. Даже несмотря на то, что код в приложении 8-23 вызывает insert дважды, хеш-карта будет содержать только одну пару ключ/значение, потому что мы вставляем значения для одного и того же ключа - ключа приказы \"Blue\". {{#rustdoc_include ../listings/ch08-common-collections/listing-08-23/src/main.rs:here}} Приложение 8-23: Замена значения, хранимого в определенном ключе Код напечатает {\"Blue\": 25}. Начальное значение 10 было перезаписано. Вставка значения только в том случае, когда ключ не имеет значения Обычно проверяют, существует ли определенный ключ в хеш-карте со значением, а затем предпринимаются следующие действия: если ключ существует в хеш-карте, существующее значение должно оставаться таким, какое оно есть. Если ключ не существует, то вставляют его и значение для него. Хеш-карты имеют для этого особый API, называемый entry , который принимает ключ для проверки в качестве входного свойства. Возвращаемое значение метода entry - это перечисление Entry, с двумя вариантами: первый представляет значение, которое может существовать, а второй говорит о том, что значение отсутствует. Допустим, мы хотим проверить, имеется ли ключ и связанное с ним значение для приказы \"Yellow\". Если хеш-карта не имеет значения для такого ключа, то мы хотим вставить значение 50. То же самое мы хотим проделать и для приказы \"Blue\". Используем API entry в коде приложения 8-24. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-24/src/main.rs:here}} Приложение 8-24: Использование метода entry для вставки значения только в том случае, когда ключ не имеет значения Способ or_insert определён в Entry так, чтобы возвращать изменяемую ссылку на соответствующее значение ключа внутри варианта перечисления Entry, когда этот ключ существует, а если его нет, то вставлять свойство в качестве нового значения этого ключа и возвращать изменяемую ссылку на новое значение. Эта техника намного чище, чем самостоятельное написание логики и, кроме того, она более безопасна и согласуется с правилами заимствования. При выполнении кода приложения 8-24 будет напечатано {\"Yellow\": 50, \"Blue\": 10}. Первый вызов метода entry вставит ключ для приказы \"Yellow\" со значением 50, потому что для жёлтой приказы ещё не имеется значения в HashMap. Второй вызов entry не изменит хеш-карту, потому что для ключа приказы \"Blue\" уже имеется значение 10. Создание нового значения на основе старого значения Другим распространённым вариантом использования хеш-карт является поиск значения по ключу, а затем обновление этого значения на основе старого значения. Например, в приложении 8-25 показан код, который подсчитывает, сколько раз определённое слово встречается в некотором тексте. Мы используем HashMap со словами в качестве ключей и увеличиваем соответствующее слову значение, чтобы отслеживать, сколько раз мы встретили это слово. Если мы впервые встретили слово, то сначала вставляем значение 0. {{#rustdoc_include ../listings/ch08-common-collections/listing-08-25/src/main.rs:here}} Приложение 8-25: Подсчёт количества вхождений слов с использованием хеш-карты, которая хранит слова и счётчики Этот код напечатает {\"world\": 2, \"hello\": 1, \"wonderful\": 1}. Если вы увидите, что пары ключ/значение печатаются в другом порядке, то вспомните, что мы писали в секции \"Доступ к данным в HashMap\" , что повторение по хеш-карте происходит в произвольном порядке. Способ split_whitespace возвращает повторительпо срезам строки, разделённых пробелам, для строки text. Способ or_insert возвращает изменяемую ссылку (&mut V) на значение ключа. Мы сохраняем изменяемую ссылку в переменной count, для этого, чтобы присвоить переменной значение, необходимо произвести разыменование с помощью звёздочки (*). Изменяемая ссылка удаляется сразу же после выхода из области видимости цикла for, поэтому все эти изменения безопасны и согласуются с правилами заимствования.","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Обновление данных в HashMap","id":"148","title":"Обновление данных в HashMap"},"149":{"body":"По умолчанию HashMap использует функцию хеширования SipHash , которая может противостоять атакам класса отказ в обслуживании, Denial of Service (DoS) с использованием хеш-таблиц siphash . Это не самый быстрый из возможных алгоритмов хеширования, в данном случае производительность идёт на соглашение с обеспечением лучшей безопасности. Если после профилирования вашего кода окажется, что хеш-функция, используемая по умолчанию, очень медленная, вы можете заменить её используя другой hasher. Hasher - это вид, реализующий трейт BuildHasher. Подробнее о типажах мы поговорим в Главе 10. Вам совсем не обязательно реализовывать свою собственную функцию хеширования; crates.io имеет достаточное количество библиотек, предоставляющих разные реализации hasher с множеством общих алгоритмов хеширования.","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Функция хеширования","id":"149","title":"Функция хеширования"},"15":{"body":"Если вы используете Linux или macOS, пожалуйста, выполните следующую приказ: $ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh Приказ загружает сценарий и запускает установку средства rustup, который устанавливает последнюю безотказную исполнение Rust. Вам может быть предложено ввести пароль. Если установка прошла успешно, появится следующая строка: Rust is installed now. Great! Вам также понадобится составитель (linker) — программа, которую Rust использует для объединения своих собранных выходных данных в один файл. Скорее всего, он у вас уже есть. При возникновении ошибок объединения, вам следует установить сборщик C, который обычно будет включать в себя и составитель. Сборщик C также полезен, потому что некоторые распространённые пакеты Rust зависят от кода C и нуждаются в сборщике C. На macOS вы можете получить сборщик C, выполнив приказ: $ xcode-select --install Пользователи Linux, как правило, должны устанавливать GCC или Clang в соответствии с документацией их дистрибутива. Например, при использовании Ubuntu можно установить пакет build-essential.","breadcrumbs":"С чего начать » Установка » Установка rustup на Linux или macOS","id":"15","title":"Установка rustup на Linux или macOS"},"150":{"body":"Векторы, строки и хеш-карты предоставят большое количество функционала для программ, когда необходимо сохранять, получать доступ и модифицировать данные. Теперь вы готовы решить следующие учебные задания: Есть список целых чисел. Создайте функцию, используйте вектор и верните из списка: среднее значение; медиану (значение элемента из середины списка после его сортировки); моду списка (mode of list, то значение которое встречается в списке наибольшее количество раз; HashMap будет полезна в данном случае). Преобразуйте строку в кодировку \"поросячьей латыни\" (Pig Latin). Первая согласная каждого слова перемещается в конец и к ней добавляется окончание \"ay\", так \"first\" станет \"irst-fay\". Слову, начинающемуся на гласную, в конец добавляется \"hay\" (\"apple\" становится \"apple-hay\"). Помните о подробностях работы с кодировкой UTF-8! Используя хеш-карту и векторы, создайте текстовый внешняя оболочка позволяющий пользователю добавлять имена сотрудников к названию отдела компании. Например, \"Add Sally to Engineering\" или \"Add Amir to Sales\". Затем позвольте пользователю получить список всех людей из отдела или всех людей в компании, отсортированных по отделам в алфавитном порядке. Документация API встроенной библиотеки описывает методы у векторов, строк и HashMap. Советуем воспользоваться ей при решении упражнений. Потихоньку мы переходим к более сложным программам, в которых действия могут потерпеть неудачу. Наступило наилучшее время для обсуждения обработки ошибок.","breadcrumbs":"Общие собрания » Хранение ключей со связанными значениями в HashMap » Итоги","id":"150","title":"Итоги"},"151":{"body":"Возникновение ошибок в ходе выполнения программ — это суровая действительность в жизни программного обеспечения, поэтому Rust имеет ряд функций для обработки ситуаций, в которых что-то идёт не так. Во многих случаях Rust требует, чтобы вы признали возможность ошибки и предприняли некоторые действия, прежде чем ваш код будет собран. Это требование делает вашу программу более надёжной, обеспечивая, что вы обнаружите ошибки и обработаете их надлежащим образом, прежде чем развернёте свой код в производственной среде! В Rust ошибки группируются на две основные разряды: исправимые (recoverable) и неисправимые (unrecoverable). В случае исправимой ошибки, такой как файл не найден , мы, скорее всего, просто хотим сообщить о проблеме пользователю и повторить действие. Неисправимые ошибки всегда являются симптомами изъянов в коде, например, попытка доступа к ячейке за пределами границ массива, и поэтому мы хотим немедленно остановить программу. Большинство языков не различают эти два вида ошибок и обрабатывают оба вида одинаково, используя такие механизмы, как исключения. В Rust нет исключений. Вместо этого он имеет вид Result<T, E> для обрабатываемых (исправимых) ошибок и макрос panic!, который останавливает выполнение, когда программа встречает необрабатываемую (неисправимую) ошибку. Сначала эта глава расскажет про вызов panic!, а потом расскажет о возврате значений Result<T, E>. Кроме того, мы рассмотрим, что нужно учитывать при принятии решения о том, следует ли попытаться исправить ошибку или остановить выполнение.","breadcrumbs":"Обработка ошибок » Обработка ошибок","id":"151","title":"Обработка ошибок"},"152":{"body":"Иногда в коде происходят плохие вещи, и вы ничего не можете с этим поделать. В этих случаях у Rust есть макрос panic! На практике существует два способа вызвать панику: путём выполнения действия, которое вызывает панику в нашем коде (например, обращение к массиву за пределами его размера) или путём явного вызова макроса panic!. В обоих случаях мы вызываем панику в нашей программе. По умолчанию паника выводит сообщение об ошибке, раскручивает и очищает стек вызовов, и завершают работу. С помощью переменной окружения вы также можете заставить Rust отображать стек вызовов при возникновении паники, чтобы было легче отследить источник паники.","breadcrumbs":"Обработка ошибок » Неустранимые ошибки с panic! » Неустранимые ошибки с макросом panic!","id":"152","title":"Неустранимые ошибки с макросом panic!"},"153":{"body":"По умолчанию, когда происходит паника, программа начинает процесс раскрутки стека , означающий в Rust проход обратно по стеку вызовов и очистку данных для каждой обнаруженной функции. Тем не менее, этот обратный проход по стеку и очистка генерируют много работы. Rust как иное решение предоставляет вам возможность немедленного прерывания (aborting), которое завершает работу программы без очистки. Память, которую использовала программа, должна быть очищена операционной системой. Если в вашем проекте нужно насколько это возможно сделать маленьким исполняемый файл, вы можете переключиться с варианта раскрутки стека на вариант прерывания при панике, добавьте panic = 'abort' в раздел [profile] вашего Cargo.toml файла. Например, если вы хотите прервать панику в режиме релиза, добавьте это: [profile.release]\npanic = 'abort' Давайте попробуем вызвать panic! в простой программе: Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/no-listing-01-panic/src/main.rs}} При запуске программы, вы увидите что-то вроде этого: {{#include ../listings/ch09-error-handling/no-listing-01-panic/output.txt}} Выполнение макроса panic! вызывает сообщение об ошибке, содержащееся в двух последних строках. Первая строка показывает сообщение паники и место в исходном коде, где возникла паника: src/main.rs:2:5 указывает, что это вторая строка, пятый символ внутри нашего файла src/main.rs В этом случае указанная строка является частью нашего кода, и если мы перейдём к этой строке, мы увидим вызов макроса panic!. В других случаях вызов panic! мог бы произойти в стороннем коде, который вызывает наш код, тогда имя файла и номер строки для сообщения об ошибке будет из чужого кода, где макрос panic! выполнен, а не из строк нашего кода, которые в конечном итоге привели к выполнению panic!. Мы можем использовать обратную трассировку вызовов функций которые вызвали panic! чтобы выяснить, какая часть нашего кода вызывает проблему. Мы обсудим обратную трассировку более подробно далее.","breadcrumbs":"Обработка ошибок » Неустранимые ошибки с panic! » Раскручивать стек или прерывать выполнение программы в ответ на панику?","id":"153","title":"Раскручивать стек или прерывать выполнение программы в ответ на панику?"},"154":{"body":"Давайте посмотрим на другой пример, где, вызов panic! происходит в сторонней библиотеке из-за ошибки в нашем коде (а не как в примере ранее, из-за вызова макроса нашим кодом напрямую). В приложении 9-1 приведён код, который пытается получить доступ по порядковому указателю в векторе за пределами допустимого рядазначений порядкового указателя. Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/listing-09-01/src/main.rs}} Приложение 9-1: Попытка доступа к элементу за пределами вектора, которая вызовет panic! Здесь мы пытаемся получить доступ к 100-му элементу вектора (который находится по порядковому указателю 99, потому что упорядочевание начинается с нуля), но вектор имеет только 3 элемента. В этой ситуации, Rust будет вызывать панику. Использование [] должно возвращать элемент, но вы передаёте неверный порядковый указатель: не существует элемента, который Rust мог бы вернуть. В языке C, например, попытка прочесть за пределами конца структуры данных (в нашем случае векторе) приведёт к неопределённому поведению, undefined behavior, UB . Вы всё равно получите значение, которое находится в том месте памяти компьютера, которое соответствовало бы этому элементу в векторе, несмотря на то, что память по тому адресу совсем не принадлежит вектору (всё просто: C рассчитал бы место хранения элемента с порядковым казателем 99 и считал бы то, что там хранится, упс). Это называется чтением за пределом буфера, buffer overread, и может привести к уязвимостям безопасности. Если злоумышленник может манипулировать порядковым казателем таким образом, то у него появляется возможность читать данные, которые он не должен иметь возможности читать. Чтобы защитить вашу программу от такого рода уязвимостей при попытке прочитать элемент с порядковым казателем, которого не существует, Rust остановит выполнение и откажется продолжить работу программы. Давайте попробуем так сделать и посмотрим на поведение Rust: {{#include ../listings/ch09-error-handling/listing-09-01/output.txt}} Следующая строка говорит, что мы можем установить переменную среды RUST_BACKTRACE, чтобы получить обратную трассировку того, что именно стало причиной ошибки. Обратная трассировка создаёт список всех функций, которые были вызваны до какой-то определённой точки выполнения программы. Обратная трассировка в Rust работает так же, как и в других языках. По этому предлагаем вам читать данные обратной трассировки как и везде - читать сверху вниз, пока не увидите сведения о файлах написанных вами. Это место, где возникла проблема. Другие строки, которые выше над строками с упоминанием наших файлов, - это код, который вызывается нашим кодом; строки ниже являются кодом, который вызывает наш код. Эти строки могут включать основной код Rust, код встроенной библиотеки или используемые крейты. Давайте попробуем получить обратную трассировку с помощью установки переменной среды RUST_BACKTRACE в любое значение, кроме 0. Приложение 9-2 показывает вывод, подобный тому, что вы увидите. $ RUST_BACKTRACE=1 cargo run\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main.rs:4:5\nstack backtrace: 0: rust_begin_unwind at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/std/src/panicking.rs:584:5 1: core::panicking::panic_fmt at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/panicking.rs:142:14 2: core::panicking::panic_bounds_check at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/panicking.rs:84:5 3: <usize as core::slice::index::SliceIndex<[T]>>::index at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/slice/index.rs:242:10 4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/slice/index.rs:18:9 5: <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/alloc/src/vec/mod.rs:2591:9 6: panic::main at ./src/main.rs:4:5 7: core::ops::function::FnOnce::call_once at /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/function.rs:248:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace. Приложение 9-2: Обратная трассировка, сгенерированная вызовом panic!, когда установлена переменная окружения RUST_BACKTRACE Тут много вывода! Вывод, который вы увидите, может отличаться от представленного, в зависимости от вашей операционной системы и исполнения Rust. Для того, чтобы получить обратную трассировку с этой сведениями, должны быть включены символы отладки, debug symbols. Символы отладки включены по умолчанию при использовании cargo build или cargo run без флага --release, как у нас в примере. В выводе обратной трассировки приложения 9-2, строка #6 указывает на строку в нашем проекте, которая вызывала проблему: строка 4 из файла src/main.rs. Если мы не хотим, чтобы наша программа запаниковала, мы должны начать исследование с места, на которое указывает первая строка с упоминанием нашего файла. В приложении 9-1, где мы для отображения обратной трассировки сознательно написали код, который паникует, способ исправления паники состоит в том, чтобы не запрашивать элемент за пределами ряда значений порядковых указателей вектора. Когда ваш код запаникует в будущем, вам нужно будет выяснить, какое выполняющееся кодом действие, с какими значениями вызывает панику и что этот код должен делать вместо этого. Мы вернёмся к обсуждению макроса panic!, и того когда нам следует и не следует использовать panic! для обработки ошибок в разделе \"panic! или НЕ panic!\" этой главы. Далее мы рассмотрим, как восстановить выполнение программы после исправляемых ошибок, использующих вид Result.","breadcrumbs":"Обработка ошибок » Неустранимые ошибки с panic! » Использование обратной трассировки panic!","id":"154","title":"Использование обратной трассировки panic!"},"155":{"body":"Многие ошибки являются не настолько критичными, чтобы останавливать выполнение программы. Иногда, когда в функции происходит сбой, необходима просто правильная преобразование и обработка ошибки. К примеру, при попытке открыть файл может произойти ошибка из-за отсутствия файла. Вы, возможно, захотите исправить ситуацию и создать новый файл вместо остановки программы. Вспомните раздел [\"Обработка потенциального сбоя с помощью Result\"] главы 2: мы использовали там перечисление Result, имеющее два варианта, Ok и Err для обработки сбоев. Само перечисление определено следующим образом: enum Result<T, E> { Ok(T), Err(E),\n} Виды T и E являются свойствами обобщённого вида: мы обсудим обобщённые виды более подробно в Главе 10. Все что вам нужно знать прямо сейчас - это то, что T представляет вид значения, которое будет возвращено в случае успеха внутри варианта Ok, а E представляет вид ошибки, которая будет возвращена при сбое внутри варианта Err. Так как вид Result имеет эти обобщённые свойства (generic type parameters), мы можем использовать вид Result и функции, которые определены для него, в разных ситуациях, когда вид успешного значение и значения ошибки, которые мы хотим вернуть, отличаются. Давайте вызовем функцию, которая возвращает значение Result, потому что может потерпеть неудачу. В приложении 9-3 мы пытаемся открыть файл. Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/listing-09-03/src/main.rs}} Приложение 9-3: Открытие файла File::open возвращает значения вида Result<T, E>. Универсальный вид T в реализации File::open соответствует виду успешно полученного значения, std::fs::File, а именно дескриптору файла. Вид E, используемый для значения в случае возникновения ошибки, - std::io::Error. Такой возвращаемый вид означает, что вызов File::open может быть успешным и вернуть дескриптор файла, из которого мы можем читать или в который можем писать. Также вызов функции может завершиться неудачей: например, файл может не существовать, или у нас может не быть разрешения на доступ к файлу. Функция File::open должна иметь способ сообщить нам об успехе или неудаче и в то же время дать нам либо дескриптор файла, либо сведения об ошибке. Эту возможность как раз и предоставляет перечисление Result. В случае успеха File::open значением переменной greeting_file_result будет экземпляр Ok, содержащий дескриптор файла. В случае неудачи значение в переменной greeting_file_result будет экземпляром Err, содержащим дополнительную сведения о том, какая именно ошибка произошла. Необходимо дописать в код приложения 9-3 выполнение разных действий в зависимости от значения, которое вернёт вызов File::open. Приложение 9-4 показывает один из способов обработки Result - пользуясь основным средством языка, таким как выражение match, рассмотренным в Главе 6. Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/listing-09-04/src/main.rs}} Приложение 9-4: Использование выражения match для обработки возвращаемых вариантов вида Result Обратите внимание, что также как перечисление Option, перечисление Result и его варианты, входят в область видимости благодаря авто-импорту (prelude), поэтому не нужно указывать Result:: перед использованием вариантов Ok и Err в ветках выражения match. Если результатом будет Ok, этот код вернёт значение file из варианта Ok, а мы затем присвоим это значение файлового дескриптора переменной greeting_file. После match мы можем использовать дескриптор файла для чтения или записи. Другая ветвь match обрабатывает случай, где мы получаем значение Err после вызова File::open. В этом примере мы решили вызвать макрос panic!. Если в нашей текущей папки нет файла с именем hello.txt и мы выполним этот код, то мы увидим следующее сообщение от макроса panic!: {{#include ../listings/ch09-error-handling/listing-09-04/output.txt}} Как обычно, данное сообщение точно говорит, что пошло не так.","breadcrumbs":"Обработка ошибок » Устранимые ошибки с Result » Исправимые ошибки с Result","id":"155","title":"Исправимые ошибки с Result"},"156":{"body":"Код в приложении 9-4 будет вызывать panic! независимо от того, почему вызов File::open не удался. Однако мы хотим предпринять различные действия для разных причин сбоя. Если открытие File::open не удалось из-за отсутствия файла, мы хотим создать файл и вернуть его дескриптор. Если вызов File::open не удался по любой другой причине - например, потому что у нас не было прав на открытие файла, то все равно мы хотим вызвать panic! как у нас сделано в приложении 9-4. Для этого мы добавляем выражение внутреннего match, показанное в приложении 9-5. Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/listing-09-05/src/main.rs}} Приложение 9-5: Обработка различных ошибок разными способами Видом значения возвращаемого функцией File::open внутри Err варианта является io::Error, структура из встроенной библиотеки. Данная структура имеет способ kind, который можно вызвать для получения значения io::ErrorKind. Перечисление io::ErrorKind из встроенной библиотеки имеет варианты, представляющие различные виды ошибок, которые могут появиться при выполнении действий в io. Вариант, который мы хотим использовать, это ErrorKind::NotFound, который даёт сведения, о том, что файл который мы пытаемся открыть ещё не существует. Итак, во второй строке мы вызываем сопоставление шаблона с переменной greeting_file_result и попадаем в ветку с обработкой ошибки, но также у нас есть внутренняя проверка для сопоставления error.kind() ошибки. Условие, которое мы хотим проверить во внутреннем match, заключается в том, является ли значение, возвращаемое error.kind(), вариантом NotFound перечисления ErrorKind. Если это так, мы пытаемся создать файл с помощью функции File::create. Однако, поскольку вызов File::create тоже может завершиться ошибкой, нам нужна обработка ещё одной ошибки, теперь уже во внутреннем выражении match. Заметьте: если файл не может быть создан, выводится другое, особое сообщение об ошибке. Вторая же ветка внешнего match (который обрабатывает вызов error.kind()), остаётся той же самой - в итоге программа паникует при любой ошибке, кроме ошибки отсутствия файла.","breadcrumbs":"Обработка ошибок » Устранимые ошибки с Result » Обработка различных ошибок с помощью match","id":"156","title":"Обработка различных ошибок с помощью match"},"157":{"body":"Как много match! Выражение match является очень полезным, но в то же время довольно примитивным. В главе 13 вы узнаете о замыканиях (closures), которые используются во многих способах вида Result<T, E>. Эти способы помогают быть более лаконичным, чем использование match при работе со значениями Result<T, E> в вашем коде. Например, вот другой способ написать ту же логику, что показана в Приложении 9-5, но с использованием замыканий и способа unwrap_or_else: use std::fs::File;\nuse std::io::ErrorKind; fn main() { let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| { if error.kind() == ErrorKind::NotFound { File::create(\"hello.txt\").unwrap_or_else(|error| { panic!(\"Problem creating the file: {:?}\", error); }) } else { panic!(\"Problem opening the file: {:?}\", error); } });\n} Несмотря на то, что данный код имеет такое же поведение как в приложении 9-5, он не содержит ни одного выражения match и проще для чтения. Советуем вам вернуться к примеру этого раздела после того как вы прочитаете Главу 13 и изучите способ unwrap_or_else по документации встроенной библиотеки. Многие из способов о которых вы узнаете в документации и Главе 13 могут очистить код от больших, вложенных выражений match при обработке ошибок.","breadcrumbs":"Обработка ошибок » Устранимые ошибки с Result » Иные использованию match с Result<T, E>","id":"157","title":"Иные использованию match с Result<T, E>"},"158":{"body":"Использование match работает достаточно хорошо, но может быть довольно многословным и не всегда хорошо передаёт смысл. Вид Result<T, E> имеет множество вспомогательных способов для выполнения различных, более отличительных задач. Способ unwrap - это способ быстрого доступа к значениям, реализованный так же, как и выражение match, которое мы написали в Приложении 9-4. Если значение Result является вариантом Ok, unwrap возвращает значение внутри Ok. Если Result - вариант Err, то unwrap вызовет для нас макрос panic!. Вот пример unwrap в действии: Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/no-listing-04-unwrap/src/main.rs}} Если мы запустим этот код при отсутствии файла hello.txt , то увидим сообщение об ошибке из вызова panic! способа unwrap: thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os {\ncode: 2, kind: NotFound, message: \"No such file or directory\" }',\nsrc/main.rs:4:49 Другой способ, похожий на unwrap, это expect, позволяющий указать сообщение об ошибке для макроса panic!. Использование expect вместо unwrap с предоставлением хорошего сообщения об ошибке выражает ваше намерение и делает более простым отслеживание источника паники. Синтаксис способа expect выглядит так: Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/no-listing-05-expect/src/main.rs}} expect используется так же как и unwrap: либо возвращается дескриптор файла либо вызывается макрос panic!.Наше сообщение об ошибке в expect будет передано в panic! и заменит стандартное используемое сообщение.Вот как это выглядит: thread 'main' panicked at 'hello.txt should be included in this project: Os {\ncode: 2, kind: NotFound, message: \"No such file or directory\" }',\nsrc/main.rs:5:10 В рабочем коде, большинство выбирает expect в угоду unwrap и добавляет описание, почему действие должна закончиться успешно. Но даже если предположение оказалось неверным, сведений для отладки будет больше.","breadcrumbs":"Обработка ошибок » Устранимые ошибки с Result » Лаконичные способы обработки ошибок - unwrap и expect","id":"158","title":"Лаконичные способы обработки ошибок - unwrap и expect"},"159":{"body":"Когда вы пишете функцию, реализация которой вызывает что-то, что может завершиться ошибкой, вместо обработки ошибки в этой функции, вы можете вернуть ошибку в вызывающий код, чтобы он мог решить, что с ней делать. Такой приём известен как распространение ошибки ( propagating the error ). Благодаря нему мы даём больше управления вызывающему коду, где может быть больше сведений или логики, которая диктует, как ошибка должна обрабатываться, чем было бы в месте появления этой ошибки. Например, код программы 9-6 читает имя пользователя из файла. Если файл не существует или не может быть прочтён, то функция возвращает ошибку в код, который вызвал данную функцию. Файл: src/main.rs {{#include ../listings/ch09-error-handling/listing-09-06/src/main.rs:here}} Приложение 9-6: Функция, которая возвращает ошибки в вызывающий код, используя оператор match Эта функция может быть написана гораздо более коротким способом, но мы начнём с того, что многое сделаем вручную, чтобы изучить обработку ошибок; а в конце покажем более короткий способ. Давайте сначала рассмотрим вид возвращаемого значения: Result<String, io::Error>. Здесь есть возвращаемое значение функции вида Result<T, E> где шаблонный свойство T был заполнен определенным видом String и шаблонный свойство E был заполнен определенным видом io::Error. Если эта функция выполнится без проблем, то код, вызывающий эту функцию, получит значение Ok, содержащее String - имя пользователя, которое эта функция прочитала из файла. Если функция столкнётся с какими-либо проблемами, вызывающий код получит значение Err, содержащее экземпляр io::Error, который включает дополнительную сведения о том, какие проблемы возникли. Мы выбрали io::Error в качестве возвращаемого вида этой функции, потому что это вид значения ошибки, возвращаемого из обеих действий, которые мы вызываем в теле этой функции и которые могут завершиться неудачей: функция File::open и способ read_to_string. Тело функции начинается с вызова File::open. Затем мы обрабатываем значение Result с помощью match, подобно match из приложения 9-4. Если File::open завершается успешно, то дескриптор файла в переменной образца file становится значением в изменяемой переменной username_file и функция продолжит свою работу. В случае Err, вместо вызова panic!, мы используем ключевое слово return для досрочного возврата из функции и передаём значение ошибки из File::open, которое теперь находится в переменной образца e, обратно в вызывающий код как значение ошибки этой функции. Таким образом, если у нас есть файловый дескриптор в username_file, функция создаёт новую String в переменной username и вызывает способ read_to_string для файлового дескриптора в username_file, чтобы прочитать содержимое файла в username. Способ read_to_string также возвращает Result, потому что он может потерпеть неудачу, даже если File::open завершился успешно. Поэтому нам нужен ещё один match для обработки этого Result: если read_to_string завершится успешно, то наша функция сработала, и мы возвращаем имя пользователя из файла, которое теперь находится в username, обёрнутое в Ok. Если read_to_string потерпит неудачу, мы возвращаем значение ошибки таким же образом, как мы возвращали значение ошибки в match, который обрабатывал возвращаемое значение File::open. Однако нам не нужно явно указывать return, потому что это последнее выражение в функции. Затем код, вызывающий этот, будет обрабатывать получение либо значения Ok, содержащего имя пользователя, либо значения Err, содержащего io::Error. Вызывающий код должен решить, что делать с этими значениями. Если вызывающий код получает значение Err, он может вызвать panic! и завершить работу программы, использовать имя пользователя по умолчанию или найти имя пользователя, например, не в файле. У нас недостаточно сведений о том, что на самом деле пытается сделать вызывающий код, поэтому мы распространяем всю сведения об успехах или ошибках вверх, чтобы она могла обрабатываться соответствующим образом. Эта схема передачи ошибок настолько распространена в Rust, что Rust предоставляет оператор вопросительного знака ?, чтобы облегчить эту задачу. Сокращение для проброса ошибок: оператор ? В приложении 9-7 показана реализация read_username_from_file, которая имеет ту же функциональность, что и в приложении 9-6, но в этой реализации используется оператор ?. Файл: src/main.rs {{#include ../listings/ch09-error-handling/listing-09-07/src/main.rs:here}} Приложение 9-7: Функция, возвращающая ошибки в вызывающий код с помощью оператора ? Выражение ?, расположенное после Result, работает почти так же, как и те выражения match, которые мы использовали для обработки значений Result в приложении 9-6. Если в качестве значения Result будет Ok, то значение внутри Ok будет возвращено из этого выражения, и программа продолжит работу. Если же значение представляет собой Err, то Err будет возвращено из всей функции, как если бы мы использовали ключевое слово return, так что значение ошибки будет передано в вызывающий код. Существует разница между тем, что делает выражение match из приложения 9-6 и тем, что делает оператор ?: значения ошибок, для которых вызван оператор ?, проходят через функцию from, определённую в трейте From встроенной библиотеки, которая используется для преобразования значений из одного вида в другой. Когда оператор ? вызывает функцию from, полученный вид ошибки преобразуется в вид ошибки, определённый в возвращаемом виде текущей функции. Это полезно, когда функция возвращает только один вид ошибки, для описания всех возможных вариантов сбоев, даже если её отдельные компоненты могут выходить из строя по разным причинам. Например, мы могли бы изменить функцию read_username_from_file в приложении 9-7, чтобы возвращать пользовательский вид ошибки с именем OurError, который мы определим. Если мы также определим impl From<io::Error> for OurError для создания экземпляра OurError из io::Error, то оператор ?, вызываемый в теле read_username_from_file, вызовет from и преобразует виды ошибок без необходимости добавления дополнительного кода в функцию. В случае приложения 9-7 оператор ? в конце вызова File::open вернёт значение внутри Ok в переменную username_file. Если произойдёт ошибка, оператор ? выполнит ранний возврат значения Err вызывающему коду. То же самое относится к оператору ? в конце вызова read_to_string. Оператор ? позволяет избавиться от большого количества шаблонного кода и упростить реализацию этой функции. Мы могли бы даже ещё больше сократить этот код, если бы использовали цепочку вызовов способов сразу после ?, как показано в приложении 9-8. Файл: src/main.rs {{#include ../listings/ch09-error-handling/listing-09-08/src/main.rs:here}} Приложение 9-8: Цепочка вызовов способов после оператора ? Мы перенесли создание новой String в username в начало функции; эта часть не изменилась. Вместо создания переменной username_file мы соединили вызов read_to_string непосредственно с результатом File::open(\"hello.txt\")?. У нас по-прежнему есть ? в конце вызова read_to_string, и мы по-прежнему возвращаем значение Ok, содержащее username, когда и File::open и read_to_string завершаются успешно, а не возвращают ошибки. Функциональность снова такая же, как в Приложении 9-6 и Приложении 9-7; это просто другой, более эргономичный способ её написания. Продолжая рассматривать разные способы записи данной функции, приложение 9-9 отображает способ сделать её ещё короче с помощью fs::read_to_string. Файл: src/main.rs {{#include ../listings/ch09-error-handling/listing-09-09/src/main.rs:here}} Приложение 9-9: Использование fs::read_to_string вместо открытия и последующего чтения файла Чтение файла в строку довольно распространённая действие, так что стандартная библиотека предоставляет удобную функцию fs::read_to_string, которая открывает файл, создаёт новую String, читает содержимое файла, размещает его в String и возвращает её. Конечно, использование функции fs::read_to_string не даёт возможности объяснить обработку всех ошибок, поэтому мы сначала изучили длинный способ. Где можно использовать оператор ? Оператор ? может использоваться только в функциях, вид возвращаемого значения которых совместим со значением, для которого используется ?. Это потому, что оператор ? определён для выполнения раннего возврата значения из функции таким же образом, как и выражение match, которое мы определили в приложении 9-6. В приложении 9-6 match использовало значение Result, а ответвление с ранним возвратом вернуло значение Err(e). Вид возвращаемого значения функции должен быть Result, чтобы он был совместим с этим return. В приложении 9-10 давайте посмотрим на ошибку, которую мы получим, если воспользуемся оператором ? в функции main с видом возвращаемого значения, несовместимым с видом значения, для которого мы используем ?: Файл: src/main.rs {{#rustdoc_include ../listings/ch09-error-handling/listing-09-10/src/main.rs}} Приложение 9-10: Попытка использовать ? в main функции, которая возвращает () , не будет собираться Этот код открывает файл, что может привести к сбою. ? оператор следует за значением Result , возвращаемым File::open , но эта main функция имеет возвращаемый вид () , а не Result . Когда мы собираем этот код, мы получаем следующее сообщение об ошибке: {{#include ../listings/ch09-error-handling/listing-09-10/output.txt}} Эта ошибка указывает на то, что оператор ? разрешено использовать только в функции, которая возвращает Result, Option или другой вид, реализующий FromResidual. Для исправления ошибки есть два варианта. Первый - изменить возвращаемый вид вашей функции так, чтобы он был совместим со значением, для которого вы используете оператор ?, если у вас нет ограничений, препятствующих этому. Другой способ - использовать match или один из способов Result<T, E> для обработки Result<T, E> любым подходящим способом. В сообщении об ошибке также упоминалось, что ? можно использовать и со значениями Option<T>. Как и при использовании ? для Result, вы можете использовать ? только для Option в функции, которая возвращает Option. Поведение оператора ? при вызове Option<T> похоже на его поведение при вызове Result<T, E>: если значение равно None, то None будет возвращено раньше из функции в этот момент. Если значение Some, значение внутри Some является результирующим значением выражения, и функция продолжает исполняться. В приложении 9-11 приведён пример функции, которая находит последний символ первой строки заданного текста: {{#rustdoc_include ../listings/ch09-error-handling/listing-09-11/src/main.rs:here}} Приложение 9-11: Использование оператора ? для значения Option<T> Эта функция возвращает Option<char>, потому что возможно, что там есть символ, но также возможно, что его нет. Этот код принимает переменная среза text строки и вызывает для него способ lines, который возвращает повторительдля строк в строке. Поскольку эта функция хочет проверить первую строку, она вызывает next у повторителя, чтобы получить первое значение от повторителя. Если text является пустой строкой, этот вызов next вернёт None, и в этом случае мы используем ? чтобы остановить и вернуть None из last_char_of_first_line. Если text не является пустой строкой, next вернёт значение Some, содержащее фрагмент строки первой строки в text. Символ ? извлекает фрагмент строки, и мы можем вызвать chars для этого фрагмента строки. чтобы получить повторительсимволов. Нас важно последний символ в первой строке, поэтому мы вызываем last, чтобы вернуть последний элемент в повторителе. Вернётся Option, потому что возможно, что первая строка пустая - например, если text начинается с пустой строки, но имеет символы в других строках, как в \"\\nhi\". Однако, если в первой строке есть последний символ, он будет возвращён в варианте Some. Оператор ? в середине даёт нам лаконичный способ выразить эту логику, позволяя реализовать функцию в одной строке. Если бы мы не могли использовать оператор ? в Option, нам пришлось бы реализовать эту логику, используя больше вызовов способов или выражение match. Обратите внимание, что вы можете использовать оператор ? Result в функции, которая возвращает Result , и вы можете использовать оператор ? для Option в функции, которая возвращает Option , но вы не можете смешивать и сопоставлять. Оператор ? не будет самостоятельно преобразовывать Result в Option или наоборот; в этих случаях вы можете использовать такие способы, как способ ok для Result или способ ok_or для Option, чтобы выполнить преобразование явно. До сих пор все функции main, которые мы использовали, возвращали (). Функция main - особенная, потому что это точка входа и выхода исполняемых программ, и существуют ограничения на вид возвращаемого значения, чтобы программы вели себя так, как ожидается. К счастью, main также может возвращать Result<(), E> . В приложении 9-12 используется код из приложения 9-10, но мы изменили возвращаемый вид main на Result<(), Box<dyn Error>> и добавили возвращаемое значение Ok(()) в конец. Теперь этот код будет собран: {{#rustdoc_include ../listings/ch09-error-handling/listing-09-12/src/main.rs}} Приложение 9-12: Замена main на return Result<(), E> позволяет использовать оператор ? оператор над значениями Result Вид Box<dyn Error> является трейт-объектом , о котором мы поговорим в разделе \"Использование трейт-объектов, допускающих значения разных видов\" в главе 17. Пока что вы можете считать, что Box<dyn Error> означает \"любой вид ошибки\". Использование ? для значения Result в функции main с видом ошибки Box<dyn Error> разрешено, так как позволяет вернуть любое значение Err раньше времени. Даже если тело этой функции main будет возвращать только ошибки вида std::io::Error, указав Box<dyn Error>, эта сигнатура останется корректной, даже если в тело main будет добавлен код, возвращающий другие ошибки. Когда main функция возвращает Result<(), E>, исполняемый файл завершится со значением 0, если main вернёт Ok(()), и выйдет с ненулевым значением, если main вернёт значение Err. Исполняемые файлы, написанные на C, при выходе возвращают целые числа: успешно завершённые программы возвращают целое число 0, а программы с ошибкой возвращают целое число, отличное от 0. Rust также возвращает целые числа из исполняемых файлов, чтобы быть совместимым с этим соглашением. Функция main может возвращать любые виды, реализующие трейт std::process::Termination , в которых имеется функция report, возвращающая ExitCode. Обратитесь к документации встроенной библиотеки за дополнительной сведениями о порядке реализации трейта Termination для ваших собственных видов. Теперь, когда мы обсудили подробности вызова panic! или возврата Result, давайте вернёмся к тому, как решить, какой из случаев подходит для какой ситуации.","breadcrumbs":"Обработка ошибок » Устранимые ошибки с Result » Проброс ошибок","id":"159","title":"Проброс ошибок"},"16":{"body":"На Windows перейдите по адресу https://www.rust-lang.org/tools/install и следуйте указаниям по установке Rust. На определённом этапе установки вы получите сообщение, предупреждающее, что вам также понадобятся средства сборки MSVC для Visual Studio 2013 или более поздней исполнения. Чтобы получить средства сборки, вам потребуется установить Visual Studio 2022 . На вопрос о том, какие компоненты необходимо установить, выберите: “Desktop Development with C++” The Windows 10 or 11 SDK Английский языковой пакет вместе с любым другим языковым пакетом по вашему выбору. В остальной части этой книги используются приказы, которые работают как в cmd.exe , так и в PowerShell. При наличии отличительных различий мы объясним, что необходимо сделать в таких случаях.","breadcrumbs":"С чего начать » Установка » Установка rustup на Windows","id":"16","title":"Установка rustup на Windows"},"160":{"body":"Итак, как принимается решение о том, когда следует вызывать panic!, а когда вернуть Result? При панике код не имеет возможности восстановить своё выполнение. Можно было бы вызывать panic! для любой ошибочной ситуации, независимо от того, имеется ли способ восстановления или нет, но с другой стороны, вы принимаете решение от имени вызывающего вас кода, что ситуация необратима. Когда вы возвращаете значение Result, вы делегируете принятие решения вызывающему коду. Вызывающий код может попытаться выполнить восстановление способом, который подходит в данной ситуации, или же он может решить, что из ошибки в Err нельзя восстановиться и вызовет panic!, превратив вашу исправимую ошибку в неисправимую. Поэтому возвращение Result является хорошим выбором по умолчанию для функции, которая может дать сбой. В таких ситуация как примеры, протовиды и тесты, более уместно писать код, который паникует вместо возвращения Result. Давайте рассмотрим почему, а затем мы обсудим ситуации, в которых сборщик не может доказать, что ошибка невозможна, но вы, как человек, можете это сделать. Глава будет заканчиваться некоторыми общими руководящими принципами о том, как решить, стоит ли паниковать в коде библиотеки.","breadcrumbs":"Обработка ошибок » panic! или Не panic! » panic! или не panic!","id":"160","title":"panic! или не panic!"},"161":{"body":"Когда вы пишете пример, отображающий некоторую концепцию, наличие хорошего кода обработки ошибок может сделать пример менее понятным. Понятно, что в примерах вызов способа unwrap, который может привести к панике, является лишь обозначением способа обработки ошибок в приложении, который может отличаться в зависимости от того, что делает остальная часть кода. Точно так же способы unwrap и expect являются очень удобными при создании протовида, прежде чем вы будете готовы решить, как обрабатывать ошибки. Они оставляют чёткие маркеры в коде до момента, когда вы будете готовы сделать программу более надёжной. Если в тесте происходит сбой при вызове способа, то вы бы хотели, чтобы весь тест не прошёл, даже если этот способ не является тестируемой функциональностью. Поскольку вызов panic! это способ, которым тест помечается как провалившийся, использование unwrap или expect - именно то, что нужно.","breadcrumbs":"Обработка ошибок » panic! или Не panic! » Примеры, прототипирование и тесты","id":"161","title":"Примеры, прототипирование и тесты"},"162":{"body":"Также было бы целесообразно вызывать unwrap или expect когда у вас есть какая-то другая логика, которая заверяет, что Result будет иметь значение Ok, но вашу логику не понимает сборщик. У вас по-прежнему будет значение Result которое нужно обработать: любая действие, которую вы вызываете, все ещё имеет возможность неудачи в целом, хотя это логически невозможно в вашей именно ситуации. Если, проверяя код вручную, вы можете убедиться, что никогда не будет вариант с Err, то вполне допустимо вызывать unwrap, а ещё лучше задокументировать причину, по которой, по вашему мнению, у вас никогда не будет варианта Err в тексте expect. Вот пример: {{#rustdoc_include ../listings/ch09-error-handling/no-listing-08-unwrap-that-cant-fail/src/main.rs:here}} Мы создаём экземпляр IpAddr, анализируя жёстко закодированную строку. Можно увидеть, что 127.0.0.1 является действительным IP-адресом, поэтому здесь допустимо использование expect. Однако наличие жёстко закодированной допустимой строки не меняет вид возвращаемого значения способа parse: мы все ещё получаем значение Result и сборщик все также заставляет нас обращаться с Resultтак, будто возможен вариант Err, потому что сборщик недостаточно умён, чтобы увидеть, что эта строка всегда действительный IP-адрес. Если строка IP-адреса пришла от пользователя, то она не является жёстко запрограммированной в программе и, следовательно, может привести к ошибке, мы определённо хотели бы обработать Result более надёжным способом. Упоминание предположения о том, что этот IP-адрес жёстко закодирован, побудит нас изменить expect для лучшей обработки ошибок, если в будущем нам потребуется вместо этого получить IP-адрес из какого-либо другого источника.","breadcrumbs":"Обработка ошибок » panic! или Не panic! » Случаи, в которых у вас больше сведений, чем у сборщика","id":"162","title":"Случаи, в которых у вас больше сведений, чем у сборщика"},"163":{"body":"Желательно, чтобы код паниковал, если он может оказаться в некорректном состоянии. В этом среде некорректное состояние это когда некоторое допущение, заверение, контракт или инвариант были нарушены. Например, когда недопустимые, противоречивые или пропущенные значения передаются в ваш код - плюс один или несколько пунктов из следующего перечисленного в списке: Некорректное состояние — это что-то неожиданное, отличается от того, что может происходить время от времени, например, когда пользователь вводит данные в неправильном формате. Ваш код после этой точки должен полагаться на то, что он не находится в некорректном состоянии, вместо проверок наличия проблемы на каждом этапе. Нет хорошего способа закодировать данную сведения в видах, которые вы используете. Мы рассмотрим пример того, что мы имеем в виду в разделе “Кодирование состояний и поведения на основе видов” главы 17. Если кто-то вызывает ваш код и передаёт значения, которые не имеют смысла, лучше всего вернуть ошибку, если вы это можете, чтобы пользователь библиотеки мог решить, что он хочет делать в этом случае. Однако в тех случаях, когда продолжение выполнения программы может быть небезопасным или вредным, лучшим выбором будет вызов panic! и оповещение пользователя, использующего вашу библиотеку, об ошибке в его коде, чтобы он мог исправить её во время разработки. Подобно panic! подходит, если вы вызываете внешний, неподуправлениеный вам код, и он возвращает недопустимое состояние, которое вы не можете исправить. Однако, когда ожидается сбой, лучше вернуть Result, чем выполнить вызов panic!. В качестве примера можно привести синтаксический анализатор, которому передали неправильно сформированные данные, или HTTP-запрос, возвращающий статус указывающий на то, что вы достигли ограничения на частоту запросов. В этих случаях возврат Result означает, что ошибка является ожидаемой и вызывающий код должен решить, как её обрабатывать. Когда ваш код выполняет действие, которая может подвергнуть пользователя риску, если она вызывается с использованием недопустимых значений, ваш код должен сначала проверить допустимость значений и паниковать, если значения недопустимы. Так советуется делать в основном из соображений безопасности: попытка оперировать некорректными данными может привести к уязвимостям. Это основная причина, по которой стандартная библиотека будет вызывать panic!, если попытаться получить доступ к памяти вне границ массива: доступ к памяти, не относящейся к текущей структуре данных, является известной проблемой безопасности. Функции часто имеют контракты: их поведение обеспечивается, только если входные данные отвечают определённым требованиям. Паника при нарушении контракта имеет смысл, потому что это всегда указывает на изъян со стороны вызывающего кода, и это не ошибка, которую вы хотели бы, чтобы вызывающий код явно обрабатывал. На самом деле, нет разумного способа для восстановления вызывающего кода; программисты, вызывающие ваш код, должны исправить свой. Контракты для функции, особенно когда нарушение вызывает панику, следует описать в документации по API функции. Тем не менее, наличие множества проверок ошибок во всех ваших функциях было бы многословным и раздражительным. К счастью, можно использовать систему видов Rust (следовательно и проверку видов сборщиком), чтобы она сделала множество проверок вместо вас. Если ваша функция имеет определённый вид в качестве свойства, вы можете продолжить работу с логикой кода зная, что сборщик уже обеспечил правильное значение. Например, если используется обычный вид, а не вид Option, то ваша программа ожидает наличие чего-то вместо ничего . Ваш код не должен будет обрабатывать оба варианта Some и None: он будет иметь только один вариант для определённого значения. Код, пытающийся ничего не передавать в функцию, не будет даже собираться, поэтому ваша функция не должна проверять такой случай во время выполнения. Другой пример - это использование целого вида без знака, такого как u32, который заверяет, что свойство никогда не будет отрицательным.","breadcrumbs":"Обработка ошибок » panic! или Не panic! » Руководство по обработке ошибок","id":"163","title":"Руководство по обработке ошибок"},"164":{"body":"Давайте разовьём идею использования системы видов Rust чтобы убедиться, что у нас есть корректное значение, и рассмотрим создание пользовательского вида для валидации. Вспомним игру угадывания числа из Главы 2, в которой наш код просил пользователя угадать число между 1 и 100. Мы никогда не проверяли, что предположение пользователя лежит между этими числами, перед сравнением предположения с загаданным нами числом; мы только проверяли, что оно положительно. В этом случае последствия были не очень страшными: наши сообщения «Слишком много» или «Слишком мало», выводимые в окно вывода, все равно были правильными. Но было бы лучше подталкивать пользователя к правильным догадкам и иметь различное поведение для случаев, когда пользователь предлагает число за пределами ряда, и когда пользователь вводит, например, буквы вместо цифр. Один из способов добиться этого - пытаться разобрать введённое значение как i32, а не как u32, чтобы разрешить потенциально отрицательные числа, а затем добавить проверку для нахождение числа в ряде, например, так: {{#rustdoc_include ../listings/ch09-error-handling/no-listing-09-guess-out-of-range/src/main.rs:here}} Выражение if проверяет, находится ли наше значение вне ряда, сообщает пользователю о проблеме и вызывает continue, чтобы начать следующую повторение цикла и попросить ввести другое число. После выражения if мы можем продолжить сравнение значения guess с загаданным числом, зная, что guess лежит в ряде от 1 до 100. Однако это не наилучшее решение: если бы было чрезвычайно важно, чтобы программа работала только со значениями от 1 до 100, существовало бы много функций, требующих этого, то такая проверка в каждой функции была бы утомительной (и могла бы отрицательно повлиять на производительность). Вместо этого можно создать новый вид и поместить проверки в функцию создания экземпляра этого вида, не повторяя их везде. Таким образом, функции могут использовать новый вид в своих сигнатурах и быть уверены в значениях, которые им передают. Приложение 9-13 показывает один из способов, как определить вид Guess, чтобы экземпляр Guess создавался только при условии, что функция new получает значение от 1 до 100. {{#include ../listings/ch09-error-handling/listing-09-13/src/main.rs:here}} Приложение 9-13. Вид Guess, который будет создавать экземпляры только для значений от 1 до 100 Сначала мы определяем структуру с именем Guess, которая имеет поле с именем value вида i32, в котором будет храниться число. Затем мы реализуем ассоциированную функцию new, создающую экземпляры значений вида Guess. Функция new имеет один свойство value вида i32, и возвращает Guess. Код в теле функции new проверяет, что значение value находится между 1 и 100. Если value не проходит эту проверку, мы вызываем panic!, которая оповестит программиста, написавшего вызывающий код, что в его коде есть ошибка, которую необходимо исправить, поскольку попытка создания Guess со значением value вне заданного ряда нарушает контракт, на который полагается Guess::new. Условия, в которых Guess::new паникует, должны быть описаны в документации к API; мы рассмотрим соглашения о документации, указывающие на возможность появления panic! в документации API, которую вы создадите в Главе 14. Если value проходит проверку, мы создаём новый экземпляр Guess, у которого значение поля value равно значению свойства value, и возвращаем Guess. Затем мы реализуем способ с названием value, который заимствует self, не имеет других свойств, и возвращает значение вида i32. Этот способ иногда называют извлекатель (getter), потому что его цель состоит в том, чтобы извлечь данные из полей структуры и вернуть их. Этот публичный способ является необходимым, поскольку поле value структуры Guess является приватным. Важно, чтобы поле value было приватным, чтобы код, использующий структуру Guess, не мог устанавливать value напрямую: код снаружи модуля должен использовать функцию Guess::new для создания экземпляра Guess, таким образом обеспечивая, что у Guess нет возможности получить value, не проверенное условиями в функции Guess::new. Функция, которая принимает или возвращает только числа от 1 до 100, может объявить в своей сигнатуре, что она принимает или возвращает Guess, вместо i32, таким образом не будет необходимости делать дополнительные проверки в теле такой функции.","breadcrumbs":"Обработка ошибок » panic! или Не panic! » Создание пользовательских видов для проверки","id":"164","title":"Создание пользовательских видов для проверки"},"165":{"body":"Функции обработки ошибок в Rust призваны помочь написанию более надёжного кода. Макрос panic! сигнализирует, что ваша программа находится в состоянии, которое она не может обработать, и позволяет сказать процессу чтобы он прекратил своё выполнение, вместо попытки продолжить выполнение с некорректными или неверными значениями. Перечисление Result использует систему видов Rust, чтобы сообщить, что действия могут завершиться неудачей, и ваш код мог восстановиться. Можно использовать Result, чтобы сообщить вызывающему коду, что он должен обрабатывать потенциальный успех или потенциальную неудачу. Использование panic! и Result правильным образом сделает ваш код более надёжным перед лицом неизбежных проблем. Теперь, когда вы увидели полезные способы использования обобщённых видов Option и Result в встроенной библиотеке, мы поговорим о том, как работают обобщённые виды и как вы можете использовать их в своём коде.","breadcrumbs":"Обработка ошибок » panic! или Не panic! » Итоги","id":"165","title":"Итоги"},"166":{"body":"Каждый язык программирования имеет в своём арсенале эффективные средства борьбы с повторением кода. В Rust одним из таких средств являются обобщённые виды данных - generics . Это абстрактные подставные виды на место которых возможно поставить какой-либо определенный вид или другое свойство. Когда мы пишем код, мы можем выразить поведение обобщённых видов или их связь с другими обобщёнными видами, не зная какой вид будет использован на их месте при сборки и запуске кода. Функции могут принимать свойства некоторого \"обобщённого\" вида вместо привычных \"определенных\" видов, вроде i32 или String. Подобно, функция принимает свойства с неизвестными заранее значениями, чтобы выполнять одинаковые действия над несколькими определенными значениями. На самом деле мы уже использовали обобщённые виды данных в Главе 6 (Option<T>), в Главе 8 (Vec<T> и HashMap<K, V>) и в Главе 9 (Result<T, E>). В этой главе вы узнаете, как определить собственные виды данных, функции и способы, используя возможности обобщённых видов. Прежде всего, мы рассмотрим как для уменьшения повторения извлечь из кода некоторую общую функциональность. Далее, мы будем использовать тот же механизм для создания обобщённой функции из двух функций, которые отличаются только видом их свойств. Мы также объясним, как использовать обобщённые виды данных при определении структур и перечислений. После этого мы изучим как использовать типажи (traits) для определения поведения в обобщённом виде. Можно комбинировать типажи с обобщёнными видами, чтобы обобщённый вид мог принимать только такие виды, которые имеют определённое поведение, а не все подряд. В конце мы обсудим времена жизни (lifetimes) , вариации обобщённых видов, которые дают сборщику сведения о том, как сроки жизни ссылок относятся друг к другу. Времена жизни позволяют нам указать дополнительную сведения об \"одолженных\" (borrowed) значениях, которая позволит сборщику удостовериться в корректности используемых ссылок в тех ситуациях, когда сборщик не может сделать это самостоятельно .","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды, типажи и время жизни","id":"166","title":"Обобщённые виды, типажи и время жизни"},"167":{"body":"В обобщениях мы можем заменить определенный вид на \"заполнитель\" (placeholder), обозначающую несколько видов, что позволяет удалить повторяющийся код. Прежде чем углубляться в синтаксис обобщённых видов, давайте сначала посмотрим, как удалить повторение, не задействуя универсальные виды, путём извлечения функции, которая заменяет определённые значения заполнителем, представляющим несколько значений. Затем мы применим ту же технику для извлечения универсальной функции! Изучив, как распознать повторяющийся код, который можно извлечь в функцию, вы начнёте распознавать повторяющийся код, который может использовать обобщённые виды. Начнём с короткой программы в приложении 10-1, которая находит наибольшее число в списке. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-01/src/main.rs:here}} Приложение 10-1: Поиск наибольшего числа в списке чисел Сохраним список целых чисел в переменной number_list и поместим первое значение из списка в переменную largest. Далее, переберём все элементы списка, и, если текущий элемент больше числа сохранённого в переменной largest, заменим значение в этой переменной. Если текущий элемент меньше или равен \"наибольшему\", найденному ранее, значение переменной оставим прежним и перейдём к следующему элементу списка. После перебора всех элементов списка переменная largest должна содержать наибольшее значение, которое в нашем случае будет равно 100. Теперь перед нами стоит задача найти наибольшее число в двух разных списках. Для этого мы можем повторять код из приложения 10-1 и использовать ту же логику в двух разных местах программы, как показано в приложении 10-2. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-02/src/main.rs}} Приложение 10-2: Код для поиска наибольшего числа в двух списках чисел Несмотря на то, что код программы работает, повторение кода утомительно и подвержено ошибкам. При внесении изменений мы должны не забыть обновить каждое место, где код повторяется. Для устранения повторения мы можем создать дополнительную абстракцию с помощью функции которая сможет работать с любым списком целых чисел переданным ей в качестве входного свойства и находить для этого списка наибольшее число. Данное решение делает код более ясным и позволяет абстрактным образом реализовать алгоритм поиска наибольшего числа в списке. В приложении 10-3 мы извлекаем код, который находит наибольшее число, в функцию с именем largest. Затем мы вызываем функцию, чтобы найти наибольшее число в двух списках из приложения 10-2. Мы также можем использовать эту функцию для любого другого списка значений i32 , который может встретиться позже. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-03/src/main.rs:here}} Приложение 10-3: Абстрактный код для поиска наибольшего числа в двух списках Функция largest имеет свойство с именем list, который представляет любой срез значений вида i32, которые мы можем передать в неё. В результате вызова функции, код выполнится с определенными, переданными в неё значениями. Итак, вот шаги выполненные для изменения кода из приложения 10-2 в приложение 10-3: Определить повторяющийся код. Извлечь повторяющийся код и поместить его в тело функции, определив входные и выходные значения этого кода в сигнатуре функции. Обновить и заменить два участка повторяющегося кода вызовом одной функции. Далее, чтобы уменьшить повторение кода, мы воспользуемся теми же шагами для обобщённых видов. Обобщённые виды позволяют работать над абстрактными видами таким же образом, как тело функции может работать над абстрактным списком list вместо определенных значений. Например, у нас есть две функции: одна ищет наибольший элемент внутри среза значений вида i32, а другая внутри среза значений вида char. Как уменьшить такое повторение? Давайте выяснять!","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Удаление повторения кода с помощью выделения общей функциональности","id":"167","title":"Удаление повторения кода с помощью выделения общей функциональности"},"168":{"body":"Мы используем обобщённые виды данных для объявления функций или структур, которые затем можно использовать с различными определенными видами данных. Давайте сначала посмотрим, как объявлять функции, структуры, перечисления и способы, используя обобщённые виды данных. Затем мы обсудим, как обобщённые виды данных влияют на производительность кода.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды данных » Обобщённые виды данных","id":"168","title":"Обобщённые виды данных"},"169":{"body":"Когда мы объявляем функцию с обобщёнными видами, мы размещаем обобщённые виды в сигнатуре функции, где мы обычно указываем виды данных переменных и возвращаемого значения. Используя обобщённые виды, мы делаем код более гибким и предоставляем большую функциональность при вызове нашей функции, предотвращая повторение кода. Рассмотрим пример с функцией largest. Приложение 10-4 показывает две функции, каждая из которых находит самое большое значение в срезе своего вида. Позже мы объединим их в одну функцию, использующую обобщённые виды данных. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-04/src/main.rs:here}} Приложение 10-4: две функции, отличающиеся только именем и видом обрабатываемых данных Функция largest_i32 уже встречалась нам: мы извлекли её в приложении 10-3, когда боролись с повторением кода — она находит наибольшее значение вида i32 в срезе. Функция largest_char находит самое большое значение вида char в срезе. Тело у этих функций одинаковое, поэтому давайте избавимся от повторяемлшл кода, используя свойство обобщённого вида в одной функции. Для свойствоизации видов данных в новой объявляемой функции нам нужно дать имя обобщённому виду — так же, как мы это делаем для переменных функций. Можно использовать любой определитель для имени свойства вида, но мы будем использовать T, потому что по соглашению имена свойств в Rust должны быть короткими (обычно длиной в один символ), а именование видов в Rust делается в нотации UpperCamelCase. Сокращение слова «type» до одной буквы T является стандартным выбором большинства программистов, использующих язык Rust. Когда мы используем свойство в теле функции, мы должны объявить имя свойства в сигнатуре, чтобы сборщик знал, что означает это имя. Подобно когда мы используем имя вида свойства в сигнатуре функции, мы должны объявить это имя раньше, чем мы его используем. Чтобы определить обобщённую функцию largest, поместим объявление имён свойств в треугольные скобки <> между именем функции и списком свойств, как здесь: fn largest<T>(list: &[T]) -> &T { Объявление читается так: функция largest является обобщённой по виду T. Эта функция имеет один свойство с именем list, который является срезом значений с видом данных T. Функция largest возвращает значение этого же вида T. Приложение 10-5 показывает определение функции largest с использованием обобщённых видов данных в её сигнатуре. Приложение также показывает, как мы можем вызвать функцию со срезом данных вида i32 или char. Данный код пока не будет собираться, но мы исправим это к концу раздела. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-05/src/main.rs}} Приложение 10-5: функция largest, использующая свойства обобщённого типа; пока ещё не собирается Если мы соберем программу сейчас, мы получим следующую ошибку: {{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-05/output.txt}} В подсказке упоминается std::cmp::PartialOrd, который является типажом . Мы поговорим про типажи в следующем разделе. Сейчас ошибка в функции largest указывает, что функция не будет работать для всех возможных видов T. Так как мы хотим сравнивать значения вида T в теле функции, мы можем использовать только те виды, данные которых можно упорядочить: можем упорядочить — значит, можем и сравнить. Чтобы можно было задействовать сравнения, стандартная библиотека имеет типаж std::cmp::PartialOrd, который вы можете реализовать для видов (смотрите дополнение С для большей сведений про данный типаж). Следуя совету в сообщении сборщика, ограничим вид T теми вариантами, которые поддерживают типаж PartialOrd, и тогда пример успешно ссобирается, так как стандартная библиотека реализует PartialOrd как для вида i32, так и для вида char.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды данных » В объявлении функций","id":"169","title":"В объявлении функций"},"17":{"body":"Чтобы проверить, правильно ли у вас установлен Rust, откройте оболочку и введите эту строку: $ rustc --version Вы должны увидеть номер исполнения, хэш фиксации и дату фиксации для последней безотказной исполнения, которая была выпущена, в следующем формате: rustc x.y.z (abcabcabc yyyy-mm-dd) Если вы видите эту сведения, вы успешно установили Rust! Если вы не видите эту сведения, убедитесь, что Rust находится в вашей системной переменной %PATH% следующим образом: В Windows CMD: > echo %PATH% В PowerShell: > echo $env:Path В Linux и macOS: $ echo $PATH Если все было сделано правильно, но Rust все ещё не работает, есть несколько мест, где вам могут помочь. Узнайте, как связаться с другими Rustaceans (так мы себя называем) на странице сообщества .","breadcrumbs":"С чего начать » Установка » Устранение возможных ошибок","id":"17","title":"Устранение возможных ошибок"},"170":{"body":"Мы также можем определить структуры, использующие обобщённые виды в одном или нескольких своих полях, с помощью синтаксиса <>. Приложение 10-6 показывает, как определить структуру Point<T>, чтобы хранить поля координат x и y любого вида данных. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-06/src/main.rs}} Приложение 10-6: структура Point, содержащая поля x и y вида T Синтаксис использования обобщённых видов в определении структуры очень похож на синтаксис в определении функции. Сначала мы объявляем имена видов свойств внутри треугольных скобок сразу после названия структуры. Затем мы можем использовать обобщённые виды в определении структуры в тех местах, где ранее мы указывали бы определенные виды. Так как мы используем только один обобщённый вид данных для определения структуры Point<T>, это определение означает, что структура Point<T> является обобщённой с видом T, и оба поля x и y имеют одинаковый вид, каким бы он не являлся. Если мы создадим экземпляр структуры Point<T> со значениями разных видов, как показано в приложении 10-7, наш код не ссобирается. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-07/src/main.rs}} Приложение 10-7: поля x и y должны быть одного вида, так как они имеют один и тот же обобщённый вид T В этом примере, когда мы присваиваем целочисленное значение 5 переменной x , мы сообщаем сборщику, что обобщённый вид T будет целым числом для этого экземпляра Point<T>. Затем, когда мы указываем значение 4.0 (имеющее вид, отличный от целого числа) для y, который по нашему определению должен иметь тот же вид, что и x, мы получим ошибку несоответствия видов: {{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-07/output.txt}} Чтобы определить структуру Point, где оба значения x и y являются обобщёнными, но различными видами, можно использовать несколько свойств обобщённого вида. Например, в приложении 10-8 мы изменим определение Point таким образом, чтобы оно использовало обобщённые виды T и U, где x имеет вид T а y имеет вид U. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-08/src/main.rs}} Приложение 10-8: структура Point<T, U> обобщена для двух видов, так что x и y могут быть значениями разных видов Теперь разрешены все показанные экземпляры вида Point! В объявлении можно использовать сколь угодно много свойств обобщённого вида, но если делать это в большом количестве, код будет тяжело читать. Если в вашем коде требуется много обобщённых видов, возможно, стоит разбить его на более мелкие части.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды данных » В определении структур","id":"170","title":"В определении структур"},"171":{"body":"Как и структуры, перечисления также могут хранить обобщённые виды в своих вариантах. Давайте ещё раз посмотрим на перечисление Option<T>, предоставленное встроенной библиотекой, которое мы использовали в главе 6: enum Option<T> { Some(T), None,\n} Это определение теперь должно быть вам более понятно. Как видите, перечисление Option<T> является обобщённым по виду T и имеет два варианта: вариант Some, который содержит одно значение вида T, и вариант None, который не содержит никакого значения. Используя перечисление Option<T>, можно выразить абстрактную концепцию необязательного значения — и так как Option<T> является обобщённым, можно использовать эту абстракцию независимо от того, каким будет вид необязательного значения. Перечисления также могут использовать несколько обобщённых видов. Определение перечисления Result, которое мы упоминали в главе 9, является примером такого использования: enum Result<T, E> { Ok(T), Err(E),\n} Перечисление Result имеет два обобщённых вида: T и E — и два варианта: Ok, который содержит вид T, и Err, содержащий вид E. С таким определением удобно использовать перечисление Result везде, где действия могут быть выполнены успешно (возвращая значение вида T) или неуспешно (возвращая ошибку вида E). Это то, что мы делали при открытии файла в приложении 9-3, где T заполнялось видом std::fs::File, если файл был открыт успешно, либо E заполнялось видом std::io::Error, если при открытии файла возникали какие-либо проблемы. Если вы встречаете в коде ситуации, когда несколько определений структур или перечислений отличаются только видами содержащихся в них значений, вы можете устранить повторение, используя обобщённые виды.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды данных » В определениях перечислений","id":"171","title":"В определениях перечислений"},"172":{"body":"Мы можем реализовать способы для структур и перечислений (как мы делали в главе 5) и в определениях этих способов также использовать обобщённые виды. В приложении 10-9 показана структура Point<T>, которую мы определили в приложении 10-6, с добавленным для неё способом x. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-09/src/main.rs}} Приложение 10-9: Реализация способа с именем x у структуры Point<T>, которая будет возвращать ссылку на поле x вида T Здесь мы определили способ с именем x у структуры Point<T>, который возвращает ссылку на данные в поле x. Обратите внимание, что мы должны объявить T сразу после impl . В этом случае мы можем использовать T для указания на то, что реализуем способ для вида Point<T>. Объявив T универсальным видом сразу после impl , Rust может определить, что вид в угловых скобках в Point является универсальным, а не определенным видом. Мы могли бы выбрать другое имя для этого обобщённого свойства, отличное от имени, использованного в определении структуры, но обычно используют одно и то же имя. Способы, написанные внутри раздела impl , который использует обобщённый вид, будут определены для любого экземпляра вида, независимо от того, какой определенный вид в конечном итоге будет подставлен вместо этого обобщённого. Мы можем также указать ограничения, какие обобщённые виды разрешено использовать при определении способов. Например, мы могли бы реализовать способы только для экземпляров вида Point<f32>, а не для экземпляров Point<T>, в которых используется произвольный обобщённый вид. В приложении 10-10 мы используем определенный вид f32, что означает, что мы не определяем никакие виды после impl. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-10/src/main.rs:here}} Приложение 10-10: разделimpl, который применяется только к структуре, имеющей определенный вид для свойства обобщённого вида T Этот код означает, что вид Point<f32> будет иметь способ с именем distance_from_origin, а другие экземпляры Point<T>, где T имеет вид, отличный от f32, не будут иметь этого способа. Способ вычисляет, насколько далеко наша точка находится от точки с координатами (0.0, 0.0), и использует математические действия, доступные только для видов с плавающей точкой. Свойства обобщённого вида, которые мы используем в определении структуры, не всегда совпадают с подобиями, использующимися в сигнатурах способов этой структуры. Чтобы пример был более очевидным, в приложении 10-11 используются обобщённые виды X1 и Y1 для определения структуры Point и виды X2 Y2 для сигнатуры способа mixup. Способ создаёт новый экземпляр структуры Point, где значение x берётся из self Point (имеющей вид X1), а значение y - из переданной структуры Point (где эта переменная имеет вид Y2). Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-11/src/main.rs}} Приложение 10-11: способ, использующий обобщённые виды, отличающиеся от видов, используемых в определении структуры В функции main мы определили вид Point, который имеет вид i32 для x (со значением 5 ) и вид f64 для y (со значением 10.4). Переменная p2 является структурой Point, которая имеет строковый срез для x (со значением «Hello») и char для y (со значением c). Вызов mixup на p1 с переменнаяом p2 создаст для нас экземпляр структуры p3, который будет иметь вид i32 для x (потому что x взят из p1). Переменная p3 будет иметь вид char для y (потому что y взят из p2). Вызов макроса println! выведет p3.x = 5, p3.y = c. Цель этого примера — отобразить ситуацию, в которой некоторые обобщённые свойства объявлены с помощью impl, а некоторые объявлены в определении способа. Здесь обобщённые свойства X1 и Y1 объявляются после impl, потому что они относятся к определению структуры. Обобщённые свойства X2 и Y2 объявляются после fn mixup, так как они относятся только к способу.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды данных » В определении способов","id":"172","title":"В определении способов"},"173":{"body":"Вы могли бы задаться вопросом, возникают ли какие-нибудь дополнительные издержки при использовании свойств обобщённого вида. Хорошая новость в том, что при использовании обобщённых видов ваша программа работает ничуть ни медленнее, чем если бы она работала с использованием определенных видов. В Rust это достигается во время сборки при помощи мономорфизации кода, использующего обобщённые виды. Мономорфизация — это процесс превращения обобщённого кода в определенный код путём подстановки определенных видов, использующихся при сборки. В этом процессе сборщик выполняет шаги, противоположные тем, которые мы использовали для создания обобщённой функции в приложении 10-5: он просматривает все места, где вызывается обобщённый код, и генерирует код для определенных видов, использовавшихся для вызова в обобщённом. Давайте посмотрим, как это работает при использовании перечисления Option<T> из встроенной библиотеки: let integer = Some(5);\nlet float = Some(5.0); Когда Rust собирает этот код, он выполняет мономорфизацию. Во время этого процесса сборщик считывает значения, которые были использованы в экземплярах Option<T>, и определяет два вида Option<T>: один для вида i32, а другой — для f64. Таким образом, он разворачивает обобщённое определение Option<T> в два определения, именно для i32 и f64, тем самым заменяя обобщённое определение определенными. Мономорфизированная исполнение кода выглядит примерно так (сборщик использует имена, отличные от тех, которые мы используем здесь для отображения): Файл: src/main.rs enum Option_i32 { Some(i32), None,\n} enum Option_f64 { Some(f64), None,\n} fn main() { let integer = Option_i32::Some(5); let float = Option_f64::Some(5.0);\n} Обобщённое Option<T> заменяется определенными определениями, созданными сборщиком. Поскольку Rust собирает обобщённый код в код, определяющий вид в каждом экземпляре, мы не платим за использование обобщённых видов во время выполнения. Когда код запускается, он работает точно так же, как если бы мы сделали повторение каждое определение вручную. Процесс мономорфизации делает обобщённые виды Rust чрезвычайно эффективными во время выполнения.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Обобщённые виды данных » Производительность кода, использующего обобщённые виды","id":"173","title":"Производительность кода, использующего обобщённые виды"},"174":{"body":"Типаж сообщает сборщику Rust о функциональности, которой обладает определённый вид и которой он может поделиться с другими видами. Можно использовать типажи, чтобы определять общее поведение абстрактным способом. Мы можем использовать ограничение типажа (trait bounds) чтобы указать, что общим видом может быть любой вид, который имеет определённое поведение. Примечание: Типажи похожи на функциональность часто называемую внешней оболочкими в других языках программирования, хотя и с некоторыми отличиями.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Типажи: определение общего поведения","id":"174","title":"Типажи: определение общего поведения"},"175":{"body":"Поведение вида определяется теми способами, которые мы можем вызвать у данного вида. Различные виды разделяют одинаковое поведение, если мы можем вызвать одни и те же способы у этих видов. Определение типажей - это способ сгруппировать сигнатуры способов вместе для того, чтобы описать общее поведение, необходимое для достижения определённой цели. Например, пусть есть несколько структур, которые имеют различный вид и различный размер текста: структура NewsArticle, которая содержит новость, напечатанную в каком-то месте мира; структура Tweet, которая содержит 280 символьную строку твита и мета-данные, обозначающие является ли твит новым или ответом на другой твит. Мы хотим создать крейт библиотеки медиа-агрегатора aggregator, которая может отображать сводку данных сохранённых в экземплярах структур NewsArticle или Tweet. Чтобы этого достичь, нам необходимо иметь возможность для каждой структуры получить короткую сводку на основе имеющихся данных, и для этого мы запросим сводку вызвав способ summarize. Приложение 10-12 показывает определение типажа Summary, который выражает это поведение. Файл: src/lib.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-12/src/lib.rs}} Приложение 10-12: Определение типажа Summary, который содержит поведение предоставленное способом summarize Здесь мы объявляем типаж с использованием ключевого слова trait, а затем его название, которым в нашем случае является Summary. Также мы объявляем крейт как pub что позволяет крейтам, зависящим от нашего крейта, тоже использовать наш крейт, что мы увидим в последующих примерах. Внутри фигурных скобок объявляются сигнатуры способов, которые описывают поведения видов, реализующих данный типаж, в данном случае поведение определяется только одной сигнатурой способа fn summarize(&self) -> String. После сигнатуры способа, вместо предоставления реализации в фигурных в скобках, мы используем точку с запятой. Каждый вид, реализующий данный типаж, должен предоставить своё собственное поведение для данного способа. Сборщик обеспечит, что любой вид содержащий типаж Summary, будет также иметь и способ summarize объявленный с точно такой же сигнатурой. Типаж может иметь несколько способов в описании его тела: сигнатуры способов перечисляются по одной на каждой строке и должны закачиваться символом ;.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Определение типажа","id":"175","title":"Определение типажа"},"176":{"body":"Теперь, после того как мы определили желаемое поведение используя типаж Summary, можно реализовать его у видов в нашем медиа-агрегаторе. Приложение 10-13 показывает реализацию типажа Summary у структуры NewsArticle, которая использует для создания сводки в способе summarize заголовок, автора и место публикации статьи. Для структуры Tweet мы определяем реализацию summarize используя имя пользователя и следующий за ним полный текст твита, полагая что содержание твита уже ограничено 280 символами. Файл: src/lib.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-13/src/lib.rs:here}} Приложение 10-13: Реализация типажа Summary для структур NewsArticle и Tweet Реализация типажа у вида подобна реализации обычных способов. Разница в том что после impl мы ставим имя типажа, который мы хотим реализовать, затем используем ключевое слово for, а затем указываем имя вида, для которого мы хотим сделать реализацию типажа. Внутри раздела impl мы помещаем сигнатуру способа объявленную в типаже. Вместо добавления точки с запятой в конце, после каждой сигнатуры используются фигурные скобки и тело способа заполняется определенным поведением, которое мы хотим получить у способов типажа для определенного вида. Теперь когда библиотека реализовала типаж Summary для NewsArticle и Tweet, программисты использующие крейт могут вызывать способы типажа у экземпляров видов NewsArticle и Tweet точно так же как если бы это были обычные способы. Единственное отличие состоит в том, что программист должен ввести типаж в область видимости точно так же как и виды. Здесь пример того как двоичный крейт может использовать наш aggregator: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-01-calling-trait-method/src/main.rs}} Данный код напечатает: 1 new tweet: horse_ebooks: of course, as you probably already know, people. Другие крейты, которые зависят от aggregator, тоже могу включить типаж Summary в область видимости для реализации Summary в их собственных видах. Одно ограничение, на которое следует обратить внимание, заключается в том, что мы можем реализовать типаж для вида только в том случае, если хотя бы один из типажей вида является местным для нашего крейта. Например, мы можем реализовать стандартный библиотечный типаж Display на собственном виде Tweet как часть функциональности нашего крейта aggregator потому что вид Tweet является местным для крейта aggregator. Также мы можем реализовать Summary для Vec<T> в нашем крейте aggregator, потому что типаж Summary является местным для нашего крейта aggregator. Но мы не можем реализовать внешние типажи для внешних видов. Например, мы не можем реализовать типаж Display для Vec<T> внутри нашего крейта aggregator, потому что Display и Vec<T> оба определены в встроенной библиотеке а не местно в нашем крейте aggregator. Это ограничение является частью свойства называемого согласованность (coherence), а ещё точнее сиротское правило (orphan rule), которое называется так потому что не представлен родительский вид. Это правило заверяет, что код других людей не может сломать ваш код и наоборот. Без этого правила два крейта могли бы реализовать один типаж для одинакового вида и Rust не сможет понять, какой реализацией нужно пользоваться.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Реализация типажа у вида","id":"176","title":"Реализация типажа у вида"},"177":{"body":"Иногда полезно иметь поведение по умолчанию для некоторых или всех способов в типаже вместо того, чтобы требовать реализации всех способов в каждом виде, реализующим данный типаж. Затем, когда мы реализуем типаж для определённого вида, можно сохранить или переопределить поведение каждого способа по умолчанию уже внутри видов. В примере 10-14 показано, как указать строку по умолчанию для способа summarize из типажа Summary вместо определения только сигнатуры способа, как мы сделали в примере 10-12. Файл: src/lib.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-14/src/lib.rs:here}} Приложение 10-14: Определение типажа Summary с реализацией способа summarize по умолчанию Для использования реализации по умолчанию при создании сводки у экземпляров NewsArticle вместо определения пользовательской реализации, мы указываем пустой разделimpl с impl Summary for NewsArticle {}. Хотя мы больше не определяем способ summarize непосредственно в NewsArticle, мы предоставили реализацию по умолчанию и указали, что NewsArticle реализует типаж Summary. В результате мы всё ещё можем вызвать способ summarize у экземпляра NewsArticle, например так: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-02-calling-default-impl/src/main.rs:here}} Этот код печатает New article available! (Read more...) . Создание реализации по умолчанию не требует от нас изменений чего-либо в реализации Summary для Tweet в приложении 10-13. Причина заключается в том, что синтаксис для переопределения реализации по умолчанию является таким же, как синтаксис для реализации способа типажа, который не имеет реализации по умолчанию. Реализации по умолчанию могут вызывать другие способы в том же типаже, даже если эти другие способы не имеют реализации по умолчанию. Таким образом, типаж может предоставить много полезной функциональности и только требует от разработчиков указывать небольшую его часть. Например, мы могли бы определить типаж Summary имеющий способ summarize_author, реализация которого требуется, а затем определить способ summarize который имеет реализацию по умолчанию, которая внутри вызывает способ summarize_author: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:here}} Чтобы использовать такую исполнение типажа Summary, нужно только определить способ summarize_author, при реализации типажа для вида: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/lib.rs:impl}} После того, как мы определим summarize_author, можно вызвать summarize для экземпляров структуры Tweet и реализация по умолчанию способа summarize будет вызывать определение summarize_author которое мы уже предоставили. Так как мы реализовали способ summarize_author типажа Summary, то типаж даёт нам поведение способа summarize без необходимости писать код. {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-03-default-impl-calls-other-methods/src/main.rs:here}} Этот код печатает 1 new tweet: (Read more from @horse_ebooks...) . Обратите внимание, что невозможно вызвать реализацию по умолчанию из переопределённой реализации того же способа.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Реализация поведения по умолчанию","id":"177","title":"Реализация поведения по умолчанию"},"178":{"body":"Теперь, когда вы знаете, как определять и реализовывать типажи, можно изучить, как использовать типажи, чтобы определить функции, которые принимают много различных видов. Мы будем использовать типаж Summary, реализованный для видов NewsArticle и Tweet в приложении 10-13, чтобы определить функцию notify, которая вызывает способ summarize для его свойства item, который имеет некоторый вид, реализующий типаж Summary. Для этого мы используем синтаксис impl Trait примерно так: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-04-traits-as-parameters/src/lib.rs:here}} Вместо определенного вида у свойства item указывается ключевое слово impl и имя типажа. Этот свойство принимает любой вид, который реализует указанный типаж. В теле notify мы можем вызывать любые способы у экземпляра item , которые приходят с типажом Summary, такие как способ summarize. Мы можем вызвать notify и передать в него любой экземпляр NewsArticle или Tweet. Код, который вызывает данную функцию с любым другим видом, таким как String или i32, не будет собираться, потому что эти виды не реализуют типаж Summary. Синтаксис ограничения типажа Синтаксис impl Trait работает для простых случаев, но на самом деле является синтаксическим сахаром для более длинной формы, которая называется ограничением типажа (trait bound); это выглядит так: pub fn notify<T: Summary>(item: &T) { println!(\"Breaking news! {}\", item.summarize());\n} Эта более длинная форма эквивалентна примеру в предыдущем разделе, но она более многословна. Мы помещаем объявление свойства обобщённого вида с ограничением типажа после двоеточия внутри угловых скобок. Синтаксис impl Trait удобен и делает код более сжатым в простых случаях, в то время как более полный синтаксис с ограничением типажа в других случаях может выразить большую сложность. Например, у нас может быть два свойства, которые реализуют типаж Summary. Использование синтаксиса impl Trait выглядит так: pub fn notify(item1: &impl Summary, item2: &impl Summary) { Использовать impl Trait удобнее если мы хотим разрешить функции иметь разные виды для item1 и item2 (но оба вида должны реализовывать Summary). Если же мы хотим заставить оба свойства иметь один и тот же вид, то мы должны использовать ограничение типажа так: pub fn notify<T: Summary>(item1: &T, item2: &T) { Обобщённый вид T указан для видов свойств item1 и item2 и ограничивает функцию так, что определенные значения видов переданные переменнойми для item1 и item2 должны быть одинаковыми. Задание нескольких границ типажей с помощью синтаксиса + Также можно указать более одного ограничения типажа. Допустим, мы хотели бы чтобы notify использовал как форматирование вывода так и summarize для свойства item: тогда мы указываем что в notify свойство item должен реализовывать оба типажа Display и Summary. Мы можем сделать это используя синтаксис +: pub fn notify(item: &(impl Summary + Display)) { Синтаксис + также допустим с ограничениями типажа для обобщённых видов: pub fn notify<T: Summary + Display>(item: &T) { При наличии двух ограничений типажа, тело способа notify может вызывать summarize и использовать {} для форматирования item при его печати. Более ясные границы типажа с помощью where Использование слишком большого количества ограничений типажа имеет свои недостатки. Каждый обобщённый вид имеет свои границы типажа, поэтому функции с несколькими свойствами обобщённого вида могут содержать много сведений об ограничениях между названием функции и списком её свойств затрудняющих чтение сигнатуры. По этой причине в Rust есть иной синтаксис для определения ограничений типажа внутри предложения where после сигнатуры функции. Поэтому вместо того, чтобы писать так: fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 { можно использовать where таким образом: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-07-where-clause/src/lib.rs:here}} Сигнатура этой функции менее загромождена: название функции, список свойств, и возвращаемый вид находятся рядом, а сигнатура не содержит в себе множество ограничений типажа.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Типажи как свойства","id":"178","title":"Типажи как свойства"},"179":{"body":"Также можно использовать синтаксис impl Trait в возвращаемой позиции, чтобы вернуть значение некоторого вида реализующего типаж, как показано здесь: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-05-returning-impl-trait/src/lib.rs:here}} Используя impl Summary для возвращаемого вида, мы указываем, что функция returns_summarizable возвращает некоторый вид, который реализует типаж Summary без обозначения определенного вида. В этом случае returns_summarizable возвращает Tweet, но код, вызывающий эту функцию, этого не знает. Возможность возвращать вид, который определяется только реализуемым им признаком, особенно полезна в среде замыканий и повторителей, которые мы рассмотрим в Главе 13. Замыкания и повторители создают виды, которые знает только сборщик или виды, которые очень долго указывать. Синтаксис impl Trait позволяет кратко указать, что функция возвращает некоторый вид, который реализует типаж Iterator без необходимости писать очень длинный вид. Однако, impl Trait возможно использовать, если возвращаете только один вид. Например, данный код, который возвращает значения или вида NewsArticle или вида Tweet, но в качестве возвращаемого вида объявляет impl Summary , не будет работать: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-06-impl-trait-returns-one-type/src/lib.rs:here}} Возврат либо NewsArticle либо Tweet не допускается из-за ограничений того, как реализован синтаксис impl Trait в сборщике. Мы рассмотрим, как написать функцию с таким поведением в разделе \"Использование объектов типажей, которые разрешены для значений или разных видов\" Главы 17.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Возврат значений вида реализующего определённый типаж","id":"179","title":"Возврат значений вида реализующего определённый типаж"},"18":{"body":"После установки Rust с помощью rustup обновление до новой исполнения не составит труда. В приказной оболочке запустите следующий скрипт обновления: $ rustup update Чтобы удалить Rust и rustup, выполните следующую приказ: $ rustup self uninstall","breadcrumbs":"С чего начать » Установка » Обновление и удаление","id":"18","title":"Обновление и удаление"},"180":{"body":"Используя ограничение типажа с разделом impl, который использует свойства обобщённого вида, можно реализовать способы условно, для тех видов, которые реализуют указанный типаж. Например, вид Pair<T> в приложении 10-15 всегда реализует функцию new для возврата нового экземпляра Pair<T> (вспомните раздел “Определение способов” Главы 5 где Self является псевдонимом вида для вида раздела impl, который в данном случае является Pair<T>). Но в следующем разделе impl вид Pair<T> реализует способ cmp_display только если его внутренний вид T реализует типаж PartialOrd (позволяющий сравнивать) и типаж Display (позволяющий выводить на печать). Файл: src/lib.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-15/src/lib.rs}} Приложение 10-15: Условная реализация способов у обобщённых видов в зависимости от ограничений типажа Мы также можем условно реализовать типаж для любого вида, который реализует другой типаж. Реализации типажа для любого вида, который удовлетворяет ограничениям типажа, называются общими реализациями и широко используются в встроенной библиотеке Rust. Например, стандартная библиотека реализует типаж ToString для любого вида, который реализует типаж Display. Разделimpl в встроенной библиотеке выглядит примерно так: impl<T: Display> ToString for T { // --snip--\n} Поскольку стандартная библиотека имеет эту общую реализацию, то можно вызвать способ to_string определённый типажом ToString для любого вида, который реализует типаж Display. Например, мы можем превратить целые числа в их соответствующие String значения, потому что целые числа реализуют типаж Display: let s = 3.to_string(); Общие реализации приведены в документации к типажу в разделе \"Implementors\". Типажи и ограничения типажей позволяют писать код, который использует свойства обобщённого вида для уменьшения повторения кода, а также указывая сборщику, что мы хотим обобщённый вид, чтобы иметь определённое поведение. Затем сборщик может использовать сведения про ограничения типажа, чтобы проверить, что все определенные виды, используемые с нашим кодом, обеспечивают правильное поведение. В изменяемых типизированных языках мы получили бы ошибку во время выполнения, если бы вызвали способ для вида, который не реализует вид определяемый способом. Но Rust перемещает эти ошибки на время сборки, поэтому мы вынуждены исправить проблемы, прежде чем наш код начнёт работать. Кроме того, мы не должны писать код, который проверяет своё поведение во время выполнения, потому что это уже проверено во время сборки. Это повышает производительность без необходимости отказываться от гибкости обобщённых видов.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Трейты (характеристики): определение разделяемого поведения » Использование ограничений типажа для условной реализации способов","id":"180","title":"Использование ограничений типажа для условной реализации способов"},"181":{"body":"Сроки (времена) жизни - ещё один вид обобщений, с которыми мы уже встречались. Если раньше мы использовали обобщения, чтобы убедиться, что вид обладает нужным нам поведением, теперь мы будем использовать сроки жизни для того, чтобы быть уверенными, что ссылки действительны как минимум столько времени в процессе исполнения программы, сколько нам требуется. В разделе \"Ссылки и заимствование\" главы 4, мы кое о чём умолчали: у каждой ссылки в Rust есть своё время жизни — область кода, на протяжении которого данная ссылка действительна (valid). В большинстве случаев сроки жизни выводятся неявно — так же, как у видов (нам требуется явно объявлять виды лишь в тех случаях, когда при самостоятельном выведении вида возможны варианты). Точно так же мы должны явно объявлять сроки жизни тех ссылок, для которых времена жизни могут быть определены сборщиком по-разному. Rust требует от нас объявлять взаимосвязи посредством обобщённых свойств сроков жизни, чтобы убедиться в том, что во время исполнения все действующие ссылки будут корректными. Аннотирование времени жизни — это концепция, отсутствующая в большинстве других языков программирования, так что она может показаться незнакомой. Хотя в этой главе мы не будем рассматривать времена жизни во всех подробностях, тем не менее, мы обсудим основные ситуации, в которых вы можете столкнуться с синтаксисом времени жизни, что позволит вам получше ознакомиться с этой концепцией.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Валидация ссылок при помощи времён жизни","id":"181","title":"Валидация ссылок при помощи времён жизни"},"182":{"body":"Основное предназначение сроков жизни — предотвращать появление так называемых \"повисших ссылок\" (dangling references), из-за которых программа обращается не к тем данным, к которым она собиралась обратиться. Рассмотрим программу из приложения 10-16, имеющую внешнюю и внутреннюю области видимости. {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-16/src/main.rs}} Приложение 10-16: Попытка использования ссылки, значение которой вышло из области видимости Примечание: примеры в приложениях 10-16, 10-17 и 10-23 объявляют переменные без указания их начального значения, поэтому имя переменной существует во внешней области видимости. На первый взгляд может показаться, что это противоречит отсутствию в Rust нулевых (null) значений. Однако, если мы попытаемся использовать переменную, прежде чем присвоить ей значение, мы получим ошибку сборки, которая показывает, что Rust действительно не разрешает нулевые (null) значения. Внешняя область видимости объявляет переменную с именем r без начального значения, а внутренняя область объявляет переменную с именем x с начальным значением 5. Во внутренней области мы пытаемся установить значение r как ссылку на x. Затем внутренняя область видимости заканчивается и мы пытаемся напечатать значение из r. Этот код не будет собран, потому что значение на которое ссылается r исчезает из области видимости, прежде чем мы попробуем использовать его. Вот сообщение об ошибке: {{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-16/output.txt}} Переменная x «не живёт достаточно долго». Причина в том, что x выйдет из области видимости, когда эта внутренняя область закончится в строке 7. Но r все ещё является действительной во внешней области видимости; поскольку её охват больше, мы говорим, что она «живёт дольше». Если бы Rust позволил такому коду работать, то переменная r смогла бы ссылаться на память, которая уже была освобождена (в тот момент, когда x вышла из внутренней области видимости), и всё что мы попытались бы сделать с r работало бы неправильно. Как же Rust определяет, что этот код некорректен? Он использует для этого анализатор заимствований (borrow checker).","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Времена жизни предотвращают появление \"повисших\" ссылок","id":"182","title":"Времена жизни предотвращают появление \"повисших\" ссылок"},"183":{"body":"Сборщик Rust имеет в своём составе анализатор заимствований , который сравнивает области видимости для определения, являются ли все заимствования действительными. В приложении 10-17 показан тот же код, что и в приложении 10-16, но с изложениями, показывающими времена жизни переменных. {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-17/src/main.rs}} Пример 10-17: Изложение времён жизни переменных r и x, с помощью определителей времени жизни 'a и 'b, соответственно Здесь мы описали время жизни для r с помощью 'a и время жизни x с помощью 'b . Как видите, время жизни 'b внутреннего раздела гораздо меньше, чем время жизни 'a внешнего раздела. Во время сборки Rust сравнивает продолжительность двух времён жизни и видит, что r имеет время жизни 'a, но ссылается на память со временем жизни 'b. Программа отклоняется, потому что 'b короче, чем 'a: объект ссылки не живёт так же долго, как сама ссылка. Приложение 10-18 исправляет код, чтобы в нём не было повисшей ссылки, и собирается без ошибок. {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-18/src/main.rs}} Приложение 10-18: Ссылка корректна, так как данные имеют более продолжительное время жизни, чем ссылка на эти данные Здесь переменная x имеет время жизни 'b, которое больше, чем время жизни 'a. Это означает, что переменная r может ссылаться на переменную x потому что Rust знает, что ссылка в переменной r будет всегда действительной до тех пор, пока переменная x является валидной. После того, как мы на примерах рассмотрели времена жизни ссылок и обсудили как Rust их анализирует, давайте поговорим об обобщённых временах жизни входных свойств и возвращаемых значений функций.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Анализатор заимствований","id":"183","title":"Анализатор заимствований"},"184":{"body":"Напишем функцию, которая возвращает более длинный из двух срезов строки. Эта функция принимает два среза строки и возвращает один срез строки. После того как мы реализовали функцию longest, код в приложении 10-19 должен вывести The longest string is abcd. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-19/src/main.rs}} Приложение 10-19: Функция main вызывает функцию longest для поиска наибольшего из двух срезов строки Обратите внимание, что мы хотим чтобы функция принимала строковые срезы, которые являются ссылками, а не строки, потому что мы не хотим, чтобы функция longest забирала во владение свои свойства. Обратитесь к разделу \"Строковые срезы как свойства\" Главы 4 для более подробного обсуждения того, почему свойства используемые в приложении 10-19 выбраны именно таким образом. Если мы попробуем реализовать функцию longest так, как это показано в приложении 10-20, программа не ссобирается: Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-20/src/main.rs:here}} Приложение 10-20: Реализация функции longest, которая возвращает наибольший срез строки, но пока не собирается Вместо этого мы получим следующую ошибку, говорящую о временах жизни: {{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-20/output.txt}} Текст ошибки показывает, что возвращаемому виду нужен обобщённый свойство времени жизни, потому что Rust не может определить, относится ли возвращаемая ссылка к x или к y. На самом деле, мы тоже не знаем, потому что разделif в теле функции возвращает ссылку на x, а разделelse возвращает ссылку на y! Когда мы определяем эту функцию, мы не знаем определенных значений, которые будут в неё передаваться. Поэтому мы не знаем какая из ветвей оператора if или else будет выполнена. Мы также не знаем определенных времён жизни ссылок, которые будут переданы в функцию, поэтому мы не можем посмотреть на их области видимости, как мы делали в примерах 10-17 и 10-18, чтобы определить, будет ли возвращаемая нами ссылка корректной во всех случаях. Анализатор заимствований также не может этого определить, потому что он не знает как времена жизни переменных x и y соотносятся с временем жизни возвращаемого значения. Чтобы исправить эту ошибку, мы добавим обобщённый свойство времени жизни, который определит отношения между ссылками таким образом, чтобы анализатор заимствований мог провести свой анализ.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Обобщённые времена жизни в функциях","id":"184","title":"Обобщённые времена жизни в функциях"},"185":{"body":"Изложения времени жизни не меняют срок, как долго живёт та или иная ссылка. Они скорее описывают, как соотносятся между собой времена жизни нескольких ссылок, не влияя на само время жизни. Точно так же, как функции могут принимать любой вид, когда в сигнатуре указан свойство обобщённого вида, функции могут принимать ссылки с любым временем жизни, указанным с помощью свойства обобщённого времени жизни. Изложения времени жизни имеют немного необычный синтаксис: имена свойств времени жизни должны начинаться с апострофа ('), пишутся маленькими буквами, и обычно очень короткие, как и имена обобщённых видов. Большинство людей использует имя 'a в качестве первой изложении времени жизни. Изложения свойств времени жизни следуют после символа & и отделяются пробелом от названия ссылочного вида. Приведём несколько примеров: у нас есть ссылка на i32 без указания времени жизни, ссылка на i32, с временем жизни имеющим имя 'a и изменяемая ссылка на i32, которая также имеет время жизни 'a. &i32 // a reference\n&'a i32 // a reference with an explicit lifetime\n&'a mut i32 // a mutable reference with an explicit lifetime Одна изложение времени жизни сама по себе не имеет большого значения, поскольку изложении предназначены для того, чтобы уведомить Rust о том, как времена жизни нескольких ссылок соотносятся между собой. Давайте рассмотрим, как изложении времени жизни связаны друг с другом в среде функции longest.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Синтаксис изложении времени жизни","id":"185","title":"Синтаксис изложении времени жизни"},"186":{"body":"Чтобы использовать изложении времени жизни в сигнатурах функций, нам нужно объявить свойства обобщённого времени жизни внутри угловых скобок между именем функции и списком свойств, как мы это делали с свойствами обобщённого вида . Мы хотим, чтобы сигнатура отражала следующее ограничение: возвращаемая ссылка будет действительна до тех пор, пока валидны оба свойства. Это связь между временами жизни свойств и возвращаемого значения. Мы назовём это время жизни 'a, а затем добавим его к каждой ссылке, как показано в приложении 10-21. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-21/src/main.rs:here}} Приложение 10-21: В определении функции longest указано, что все ссылки должны иметь одинаковое время жизни, обозначенное как 'a Этот код должен собираться и давать желаемый результат, когда мы вызовем его в функции main приложения 10-19. Сигнатура функции теперь сообщает Rust, что для некоторого времени жизни 'a функция принимает два свойства, оба из которых являются срезами строк, которые живут не меньше, чем время жизни 'a. Сигнатура функции также сообщает Rust, что срез строки, возвращаемый функцией, будет жить как минимум столько, сколько длится время жизни 'a. На практике это означает, что время жизни ссылки, возвращаемой функцией longest, равно меньшему времени жизни передаваемых в неё ссылок. Мы хотим, чтобы Rust использовал именно такие отношения при анализе этого кода. Помните, когда мы указываем свойства времени жизни в этой сигнатуре функции, мы не меняем время жизни каких-либо переданных или возвращённых значений. Скорее, мы указываем, что анализатор заимствований должен отклонять любые значения, которые не соответствуют этим ограничениям. Обратите внимание, что самой функции longest не нужно точно знать, как долго будут жить x и y, достаточно того, что некоторая область может быть заменена на 'a, которая будет удовлетворять этой сигнатуре. При аннотировании времён жизни функций, изложении помещаются в сигнатуру функции, а не в тело функции. Изложения времени жизни становятся частью контракта функции, как и виды в сигнатуре. Наличие сигнатур функций, содержащих контракт времени жизни, означает, что анализ который выполняет сборщик Rust, может быть проще. Если есть проблема с тем, как функция аннотируется или как она вызывается, ошибки сборщика могут указать на часть нашего кода и ограничения более точно. Если бы вместо этого сборщик Rust сделал больше предположений о том, какие отношения времён жизни мы хотели получить, сборщик смог бы указать только на использование нашего кода за много шагов от источника проблемы. Когда мы передаём определенные ссылки в функцию longest, определенным временем жизни, которое будет заменено на 'a, является часть области видимости x, которая пересекается с областью видимости y. Другими словами, обобщённое время жизни 'a получит определенное время жизни, равное меньшему из времён жизни x и y. Так как мы аннотировали возвращаемую ссылку тем же свойствоом времени жизни 'a, то возвращённая ссылка также будет действительна на протяжении меньшего из времён жизни x и y. Давайте посмотрим, как изложении времени жизни ограничивают функцию longest путём передачи в неё ссылок, которые имеют разные определенные времена жизни. Приложение 10-22 является очевидным примером. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-22/src/main.rs:here}} Приложение 10-22: Использование функции longest со ссылками на значения вида String, имеющими разное время жизни В этом примере переменная string1 действительна до конца внешней области, string2 действует до конца внутренней области видимости и result ссылается на что-то, что является действительным до конца внутренней области видимости. Запустите этот код, и вы увидите что анализатор заимствований разрешает такой код; он ссобирает и напечатает The longest string is long string is long. Теперь, давайте попробуем пример, который показывает, что время жизни ссылки result должно быть меньшим временем жизни одного из двух переменных. Мы переместим объявление переменной result за пределы внутренней области видимости, но оставим присвоение значения переменной result в области видимости string2. Затем мы переместим println!, который использует result за пределы внутренней области видимости, после того как внутренняя область видимости закончилась. Код в приложении 10-23 не ссобирается. Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-23/src/main.rs:here}} Приложение 10-23: Попытка использования result, после того как string2 вышла из области видимости При попытке собрать этот код, мы получим такую ошибку: {{#include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-23/output.txt}} Эта ошибка говорит о том, что если мы хотим использовать result в указания println!, переменная string2 должна бы быть действительной до конца внешней области видимости. Rust знает об этом, потому что мы аннотировали свойства функции и её возвращаемое значение одинаковым временем жизни 'a. Будучи людьми, мы можем посмотреть на этот код и увидеть, что string1 длиннее, чем string2 и, следовательно, result будет содержать ссылку на string1. Поскольку string1 ещё не вышла из области видимости, ссылка на string1 будет все ещё действительной в указания println!. Однако сборщик не видит, что ссылка в этом случае валидна. Мы сказали Rust, что время жизни ссылки, возвращаемой из функции longest, равняется меньшему из времён жизни переданных в неё ссылок. Таким образом, анализатор заимствований запрещает код в приложении 10-23, как возможно имеющий недействительную ссылку. Попробуйте провести больше экспериментов с различными значениями и временами жизни ссылок, передаваемых в функцию longest, а также с тем, как используется возвращаемое значение Перед сборкой делайте предположения о том, пройдёт ли ваш код анализ заимствований, а затем проверяйте, насколько вы были правы.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Изложения времени жизни в сигнатурах функций","id":"186","title":"Изложения времени жизни в сигнатурах функций"},"187":{"body":"В зависимости от того, что делает ваша функция, следует использовать разные способы указания свойств времени жизни. Например, если мы изменим реализацию функции longest таким образом, чтобы она всегда возвращала свой первый переменная вместо самого длинного среза строки, то время жизни для свойства y можно совсем не указывать. Этот код ссобирается: Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-08-only-one-reference-with-lifetime/src/main.rs:here}} Мы указали свойство времени жизни 'a для свойства x и возвращаемого значения, но не для свойства y, поскольку время жизни свойства y никак не соотносится с временем жизни свойства x или возвращаемого значения. При возврате ссылки из функции, свойство времени жизни для возвращаемого вида должен соответствовать свойству времени жизни одного из переменных. Если возвращаемая ссылка не ссылается на один из свойств, она должна ссылаться на значение, созданное внутри функции. Однако, это приведёт к недействительной ссылке, поскольку значение, на которое она ссылается, выйдет из области видимости в конце функции. Посмотрите на попытку реализации функции longest, которая не ссобирается: Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-09-unrelated-lifetime/src/main.rs:here}} Здесь, несмотря на то, что мы указали свойство времени жизни 'a для возвращаемого вида, реализация не будет собрана, потому что время жизни возвращаемого значения никак не связано с временем жизни свойств. Получаем сообщение об ошибке: {{#include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-09-unrelated-lifetime/output.txt}} Проблема заключается в том, что result выходит за область видимости и очищается в конце функции longest. Мы также пытаемся вернуть ссылку на result из функции. Мы не можем указать свойства времени жизни, которые могли бы изменить недействительную ссылку, а Rust не позволит нам создать недействительную ссылку. В этом случае лучшим решением будет вернуть владеющий вид данных, а не ссылку: в этом случае вызывающая функция будет нести ответственность за очистку полученного ею значения. В конечном итоге, синтаксис времён жизни реализует связывание времён жизни различных переменных и возвращаемых значений функций. Описывая времена жизни, мы даём Rust достаточно сведений, чтобы разрешить безопасные действия с памятью и запретить действия, которые могли бы создать недействительные ссылки или иным способом нарушить безопасность памяти.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Мышление в терминах времён жизни","id":"187","title":"Мышление в терминах времён жизни"},"188":{"body":"До сих пор мы объявляли структуры, которые всегда содержали владеющие виды данных. Структуры могут содержать и ссылки, но при этом необходимо добавить изложение времени жизни для каждой ссылки в определении структуры. Приложение 10-24 описывает структуру ImportantExcerpt, содержащую срез строки: Файл: src/main.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-24/src/main.rs}} Приложение 10-25. Структура, содержащая ссылку, требует изложении времени жизни У структуры имеется одно поле part, хранящее срез строки, который сам по себе является ссылкой. Как и в случае с обобщёнными видами данных, мы объявляем имя обобщённого свойства времени жизни внутри угловых скобок после имени структуры, чтобы иметь возможность использовать его внутри определения структуры. Данная изложение означает, что экземпляр ImportantExcerpt не может пережить ссылку, которую он содержит в своём поле part. Функция main здесь создаёт экземпляр структуры ImportantExcerpt, который содержит ссылку на первое предложение вида String принадлежащее переменной novel. Данные в novel существуют до создания экземпляра ImportantExcerpt. Кроме того, novel не выходит из области видимости до тех пор, пока ImportantExcerpt не выйдет за область видимости, поэтому ссылка в внутри экземпляра ImportantExcerpt является действительной.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Определение времён жизни при объявлении структур","id":"188","title":"Определение времён жизни при объявлении структур"},"189":{"body":"Вы изучили, что у каждой ссылки есть время жизни и что нужно указывать свойства времени жизни для функций или структур, которые используют ссылки. Однако в Главе 4 у нас была функция в приложении 4-9, которая затем снова показана в приложении 10-25, в которой код собрался без аннотаций времени жизни. Файл: src/lib.rs {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/listing-10-25/src/main.rs:here}} Приложение 10-25: Функция, которую мы определили в приложении 4-9 собирается без аннотаций времени жизни, несмотря на то, что входной и возвращаемый вид свойств являются ссылками Причина, по которой этот код собирается — историческая. В ранних (до-1.0) исполнениях Rust этот код не собрался бы, поскольку каждой ссылке нужно было явно назначать время жизни. В те времена, сигнатура функции была бы написана примерно так: fn first_word<'a>(s: &'a str) -> &'a str { После написания большого количества кода на Rust разработчики языка обнаружили, что в определённых ситуациях программисты описывают одни и те же изложении времён жизни снова и снова. Эти ситуации были предсказуемы и следовали нескольким детерминированным шаблонным моделям. Объединение Rust решила запрограммировать эти шаблоны в код сборщика Rust, чтобы анализатор заимствований мог вывести времена жизни в таких ситуациях без необходимости явного указания аннотаций программистами. Мы упоминаем этот фрагмент истории Rust, потому что возможно, что в будущем появится больше шаблонов для самостоятельного выведения времён жизни, которые будут добавлены в сборщик. Таким образом, в будущем может понадобится ещё меньшее количество аннотаций. Шаблоны, запрограммированные в анализаторе ссылок языка Rust, называются правилами неявного выведения времени жизни . Это не правила, которым должны следовать программисты; а набор частных случаев, которые рассмотрит сборщик, и, если ваш код попадает в эти случаи, вам не нужно будет указывать время жизни явно. Правила выведения не предоставляют полного заключения. Если Rust детерминировано применяет правила, но некоторая неясность относительно времён жизни ссылок все ещё остаётся, сборщик не будет догадываться, какими должны быть времена жизни оставшихся ссылок. В этом случае, вместо угадывания сборщик выдаст ошибку, которую вы можете устранить, добавив изложении времени жизни. Времена жизни свойств функции или способа называются временем жизни ввода , а времена жизни возвращаемых значений называются временем жизни вывода . Сборщик использует три правила, чтобы выяснить времена жизни ссылок при отсутствии явных аннотаций. Первое правило относится ко времени жизни ввода, второе и третье правила применяются ко временам жизни вывода. Если сборщик доходит до конца проверки трёх правил и всё ещё есть ссылки, для которых он не может выяснить время жизни, сборщик остановится с ошибкой. Эти правила применяются к объявлениям fn, а также к разделам impl. Первое правило заключается в том, что каждый свойство являющийся ссылкой, получает свой собственный свойство времени жизни. Другими словами, функция с одним свойствоом получит один свойство времени жизни: fn foo<'a>(x: &'a i32); функция с двумя переменнойми получит два отдельных свойства времени жизни: fn foo<'a, 'b>(x: &'a i32, y: &'b i32), и так далее. Второе правило говорит, что если есть ровно один входной свойство времени жизни, то его время жизни назначается всем выходным свойствам: fn foo<'a>(x: &'a i32) -> &'a i32. Третье правило о том, что если есть множество входных свойств времени жизни, но один из них является ссылкой &self или &mut self, так как эта функция является способом, то время жизни self назначается временем жизни всем выходным свойствам. Это третье правило делает способы намного приятнее для чтения и записи, потому что требуется меньше символов. Представим, что мы сборщик и применим эти правила, чтобы вывести времена жизни ссылок в сигнатуре функции first_word приложения 10-25. Сигнатура этой функции начинается без объявления времён жизни ссылок: fn first_word(s: &str) -> &str { Теперь мы (в качестве сборщика) применим первое правило, утверждающее, что каждый свойство функции получает своё собственное время жизни. Как обычно, назовём его 'a и теперь сигнатура выглядит так: fn first_word<'a>(s: &'a str) -> &str { Далее применяем второе правило, поскольку в функции указан только один входной свойство времени жизни. Второе правило гласит, что время жизни единственного входного свойства назначается выходным свойствам, поэтому сигнатура теперь преобразуется таким образом: fn first_word<'a>(s: &'a str) -> &'a str { Теперь все ссылки в этой функции имеют свойства времени жизни и сборщик может продолжить свой анализ без необходимости просить у программиста указать изложении времён жизни в сигнатуре этой функции. Давайте рассмотрим ещё один пример: на этот раз функцию longest, в которой не было свойств времени жизни, когда мы начали с ней работать в приложении 10-20: fn longest(x: &str, y: &str) -> &str { Применим первое правило: каждому свойству назначается собственное время жизни. На этот раз у функции есть два свойства, поэтому есть два времени жизни: fn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str { Можно заметить, что второе правило здесь не применимо, так как в сигнатуре указано больше одного входного свойства времени жизни. Третье правило также не применимо, так как longest — функция, а не способ, следовательно, в ней нет свойства self. Итак, мы прошли все три правила, но так и не смогли вычислить время жизни выходного свойства. Поэтому мы и получили ошибку при попытке собрать код приложения 10-20: сборщик работал по правилам неявного выведения времён жизни, но не мог выяснить все времена жизни ссылок в сигнатуре. Так как третье правило применяется только к способам, далее мы рассмотрим времена жизни в этом среде, чтобы понять, почему нам часто не требуется аннотировать времена жизни в сигнатурах способов.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Правила неявного выведения времени жизни","id":"189","title":"Правила неявного выведения времени жизни"},"19":{"body":"Установка Rust также включает местную копию документации, чтобы вы могли читать её в без доступа к мировой сети режиме. Выполните rustup doc, чтобы открыть местную документацию в браузере. Если стандартная библиотека предоставляет вид или функцию, а вы не знаете, что она делает или как её использовать, воспользуйтесь документацией внешней оболочки прикладного программирования (API), чтобы это узнать!","breadcrumbs":"С чего начать » Установка » Локальная документация","id":"19","title":"Локальная документация"},"190":{"body":"Когда мы реализуем способы для структур с временами жизни, мы используем тот же синтаксис, который применялся для аннотаций обобщённых видов данных на приложении 10-11. Место, где мы объявляем и используем времена жизни, зависит от того, с чем они связаны — с полями структуры, либо с переменнойми способов и возвращаемыми значениями. Имена свойств времени жизни для полей структур всегда описываются после ключевого слова impl и затем используются после имени структуры, поскольку эти времена жизни являются частью вида структуры. В сигнатурах способов внутри раздела impl ссылки могут быть привязаны ко времени жизни ссылок в полях структуры, либо могут быть независимыми. Вдобавок, правила неявного выведения времён жизни часто делают так, что изложении переменных времён жизни являются необязательными в сигнатурах способов. Рассмотрим несколько примеров, использующих структуру с названием ImportantExcerpt, которую мы определили в приложении 10-24. Сначала, воспользуемся способом level, чей единственный свойство является ссылкой на self, а возвращаемое значение i32, не является ссылкой ни на что: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-10-lifetimes-on-methods/src/main.rs:1st}} Объявление свойства времени жизни после impl и его использование после имени вида является обязательным, но нам не нужно аннотировать время жизни ссылки на self, благодаря первому правилу неявного выведения времён жизни. Вот пример, где применяется третье правило неявного выведения времён жизни: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-10-lifetimes-on-methods/src/main.rs:3rd}} В этом способе имеется два входных свойства, поэтому Rust применит первое правило и назначит обоим свойствам &self и announcement собственные времена жизни. Далее, поскольку один из свойств является &self, то возвращаемое значение получает время жизни переменой &self и все времена жизни теперь выведены.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Изложение времён жизни в определении способов","id":"190","title":"Изложение времён жизни в определении способов"},"191":{"body":"Одно особенное время жизни, которое мы должны обсудить, называется 'static. Оно означает, что данная ссылка может жить всю продолжительность работы программы. Все строковые литералы по умолчанию имеют время жизни 'static, но мы можем указать его явным образом: let s: &'static str = \"I have a static lifetime.\"; Содержание этой строки сохраняется внутри двоичного файл программы и всегда доступно для использования. Следовательно, время жизни всех строковых литералов равно 'static. Сообщения сборщика об ошибках в качестве решения проблемы могут предлагать вам использовать время жизни 'static. Но прежде чем указывать 'static как время жизни для ссылки, подумайте, на самом ли деле данная ссылка будет доступна во всё время работы программы. В большинстве случаев, сообщения об ошибках, предлагающие использовать время жизни 'static появляются при попытках создания недействительных ссылок или несовпадения имеющихся времён жизни. В таких случаях, решение заключается в исправлении таких проблем, а не в указании статического времени жизни 'static.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Статическое время жизни","id":"191","title":"Статическое время жизни"},"192":{"body":"Давайте кратко рассмотрим синтаксис задания свойств обобщённых видов, ограничений типажа и времён жизни совместно в одной функции: {{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-11-generics-traits-and-lifetimes/src/main.rs:here}} Это функция longest из приложения 10-21, которая возвращает наибольший из двух срезов строки. Но теперь у неё есть дополнительный свойство с именем ann обобщённого вида T, который может быть представлен любым видом, реализующим типаж Display, как указано в предложении where. Этот дополнительный свойство будет напечатан с использованием {} , поэтому ограничение типажа Display необходимо. Поскольку время жизни является обобщённым видом, то объявления свойства времени жизни 'a и свойства обобщённого вида T помещаются в один список внутри угловых скобок после имени функции.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Обобщённые виды свойств, ограничения типажей и времена жизни вместе","id":"192","title":"Обобщённые виды свойств, ограничения типажей и времена жизни вместе"},"193":{"body":"В этой главе мы рассмотрели много всего! Теперь вы знакомы с свойствами обобщённого вида, типажами и ограничениями типажа, обобщёнными свойствами времени жизни, вы готовы писать код без повторений, который будет работать во множестве различных ситуаций. Свойства обобщённого вида позволяют использовать код для различных видов данных. Типажи и ограничения типажа помогают убедиться, что, хотя виды и обобщённые, они будут вести себя, как этого требует ваш код. Вы изучили, как использовать изложении времени жизни чтобы убедиться, что этот универсальный код не будет генерировать никаких повисших ссылок. И весь этот анализ происходит в момент сборки и не влияет на производительность программы во время работы! Верите или нет, но в рамках этой темы всё есть ещё чему поучиться: в Главе 17 обсуждаются типажи-объекты, которые являются ещё одним способом использования типажей. Существуют также более сложные сценарии с изложениями времени жизни, которые вам понадобятся только в очень сложных случаях; для этого вам следует прочитать Rust Reference . Далее вы узнаете, как писать тесты на Rust, чтобы убедиться, что ваш код работает так, как задумано.","breadcrumbs":"Общие виды, трейты (характеристики) и время жизни » Валидация ссылок посредством сроков жизни » Итоги","id":"193","title":"Итоги"},"194":{"body":"В своём эссе 1972 года “The Humble Programmer,” Edsger W. Dijkstra сказал, что «Тестирование программы может быть очень эффективным способом показать наличие ошибок, но это безнадёжно неадекватно для показа их отсутствия». Это не значит, что мы не должны пытаться тестировать столько, сколько мы можем! Корректностью программы считается то, в какой степени наш код выполняет именно то, что мы задумывали. Rust разработан с учётом большой озабоченности корректностью программ, но корректность сложна и нелегко доказуема. Система типизации Rust берет на себя огромную часть этого бремени, но она не может уловить абсолютно все проблемы. Поэтому в Rust предусмотрена возможность написания автотестов. Допустим, мы пишем функцию add_two, которая прибавляет 2 к любому переданному ей числу. Сигнатура этой функции принимает целое число в качестве свойства и возвращает целое число в качестве результата. Когда мы реализуем и собираем эту функцию, Rust выполняет всю проверку видов и проверку заимствований, которую вы уже изучили, чтобы убедиться, что, например, мы не передаём значение String или недопустимую ссылку в эту функцию. Но Rust не способен проверить, что эта функция сделает именно то, что мы задумали, то есть вернёт свойство плюс 2, а не, скажем, свойство плюс 10 или свойство минус 50! Вот тут-то и приходят на помощь тесты. Мы можем написать тесты, которые утверждают, например, что когда мы передаём 3 в функцию add_two, возвращаемое значение будет 5. Мы можем запускать эти тесты всякий раз, когда мы вносим изменения в наш код, чтобы убедиться, что любое существующее правильное поведение не изменилось. Тестирование - сложный навык: мы не сможем охватить все подробности написания хороших тестов в одной главе, но мы обсудим основные подходы к тестированию в Rust. Мы поговорим об изложениех и макросах, доступных вам для написания тестов, о поведении по умолчанию и свойствах, предусмотренных для запуска тестов, а также о том, как организовать тесты в модульные тесты и встроенные тесты.","breadcrumbs":"Написание самостоятельно х тестов » Написание автоматизированных тестов","id":"194","title":"Написание автоматизированных тестов"},"195":{"body":"Тесты - это функции Rust, которые проверяют, что не тестовый код работает ожидаемым образом. Содержимое тестовых функций обычно выполняет следующие три действия: Установка любых необходимых данных или состояния. Запуск кода, который вы хотите проверить. Утверждение, что результаты являются теми, которые вы ожидаете. Давайте рассмотрим функции предоставляемые в Rust целенаправленно для написания тестов, которые выполнят все эти действия, включая атрибут test, несколько макросов и атрибут should_panic.","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Как писать тесты","id":"195","title":"Как писать тесты"},"196":{"body":"В простейшем случае в Rust тест - это функция, аннотированная атрибутом test. Атрибуты представляют собой метаданные о фрагментах кода Rust; один из примеров атрибут derive, который мы использовали со структурами в главе 5. Чтобы превратить функцию в тестирующую функцию добавьте #[test] в строку перед fn. Когда вы запускаете тесты приказом cargo test, Rust создаёт двоичный модуль выполняющий функции аннотированные атрибутом test и сообщающий о том, успешно или нет прошла каждая тестирующая функция. Когда мы создаём новый проект библиотеки с помощью Cargo, то в нём самостоятельно генерируется тестовый модуль с тест-функцией для нас. Этот модуль даст вам шаблон для написания ваших тестов, так что вам не нужно искать точную структуру и синтаксис тестовых функций каждый раз, когда вы начинаете новый проект. Вы можете добавить столько дополнительных тестовых функций и столько тестовых модулей, сколько захотите! Мы исследуем некоторые особенности работы тестов, экспериментируя с шаблонным тестом сгенерированным для нас, без реального тестирования любого кода. Затем мы напишем некоторые существующие тесты, которые вызывают некоторый написанный код и убедимся в его правильном поведении. Мы рассмотрим некоторые особенности работы тестов, поэкспериментируем с шаблонным тестом, прежде чем приступать к фактическому тестированию любого кода. Затем мы напишем несколько существующих тестов, которые вызывают некоторый написанный нами код и проверяют, что его поведение правильное. Давайте создадим новый библиотечный проект под названием adder, который складывает два числа: $ cargo new adder --lib Created library `adder` project\n$ cd adder Содержимое файла src/lib.rs вашей библиотеки adder должно выглядеть как в приложении 11-1. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}} Приложение 11-1: Тестовый модуль и функция, сгенерированные самостоятельно с помощью cargo new Сейчас давайте пропренебрегаем первые две строчки кода и сосредоточимся на функции. Обратите внимание на синтаксис изложении #[test]: этот атрибут указывает, что это тестовая функция, поэтому запускающий тестирование знает, что эту функцию следует рассматривать как тестовую. У нас также могут быть не тестируемые функции в модуле tests, которые помогут настроить общие сценарии или выполнить общие действия, поэтому нам всегда нужно указывать, какие функции являются тестами. В теле функции теста используется макрос assert_eq!, чтобы утверждать, что result, который содержит результат сложения 2 и 2, равен 4. Это утверждение служит примером формата для типичного теста. Давайте запустим его, чтобы убедиться, что этот тест пройден. Приказ cargo test выполнит все тесты в выбранном проекте и сообщит о результатах как в приложении 11-2: {{#include ../listings/ch11-writing-automated-tests/listing-11-01/output.txt}} Приложение 11-2: Вывод сведений о работе самостоятельно сгенерированных тестов Cargo собрал и выполнил тест. Мы видим строку running 1 test. Следующая строка показывает имя сгенерированной тестовой функции, называемой it_works, и результат запуска этого теста равный ok. Текст test result: ok. означает, что все тесты пройдены успешно и часть вывода 1 passed; 0 failed сообщает общее количество тестов, которые прошли или были ошибочными. Можно пометить тест как пренебрегаемый, чтобы он не выполнялся в определенном случае; мы рассмотрим это в разделе “Пренебрежение некоторых тестов, если их целенаправленно не запрашивать” позже в этой главе. Поскольку в данный момент мы этого не сделали, в сводке показано, что 0 ignored. Мы также можем передать переменная приказу cargo test для запуска только тех тестов, имя которых соответствует строке; это называется фильтрацией , и мы рассмотрим это в разделе “Запуск подмножества тестов по имени” . Мы также не фильтровали выполняемые тесты, поэтому в конце сводки показано, что 0 filtered out. Статистика 0 measured предназначена для тестов производительности. На момент написания этой статьи такие тесты доступны только в ночной сборке Rust. Посмотрите документацию о тестах производительности , чтобы узнать больше. Следующая часть вывода тестов начинается с Doc-tests adder - это сведения о тестах в документации. У нас пока нет тестов документации, но Rust может собирать любые примеры кода, которые находятся в API документации. Такая возможность помогает поддерживать документацию и код в синхронизированном состоянии. Мы поговорим о написании тестов документации в секции \"Комментарии документации как тесты\" Главы 14. Пока просто пропренебрегаем часть Doc-tests вывода. Давайте начнём настраивать тест в соответствии с нашими собственными потребностями. Сначала поменяем название нашего теста it_works на exploration, вот так: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/src/lib.rs}} Снова выполним приказ cargo test. Вывод показывает наименование нашей тест-функции - exploration вместо it_works: {{#include ../listings/ch11-writing-automated-tests/no-listing-01-changing-test-name/output.txt}} Добавим ещё один тест, но в этот раз целенаправленно сделаем так, чтобы этот новый тест не отработал! Тест терпит неудачу, когда что-то паникует в тестируемой функции. Каждый тест запускается в новом потоке и когда главный поток видит, что тестовый поток упал, то помечает тест как завершившийся аварийно. Мы говорили о простейшем способе вызвать панику в главе 9, используя для этого известный макрос panic!. Введём код тест-функции another, как в файле src/lib.rs из приложения 11-3. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-03/src/lib.rs:here}} Приложение 11-3: Добавление второго теста, который завершится ошибкой, потому что мы вызываем panic! макрос Запустим приказ cargo test. Вывод результатов показан в приложении 11-4, который сообщает, что тест exploration пройден, а another нет: {{#include ../listings/ch11-writing-automated-tests/listing-11-03/output.txt}} Приложение 11-4. Результаты теста, когда один тест пройден, а другой нет Вместо ok, строка test tests::another сообщает FAILED. Две новые секции появились между отдельными результатами и сводкой: в первом отображается подробная причина каждого сбоя теста. В данном случае тест another не сработал, потому что panicked at 'Make this test fail', произошло в строке 10 файла src/lib.rs . В следующем разделе перечисляют имена всех не пройденных тестов, что удобно, когда есть много тестов и много подробных результатов неудачных тестов. Мы можем использовать имя не пройденного теста для его дальнейшей отладки; мы больше поговорим о способах запуска тестов в разделе \"Управление хода выполнения тестов\" . Итоговая строка отображается в конце: общий результат нашего тестирования FAILED. У нас один тест пройден и один тест завершён аварийно. Теперь, когда вы увидели, как выглядят результаты теста при разных сценариях, давайте рассмотрим другие макросы полезные в тестах, кроме panic!.","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Структура тестирующей функции","id":"196","title":"Структура тестирующей функции"},"197":{"body":"Макрос assert! доступен из встроенной библиотеки и является удобным, когда вы хотите проверить что некоторое условие в тесте вычисляется в значение true. Мы передаём в макрос assert! переменная, который вычисляется в логическое значение. Если оно true, то ничего не происходит и тест считается пройденным. Если же значение вычисляется в false, то макрос assert! вызывает макрос panic!, чтобы вызвать сбой теста. Использование макроса assert! помогает проверить, что код функционирует как ожидалось. В главе 5, приложении 5-15, мы использовали структуру Rectangle и способ can_hold, который повторён в приложении 11-5. Давайте поместим этот код в файл src/lib.rs и напишем несколько тестов для него используя макрос assert!. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-05/src/lib.rs:here}} Приложение 11-5: Использование структуры Rectangle и её способа can_hold из главы 5 Способ can_hold возвращает логическое значение, что означает, что он является наилучшим вариантом использования в макросе assert!. В приложении 11-6 мы пишем тест, который выполняет способ can_hold путём создания экземпляра Rectangle шириной 8 и высотой 7 и убеждаемся, что он может содержать другой экземпляр Rectangle имеющий ширину 5 и высоту 1. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-06/src/lib.rs:here}} Приложение 11-6: Тест для способа can_hold, который проверяет что больший прямоугольник действительно может содержать меньший Также, в модуле tests обратите внимание на новую добавленную строку use super::*;. Модуль tests является обычным и подчиняется тем же правилам видимости, которые мы обсуждали в главе 7 \"Пути для ссылки на элементы внутри дерева модуля\" . Так как этот модуль tests является внутренним, нужно подключить тестируемый код из внешнего модуля в область видимости внутреннего модуля с тестами. Для этого используется вездесущеее подключение, так что все что определено во внешнем модуле становится доступным внутри tests модуля. Мы назвали наш тест larger_can_hold_smaller и создали два нужных экземпляра Rectangle. Затем вызвали макрос assert! и передали результат вызова larger.can_hold(&smaller) в него. Это выражение должно возвращать true, поэтому наш тест должен пройти. Давайте выясним! {{#include ../listings/ch11-writing-automated-tests/listing-11-06/output.txt}} Тест проходит. Теперь добавим другой тест, в этот раз мы попытаемся убедиться, что меньший прямоугольник не может содержать больший прямоугольник: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/src/lib.rs:here}} Поскольку правильный результат функции can_hold в этом случае false, то мы должны инвертировать этот результат, прежде чем передадим его в assert! макро. Как результат, наш тест пройдёт, если can_hold вернёт false: {{#include ../listings/ch11-writing-automated-tests/no-listing-02-adding-another-rectangle-test/output.txt}} Два теста работают. Теперь проверим, как отреагируют тесты, если мы добавим ошибку в код. Давайте изменим реализацию способа can_hold заменив одно из логических выражений знак сравнения с \"больше чем\" на противоположный \"меньше чем\" при сравнении ширины: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/src/lib.rs:here}} Запуск тестов теперь производит следующее: {{#include ../listings/ch11-writing-automated-tests/no-listing-03-introducing-a-bug/output.txt}} Наши тесты нашли ошибку! Так как в тесте larger.width равно 8 и smaller.width равно 5 сравнение ширины в способе can_hold возвращает результат false, поскольку число 8 не меньше чем 5.","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Проверка результатов с помощью макроса assert!","id":"197","title":"Проверка результатов с помощью макроса assert!"},"198":{"body":"Общим способом проверки функциональности является использование сравнения результата тестируемого кода и ожидаемого значения, чтобы убедиться в их равенстве. Для этого можно использовать макрос assert!, передавая ему выражение с использованием оператора ==. Важно также знать, что кроме этого стандартная библиотека предлагает пару макросов assert_eq! и assert_ne!, чтобы сделать тестирование более удобным. Эти макросы сравнивают два переменной на равенство или неравенство соответственно. Макросы также печатают два значения входных свойств, если тест завершился ошибкой, что позволяет легче увидеть почему тест ошибочен. Противоположно этому, макрос assert! может только отобразить, что он вычислил значение false для выражения ==, но не значения, которые привели к результату false. В приложении 11-7, мы напишем функцию add_two, которая прибавляет к входному свойству 2 и возвращает значение. Затем, протестируем эту функцию с помощью макроса assert_eq!: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-07/src/lib.rs}} Приложение 11-7: Тестирование функции add_two с помощью макроса assert_eq! Проверим, что тесты проходят! {{#include ../listings/ch11-writing-automated-tests/listing-11-07/output.txt}} Первый переменная, который мы передаём в макрос assert_eq! число 4 чей результат вызова равен add_two(2) . Строка для этого теста - test tests::it_adds_two ... ok , а текст ok означает, что наш тест пройден! Давайте введём ошибку в код, чтобы увидеть, как она выглядит, когда тест, который использует assert_eq! завершается ошибкой. Измените реализацию функции add_two, чтобы добавлять 3: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/src/lib.rs:here}} Попробуем выполнить данный тест ещё раз: {{#include ../listings/ch11-writing-automated-tests/no-listing-04-bug-in-add-two/output.txt}} Наш тест нашёл ошибку! Тест it_adds_two не выполнился, отображается сообщение assertion failed: (left == right)`` и показывает, что left было 4, а right было 5. Это сообщение полезно и помогает начать отладку: это означает left переменная assert_eq! имел значение 4, но right переменная для вызова add_two(2) был со значением 5. Обратите внимание, что в некоторых языках (таких как Java) в библиотеках кода для тестирования принято именовать входные свойства проверочных функций как \"ожидаемое\" (expected) и \"фактическое\" (actual). В Rust приняты следующие обозначения left и right соответственно, а порядок в котором определяются ожидаемое значение и производимое тестируемым кодом значение не имеют значения. Мы могли бы написать выражение в тесте как assert_eq!(add_two(2), 4), что приведёт к отображаемому сообщению об ошибке assertion failed: (left == right)``, слева left было бы 5, а справа right было бы 4. Макрос assert_ne! сработает успешно, если входные свойства не равны друг другу и завершится с ошибкой, если значения равны. Этот макрос наиболее полезен в тех случаях, когда мы не знаем заранее, каким значение будет , но знаем точно, каким оно не может быть. К примеру, если тестируется функция, которая обязательно изменяет входные данные определённым образом, но способ изменения входного свойства зависит от дня недели, в который запускаются тесты, что лучший способ проверить правильность работы такой функции - это сравнить и убедиться, что выходное значение функции не должно быть равным входному значению. В своей работе макросы assert_eq! и assert_ne! неявным образом используют операторы == и != соответственно. Когда проверка не срабатывает, макросы печатают значения переменных с помощью отладочного форматирования и это означает, что значения сравниваемых переменных должны реализовать типажи PartialEq и Debug. Все примитивные и большая часть видов встроенной библиотеки Rust реализуют эти типажи. Для структур и перечислений, которые вы реализуете сами будет необходимо реализовать типаж PartialEq для сравнения значений на равенство или неравенство. Для печати отладочной сведений в виде сообщений в строку вывода окне вывода необходимо реализовать типаж Debug. Так как оба типажа являются выводимыми типажами, как упоминалось в приложении 5-12 главы 5, то эти типажи можно реализовать добавив изложение #[derive(PartialEq, Debug)] к определению структуры или перечисления. Смотрите больше подробностей в Appendix C \"Выводимые типажи\" про эти и другие выводимые типажи.","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Проверка на равенство с помощью макросов assert_eq! и assert_ne!","id":"198","title":"Проверка на равенство с помощью макросов assert_eq! и assert_ne!"},"199":{"body":"Также можно добавить пользовательское сообщение как дополнительный переменная макросов для печати в сообщении об ошибке теста assert!, assert_eq!, и assert_ne!. Любые переменные, указанные после обязательных переменных, далее передаются в макрос format! (он обсуждается в разделе \"Конкатенация с помощью оператора + или макроса format!\" ), так что вы можете передать форматированную строку, которая содержит {} для заполнителей и значения, заменяющие эти заполнители. Пользовательские сообщения полезны для пояснения того, что означает утверждение (assertion); когда тест завершается неудачей, у вас будет лучшее представление о том, в чем проблема с кодом. Например, есть функция, которая приветствует человека по имени и мы хотим протестировать эту функцию. Мы хотим чтобы передаваемое ей имя выводилось в окно вывода: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-05-greeter/src/lib.rs}} Требования к этой программе ещё не были согласованы и мы вполне уверены, что текст Hello в начале приветствия ещё изменится. Мы решили, что не хотим обновлять тест при изменении требований, поэтому вместо проверки на точное равенство со значением возвращённым из greeting, мы просто будем проверять, что вывод содержит текст из входного свойства. Давайте внесём ошибку в этот код, изменив greeting так, чтобы оно не включало name и увидим, как выглядит сбой этого теста: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/src/lib.rs:here}} Запуск этого теста выводит следующее: {{#include ../listings/ch11-writing-automated-tests/no-listing-06-greeter-with-bug/output.txt}} Сообщение содержит лишь сведения о том что сравнение не было успешным и в какой строке это произошло. В данном случае, более полезный текст сообщения был бы, если бы также выводилось значение из функции greeting. Изменим тестирующую функцию так, чтобы выводились пользовательское сообщение форматированное строкой с заменителем и фактическими данными из кода greeting: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/src/lib.rs:here}} После того, как выполним тест ещё раз мы получим подробное сообщение об ошибке: {{#include ../listings/ch11-writing-automated-tests/no-listing-07-custom-failure-message/output.txt}} Мы можем увидеть значение, которое мы на самом деле получили в тестовом выводе, что поможет нам отлаживать произошедшее, а не то, что мы ожидали.","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Создание сообщений об ошибках","id":"199","title":"Создание сообщений об ошибках"},"2":{"body":"Примечание. Это издание книги такое же, как и Язык программирования Rust , доступное в печатном и электронном формате от No Starch Press . Добро пожаловать в The Rust Programming Language , вводную книгу о Rust. Язык программирования Rust помогает создавать быстрые, более надёжные приложения. Хорошая эргономика и низкоуровневый управление часто являются противоречивыми требованиями для дизайна языков программирования; Rust бросает вызов этому конфликту. Благодаря уравновешенности мощных технических возможностей c большим удобством разработки, Rust предоставляет возможности управления низкоуровневыми элементами (например, использование памяти) без трудностей, традиционно связанных с таким управлением.","breadcrumbs":"Введение » Введение","id":"2","title":"Введение"},"20":{"body":"Теперь, когда вы установили Rust, пришло время написать свою первую программу на Rust. Традиционно при изучении нового языка принято писать небольшую программу, которая печатает на экране текст Привет, мир!, поэтому мы сделаем то же самое! Примечание: Эта книга предполагает наличие достаточного навыка работы с приказной строкой. Rust не предъявляет особых требований к тому, каким набором средств вы пользуетесь для изменения или хранения вашего кода, поэтому если вы предпочитаете использовать встроенную среду разработки (IDE) вместо приказной строки, смело используйте вашу любимую IDE. Многие IDE сейчас в той или иной степени поддерживают Rust; подробности можно узнать из документации к IDE. Объединение Rust сосредоточилась на обеспечении отличной поддержки IDE с помощью rust-analyzer. Более подробную сведения смотрите в Приложении D .","breadcrumbs":"С чего начать » Привет, Мир! » Привет, мир!","id":"20","title":"Привет, мир!"},"200":{"body":"В дополнение к проверке того, что наш код возвращает правильные, ожидаемые значения, важным также является проверить, что наш код обрабатывает ошибки, которые мы ожидаем. Например, рассмотрим вид Guess который мы создали в главе 9, приложения 9-10. Другой код, который использует Guess зависит от заверения того, что Guess экземпляры будут содержать значения только от 1 до 100. Мы можем написать тест, который заверяет, что попытка создать экземпляр Guess со значением вне этого ряда вызывает панику. Реализуем это с помощью другого атрибута тест-функции #[should_panic]. Этот атрибут сообщает системе тестирования, что тест проходит, когда способ генерирует ошибку. Если ошибка не генерируется - тест считается не пройденным. Приложение 11-8 показывает тест, который проверяет, что условия ошибки Guess::new произойдут, когда мы их ожидаем их. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-08/src/lib.rs}} Приложение 11-8: Проверка того, что условие вызовет макрос panic! Атрибут #[should_panic] следует после #[test] и до объявления тестовой функции. Посмотрим на вывод результата, когда тест проходит: {{#include ../listings/ch11-writing-automated-tests/listing-11-08/output.txt}} Выглядит хорошо! Теперь давайте внесём ошибку в наш код, убрав условие о том, что функция new будет паниковать если значение больше 100: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/src/lib.rs:here}} Когда мы запустим тест в приложении 11-8, он потерпит неудачу: {{#include ../listings/ch11-writing-automated-tests/no-listing-08-guess-with-bug/output.txt}} Мы получаем не очень полезное сообщение в этом случае, но когда мы смотрим на тестирующую функцию, мы видим, что она #[should_panic]. Аварийное выполнение, которое мы получили означает, что код в тестирующей функции не вызвал паники. Тесты, которые используют should_panic могут быть неточными, потому что они только указывают, что код вызвал панику. Тест с атрибутом should_panic пройдёт, даже если тест паникует по причине, отличной от той, которую мы ожидали. Чтобы сделать тесты с should_panic более точными, мы можем добавить необязательный свойство expected для атрибута should_panic. Такая подробностизация теста позволит удостовериться, что сообщение об ошибке содержит предоставленный текст. Например, рассмотрим модифицированный код для Guess в приложении 11-9, где new функция паникует с различными сообщениями в зависимости от того, является ли значение слишком маленьким или слишком большим. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-09/src/lib.rs:here}} Приложение 11-9: Проверка panic! на наличие в его сообщении указанной подстроки Этот тест пройдёт, потому что значение, которое мы поместили для should_panic в свойство атрибута expected является подстрокой сообщения, с которым функция Guess::new вызывает панику. Мы могли бы указать полное, ожидаемое сообщение для паники, в этом случае это будет Guess value must be less than or equal to 100, got 200. То что вы выберите для указания как ожидаемого свойства у should_panic зависит от того, какая часть сообщения о панике уникальна или динамична, насколько вы хотите, чтобы ваш тест был точным. В этом случае достаточно подстроки из сообщения паники, чтобы обеспечить выполнение кода в тестовой функции else if value > 100 . Чтобы увидеть, что происходит, когда тест should_panic неуспешно завершается с сообщением expected, давайте снова внесём ошибку в наш код, поменяв местами if value < 1 и else if value > 100 блоки: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/src/lib.rs:here}} На этот раз, когда мы выполним should_panic тест, он потерпит неудачу: {{#include ../listings/ch11-writing-automated-tests/no-listing-09-guess-with-panic-msg-bug/output.txt}} Сообщение об ошибке указывает, что этот тест действительно вызвал панику, как мы и ожидали, но сообщение о панике не включено ожидаемую строку 'Guess value must be less than or equal to 100'. Сообщение о панике, которое мы получили в этом случае, было Guess value must be greater than or equal to 1, got 200. Теперь мы можем начать выяснение, где ошибка!","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Проверка с помощью макроса should_panic","id":"200","title":"Проверка с помощью макроса should_panic"},"201":{"body":"Пока что мы написали тесты, которые паникуют, когда терпят неудачу. Мы также можем написать тесты которые используют Result<T, E>! Вот тест из приложения 11-1, переписанный с использованием Result<T, E> и возвращающий Err вместо паники: {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-10-result-in-tests/src/lib.rs}} Функция it_works теперь имеет возвращаемый вид Result<(), String>. В теле функции, вместо вызова макроса assert_eq!, мы возвращаем Ok(()) когда тест успешно выполнен и Err со String внутри, когда тест не проходит. Написание тестов так, чтобы они возвращали Result<T, E> позволяет использовать оператор \"вопросительный знак\" в теле тестов, который может быть удобным способом писать тесты, которые должны выполниться не успешно, если какая-либо действие внутри них возвращает вариант ошибки Err. Вы не можете использовать изложение #[should_panic] в тестах, использующих Result<T, E>. Чтобы утверждать, что действие возвращает вариант Err, не используйте оператор вопросительного знака для значения Result<T, E>. Вместо этого используйте assert!(value.is_err()). Теперь, когда вы знаете несколько способов написания тестов, давайте взглянем на то, что происходит при запуске тестов и исследуем разные опции используемые с приказом cargo test.","breadcrumbs":"Написание самостоятельно х тестов » Как писать тесты » Использование Result<T, E> в тестах","id":"201","title":"Использование Result<T, E> в тестах"},"202":{"body":"Подобно тому, как cargo run выполняет сборку вашего кода, а затем запускает полученный двоичный файл, cargo test собирает ваш код в режиме тестирования и запускает полученный двоичный файл с тестами. Двоичный файл, создаваемый cargo test, по умолчанию запускает все тесты параллельно и перехватывает вывод, генерируемый во время выполнения тестов, предотвращая их вывод на экран для облегчения чтения вывода, относящегося к результатам тестирования. Однако вы можете указать свойства приказной строки, чтобы изменить это поведение по умолчанию. Часть свойств приказной строки передаётся в cargo test, а часть - в итоговый двоичный файл с тестами. Чтобы разделить эти два вида переменных, нужно сначала указать переменные, которые идут в cargo test, затем использовать разделитель --, а потом те, которые попадут в двоичный файл теста. Выполнение cargo test --help выводит опции, которые вы можете использовать с cargo test, а выполнение cargo test -- --help выводит опции, которые вы можете использовать за разделителем.","breadcrumbs":"Написание самостоятельно х тестов » Управление выполнением тестов » Управление хода выполнения тестов","id":"202","title":"Управление хода выполнения тестов"},"203":{"body":"Когда вы запускаете несколько тестов, по умолчанию они выполняются параллельно с использованием потоков, что означает, что они завершатся быстрее, и вы быстрее получите результаты. Поскольку тесты выполняются параллельно, вы должны убедиться, что ваши тесты не зависят друг от друга или от какого-либо общего состояния, включая общее окружение, например, текущий рабочий каталог или переменные окружения. Например, допустим, каждый из ваших тестов запускает код, который создаёт файл на диске с именем test-output.txt и записывает некоторые данные в этот файл. Затем каждый тест считывает данные из этого файла и утверждает, что файл содержит определённое значение, которое в каждом тесте разное. Поскольку все тесты выполняются одновременно, один из тестов может перезаписать файл в промежутке между записью и чтением файла другим тестом. Тогда второй тест потерпит неудачу, но не потому, что код неверен, а потому, что эти тесты мешали друг другу при параллельном выполнении. Одно из решений - убедиться, что каждый тест пишет в свой отдельный файл; другое решение - запускать тесты по одному. Если вы не хотите запускать тесты параллельно или хотите более подробный управление над количеством используемых потоков, можно установить флаг --test-threads и то количество потоков, которое вы хотите использовать для теста. Взгляните на следующий пример: $ cargo test -- --test-threads=1 Мы устанавливаем количество тестовых потоков равным 1 , указывая программе не использовать параллелизм. Выполнение тестов с использованием одного потока займёт больше времени, чем их параллельное выполнение, но тесты не будут мешать друг другу, если они совместно используют состояние.","breadcrumbs":"Написание самостоятельно х тестов » Управление выполнением тестов » Выполнение тестов параллельно или последовательно","id":"203","title":"Выполнение тестов параллельно или последовательно"},"204":{"body":"По умолчанию, если тест пройден, система управления запуска тестов блокирует вывод на печать, т.е. если вы вызовете макрос println! внутри кода теста и тест будет пройден, вы не увидите вывода на окно вывода результатов вызова println!. Если же тест не был пройден, все несущие сведения сообщения, а также описание ошибки будут выведены на окно вывода. Например, в коде (11-10) функция выводит значение свойства с поясняющим текстовым сообщением, а также возвращает целочисленное константное значение 10. Далее следует тест, который имеет правильный входной свойство и тест, который имеет ошибочный входной свойство: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-10/src/lib.rs}} Приложение 11-10: Тест функции, которая использует макрос println! Результат вывода на окно вывода приказы cargo test: {{#include ../listings/ch11-writing-automated-tests/listing-11-10/output.txt}} Обратите внимание, что нигде в этом выводе мы не видим сообщения I got the value 4 , которое печатается при выполнении пройденного теста. Этот вывод был записан. Результат неудачного теста, I got the value 8 , появляется в разделе итоговых результатов теста, который также показывает причину неудачного теста. Если мы хотим видеть напечатанные результаты прохождения тестов, мы можем сказать Rust, чтобы он также показывал результаты успешных тестов с помощью --show-output. $ cargo test -- --show-output Когда мы снова запускаем тесты из Приложения 11-10 с флагом --show-output , мы видим следующий результат: {{#include ../listings/ch11-writing-automated-tests/output-only-01-show-output/output.txt}}","breadcrumbs":"Написание самостоятельно х тестов » Управление выполнением тестов » Отображение результатов работы функции","id":"204","title":"Отображение результатов работы функции"},"205":{"body":"Бывают случаи, когда в запуске всех тестов нет необходимости и нужно запустить только несколько тестов. Если вы работаете над функцией и хотите запустить тесты, которые исследуют её работу - это было бы удобно. Вы можете это сделать, используя приказ cargo test, передав в качестве переменной имена тестов. Для отображения, как запустить группу тестов, мы создадим группу тестов для функции add_two function, как показано в Приложении 11-11, и постараемся выбрать какие из них запускать. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-11/src/lib.rs}} Приложение 11-11: Три теста с различными именами Если вы выполните приказ cargo test без уточняющих переменных, все тесты выполнятся параллельно: {{#include ../listings/ch11-writing-automated-tests/listing-11-11/output.txt}} Запуск одного теста Мы можем запустить один тест с помощью указания его имени в приказу cargo test: {{#include ../listings/ch11-writing-automated-tests/output-only-02-single-test/output.txt}} Был запущен только тест с названием one_hundred; два других теста не соответствовали этому названию. Результаты теста с помощью вывода 2 filtered out дают нам понять, что у нас было больше тестов, но они не были запущены. Таким образом мы не можем указать имена нескольких тестов; будет использоваться только первое значение, указанное для cargo test . Но есть способ запустить несколько тестов. Использование фильтров для запуска нескольких тестов Мы можем указать часть имени теста, и будет запущен любой тест, имя которого соответствует этому значению. Например, поскольку имена двух наших тестов содержат add, мы можем запустить эти два, запустив cargo test add: {{#include ../listings/ch11-writing-automated-tests/output-only-03-multiple-tests/output.txt}} Этот приказ запускала все тесты с add в имени и отфильтровывала тест с именем one_hundred . Также обратите внимание, что модуль, в котором появляется тест, становится частью имени теста, поэтому мы можем запускать все тесты в модуле, фильтруя имя модуля.","breadcrumbs":"Написание самостоятельно х тестов » Управление выполнением тестов » Запуск подмножества тестов по имени","id":"205","title":"Запуск подмножества тестов по имени"},"206":{"body":"Бывает, что некоторые тесты требуют продолжительного времени для своего исполнения, и вы хотите исключить их из исполнения при запуске cargo test. Вместо перечисления в приказной строке всех тестов, которые вы хотите запускать, вы можете аннотировать тесты, требующие много времени для прогона, атрибутом ignore, чтобы исключить их, как показано здесь: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/src/lib.rs}} После #[test] мы добавляем строку #[ignore] в тест, который хотим исключить. Теперь, когда мы запускаем наши тесты, it_works запускается, а expensive_test пренебрегается: {{#include ../listings/ch11-writing-automated-tests/no-listing-11-ignore-a-test/output.txt}} Функция expensive_test помечена как ignored. Если вы хотите выполнить только пренебреженные тесты, вы можете воспользоваться приказом cargo test -- --ignored: {{#include ../listings/ch11-writing-automated-tests/output-only-04-running-ignored/output.txt}} Управляя тем, какие тесты запускать, вы можете быть уверены, что результаты вашего cargo test будут быстрыми. Когда вы дойдёте до момента, где имеет смысл проверить результаты тестов ignored, и у вас есть время дождаться их результатов, вы можете запустить их с помощью cargo test -- --ignored. Если вы хотите запустить все тесты независимо от того, пренебрегаются они или нет, выполните cargo test -- --include-ignored.","breadcrumbs":"Написание самостоятельно х тестов » Управление выполнением тестов » Пренебрежение тестов","id":"206","title":"Пренебрежение тестов"},"207":{"body":"Как упоминалось в начале главы, тестирование является сложной дисциплиной и разные люди используют разную терминологию и организацию. Сообщество Rust думает о тестах с точки зрения двух основных разрядов: модульные тесты и встроенные тесты . Модульные тесты это небольшие и более сфокусированные на тестировании одного модуля в отдельности или могут тестироваться приватные внешние оболочки. Встраиваемые тесты являются полностью внешними по отношению к вашей библиотеке и используют код библиотеки так же, как любой другой внешний код, используя только общедоступные внешние оболочки и потенциально выполняя тестирование нескольких модулей в одном тесте. Написание обоих видов тестов важно для обеспечения того, чтобы кусочки вашей библиотеки по отдельности и вместе делали то, что вы ожидаете.","breadcrumbs":"Написание самостоятельно х тестов » Организация тестов » Организация тестов","id":"207","title":"Организация тестов"},"208":{"body":"Целью модульных тестов является тестирование каждого раздела кода, изолированное от остального функционала, чтобы можно было быстро понять, что работает некорректно или не так как ожидается. Мы разместим модульные тесты в папке src , в каждый тестируемый файл. Но в Rust принято создавать тестирующий модуль tests и код теста сохранять в файлы с таким же именем, как компоненты которые предстоит тестировать. Также необходимо добавить изложение cfg(test) к этому модулю. Модуль тестов и изложение #[cfg(test)] Изложение #[cfg(test)] у модуля с тестами указывает Rust собирать и запускать только код тестов, когда выполняется приказ cargo test, а не когда запускается cargo build. Это экономит время сборки, если вы только хотите собрать библиотеку и сэкономить место для результирующих собранных артефактов, потому что тесты не будут включены. Вы увидите что, по причине того, что встроенные тесты помещаются в другой каталог им не нужна изложение #[cfg(test)]. Тем не менее, так как модульные тесты идут в тех же файлах что и основной код, вы будете использовать #[cfg(test)] чтобы указать, что они не должны быть включены в собранный результат. Напомним, что когда мы генерировали новый проект adder в первом разделе этой главы, то Cargo сгенерировал для нас код ниже: Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-01/src/lib.rs}} Этот код является самостоятельно сгенерированным тестовым модулем. Атрибут cfg предназначен для настройке и говорит Rust, что следующий элемент должен быть включён только учитывая определённую опцию настройке. В этом случае опцией настройке является test, который предоставлен в Rust для сборки и запуска текущих тестов. Используя атрибут cfg, Cargo собирает только тестовый код при активном запуске тестов приказом cargo test. Это включает в себя любые вспомогательные функции, которые могут быть в этом модуле в дополнение к функциям помеченным #[test]. Тестирование приватных функций (private) Сообщество программистов не имеет однозначного мнения по поводу тестировать или нет приватные функции. В некоторых языках весьма сложно или даже невозможно тестировать такие функции. Независимо от того, какой технологии тестирования вы придерживаетесь, в Rust приватные функции можно тестировать. Рассмотрим приложение 11-12 с приватной функцией internal_adder. Файл: src/lib.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-12/src/lib.rs}} Приложение 11-12: Тестирование приватных функций Обратите внимание, что функция internal_adder не помечена как pub. Тесты — это просто Rust код, а модуль tests — это ещё один модуль. Как мы обсуждали в разделе “Пути для ссылки на элемент в дереве модулей“ , элементы в дочерних модулях могут использовать элементы из своих родительских модулей. В этом тесте мы помещаем все элементы родительского модуля test в область видимости с помощью use super::* и затем тест может вызывать internal_adder. Если вы считаете, что приватные функции не нужно тестировать, то Rust не заставит вас это сделать.","breadcrumbs":"Написание самостоятельно х тестов » Организация тестов » Модульные тесты","id":"208","title":"Модульные тесты"},"209":{"body":"В Rust встроенные тесты являются полностью внешними по отношению к вашей библиотеке. Они используют вашу библиотеку так же, как любой другой код, что означает, что они могут вызывать только функции, которые являются частью публичного API библиотеки. Их целью является проверка, много ли частей вашей библиотеки работают вместе правильно. У модулей кода правильно работающих самостоятельно, могут возникнуть проблемы при встраивани, поэтому тестовое покрытие встроенного кода также важно. Для создания встроенных тестов сначала нужен каталог tests . Каталог tests Мы создаём папку tests в корневой папке вашего проекта, рядом с папкой src . Cargo знает, что искать файлы с встроенными тестами нужно в этой папки. После этого мы можем создать столько тестовых файлов, сколько захотим, и Cargo ссобирает каждый из файлов в отдельный крейт. Давайте создадим встроенный тест. Рядом с кодом из приложения 11-12, который всё ещё в файле src/lib.rs , создайте каталог tests , создайте новый файл с именем tests/integration_test.rs . Структура папок должна выглядеть так: adder\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│ └── lib.rs\n└── tests └── integration_test.rs Введите код из приложения 11-13 в файл tests/integration_test.rs file: Файл: tests/integration_test.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/listing-11-13/tests/integration_test.rs}} Приложение 11-13: Встраиваемая тест функция из крейта adder Каждый файл в каталоге tests представляет собой отдельный крейт, поэтому нам нужно подключить нашу библиотеку в область видимости каждого тестового крейта. По этой причине мы добавляем use adder в верхней части кода, что не нужно нам делать в модульных тестах. Нам не нужно комментировать код в tests/integration_test.rs с помощью #[cfg(test)]. Cargo особым образом обрабатывает каталог tests и собирает файлы в этом каталоге только тогда, когда мы запускаем приказ cargo test. Запустите cargo test сейчас: {{#include ../listings/ch11-writing-automated-tests/listing-11-13/output.txt}} Выходные данные представлены тремя разделами: модульные тесты, встроенные тесты и тесты документации. Обратите внимание, что если какой-нибудь тест в одной из секций не пройдёт, последующие секции выполняться не будут. Например, если модульный тест провалился, не будет выведено результатов встроенных и документационных тестов, потому что эти тесты будут выполняться только в том случае, если все модульные тесты завершатся успешно. Первый раздел для модульных тестов такой же, как мы видели: одна строка для каждого модульного теста (один с именем internal, который мы добавили в приложении 11-12), а затем сводная строка для модульных тестов. Раздел встроенных тестов начинается со строки Running tests/integration_test.rs. Далее идёт строка для каждой тестовой функции в этом встроенном тесте и итоговая строка для результатов встроенного теста непосредственно перед началом раздела Doc-tests adder. Каждый файл встроенного теста имеет свой собственный раздел, поэтому, если мы добавим больше файлов в каталог tests , то здесь будет больше разделов встроенного теста. Мы всё ещё можем запустить определённую функцию в встроенных тестах, указав имя тест функции в качестве переменной в cargo test. Чтобы запустить все тесты в определенном файле встроенных тестов, используйте переменная --test сопровождаемый именем файла у приказы cargo test: {{#include ../listings/ch11-writing-automated-tests/output-only-05-single-integration/output.txt}} Этот приказ запускает только тесты в файле tests/integration_test.rs . Подмодули в встроенных тестах По мере добавления большего количества встроенных тестов, можно создать более одного файла в каталоге tests , чтобы легче организовывать их; например, вы можете сгруппировать функции тестирования по функциональности, которую они проверяют. Как упоминалось ранее, каждый файл в каталоге tests собран как отдельный крейт, что полезно для создания отдельных областей видимости, чтобы более точно создавать видимость то, как конечные пользователи будут использовать ваш крейт. Однако это означает, что файлы в каталоге tests ведут себя не так, как файлы в src , как вы узнали в Главе 7 относительно того как разделить код на модули и файлы. Различное поведение файлов в каталоге tests наиболее заметно, когда у вас есть набор вспомогательных функций, которые будут полезны в нескольких встроенных тестовых файлах. Представим, что вы пытаетесь выполнить действия, описанные в разделе «Разделение модулей в разные файлы» главы 7, чтобы извлечь их в общий модуль. Например, вы создали файл tests/common.rs и поместили в него функцию setup, содержащую некоторый код, который вы будете вызывать из разных тестовых функций в нескольких тестовых файлах Файл: tests/common.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/tests/common.rs}} Когда мы снова запустим тесты, мы увидим новый раздел в результатах тестов для файла common.rs , хотя этот файл не содержит никаких тестовых функций, более того, мы даже не вызывали функцию setup откуда либо: {{#include ../listings/ch11-writing-automated-tests/no-listing-12-shared-test-code-problem/output.txt}} Упоминание файла common и появление в результатах выполнения тестов сообщения вида running 0 tests - это не то, чего мы хотели. Мы только хотели выделить некоторый общий код, который будет использоваться другими файлами встроенных тестов. Чтобы модуль common больше не появлялся в результатах выполнения тестов, вместо файла tests/common.rs мы создадим файл tests/common/mod.rs . Директория проекта теперь выглядит следующим образом: ├── Cargo.lock\n├── Cargo.toml\n├── src\n│ └── lib.rs\n└── tests ├── common │ └── mod.rs └── integration_test.rs Здесь используется более раннее соглашение об именовании файлов, которое Rust также понимает. Мы говорили об этом в разделе “Иные пути к файлам” главы 7. Именование файла таким образом говорит, что Rust не должен рассматривать модуль common как файл встроенных тестов. Когда мы перемещаем код функции setup в файл tests/common/mod.rs и удаляем файл tests/common.rs , дополнительный раздел больше не будет отображаться в результатах тестов. Файлы в подкаталогах каталога tests не собираются как отдельные крейты или не появляются в результатах выполнения тестов. После того, как мы создали файл tests/common/mod.rs , мы можем использовать его в любых файлах встроенных тестов как обычный модуль. Вот пример вызова функции setup из теста it_adds_two в файле tests/integration_test.rs : Файл: tests/integration_test.rs {{#rustdoc_include ../listings/ch11-writing-automated-tests/no-listing-13-fix-shared-test-code-problem/tests/integration_test.rs}} Обратите внимание, что объявление mod common; совпадает с объявлением модуля, которое отображено в приложении 7-21. Затем в тестовой функции мы можем вызвать функцию common::setup(). Встраиваемые тесты для двоичных крейтов Если наш проект является двоичным крейтом, который содержит только src/main.rs и не содержит src/lib.rs , мы не сможем создать встроенные тесты в папке tests и подключить функции определённые в файле src/main.rs в область видимости с помощью указания use. Только библиотечные крейты могут предоставлять функции, которые можно использовать в других крейтах; двоичные крейты предназначены только для самостоятельного запуска. Это одна из причин, почему проекты на Rust, которые генерируют исполняемые модули, обычно имеют простой файл src/main.rs , который в свою очередь вызывает логику, которая находится в файле src/lib.rs . Используя такую структуру, встроенные тесты могут проверить библиотечный крейт, используя оператор use для подключения важного функционала. Если этот важный функционал работает, то и небольшое количество кода в файле src/main.rs также будет работать, а значит этот небольшой объём кода не нуждается в проверке.","breadcrumbs":"Написание самостоятельно х тестов » Организация тестов » Встраиваемые тесты","id":"209","title":"Встраиваемые тесты"},"21":{"body":"Прежде всего начнём с создания папки, в которой будем сохранять наш код на языке Rust. На самом деле не важно, где сохранять наш код. Однако, для упражнений и проектов, обсуждаемых в данной книге, мы советуем создать папку projects в вашем домашнем каталоге, там же и хранить в будущем код программ из книги. Откройте окно вызова и введите следующие приказы для того, чтобы создать папку projects для хранения кода разных проектов, и, внутри неё, папку hello_world для проекта “Привет, мир!”. Для Linux, macOS и PowerShell на Windows, введите: $ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world Для Windows в CMD, введите: > mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world","breadcrumbs":"С чего начать » Привет, Мир! » Создание папки проекта","id":"21","title":"Создание папки проекта"},"210":{"body":"Средства тестирования языка Rust предоставляют способ задать ожидаемое поведение кода, чтобы убедиться, что он всё ещё соответствует вашим ожиданиям даже после внесения изменений. Модульные тесты проверяют различные части библиотеки по отдельности и могут тестировать приватные подробности реализации. Встраиваемые тесты проверяют, что части библиотеки работают корректно сообща. Эти тесты используют для тестирования кода открытый API библиотеки, таким же образом, как его будет использовать внешний код. Хотя система видов Rust и правила владения помогают предотвратить некоторые виды ошибок, тесты по-прежнему важны для уменьшения количества логических ошибок, связанных с поведением вашего кода. Давайте объединим знания, полученные в этой и предыдущей главах, чтобы поработать над проектом!","breadcrumbs":"Написание самостоятельно х тестов » Организация тестов » Итоги","id":"210","title":"Итоги"},"211":{"body":"В этой главе вы примените многие знания, полученные ранее, а также познакомитесь с ещё неизученными API встроенной библиотеки. Мы создадим окно выводаное приложение, которое будет взаимодействовать с файлом и с окно выводаным вводом / выводом, чтобы попрактиковаться в некоторых концепциях Rust, с которыми вы уже знакомы. Скорость, безопасность, сборка в один исполняемый файл и кроссплатформенность делают Rust наилучшим языком для создания окно выводаных средств, так что в нашем проекте мы создадим свою собственную исполнение классической утилиты поиска grep, что расшифровывается, как \"вездесущеее средство поиска и печати\" ( g lobally search a r egular e xpression and p rint). В простейшем случае grep используется для поиска в выбранном файле указанного текста. Для этого утилита grep получает имя файла и текст в качестве переменных. Далее она читает файл, находит и выводит строки, содержащие искомый текст. Попутно мы покажем, как сделать так, чтобы наше окно выводаное приложение использовало возможности окна вызова, которые используются многими другими окно выводаными средствами. Мы будем читать значение переменной окружения, чтобы позволить пользователю настроить поведение нашего средства. Мы также будем печатать сообщения об ошибках в стандартный окно выводаный поток ошибок ( stderr ) вместо принятого вывода ( stdout ), чтобы, к примеру, пользователь мог перенаправить успешный вывод в файл, в то время, как сообщения об ошибках останутся на экране. Один из участников Rust-сообщества, Andrew Gallant, уже реализовал полнофункциональный, очень быстрый подобие программы grep и назвал его ripgrep. По сравнению с ним, наша исполнение будет довольно простой, но эта глава даст вам знания, которые нужны для понимания существующих проектов, таких как ripgrep. Наш проект grep будет использовать ранее изученные концепции: Организация кода (используя то, что вы узнали о модулях в главе 7 ) Использование векторов и строк (собрания, глава 8 ) Обработка ошибок ( Глава 9 ) Использование типажей и времени жизни там, где это необходимо ( глава 10 ) Написание тестов ( Глава 11 ) Мы также кратко представим замыкания, повторители и объекты типажи, которые будут объяснены подробно в главах 13 и 17 .","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Проект с вводом/выводом (I/O): создание окно выводаного приложения","id":"211","title":"Проект с вводом/выводом (I/O): создание окно выводаного приложения"},"212":{"body":"Создадим новый проект окно выводаного приложения как обычно с помощью приказы cargo new. Мы назовём проект minigrep, чтобы различать наше приложение от grep, которое возможно уже есть в вашей системе. $ cargo new minigrep Created binary (application) `minigrep` project\n$ cd minigrep Первая задача - заставить minigrep принимать два переменной приказной строки: путь к файлу и строку для поиска. То есть мы хотим иметь возможность запускать нашу программу через cargo run, с использованием двойного дефиса, чтобы указать, что следующие переменные предназначены для нашей программы, а не для cargo, строки для поиска и пути к файлу в котором нужно искать, как описано ниже: $ cargo run -- searchstring example-filename.txt В данный момент программа сгенерированная cargo new не может обрабатывать переменные, которые мы ей передаём. Некоторые существующие библиотеки на crates.io могут помочь с написанием программы, которая принимает переменные приказной строки, но так как вы просто изучаете эту концепцию, давайте реализуем эту возможность сами.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Получение переменных приказной строки » Принятие переменных приказной строки","id":"212","title":"Принятие переменных приказной строки"},"213":{"body":"Чтобы minigrep мог воспринимать значения переменных приказной строки, которые мы ему передаём, нам понадобится функция std::env::args, входящая в стандартную библиотеку Rust. Эта функция возвращает повторительпеременных приказной строки, переданных в minigrep. Мы подробно рассмотрим повторители в главе 13 . Пока вам достаточно знать две вещи об повторителях: повторители генерируют серию значений, и мы можем вызвать способ collect у повторителя, чтобы создать из него собрание, например вектор, который будет содержать все элементы, произведённые повторителем. Код представленный в Приложении 12-1 позволяет вашей программе minigrep читать любые переданные ей переменные приказной строки, а затем собирать значения в вектор. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-01/src/main.rs}} Приложение 12-1: Собираем переменные приказной строки в вектор и выводим их на печать Сначала мы вводим модуль std::env в область видимости с помощью указания use, чтобы мы могли использовать его функцию args. Обратите внимание, что функция std::env::args вложена в два уровня модулей. Как мы обсуждали в главе 7 , в случаях, когда нужная функция оказывается вложенной в более чем один модуль, советуется выносить в область видимости родительский модуль, а не функцию. Таким образом, мы можем легко использовать другие функции из std::env. Это менее двусмысленно, чем добавление use std::env::args и последующий вызов функции только с args, потому что args может быть легко принят за функцию, определённую в текущем модуле.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Получение переменных приказной строки » Чтение значений переменных","id":"213","title":"Чтение значений переменных"},"214":{"body":"Обратите внимание, что std::env::args вызовет панику, если какой-либо переменная содержит недопустимый символ Юникода. Если вашей программе необходимо принимать переменные, содержащие недопустимые символы Unicode, используйте вместо этого std::env::args_os. Эта функция возвращает повторитель, который выдаёт значения OsString вместо значений String. Мы решили использовать std::env::args здесь для простоты, потому что значения OsString отличаются для каждой платформы и с ними сложнее работать, чем со значениями String. В первой строке кода функции main мы вызываем env::args и сразу используем способ collect, чтобы превратить повторительв вектор содержащий все полученные значения. Мы можем использовать функцию collect для создания многих видов собраний, поэтому мы явно аннотируем вид args чтобы указать, что мы хотим вектор строк. Хотя нам очень редко нужно аннотировать виды в Rust, collect - это одна из функций, с которой вам часто нужна изложение вида, потому что Rust не может сам вывести какую собрание вы хотите. И в заключение мы печатаем вектор с помощью отладочного макроса. Попробуем запустить код сначала без переменных, а затем с двумя переменнойми: {{#include ../listings/ch12-an-io-project/listing-12-01/output.txt}} {{#include ../listings/ch12-an-io-project/output-only-01-with-args/output.txt}} Обратите внимание, что первое значение в векторе \"target/debug/minigrep\" является названием нашего двоичного файла. Это соответствует поведению списка переменных в Си, позволяя программам использовать название с которым они были вызваны при выполнении. Часто бывает удобно иметь доступ к имени программы, если вы хотите распечатать его в сообщениях или изменить поведение программы в зависимости от того, какой псевдоним приказной строки был использован для вызова программы. Но для целей этой главы, мы пропренебрегаем его и сохраним только два переменной, которые нам нужны.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Получение переменных приказной строки » Функция args и недействительный Юникод символ (Unicode)","id":"214","title":"Функция args и недействительный Юникод символ (Unicode)"},"215":{"body":"На текущий момент программа может получить доступ к значениям, указанным в качестве переменных приказной строки. Теперь нам требуется сохранять значения этих двух переменных в переменных, чтобы мы могли использовать их в остальных частях программы. Мы сделаем это в приложении 12-2. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-02/src/main.rs}} Приложение 12-2: Создание переменных для хранения значений переменных искомой подстроки и пути к файлу Как видно из распечатки вектора, имя программы занимает первое значение в векторе по адресу args[0], значит, переменные начинаются с порядкового казателя 1. Первый переменная minigrep - это строка, которую мы ищем, поэтому мы помещаем ссылку на первый переменная в переменную query. Вторым переменнаяом является путь к файлу, поэтому мы помещаем ссылку на второй переменная в переменную file_path. Для проверки корректности работы нашей программы, значения переменных выводятся в окно вывода. Далее, запустим нашу программу со следующими переменнойми: test и sample.txt: {{#include ../listings/ch12-an-io-project/listing-12-02/output.txt}} Отлично, программа работает! Нам нужно чтобы значения переменных были сохранены в правильных переменных. Позже мы добавим обработку ошибок с некоторыми потенциальными ошибочными ситуациями, например, когда пользователь не предоставляет переменные; сейчас мы пропренебрегаем эту ситуацию и поработаем над добавлением возможности чтения файла.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Получение переменных приказной строки » Сохранения значений переменных в переменные","id":"215","title":"Сохранения значений переменных в переменные"},"216":{"body":"Теперь добавим возможность чтения файла, указанного как переменная приказной строки file_path. Во-первых, нам нужен пример файла для тестирования: мы будем использовать файл с небольшим объёмом текста в несколько строк с несколькими повторяющимися словами. В приложении 12-3 представлено стихотворение Эмили Дикинсон, которое будет хорошо работать! Создайте файл с именем poem.txt в корне вашего проекта и введите стихотворение \"I’m nobody! Who are you?\" Файл: poem.txt {{#include ../listings/ch12-an-io-project/listing-12-03/poem.txt}} Приложение 12-3: Стихотворение Эмили Дикинсон - хороший пример для проверки Текст на месте, изменените src/main.rs и добавьте код для чтения файла, как показано в приложении 12-4. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/src/main.rs:here}} Приложение 12-4: Чтение содержимого файла указанного во втором переменной Во-первых, мы добавляем ещё одну указанию use чтобы подключить соответствующую часть встроенной библиотеки: нам нужен std::fs для обработки файлов. В main мы добавили новую указанию: функция fs::read_to_string принимает file_path, открывает этот файл и возвращает содержимое файла как std::io::Result<String>. После этого, мы снова добавили временную указанию println! для печати значения contents после чтения файла, таким образом мы можем проверить, что программа отрабатывает до этого места. Давайте запустим этот код с любой строкой в качестве первого переменной приказной строки (потому что мы ещё не реализовали поисковую часть) и файл poem.txt как второй переменная: {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-04/output.txt}} Отлично! Этот код прочитал и затем напечатал содержимое файла. Но у программы есть несколько недостатков. Прежде всего, функция main решает слишком много задач: как правило функция понятнее и проще в обслуживании если она воплощает только одну идею. Другая проблема заключается в том, что мы не обрабатываем ошибки так хорошо, как могли бы. Пока наша программа небольшая, то эти недостатки не являются большой проблемой, но по мере роста программы эти недостатки будет всё труднее исправлять. Хорошей практикой является начинать рефакторинг на ранней стадии разработки программы, потому что гораздо проще рефакторить меньшие объёмы кода. Мы сделаем это далее.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Чтение файла » Чтение файла","id":"216","title":"Чтение файла"},"217":{"body":"Для улучшения программы мы исправим 4 имеющихся проблемы, связанных со структурой программы и тем как обрабатываются потенциальные ошибки. Во-первых, функция main на данный момент решает две задачи: анализирует переменные приказной строки и читает файлы. По мере роста программы количество отдельных задач, которые обрабатывает функция main, будет увеличиваться. Поскольку эта функция получает больше обязанностей, то становится все труднее понимать её, труднее тестировать и труднее изменять, не сломав одну из её частей. Лучше всего разделить функциональность, чтобы каждая функция отвечала за одну задачу. Эта проблема также связана со второй проблемой: хотя переменные query и file_path являются переменными настройке нашей программы, переменные вида contents используются для выполнения логики программы. Чем длиннее становится main, тем больше переменных нам нужно будет добавить в область видимости; чем больше у нас переменных в области видимости, тем сложнее будет отслеживать назначение каждой переменной. Лучше всего сгруппировать переменные настройке в одну структуру, чтобы сделать их назначение понятным. Третья проблема заключается в том, что мы используем expect для вывода сведений об ошибке при проблеме с чтением файла, но сообщение об ошибке просто выведет текстShould have been able to read the file. Чтение файла может не сработать по разным причинам, например: файл не найден или у нас может не быть разрешения на его чтение. Сейчас же, независимо от ситуации, мы напечатаем одно и то же сообщение об ошибке, что не даст пользователю никакой сведений! В-четвёртых, мы используем expect неоднократно для обработки различных ошибок и если пользователь запускает нашу программу без указания достаточного количества переменных он получит ошибку index out of bounds из Rust, что не совсем понятно описывает проблему. Было бы лучше, если бы весь код обработки ошибок находился в одном месте, чтобы тем, кто будет поддерживать наш код в дальнейшем, нужно было бы вносить изменения только здесь, если потребуется изменить логику обработки ошибок. Наличие всего кода обработки ошибок в одном месте заверяет, что мы напечатаем сообщения, которые будут иметь смысл для наших конечных пользователей. Давайте решим эти четыре проблемы путём рефакторинга нашего проекта.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Рефакторинг для обеспечения модульности и улучшения обработки ошибок » Рефакторинг для улучшения модульности и обработки ошибок","id":"217","title":"Рефакторинг для улучшения модульности и обработки ошибок"},"218":{"body":"Организационная проблема распределения ответственности за выполнение нескольких задач функции main является общей для многих двоичных проектов. В результате Rust сообщество разработало процесс для использования в качестве руководства по разделению ответственности двоичной программы, когда код в main начинает увеличиваться. Процесс имеет следующие шаги: Разделите код программы на два файла main.rs и lib.rs . Перенесите всю логику работы программы в файл lib.rs . Пока ваша логика синтаксического анализа приказной строки мала, она может оставаться в файле main.rs . Когда логика синтаксического анализа приказной строки становится сложной, извлеките её из main.rs и переместите в lib.rs. Функциональные обязанности, которые остаются в функции main после этого процесса должно быть ограничено следующим: Вызов логики разбора приказной строки со значениями переменных Настройка любой другой настройке Вызов функции run в lib.rs Обработка ошибки, если run возвращает ошибку Этот шаблон о разделении ответственности: main.rs занимается запуском программы, а lib.rs обрабатывает всю логику задачи. Поскольку нельзя проверить функцию main напрямую, то такая структура позволяет проверить всю логику программы путём перемещения её в функции внутри lib.rs . Единственный код, который остаётся в main.rs будет достаточно маленьким, чтобы проверить его корректность прочитав код. Давайте переработаем нашу программу, следуя этому процессу. Извлечение парсера переменных Мы извлечём функциональность для разбора переменных в функцию, которую вызовет main для подготовки к перемещению логики разбора приказной строки в файл src/lib.rs . Приложение 12-5 показывает новый запуск main, который вызывает новую функцию parse_config, которую мы определим сначала в src/main.rs. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-05/src/main.rs:here}} Приложение 12-5: Выделение функции parse_config из main Мы все ещё собираем переменные приказной строки в вектор, но вместо присваивания значение переменной с порядковым казателем 1 переменной query и значение переменной с порядковым казателем 2 переменной с именем file_path в функции main, мы передаём весь вектор в функцию parse_config. Функция parse_config затем содержит логику, которая определяет, какой переменная идёт в какую переменную и передаёт значения обратно в main. Мы все ещё создаём переменные query и file_path в main, но main больше не несёт ответственности за определение соответствия переменной приказной строки и соответствующей переменной. Эта доработка может показаться излишней для нашей маленькой программы, но мы проводим рефакторинг небольшими, постепенными шагами. После внесения этого изменения снова запустите программу и убедитесь, что анализ переменных все ещё работает. Также хорошо часто проверять прогресс, чтобы помочь определить причину проблем, когда они возникают. Группировка настроечных переменных Мы можем сделать ещё один маленький шаг для улучшения функции parse_config. На данный момент мы возвращаем кортеж, но затем мы немедленно разделяем его снова на отдельные части. Это признак того, что, возможно, пока у нас нет правильной абстракции. Ещё один индикатор, который показывает, что есть место для улучшения, это часть config из parse_config, что подразумевает, что два значения, которые мы возвращаем, связаны друг с другом и оба являются частью одного настроечного значения. В настоящее время мы не отражаем этого смысла в структуре данных, кроме группировки двух значений в кортеж; мы могли бы поместить оба значения в одну структуру и дать каждому из полей структуры понятное имя. Это облегчит будущую поддержку этого кода, чтобы понять, как различные значения относятся друг к другу и какое их назначение. В приложении 12-6 показаны улучшения функции parse_config . Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-06/src/main.rs:here}} Приложение 12-6: Рефакторинг функции parse_config, чтобы возвращать экземпляр структуры Config Мы добавили структуру с именем Config объявленную с полями назваными как query и file_path. Сигнатура parse_config теперь указывает, что она возвращает значение Config. В теле parse_config, где мы возвращали срезы строк, которые ссылаются на значения String в args, теперь мы определяем Config как содержащие собственные String значения. Переменная args в main является владельцем значений переменной и позволяют функции parse_config только одалживать их, что означает, что мы бы нарушили правила заимствования Rust, если бы Config попытался бы взять во владение значения в args . Мы можем управлять данными String разным количеством способов, но самый простой, хотя и отчасти неэффективный это вызвать способ clone у значений. Он сделает полную копию данных для экземпляра Config для владения, что занимает больше времени и памяти, чем сохранение ссылки на строку данных. Однако клонирование данных также делает наш код очень простым, потому что нам не нужно управлять временем жизни ссылок; в этом обстоятельстве, отказ от небольшой производительности, чтобы получить простоту, стоит небольших соглашениеа. К при использовании способа cloneСуществует тенденция в среде программистов Rust избегать использования clone, т.к. это понижает эффективность работы кода. В Главе 13 , вы изучите более эффективные способы, которые могут подойти в подобной ситуации. Но сейчас можно копировать несколько строк, чтобы продолжить работу, потому что вы сделаете эти копии только один раз, а ваше имя файла и строка запроса будут очень маленькими. Лучше иметь работающую программу, которая немного неэффективна, чем пытаться заранее оптимизировать код при первом написании. По мере приобретения опыта работы с Rust вам будет проще начать с наиболее эффективного решения, но сейчас вполне приемлемо вызвать clone. Мы обновили код в main поэтому он помещает экземпляр Config возвращённый из parse_config в переменную с именем config, и мы обновили код, в котором ранее использовались отдельные переменные query и file_path, так что теперь он использует вместо этого поля в структуре Config. Теперь наш код более чётко передаёт то, что query и file_path связаны и что цель из использования состоит в том, чтобы настроить, как программа будет работать. Любой код, который использует эти значения знает, что может найти их в именованных полях экземпляра config по их назначению. Создание конструктора для структуры Config Пока что мы извлекли логику, отвечающую за синтаксический анализ переменных приказной строки из main и поместили его в функцию parse_config. Это помогло нам увидеть, что значения query и file_path были связаны и что их отношения должны быть отражены в нашем коде. Затем мы добавили структуру Config в качестве названия связанных общей целью query и file_path и чтобы иметь возможность вернуть именованные значения как имена полей структуры из функции parse_config. Итак, теперь целью функции parse_config является создание экземпляра Config, мы можем изменить parse_config из простой функции на функцию названную new, которая связана со структурой Config. Выполняя это изменение мы сделаем код более идиоматичным. Можно создавать экземпляры видов в встроенной библиотеке, такие как String с помощью вызова String::new. Точно так же изменив название parse_config на название функции new, связанную с Config, мы будем уметь создавать экземпляры Config, вызывая Config::new. Приложение 12-7 показывает изменения, которые мы должны сделать. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-07/src/main.rs:here}} Приложение 12-7: Переименование parse_config в Config::new Мы обновили main где вызывали parse_config, чтобы вместо этого вызывалась Config::new. Мы изменили имя parse_config на new и перенесли его внутрь раздела impl, который связывает функцию new с Config. Попробуйте снова собрать код, чтобы убедиться, что он работает.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Рефакторинг для обеспечения модульности и улучшения обработки ошибок » Разделение ответственности для двоичных проектов","id":"218","title":"Разделение ответственности для двоичных проектов"},"219":{"body":"Теперь мы поработаем над исправлением обработки ошибок. Напомним, что попытки получить доступ к значениям в векторе args с порядковым казателем 1 или порядковым казателем 2 приведут к панике, если вектор содержит менее трёх элементов. Попробуйте запустить программу без каких-либо переменных; это будет выглядеть так: {{#include ../listings/ch12-an-io-project/listing-12-07/output.txt}} Строка index out of bounds: the len is 1 but the index is 1 является сообщением об ошибке предназначенной для программистов. Она не поможет нашим конечным пользователям понять, что случилось и что они должны сделать вместо этого. Давайте исправим это сейчас. Улучшение сообщения об ошибке В приложении 12-8 мы добавляем проверку в функцию new, которая будет проверять, что срез достаточно длинный, перед попыткой доступа по порядковым указателям 1 и 2. Если срез не достаточно длинный, программа паникует и отображает улучшенное сообщение об ошибке. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-08/src/main.rs:here}} Приложение 12-8: Добавление проверки количества переменных Этот код похож на функцию Guess::new написанную в приложении 9-13 , где мы вызывали panic!, когда value переменной вышло за пределы допустимых значений. Здесь вместо проверки на рядзначений, мы проверяем, что длина args не менее 3 и остальная часть функции может работать при условии, что это условие было выполнено. Если в args меньше трёх элементов, это условие будет истинным и мы вызываем макрос panic! для немедленного завершения программы. Имея нескольких лишних строк кода в new, давайте запустим программу снова без переменных, чтобы увидеть, как выглядит ошибка: {{#include ../listings/ch12-an-io-project/listing-12-08/output.txt}} Этот вывод лучше: у нас теперь есть разумное сообщение об ошибке. Тем не менее, мы также имеем постороннюю сведения, которую мы не хотим предоставлять нашим пользователям. Возможно, использованная техника, которую мы использовали в приложении 9-13, не является лучшей для использования: вызов panic! больше подходит для программирования проблемы, чем решения проблемы, как обсуждалось в главе 9 . Вместо этого мы можем использовать другую технику, о которой вы узнали в главе 9 [возвращая Result], которая указывает либо на успех, либо на ошибку. Возвращение Result вместо вызова panic! Мы можем вернуть значение Result, которое будет содержать экземпляр Config в успешном случае и опишет проблему в случае ошибки. Мы так же изменим функцию new на build потому что многие программисты ожидают что new никогда не завершится неудачей. Когда Config::build взаимодействует с main, мы можем использовать вид Result как сигнал возникновения проблемы. Затем мы можем изменить main, чтобы преобразовать вариант Err в более практичную ошибку для наших пользователей без окружающего текста вроде thread 'main' и RUST_BACKTRACE, что происходит при вызове panic!. Приложение 12-9 показывает изменения, которые нужно внести в возвращаемое значения функции Config::build, и в тело функции, необходимые для возврата вида Result. Заметьте, что этот код не ссобирается, пока мы не обновим main, что мы и сделаем в следующем приложении. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-09/src/main.rs:here}} Приложение 12-9. Возвращение вида Result из Config::build Наша функция build теперь возвращает Result с экземпляром Config в случае успеха и &'static str в случае ошибки. Значения ошибок всегда будут строковыми литералами, которые имеют время жизни 'static. Мы внесли два изменения в тело функции build: вместо вызова panic!, когда пользователь не передаёт достаточно переменных, мы теперь возвращаем Err значение и мы завернули возвращаемое значение Config в Ok . Эти изменения заставят функцию соответствовать своей новой сигнатуре вида. Возвращение значения Err из Config::build позволяет функции main обработать значение Result возвращённое из функции build и выйти из процесса более чисто в случае ошибки. Вызов Config::build и обработка ошибок Чтобы обработать ошибку и вывести более дружественное сообщение об ошибке, нам нужно обновить код main для обработки Result, возвращаемого из Config::build как показано в приложении 12-10. Мы также возьмём на себя ответственность за выход из программы приказной строки с ненулевым кодом ошибки panic! и реализуем это вручную. Не нулевой статус выхода - это соглашение, которое сигнализирует процессу, который вызывает нашу программу, что программа завершилась с ошибкой. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-10/src/main.rs:here}} Приложение 12-10. Выход с кодом ошибки если создание новой Config терпит неудачу В этом приложении мы использовали способ, который мы ещё не рассматривали подробно: unwrap_or_else, который в встроенной библиотеке определён как Result<T, E>. Использование unwrap_or_else позволяет нам определить некоторые пользовательские ошибки обработки, не содержащие panic!. Если Result является значением Ok, поведение этого способа подобно unwrap: возвращает внутреннее значение из обёртки Ok. Однако, если значение является значением Err, то этот способ вызывает код замыкания , которое является анонимной функцией, определённой заранее и передаваемую в качестве переменной в unwrap_or_else. Мы рассмотрим замыкания более подробно в главе 13 . В данный момент, вам просто нужно знать, что unwrap_or_else передаст внутреннее значение Err, которое в этом случае является статической строкой not enough arguments, которое мы добавили в приложении 12-9, в наше замыкание как переменная err указанное между вертикальными линиями. Код в замыкании может затем использовать значение err при выполнении. Мы добавили новую строку use, чтобы подключить process из встроенной библиотеки в область видимости. Код в замыкании, который будет запущен в случае ошибки содержит только две строчки: мы печатаем значение err и затем вызываем process::exit. Функция process::exit немедленно остановит программу и вернёт номер, который был передан в качестве кода состояния выхода. Это похоже на обработку с помощью макроса panic!, которую мы использовали в приложении 12-8, но мы больше не получаем весь дополнительный вывод. Давай попробуем: {{#include ../listings/ch12-an-io-project/listing-12-10/output.txt}} Замечательно! Этот вывод намного дружелюбнее для наших пользователей.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Рефакторинг для обеспечения модульности и улучшения обработки ошибок » Исправление ошибок обработки","id":"219","title":"Исправление ошибок обработки"},"22":{"body":"Затем создайте новый исходный файл и назовите его main.rs . Файлы Rust всегда заканчиваются расширением .rs . Если вы используете более одного слова в имени файла, принято разделять их символом подчёркивания. Например, используйте hello_world.rs вместо helloworld.rs . Теперь откроем файл main.rs для изменения и введём следующие строки кода: Название файла: main.rs fn main() { println!(\"Привет, мир!\");\n} Приложение 1-1: Программа, которая печатает Привет, мир! Сохраните файл и вернитесь в окно окна вызова в каталог ~/projects/hello_world . В Linux или macOS введите следующие приказы для сборки и запуска файла: $ rustc main.rs\n$ ./main\nПривет, мир! В Windows, введите приказ .\\main.exe вместо ./main: > rustc main.rs\n> .\\main.exe\nПривет, мир! Независимо от вашей операционной системы, строка Привет, мир! должна быть выведена на окно вызова. Если вы не видите такого вывода, обратитесь к разделу \"Устранение неполадок\" , чтобы узнать, как получить помощь. Если напечаталось Привет, мир!, то примите наши поздравления! Вы написали программу на Rust, что делает вас Rust программистом — добро пожаловать!","breadcrumbs":"С чего начать » Привет, Мир! » Написание и запуск первой Rust программы","id":"22","title":"Написание и запуск первой Rust программы"},"220":{"body":"Теперь, когда мы закончили рефакторинг разбора настройке, давайте обратимся к логике программы. Как мы указали в разделе «Разделение ответственности в двоичных проектах» , мы извлечём функцию с именем run, которая будет содержать всю логику, присутствующую в настоящее время в функции main и которая не связана с настройкой настройке или обработкой ошибок. Когда мы закончим, то main будет краткой, легко проверяемой и мы сможем написать тесты для всей остальной логики. Код 12-11 отображает извлечённую логику в функцию run. Мы делаем маленькое, инкрементальное приближение к извлечению функции. Код всё ещё сосредоточен в файле src/main.rs : Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-11/src/main.rs:here}} Приложение 12-11. Извлечение функции run, содержащей остальную логику программы Функция run теперь содержит всю оставшуюся логику из main, начиная от чтения файла. Функция run принимает экземпляр Config как переменная. Возврат ошибок из функции run Оставшаяся логика программы выделена в функцию run, где мы можем улучшить обработку ошибок как мы уже делали с Config::build в приложении 12-9. Вместо того, чтобы позволить программе паниковать с помощью вызова expect, функция run вернёт Result<T, E>, если что-то пойдёт не так. Это позволит далее окне выводадировать логику обработки ошибок в main удобным способом. Приложение 12-12 показывает изменения, которые мы должны внести в сигнатуру и тело run. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-12/src/main.rs:here}} Приложение 12-12. Изменение функции run для возврата Result Здесь мы сделали три значительных изменения. Во-первых, мы изменили вид возвращаемого значения функции run на Result<(), Box<dyn Error>> . Эта функция ранее возвращала вид () и мы сохраняли его как значение, возвращаемое в случае Ok. Для вида ошибки мы использовали объект типаж Box<dyn Error> (и вверху мы подключили вид std::error::Error в область видимости с помощью указания use). Мы рассмотрим типажи объектов в главе 17 . Сейчас просто знайте, что Box<dyn Error> означает, что функция будет возвращать вид реализующий типаж Error, но не нужно указывать, какой именно будет вид возвращаемого значения. Это даёт возможность возвращать значения ошибок, которые могут быть разных видов в разных случаях. Ключевое слово dyn сокращение для слова «изменяемый». Во-вторых, мы убрали вызов expect в пользу использования оператора ?, как мы обсудили в главе 9 . Скорее, чем вызывать panic! в случае ошибки, оператор ? вернёт значение ошибки из текущей функции для вызывающего, чтобы он её обработал. В-третьих, функция run теперь возвращает значение Ok в случае успеха. В сигнатуре функции run успешный вид объявлен как (), который означает, что нам нужно обернуть значение единичного вида в значение Ok. Данный синтаксис Ok(()) поначалу может показаться немного странным, но использование () выглядит как идиоматический способ указать, что мы вызываем run для его побочных эффектов; он не возвращает значение, которое нам нужно. Когда вы запустите этот код, он ссобирается, но отобразит предупреждение: {{#include ../listings/ch12-an-io-project/listing-12-12/output.txt}} Rust говорит, что наш код пренебрег Result значение и значение Result может указывать на то, что произошла ошибка. Но мы не проверяем, была ли ошибка и сборщик напоминает нам, что мы, вероятно, хотели здесь выполнить некоторый код обработки ошибок! Давайте исправим эту проблему сейчас. Обработка ошибок, возвращённых из run в main Мы будем проверять и обрабатывать ошибки используя способику, подобную той, которую мы использовали для Config::build в приложении 12-10, но с небольшой разницей: Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/no-listing-01-handling-errors-in-main/src/main.rs:here}} Мы используем if let вместо unwrap_or_else чтобы проверить, возвращает ли run значение Err и вызывается process::exit(1), если это так. Функция run не возвращает значение, которое мы хотим развернуть способом unwrap, таким же образом как Config::build возвращает экземпляр Config. Так как run возвращает () в случае успеха и мы заботимся только об обнаружении ошибки, то нам не нужно вызывать unwrap_or_else, чтобы вернуть развёрнутое значение, потому что оно будет только (). Тело функций if let и unwrap_or_else одинаковы в обоих случаях: мы печатаем ошибку и выходим.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Рефакторинг для обеспечения модульности и улучшения обработки ошибок » Извлечение логики из main","id":"220","title":"Извлечение логики из main"},"221":{"body":"Наш проект minigrep пока выглядит хорошо! Теперь мы разделим файл src/main.rs и поместим некоторый код в файл src/lib.rs . Таким образом мы сможем его тестировать и чтобы в файле src/main.rs было меньшее количество функциональных обязанностей. Давайте перенесём весь код не относящийся к функции main из файла src/main.rs в новый файл src/lib.rs : Определение функции run Соответствующие указания use Определение структуры Config Определение функции Config::build Содержимое src/lib.rs должно иметь сигнатуры, показанные в приложении 12-13 (мы опустили тела функций для краткости). Обратите внимание, что код не будет собираться пока мы не изменим src/main.rs в приложении 12-14. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-13/src/lib.rs:here}} Приложение 12-13. Перемещение Config и run в src/lib.rs Мы добавили спецификатор доступа pub к структуре Config, а также её полям, к способу build и функции run. Теперь у нас есть библиотечный крейт, который содержит публичный API, который мы можем протестировать! Теперь нам нужно подключить код, который мы переместили в src/lib.rs, в область видимости двоичного крейта внутри src/main.rs , как показано в приложении 12-14. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-14/src/main.rs:here}} Приложение 12-14. Использование крейта библиотеки minigrep внутри src/main.rs Мы добавляем use minigrep::Config для подключения вида Config из крейта библиотеки в область видимости двоичного крейта и добавляем к имени функции run префикс нашего крейта. Теперь все функции должны быть подключены и должны работать. Запустите программу с cargo run и убедитесь, что все работает правильно. Уф! Было много работы, но мы настроены на будущий успех. Теперь проще обрабатывать ошибки и мы сделали код более модульным. С этого момента почти вся наша работа будет выполняться внутри src/lib.rs . Давайте воспользуемся этой новой модульностью, сделав что-то, что было бы трудно со старым кодом, но легко с новым кодом: мы напишем несколько тестов!","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Рефакторинг для обеспечения модульности и улучшения обработки ошибок » Разделение кода на библиотечный крейт","id":"221","title":"Разделение кода на библиотечный крейт"},"222":{"body":"Теперь, когда мы извлекли логику в src/lib.rs и оставили разбор переменных приказной строки и обработку ошибок в src/main.rs , стало гораздо проще писать тесты для основной функциональности нашего кода. Мы можем вызывать функции напрямую с различными переменнойми и проверить возвращаемые значения без необходимости вызова нашего двоичного файла из приказной строки. В этом разделе в программу minigrep мы добавим логику поиска с использованием процесса разработки через тестирование (TDD), который следует этим шагам: Напишите тест, который завершается неудачей, и запустите его, чтобы убедиться, что он не сработал именно по той причине, которую вы ожидаете. Пишите или изменяйте ровно столько кода, чтобы успешно выполнился новый тест. Выполните рефакторинг кода, который вы только что добавили или изменили, и убедитесь, что тесты продолжают проходить. Повторите с шага 1! Хотя это всего лишь один из многих способов написания программного обеспечения, TDD может помочь в разработке кода. Написание теста перед написанием кода, обеспечивающего прохождение теста, помогает поддерживать высокое покрытие тестами на протяжении всего процесса разработки. Мы протестируем реализацию функциональности, которая делает поиск строки запроса в содержимом файла и создание списка строк, соответствующих запросу. Мы добавим эту функциональность в функцию под названием search.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Разработка функциональности библиотеки с помощью разработки через тестирование » Развитие функциональности библиотеки разработкой на основе тестов","id":"222","title":"Развитие функциональности библиотеки разработкой на основе тестов"},"223":{"body":"Поскольку они нам больше не нужны, давайте удалим указания с println!, которые мы использовали для проверки поведения программы в src/lib.rs и src/main.rs . Затем в src/lib.rs мы добавим модуль tests с тестовой функцией, как делали это в главе 11 . Тестовая функция определяет поведение, которое мы хотим проверить в функции search: она должна принимать запрос и текст для поиска, а возвращать только те строки из текста, которые содержат запрос. В приложении 12-15 показан этот тест, который пока не собирается. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-15/src/lib.rs:here}} Приложение 12-15: Создание безуспешного теста для функции search, которую мы хотим создать Этот тест ищет строку \"duct\". Текст, в котором мы ищем, состоит из трёх строк, только одна из которых содержит \"duct\" (обратите внимание, что обратная косая черта после открывающей двойной кавычки говорит Rust не помещать символ новой строки в начало содержимого этого строкового литерала). Мы проверяем, что значение, возвращаемое функцией search, содержит только ожидаемую нами строку. Мы не можем запустить этот тест и увидеть сбой, потому что тест даже не собирается: функции search ещё не существует! В соответствии с принципами TDD мы добавим ровно столько кода, чтобы тест собирался и запускался, добавив определение функции search, которая всегда возвращает пустой вектор, как показано в приложении 12-16. Потом тест должен собраться и потерпеть неудачу при запуске, потому что пустой вектор не равен вектору, содержащему строку \"safe, fast, productive.\" Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-16/src/lib.rs:here}} Приложение 12-16. Определение функции search, достаточное, чтобы тест собрался Заметьте, что в сигнатуре search нужно явно указать время жизни 'a для переменной contents и возвращаемого значения. Напомним из Главы 10 , что свойства времени жизни указывают с временем жизни какого переменной связано время жизни возвращаемого значения. В данном случае мы говорим, что возвращаемый вектор должен содержать срезы строк, ссылающиеся на содержимое переменной contents (а не переменной query). Другими словами, мы говорим Rust, что данные, возвращаемые функцией search, будут жить до тех пор, пока живут данные, переданные в функцию search через переменная contents. Это важно! Чтобы ссылки были действительными, данные, на которые ссылаются с помощью срезов тоже должны быть действительными; если сборщик предполагает, что мы делаем строковые срезы переменной query, а не переменной contents, он неправильно выполнит проверку безопасности. Если мы забудем изложении времени жизни и попробуем собрать эту функцию, то получим следующую ошибку: {{#include ../listings/ch12-an-io-project/output-only-02-missing-lifetimes/output.txt}} Rust не может понять, какой из двух переменных нам нужен, поэтому нужно сказать ему об этом. Так как contents является тем переменнаяом, который содержит весь наш текст, и мы хотим вернуть части этого текста, которые совпали при поиске, мы понимаем, что contents является переменнаяом, который должен быть связан с возвращаемым значением временем жизни. Другие языки программирования не требуют от вас связывания в сигнатуре переменных с возвращаемыми значениями, но после определённой практики вам станет проще. Можете сравнить этот пример с разделом «Проверка ссылок с временами жизни» главы 10. Запустим тест: {{#include ../listings/ch12-an-io-project/listing-12-16/output.txt}} Отлично. Наш тест не сработал, как мы и ожидали. Давайте сделаем так, чтобы он срабатывал!","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Разработка функциональности библиотеки с помощью разработки через тестирование » Написание теста с ошибкой","id":"223","title":"Написание теста с ошибкой"},"224":{"body":"Сейчас наш тест не проходит, потому что мы всегда возвращаем пустой вектор. Чтобы исправить это и реализовать search, наша программа должна выполнить следующие шаги: Повторение по каждой строке содержимого. Проверить, содержит ли данная строка искомую. Если это так, добавить её в список значений, которые мы возвращаем. Если это не так, ничего не делать. Вернуть список результатов. Давайте проработаем каждый шаг, начиная с перебора строк. Перебор строк с помощью способа lines В Rust есть полезный способ для построчной повторения строк, удобно названный lines, как показано в приложении 12-17. Обратите внимание, код пока не собирается. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-17/src/lib.rs:here}} Приложение 12-17: Повторение по каждой строке из contents Способ lines возвращает повторитель. Мы подробно поговорим об повторителях в Главе 13 , но вспомните, что вы видели этот способ использования повторителя в Приложении 3-5 , где мы использовали цикл for с повторителем, чтобы выполнить некоторый код для каждого элемента в собрания. Поиск в каждой строке текста запроса Далее мы проверяем, содержит ли текущая строка нашу искомую строку. К счастью, у строк есть полезный способ contains, который именно это и делает! Добавьте вызов способа contains в функции search, как показано в приложении 12-18. Обратите внимание, что это все ещё не собирается. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-18/src/lib.rs:here}} Приложение 12-18. Добавление проверки, содержится ли query в строке На данный момент мы наращиваем функциональность. Чтобы заставить это собираться, нам нужно вернуть значение из тела функции, как мы указали в сигнатуре функции. Сохранение совпавшей строки Чтобы завершить эту функцию, нам нужен способ сохранить совпадающие строки, которые мы хотим вернуть. Для этого мы можем создать изменяемый вектор перед циклом for и вызывать способ push для сохранения line в векторе. После цикла for мы возвращаем вектор, как показано в приложении 12-19. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:here}} Приложение 12-19: Сохраняем совпавшие строки, чтобы впоследствии их можно было вернуть Теперь функция search должна возвратить только строки, содержащие query, и тест должен пройти. Запустим его: {{#include ../listings/ch12-an-io-project/listing-12-19/output.txt}} Наш тест пройден, значит он работает! На этом этапе мы могли бы рассмотреть возможности изменения реализации функции поиска, сохраняя прохождение тестов и поддерживая имеющуюся функциональность. Код в функции поиска не так уж плох, но он не использует некоторые полезные функции повторителей. Вернёмся к этому примеру в главе 13 , где будем исследовать повторители подробно, и посмотрим как его улучшить. Использование функции search в функции run Теперь, когда функция search работает и протестирована, нужно вызвать search из нашей функции run. Нам нужно передать значение config.query и contents, которые run читает из файла, в функцию search. Тогда run напечатает каждую строку, возвращаемую из search: Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/src/lib.rs:here}} Мы по-прежнему используем цикл for для возврата каждой строки из функции search и её печати. Теперь вся программа должна работать! Давайте попробуем сначала запустить её со словом «frog», которое должно вернуть только одну строчку из стихотворения Эмили Дикинсон: {{#include ../listings/ch12-an-io-project/no-listing-02-using-search-in-run/output.txt}} Здорово! Теперь давайте попробуем слово, которое будет соответствовать нескольким строкам, например «body»: {{#include ../listings/ch12-an-io-project/output-only-03-multiple-matches/output.txt}} И наконец, давайте удостоверимся, что мы не получаем никаких строк, когда ищем слово, отсутствующее в стихотворении, например «monomorphization»: {{#include ../listings/ch12-an-io-project/output-only-04-no-matches/output.txt}} Отлично! Мы создали собственную мини-исполнение классического средства и научились тому, как структурировать приложения. Мы также немного узнали о файловом вводе и выводе, временах жизни, тестировании и разборе переменных приказной строки. Чтобы завершить этот проект, мы кратко выполним пару вещей: как работать с переменными окружения и как печатать в стандартный поток ошибок, обе из которых полезны при написании окно выводаных программ.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Разработка функциональности библиотеки с помощью разработки через тестирование » Написание кода для прохождения теста","id":"224","title":"Написание кода для прохождения теста"},"225":{"body":"Мы улучшим minigrep, добавив дополнительную функцию: опцию для поиска без учёта регистра, которую пользователь может включить с помощью переменной среды окружения. Мы могли бы сделать эту функцию свойствоом приказной строки и потребовать, чтобы пользователи вводили бы её каждый раз при её применении, но вместо этого мы будем использовать переменную среды окружения, что позволит нашим пользователям устанавливать переменную среды один раз и все поиски будут не чувствительны к регистру в этом окно вызоваьном сеансе.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Работа с переменными среды » Работа с переменными окружения","id":"225","title":"Работа с переменными окружения"},"226":{"body":"Мы, во-первых, добавим новую функцию search_case_insensitive, которую мы будем вызывать, когда переменная окружения содержит значение. Мы продолжим следовать процессу TDD, поэтому первый шаг - это снова написать не проходящий тест. Мы добавим новый тест для новой функции search_case_insensitive и переименуем наш старый тест из one_result в case_sensitive, чтобы прояснить различия между двумя тестами, как показано в приложении 12-20. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-20/src/lib.rs:here}} Приложение 12-20. Добавление нового не проходящего теста для функции поиска нечувствительной к регистру, которую мы собираемся добавить Обратите внимание, что мы также отредактировали содержимое переменной contents из старого теста. Мы добавили новую строку с текстом \"Duct tape.\", используя заглавную D, которая не должна соответствовать запросу \"duct\" при поиске с учётом регистра. Такое изменение старого теста помогает избежать случайного нарушения функциональности поиска чувствительного к регистру, который мы уже реализовали. Этот тест должен пройти сейчас и должен продолжать выполняться успешно, пока мы работаем над поиском без учёта регистра. Новый тест для поиска нечувствительного к регистру использует \"rUsT\" качестве строки запроса. В функции search_case_insensitive, которую мы собираемся реализовать, запрос \"rUsT\" должен соответствовать строке содержащей \"Rust:\" с большой буквы R и соответствовать строке \"Trust me.\", хотя обе имеют разные регистры из запроса. Это наш не проходящий тест, он не собирается, потому что мы ещё не определили функцию search_case_insensitive. Не стесняйтесь добавлять скелет реализация, которая всегда возвращает пустой вектор, подобно тому, как мы это делали для функции search в приложении 12-16, чтобы увидеть сборку теста и его сбой.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Работа с переменными среды » Написание ошибочного теста для функции search с учётом регистра","id":"226","title":"Написание ошибочного теста для функции search с учётом регистра"},"227":{"body":"Функция search_case_insensitive, показанная в приложении 12-21, будет почти такая же, как функция search. Разница лишь в том, что текст будет в нижнем регистре для query и для каждой line, так что для любого регистра входных переменных это будет тот же случай, когда мы проверяем, содержит ли строка запрос. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-21/src/lib.rs:here}} Приложение 12-21. Определение функции search_case_insensitive с уменьшением регистра строки запроса и строки содержимого перед их сравнением Сначала преобразуем в нижний регистр строку query и сохраняем её в затенённой переменной с тем же именем. Вызов to_lowercase для строки запроса необходим, так что независимо от того, будет ли пользовательский запрос \"rust\" , \"RUST\", \"Rust\" или \"rUsT\", мы будем преобразовывать запрос к \"rust\" и делать значение нечувствительным к регистру. Хотя to_lowercase будет обрабатывать Unicode, он не будет точным на 100%. Если бы мы писали реальное приложение, мы бы хотели проделать здесь немного больше работы, но этот раздел посвящён переменным среды, а не Unicode, поэтому мы оставим это здесь. Обратите внимание, что query теперь имеет вид String, а не срез строки, потому что вызов to_lowercase создаёт новые данные, а не ссылается на существующие. К примеру, запрос: \"rUsT\" это срез строки не содержащий строчных букв u или t, которые мы можем использовать, поэтому мы должны выделить новую String, содержащую «rust». Когда мы передаём запрос query в качестве переменной способа contains, нам нужно добавить знак, поскольку сигнатура contains, определена для приёмы среза строки. Затем мы добавляем вызов to_lowercase для каждой строки line для преобразования к нижнему регистру всех символов. Теперь, когда мы преобразовали line и query в нижний регистр, мы найдём совпадения независимо от того, в каком регистре находится переменная с запросом. Давайте посмотрим, проходит ли эта реализация тесты: {{#include ../listings/ch12-an-io-project/listing-12-21/output.txt}} Отлично! Тесты прошли. Теперь давайте вызовем новую функцию search_case_insensitive из функции run. Во-первых, мы добавим свойство настройке в структуру Config для переключения между поиском с учётом регистра и без учёта регистра. Добавление этого поля приведёт к ошибкам сборщика, потому что мы ещё нигде не объявим это поле: Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:here}} Мы добавили поле ignore_case, которое содержит логическое значение. Далее нам нужна функция run, чтобы проверить значение поля ignore_case и использовать его, чтобы решить, вызывать ли функцию search или функцию search_case_insensitive, как показано в приложении 12-22. Этот код все ещё не собирается. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-22/src/lib.rs:there}} Приложение 12-22. Вызов либо search, либо search_case_insensitive на основе значения в config.ignore_case Наконец, нам нужно проверить переменную среды. Функции для работы с переменными среды находятся в модуле env встроенной библиотеки, поэтому мы хотим подключить этот модуль в область видимости в верхней части src/lib.rs. Затем мы будем использовать функцию var из модуля env для проверки установлено ли любое значение в переменной среды с именем IGNORE_CASE, как показано в приложении 12-23. Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-23/src/lib.rs:here}} Приложение 12-23. Проверка переменной среды с именем IGNORE_CASE Здесь мы создаём новую переменную ignore_case. Чтобы установить её значение, мы вызываем функцию env::var и передаём ей имя переменной окружения IGNORE_CASE. Функция env::var возвращает Result, который будет успешным вариантом Ok содержащий значение переменной среды, если переменная среды установлена. Он вернёт вариант Err, если переменная окружения не установлена. Мы используем способ is_ok у Result, чтобы проверить установлена ли переменная окружения, что будет означать, что программа должна выполнить поиск без учёта регистра. Если переменная среды IGNORE_CASE не содержит любого значения, то is_ok вернёт значение false и программа выполнит поиск c учётом регистра. Мы не заботимся о значении переменной среды, нас важно только установлена она или нет, поэтому мы проверяем is_ok, а не используем unwrap, expect или любой другой способ, который мы видели у Result. Мы передаём значение переменной ignore_case экземпляру Config, чтобы функция run могла прочитать это значение и решить, следует ли вызывать search или search_case_insensitive, как мы реализовали в приложении 12-22. Давайте попробуем! Во-первых, мы запустим нашу программу без установленной переменной среды и с помощью значения запроса to, который должен соответствовать любой строке, содержащей слово «to» в нижнем регистре: {{#include ../listings/ch12-an-io-project/listing-12-23/output.txt}} Похоже, все ещё работает! Теперь давайте запустим программу с IGNORE_CASE, установленным в 1, но с тем же значением запроса to. $ IGNORE_CASE=1 cargo run -- to poem.txt Если вы используете PowerShell, вам нужно установить переменную среды и запустить программу двумя приказми, а не одной: PS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt Это заставит переменную окружения IGNORE_CASE сохраниться до конца сеанса работы окне вывода. Переменную можно отключить с помощью приказы Remove-Item: PS> Remove-Item Env:IGNORE_CASE Мы должны получить строки, содержащие «to», которые могут иметь заглавные буквы: Are you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog! Отлично, мы также получили строки, содержащие «To»! Наша программа minigrep теперь может выполнять поиск без учёта регистра, управляемая переменной среды. Теперь вы знаете, как управлять свойствами, заданными с помощью переменных приказной строки или переменных среды. Некоторые программы допускают использование переменных и переменных среды для одной и той же настройке. В таких случаях программы решают, что из них имеет больший приоритет. Для другого самостоятельного упражнения попробуйте управлять чувствительностью к регистру с помощью переменной приказной строки или переменной окружения. Решите, переменная приказной строки или переменная среды будет иметь приоритет, если программа выполняется со значениями \"учитывать регистр\" в одном случае, и \"пренебрегать регистр\" в другом. Модуль std::env содержит много других полезных функций для работы с переменными среды: ознакомьтесь с его документацией, чтобы узнать доступные.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Работа с переменными среды » Реализация функции search_case_insensitive","id":"227","title":"Реализация функции search_case_insensitive"},"228":{"body":"В данный момент мы записываем весь наш вывод в окно вызова, используя функцию println!. В большинстве окно вызоваов предоставлено два вида вывода: стандартный поток вывода ( stdout ) для общей сведений и стандартный поток ошибок ( stderr ) для сообщений об ошибках. Это различие позволяет пользователям выбирать, направлять ли успешный вывод программы в файл, но при этом выводить сообщения об ошибках на экран. Функция println! может печатать только в стандартный вывод, поэтому мы должны использовать что-то ещё для печати в стандартный поток ошибок.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Запись сообщений об ошибках в stderr вместо stdout » Запись сообщений ошибок в поток ошибок вместо принятого потока вывода","id":"228","title":"Запись сообщений ошибок в поток ошибок вместо принятого потока вывода"},"229":{"body":"Во-первых, давайте посмотрим, как содержимое, напечатанное из minigrep в настоящее время записывается в стандартный вывод, включая любые сообщения об ошибках, которые мы хотим вместо этого записать в стандартный поток ошибок. Мы сделаем это, перенаправив стандартный поток вывода в файл и намеренно вызовем ошибку. Мы не будем перенаправлять стандартный поток ошибок, поэтому любой контент, отправленный в поток принятых ошибок будет продолжать отображаться на экране. Ожидается, что программы приказной строки будут отправлять сообщения об ошибках в стандартный поток ошибок, поэтому мы все равно можем видеть сообщения об ошибках на экране, даже если мы перенаправляем стандартный поток вывода в файл. Наша программа в настоящее время не ведёт себя правильно: мы увидим, что она сохраняет вывод сообщения об ошибке в файл! Чтобы отобразить это поведение, мы запустим программу с помощью > и именем файла output.txt в который мы хотим перенаправить стандартный поток вывода. Мы не будем передавать никаких переменных, что должно вызвать ошибку: $ cargo run > output.txt Синтаксис > указывает оболочке записывать содержимое принятого вывода в output.txt вместо экрана. Мы не увидели сообщение об ошибке, которое мы ожидали увидеть на экране, так что это означает, что оно должно быть в файле. Вот что содержит output.txt : Problem parsing arguments: not enough arguments Да, наше сообщение об ошибке выводится в стандартный вывод. Гораздо более полезнее, чтобы подобные сообщения об ошибках печатались в встроенной поток ошибок, поэтому в файл попадают только данные из успешного запуска. Мы поменяем это.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Запись сообщений об ошибках в stderr вместо stdout » Проверка, куда записываются ошибки","id":"229","title":"Проверка, куда записываются ошибки"},"23":{"body":"Давайте рассмотрим «Привет, мир!» программу в подробностях. Вот первая часть головоломки: fn main() { } Эти строки определяют функцию с именем main. Функция main особенная: это всегда первый код, который запускается в каждой исполняемой программе Rust. Первая строка объявляет функцию с именем main, которая не имеет свойств и ничего не возвращает. Если бы были свойства, они бы заключались в круглые скобки (). Тело функции заключено в {}. Rust требует фигурных скобок вокруг всех тел функций. Хороший стиль — поместить открывающую фигурную скобку на ту же строку, что и объявление функции, добавив между ними один пробел. Примечание: Если хотите придерживаться принятого стиля во всех проектах Rust, вы можете использовать средство самостоятельного форматирования под названием rustfmt для форматирования кода в определённом стиле (подробнее о rustfmt в Приложении D . Объединение Rust включила этот средство в стандартный дистрибутив Rust, как rustc, поэтому он уже должен быть установлен на вашем компьютере! Тело функции main содержит следующий код: println!(\"Привет, мир!\"); Эта строка делает всю работу в этой маленькой программе: печатает текст на экран. Можно заметить четыре важных подробности. Во-первых, стиль Rust предполагает отступ в четыре пробела, а не табуляцию. Во-вторых, println! вызывается макрос Rust. Если бы вместо него была вызвана функция, она была бы набрана как println (без !). Более подробно мы обсудим макросы Rust в главе 19. Пока достаточно знать, что использование ! подразумевает вызов макроса вместо обычной функции, и что макросы не всегда подчиняются тем же правилам как функции. В-третьих, вы видите строку \"Привет, мир!\". Мы передаём её в качестве переменной макросу println!, и она выводится на экран. В-четвёртых, мы завершаем строку точкой с запятой (;), которая указывает на окончание этого выражения и возможность начала следующего. Большинство строк кода Rust заканчиваются точкой с запятой.","breadcrumbs":"С чего начать » Привет, Мир! » Анатомия программы на Rust","id":"23","title":"Анатомия программы на Rust"},"230":{"body":"Мы будем использовать код в приложении 12-24, чтобы изменить способ вывода сообщений об ошибках. Из-за рефакторинга, который мы делали ранее в этой главе, весь код, который печатает сообщения об ошибках, находится в одной функции: main. Стандартная библиотека предоставляет макрос eprintln!который печатает в стандартный поток ошибок, поэтому давайте изменим два места, где мы вызывали println! для печати ошибок, чтобы использовать eprintln! вместо этого. Файл: src/main.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-24/src/main.rs:here}} Запись сообщений об ошибках в Standard Error вместо Standard Output используя eprintln! Давайте снова запустим программу таким же образом, без каких-либо переменных и перенаправим стандартный вывод с помощью >: $ cargo run > output.txt\nProblem parsing arguments: not enough arguments Теперь мы видим ошибку на экране и output.txt не содержит ничего, что мы ожидаем от программы приказной строки. Давайте снова запустим программу с переменнойми, которые не вызывают ошибку, но все же перенаправляют стандартный вывод в файл, например так: $ cargo run -- to poem.txt > output.txt Мы не увидим никакого вывода в окно вызова, а output.txt будет содержать наши результаты: Файл: output.txt Are you nobody, too?\nHow dreary to be somebody! Это отображает, что в зависимости от ситуации мы теперь используем стандартный поток вывода для успешного текста и стандартный поток ошибок для вывода ошибок.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Запись сообщений об ошибках в stderr вместо stdout » Печать ошибок в поток ошибок","id":"230","title":"Печать ошибок в поток ошибок"},"231":{"body":"В этой главе были повторены некоторые основные концепции, которые вы изучили до сих пор и было рассказано, как выполнять обычные действия ввода-вывода в Rust. Используя переменные приказной строки, файлы, переменные среды и макросeprintln! для печати ошибок и вы теперь готовы писать приложения приказной строки. В сочетании с концепциями из предыдущих главах, ваш код будет хорошо организован, будет эффективно хранить данные в соответствующих структурах, хорошо обрабатывать ошибки и хорошо тестироваться. Далее мы рассмотрим некоторые возможности Rust, на которые повлияли функциональные языки: замыкания и повторители.","breadcrumbs":"Проект с вводом-выводом: создание программы приказной строки » Запись сообщений об ошибках в stderr вместо stdout » Итоги","id":"231","title":"Итоги"},"232":{"body":"Дизайн языка Rust черпал вдохновение из многих других языков и техник, среди которых значительное влияние оказало функциональное программирование . Программирование в функциональном стиле подразумевает использование функций в роли объектов, передавая их в качестве переменных, возвращая их из других функций, присваивая их переменным для последующего выполнения и так далее. В этой главе мы не будем рассуждать о том, что из себя представляет функциональное программирование, а обсудим возможности Rust, присущие многим языкам, которые принято называть функциональными. Более подробно мы поговорим про: Замыкания - конструкции, подобные функциям, которые можно помещать в переменные Повторители — способ обработки последовательности элементов, То, как, используя замыкания и повторители, улучшить работу с действиеми ввода-вывода в проекте из главы 12 Производительность замыканий и повторителей (спойлер: они быстрее, чем вы думаете!) Мы уже рассмотрели другие возможности Rust, такие как сопоставление с образцом и перечисления, которые также появились под влиянием функционального стиля. Поскольку освоение замыканий и повторителей — важная часть написания идиоматичного, быстрого кода на Rust, мы посвятим им всю эту главу.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Функциональные возможности языка: повторители и замыкания","id":"232","title":"Функциональные возможности языка: повторители и замыкания"},"233":{"body":"Замыкания в Rust - это анонимные функции, которые можно сохранять в переменных или передавать в качестве переменных другим функциям. Вы можете создать замыкание в одном месте, а затем вызвать его в каком-нибудь другом, чтобы выполнить обработку в ином среде. В отличие от функций, замыкания могут использовать значения из области видимости в которой они были определены. Мы выполним, как эти функции замыканий открывают возможности для повторного использования кода и изменения его поведения.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Замыкания: анонимные функции, которые захватывают своё окружение » Замыкания: анонимные функции, которые запечатлевают (\"захватывают\") своё окружение","id":"233","title":"Замыкания: анонимные функции, которые запечатлевают (\"захватывают\") своё окружение"},"234":{"body":"Сначала мы рассмотрим, как с помощью замыканий можно использовать объекты из области, в которой они вместе были определены, для их последующего использования. Вот сценарий: Время от времени наша компания по производству футболок в качестве акции дарит эксклюзивные футболки, выпущенные ограниченным тиражом, каким-нибудь пользователям из нашего списка рассылки. Люди из списка рассылки при желании могут выбрать любимый цвет в своём профиле. Если человек, выбранный для получения бесплатной футболки, указал свой любимый цвет, он получает футболку этого цвета. Если человек не указал свой любимый цвет, он получит рубашку того цвета, которых у компании на данный момент больше всего. Существует множество способов реализовать это. В данном примере мы будем использовать перечисление ShirtColor, которое может быть двух вариантов Red и Blue (для простоты ограничим количество доступных цветов этими двумя). Запасы компании мы представим структурой Inventory, которая состоит из поля shirts, содержащего Vec<ShirtColor>, в котором перечислены рубашки тех цветов, которые есть в наличии. Способ giveaway, определённый в Inventory, принимает необязательный свойство - цвет, предпочитаемый пользователем, выбранным для получения бесплатной рубашки, и возвращает тот цвет рубашки, который он получит фактически. Эта схема показана в приложении 13-1: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-01/src/main.rs}} Приложение 13-1: Ситуация с раздачей рубашек компанией В магазине store, определённом в main, осталось две синие и одна красная рубашки для этой ограниченной акции. Мы вызываем способ giveaway для пользователя предпочитающего красную рубашку и для пользователя без каких-либо предпочтений. Опять же, этот код мог быть реализован множеством способов, но в данном случае, чтобы сосредоточиться на замыканиях, мы придерживались изученных ранее концепций, за исключением тела способа giveaway, в котором используется замыкание. В способе giveaway мы получаем пользовательское предпочтение цвета как свойство вида Option<ShirtColor> и вызываем способ unwrap_or_else на user_preference. Способ unwrap_or_else перечисления Option<T> определён встроенной библиотекой. Он принимает один переменная: замыкание без переменных, которое возвращает значение T (преобразуется в вид значения, которое окажется в варианте Some перечисления Option<T>, в нашем случае ShirtColor). Если Option<T> окажется вариантом Some, unwrap_or_else вернёт значение из Some. А если Option<T> будет является вариантом None, unwrap_or_else вызовет замыкание и вернёт значение, возвращённое замыканием. В качестве переменной unwrap_or_else мы передаём замыкание || self.most_stocked(). Это замыкание, которое не принимает никаких свойств (если бы у замыкания были свойства, они были бы перечислены между двумя вертикальными полосами). В теле замыкания вызывается self.most_stocked(). Здесь мы определили замыкание, а реализация unwrap_or_else такова, что выполнится оно позднее, когда потребуется получить результат. Выполнение этого кода выводит: {{#include ../listings/ch13-functional-features/listing-13-01/output.txt}} Важной особенностью здесь является то, что мы передали замыкание, которое вызывает self.most_stocked() текущего экземпляра Inventory. Стандартной библиотеке не нужно знать ничего о видах Inventory или ShirtColor, которые мы определили, или о логике, которую мы хотим использовать в этом сценарии. Замыкание фиксирует неизменяемую ссылку на self Inventory и передаёт её с указанным нами кодом в способ unwrap_or_else. А вот функции не могут фиксировать своё окружение таким образом.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Замыкания: анонимные функции, которые захватывают своё окружение » Захват переменных окружения с помощью замыкания","id":"234","title":"Захват переменных окружения с помощью замыкания"},"235":{"body":"Есть и другие различия между функциями и замыканиями. Замыкания обычно не требуют аннотирования видов входных свойств или возвращаемого значения, как это делается в функциях fn. Изложения видов требуются для функций, потому что виды являются частью явного внешней оболочки, предоставляемого пользователям. Жёсткое определение таких внешних оболочек важно для того, чтобы все были согласованы в том, какие виды значений использует и возвращает функция. А вот замыкания, напротив, не употребляются в роли подобных публичных внешних оболочек: они хранятся в переменных, используются не имея имени и незримо для пользователей нашей библиотеки. Замыкания, как правило, небольшие и уместны в каком-то узконаправленном среде, а не в произвольных случаях. В этих ограниченных средах сборщик может вывести виды свойств и возвращаемого вида, подобно тому, как он может вывести виды большинства переменных (есть редкие случаи, когда сборщику также нужны изложении видов замыканий). Как и в случае с переменными, мы можем добавить изложении видов, если хотим повысить ясность и чёткость описания ценой увеличения многословности, большей чем это необходимо. Аннотирование видов для замыкания будет выглядеть как определение, показанное в приложении 13-2. В этом примере мы определяем замыкание и храним его в переменной, а не определяем замыкание в том месте, куда мы передаём его в качестве переменной, как это было в приложении 13-1. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-02/src/main.rs:here}} Приложение 13-2: Добавление необязательных аннотаций видов свойств и возвращаемых значений в замыкании С добавлением аннотаций видов синтаксис замыканий выглядит более похожим на синтаксис функций. Здесь мы, для сравнения, определяем функцию, которая добавляет 1 к своему свойству, и замыкание, которое имеет такое же поведение. Мы добавили несколько пробелов, чтобы выровнять соответствующие части. Это показывает, что синтаксис замыкания похож на синтаксис функции, за исключением использования труб (вертикальная черта) и количества необязательного синтаксиса: fn add_one_v1 (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x| { x + 1 };\nlet add_one_v4 = |x| x + 1 ; В первой строке показано определение функции, а во второй - полностью аннотированное определение замыкания. В третьей строке мы удаляем изложении видов из определения замыкания. В четвёртой строке мы убираем скобки, которые являются необязательными, поскольку тело замыкания содержит только одну действие. Это всё правильные определения, которые будут иметь одинаковое поведение при вызове. Строки add_one_v3 и add_one_v4 требуют, чтобы замыкания были вычислены до сборки, поскольку виды будут выведены из их использования. Это похоже на let v = Vec::new();, когда в Vec необходимо вставить либо изложении видов, либо значения некоторого вида, чтобы Rust смог вывести вид. Для определений замыкания сборщик выводит определенные виды для каждого из свойств и возвращаемого значения. Например, в приложении 13-3 показано определение короткого замыкания, которое просто возвращает значение, полученное в качестве свойства. Это замыкание не очень полезно, кроме как для целей данного примера. Обратите внимание, что мы не добавили в определение никаких аннотаций видов. Поскольку аннотаций видов нет, мы можем вызвать замыкание для любого вида, что мы и сделали в первый раз с String. Если затем мы попытаемся вызвать example_closure для целого числа, мы получим ошибку. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-03/src/main.rs:here}} Приложение 13-3: Попытка вызова замыкания, виды которого выводятся из двух разных видов Сборщик вернёт нам вот такую ошибку: {{#include ../listings/ch13-functional-features/listing-13-03/output.txt}} При первом вызове example_closure со значением String сборщик определяет вид x и возвращаемый вид замыкания как String. Эти виды затем фиксируются в замыкании в example_closure, и мы получаем ошибку вида при следующей попытке использовать другой вид с тем же замыканием.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Замыкания: анонимные функции, которые захватывают своё окружение » Выведение и изложение видов замыкания","id":"235","title":"Выведение и изложение видов замыкания"},"236":{"body":"Замыкания могут захватывать значения из своего окружения тремя способами, которые соответствуют тем же трём способам, которыми функция может принимать свойства: заимствование неизменяемых, заимствование изменяемых и получение владения. Замыкание самостоятельно определяет, какой из этих способов использовать, исходя из того, что тело функции делает с полученными значениями. В приложении 13-4 мы определяем замыкание, которое захватывает неизменяемую ссылку на вектор с именем list, поскольку неизменяемой ссылки достаточно для печати значения: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-04/src/main.rs}} Приложение 13-4: Определение и вызов замыкания, которое захватывает неизменяемую ссылку Этот пример также отображает, то что переменная может быть привязана к определению замыкания, и в дальнейшем мы можем вызвать замыкание, используя имя переменной и круглые скобки, как если бы имя переменной было именем функции. Поскольку мы можем иметь несколько неизменяемых ссылок на list одновременно, list остаётся доступным из кода до определения замыкания, после определения замыкания, а также до вызова замыкания и после. Этот код собирается, выполняется и печатает: {{#include ../listings/ch13-functional-features/listing-13-04/output.txt}} В следующем приложении 13-5 мы изменили тело замыкания так, чтобы оно добавляло элемент в вектор list. Теперь замыкание захватывает изменяемую ссылку: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-05/src/main.rs}} Приложение 13-5. Определение и вызов замыкания, захватывающего изменяемую ссылку Этот код собирается, запускается и печатает: {{#include ../listings/ch13-functional-features/listing-13-05/output.txt}} Обратите внимание, что между определением и вызовом замыкания borrows_mutably больше нет println!: когда определяется borrows_mutably, оно захватывает изменяемую ссылку на list. После вызова замыкания мы больше не используем его, поэтому изменяемое заимствование заканчивается. Между определением замыкания и вызовом замыкания неизменяемое заимствование для печати недоступно, потому что при наличии изменяемого заимствования никакие другие заимствования недопустимы. Попробуйте добавить туда println! и посмотрите, какое сообщение об ошибке вы получите! Если вы хотите заставить замыкание принять владение значениями, которые оно использует в окружении, даже если в теле замыкания нет кода, требующего владения, вы можете использовать ключевое слово move перед списком свойств. Эта техника в основном полезна при передаче замыкания новому потоку, чтобы переместить данные так, чтобы они принадлежали новому потоку. Мы подробно обсудим потоки и то, зачем их использовать, в главе 16, когда будем говорить о параллелизме, а пока давайте вкратце рассмотрим порождение нового потока с помощью замыкания, в котором используется ключевое слово move. В приложении 13-6 показан код из приложения 13-4, модифицированный для печати вектора в новом потоке, а не в основном потоке: Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-06/src/main.rs}} Приложение 13-6: Использование move для принуждения замыкания потока принять на себя владение list Мы порождаем новый поток, передавая ему в качестве переменной замыкание для выполнения. Тело замыкания распечатывает список. В приложении 13-4 замыкание захватило list только с помощью неизменяемой ссылки, потому что это минимально необходимый доступ к list для его печати. В этом примере, несмотря на то, что тело замыкания по-прежнему требует только неизменяемой ссылки, нам нужно указать, что list должен быть перемещён в замыкание, поместив ключевое слово move в начало определения замыкания. Новый поток может завершиться раньше, чем завершится основной поток, или основной поток может завершиться первым. Если основной поток сохранил владение list, но завершился раньше нового потока и удалил list, то неизменяемая ссылка в потоке будет недействительной. Поэтому сборщик требует, чтобы list был перемещён в замыкание, переданное новому потоку, чтобы ссылка была действительной. Попробуйте убрать ключевое слово move или использовать list в основном потоке после определения замыкания и посмотрите, какие ошибки сборщика вы получите!","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Замыкания: анонимные функции, которые захватывают своё окружение » Захват ссылок или передача владения","id":"236","title":"Захват ссылок или передача владения"},"237":{"body":"После того, как замыкание захватило ссылку или владение значением из среды, в которой оно определено (тем самым влияя на то, что перемещается в замыкание), код в теле замыкания определяет, что происходит со ссылками или значениями, в момент последующего выполнения замыкания (тем самым влияя на то, что перемещается из замыкания). Тело замыкания может делать любое из следующих действий: перемещать захваченное значение из замыкания, изменять захваченное значение, не перемещать и не изменять значение или вообще ничего не захватывать из среды. То, как замыкание получает и обрабатывает значения из своего окружения, указывает на то, какие трейты реализует замыкание, а с помощью трейтов функции и структуры могут определять, какие виды замыканий они могут использовать. Замыканиям самостоятельно присваивается реализация одного, двух или всех трёх из нижеперечисленных трейтов Fn, аддитивным образом, в зависимости от того, как тело замыкания обрабатывает значения: FnOnce применяется к замыканиям, которые могут быть вызваны один раз. Все замыкания реализуют по крайней мере этот трейт, потому что все замыкания могут быть вызваны. Замыкание, которое перемещает захваченные значения из своего тела, реализует только FnOnce и ни один из других признаков Fn, потому что оно может быть вызвано только один раз. FnMut применяется к замыканиям, которые не перемещают захваченные значения из своего тела, но могут изменять захваченные значения. Такие замыкания могут вызываться более одного раза. Fn применяется к замыканиям, которые не перемещают захваченные значения из своего тела и не модифицируют захваченные значения, а также к замыканиям, которые ничего не захватывают из своего окружения. Такие замыкания могут выполняться более одного раза и не меняют ничего в своём окружении, что важно в таких случаях, как одновременный вызов замыкания несколько раз. Давайте рассмотрим определение способа unwrap_or_else у Option<T>, который мы использовали в приложении 13-1: impl<T> Option<T> { pub fn unwrap_or_else<F>(self, f: F) -> T where F: FnOnce() -> T { match self { Some(x) => x, None => f(), } }\n} Напомним, что T - это универсальный вид, отображающий вид значения в Some варианте Option. Этот вид T также является возвращаемым видом функции unwrap_or_else: например, код, вызывающий unwrap_or_else у Option<String>, получит String. Далее, обратите внимание, что функция unwrap_or_else имеет дополнительный свойство универсального вида F. Здесь F - это вид входного свойства f, который является замыканием, заданным нами при вызове unwrap_or_else. Ограничением трейта, заданным для обобщённого вида F, является FnOnce() -> T, что означает, что F должен вызываться один раз, не принимать никаких переменных и возвращать T. Использование FnOnce в ограничении трейта говорит о том, что unwrap_or_else должен вызывать f не более одного раза. В теле unwrap_or_else мы видим, что если Option будет равен Some, то f не будет вызван. Если же значение Option будет равным None, то f будет вызван один раз. Поскольку все замыкания реализуют FnOnce, unwrap_or_else принимает самые разные виды замыканий и является настолько гибким, насколько это возможно. Примечание: Функции также могут реализовывать все три трейта Fn. Если то, что мы хотим сделать, не требует захвата значения из среды, мы можем передавать имя какой-либо функции, а не замыкания, когда нам нужно что-то, реализующее один из трейтов Fn. Например, для значения Option<Vec<T>> мы можем вызвать unwrap_or_else(Vec::new), чтобы получить новый пустой вектор, если значение окажется None. Теперь рассмотрим способ встроенной библиотеки sort_by_key, определённый у срезов, чтобы увидеть, чем он отличается от unwrap_or_else и почему sort_by_key использует FnMut вместо FnOnce для ограничения трейта. Замыкание принимает единственный переменная в виде ссылки на текущий элемент в рассматриваемом срезе и возвращает значение вида K, к которому применима сортировка. Эта функция полезна, когда вы хотите отсортировать срез по определённому атрибуту каждого элемента. В приложении 13-7 у нас есть список экземпляров Rectangle, и мы используем sort_by_key, чтобы упорядочить их по атрибуту width от меньшего к большему: Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-07/src/main.rs}} Приложение 13-7: Использование sort_by_key для сортировки прямоугольников по ширине Этот код печатает: {{#include ../listings/ch13-functional-features/listing-13-07/output.txt}} Причина, по которой sort_by_key определена как принимающая замыкание FnMut, заключается в том, что она вызывает замыкание несколько раз: по одному разу для каждого элемента в срезе. Замыкание |r| r.width не захватывает, не изменяет и не перемещает ничего из своего окружения, поэтому оно удовлетворяет требованиям связанности признаков. И наоборот, в приложении 13-8 показан пример замыкания, которое реализует только признак FnOnce, потому что оно перемещает значение из среды. Сборщик не позволит нам использовать это замыкание с sort_by_key: Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-08/src/main.rs}} Приложение 13-8: Попытка использовать замыкание FnOnce с sort_by_key Это надуманный, замысловатый способ (который не работает) подсчёта количества вызовов sort_by_key при сортировке list. Этот код пытается выполнить подсчёт, перемещая value - String из окружения замыкания - в вектор sort_operations. Замыкание захватывает value, затем перемещает value из замыкания, передавая владение на value вектору sort_operations. Это замыкание можно вызвать один раз; попытка вызвать его второй раз не сработает, потому что value уже не будет находиться в той среде, из которой его можно будет снова поместить в sort_operations! Поэтому это замыкание реализует только FnOnce. Когда мы попытаемся собрать этот код, мы получим ошибку сообщающую о том что value не может быть перемещено из замыкания, потому что замыкание должно реализовывать FnMut: {{#include ../listings/ch13-functional-features/listing-13-08/output.txt}} Ошибка указывает на строку в теле замыкания, которая перемещает value из окружения. Чтобы исправить это, нужно изменить тело замыкания так, чтобы оно не перемещало значения из окружения. Для подсчёта количества вызовов sort_by_key более простым способом является хранение счётчика в окружении и увеличение его значения в теле замыкания. Замыкание в приложении 13-9 работает с sort_by_key, поскольку оно фиксирует только изменяемую ссылку на счётчик num_sort_operations и поэтому может быть вызвано более одного раза: Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-09/src/main.rs}} Приложение 13-9: Использование замыкания FnMut с sort_by_key разрешено Трейты Fn важны при определении или использовании функций или видов, использующих замыкания. В следующем разделе мы обсудим повторители. Многие способы повторителей принимают переменные в виде замыканий, поэтому не забывайте об этих подробностях, пока мы продвигаемся дальше!","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Замыкания: анонимные функции, которые захватывают своё окружение » Перемещение захваченных значений из замыканий и трейты Fn","id":"237","title":"Перемещение захваченных значений из замыканий и трейты Fn"},"238":{"body":"Использование паттерна Повторитель помогает при необходимости поочерёдного выполнения какой-либо действия над элементами последовательности. Повторитель отвечает за логику перебора элементов и определение момента завершения последовательности. Используя повторители, вам не нужно самостоятельно реализовывать всю эту логику. В Rust повторители ленивые (lazy) , то есть они не делают ничего, пока вы не вызовете особые способы, потребляющие повторитель, чтобы задействовать его. Например, код в приложении 13-10 создаёт повторительэлементов вектора v1, вызывая способ iter, определённый у Vec<T>. Сам по себе этот код не делает ничего полезного. {{#rustdoc_include ../listings/ch13-functional-features/listing-13-10/src/main.rs:here}} Приложение 13-10: Создание повторителя Повторитель хранится в переменной v1_iter. Создав повторитель, мы можем использовать его различными способами. В приложении 3-5 главы 3 мы совершали обход элементов массива используя цикл for для выполнения какого-то кода над каждым из его элементов. Под капотом это неявно создавало, а затем потребляло повторитель, но до сих пор мы не касались того, как именно это работает. В примере из приложения 13-11 мы отделили создание повторителя от его использования в цикле for. В цикле for, использующем повторительв v1_iter, каждый элемент повторителя участвует только в одной повторения цикла, в ходе которой выводится на экран его значение. {{#rustdoc_include ../listings/ch13-functional-features/listing-13-11/src/main.rs:here}} Приложение 13-11: Использование повторителя в цикле for В языках, стандартные библиотеки которых не предоставляют повторители, вы, скорее всего, напишите эту же функциональность так: создадите переменную со значением 0 затем, в цикле, использовав её для получения элемента вектора по порядковому казателю, будете увеличивать её значение, и так, пока оно не достигнет числа равного количеству элементов в векторе. Повторители выполняют всю эту логику за вас, сокращая количество повторяющегося кода, который потенциально может быть написан неправильно. Повторители дают вам гибкость, позволяя использовать одинаковые принципы работы с различными видами последовательностей, а не только со структурами данных, которые можно упорядочивать, например, векторами. Давайте рассмотрим, как повторители это делают.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Обработка последовательности элементов с помощью повторителей » Обработка последовательности элементов с помощью повторителей","id":"238","title":"Обработка последовательности элементов с помощью повторителей"},"239":{"body":"Все повторители реализуют типаж Iterator, который определён в встроенной библиотеке. Его определение выглядит так: pub trait Iterator { type Item; fn next(&mut self) -> Option<Self::Item>; // methods with default implementations elided\n} Обратите внимание данное объявление использует новый синтаксис: type Item и Self::Item, которые определяют ассоциированный вид (associated type) с этим типажом. Мы подробнее поговорим о ассоциированных видах в главе 19. Сейчас вам нужно знать, что этот код требует от реализаций типажа Iterator определить требуемый им вид Item и данный вид Item используется в способе next. Другими словами, вид Item будет являться видом элемента, который возвращает повторитель. Типаж Iterator требует, чтобы разработчики определяли только один способ: способ next, который возвращает один элемент повторителя за раз обёрнутый в вариант Some и когда повторение завершена, возвращает None. Мы можем вызывать способ next у повторителей напрямую; в приложении 13-12 показано, какие значения возвращаются при повторных вызовах next у повторителя, созданного из вектора. Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-12/src/lib.rs:here}} Приложение 13-12: Вызов способа next повторителя Обратите внимание, что нам нужно сделать переменную v1_iter изменяемой: вызов способа next повторителя изменяет внутреннее состояние повторителя, которое повторительиспользует для отслеживания того, где он находится в последовательности. Другими словами, этот код потребляет (consume) или использует повторитель. Каждый вызов next потребляет элемент из повторителя. Нам не нужно было делать изменяемой v1_iter при использовании цикла for, потому что цикл забрал во владение v1_iter и сделал её изменяемой неявно для нас. Заметьте также, что значения, которые мы получаем при вызовах next являются неизменяемыми ссылками на значения в векторе. Способ iter создаёт повторительпо неизменяемым ссылкам. Если мы хотим создать повторитель, который становится владельцем v1 и возвращает принадлежащие ему значения, мы можем вызвать into_iter вместо iter. Точно так же, если мы хотим перебирать изменяемые ссылки, мы можем вызвать iter_mut вместо iter.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Обработка последовательности элементов с помощью повторителей » Типаж Iterator и способ next","id":"239","title":"Типаж Iterator и способ next"},"24":{"body":"Вы только что запустили впервые созданную программу, поэтому давайте рассмотрим каждый шаг этого процесса. Перед запуском программы на Rust вы должны собрать её с помощью сборщика Rust, введя приказ rustc и передав ей имя вашего исходного файла, например: $ rustc main.rs Если у вас есть опыт работы с C или C++, вы заметите, что это похоже на gcc или clang. После успешной сборки Rust выводит двоичный исполняемый файл. В Linux, macOS и PowerShell в Windows вы можете увидеть исполняемый файл, введя приказ ls в оболочке: $ ls\nmain main.rs В Linux и macOS вы увидите два файла. При использовании PowerShell в Windows вы увидите такие же три файла, как и при использовании CMD. Используя CMD в Windows, введите следующее: > dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs Это показывает исходный код файла с расширением .rs , исполняемый файл ( main.exe на Windows, но main на всех других платформах) и, при использовании Windows, файл, содержащий отладочную сведения с расширением .pdb . Отсюда вы запускаете файлы main или main.exe , например: $ ./main # для Linux\n> .\\main.exe # для Windows Если ваш main.rs — это ваша программа «Привет, мир!», эта строка выведет в окно вызова Привет, мир!. Если вы лучше знакомы с изменяемыми языками, такими как Ruby, Python или JavaScript, возможно, вы не привыкли собирать и запускать программу как отдельные шаги. Rust — это предварительно собранный язык, то есть вы можете собрать программу и передать исполняемый файл кому-то другому, и он сможет запустить его даже без установленного Rust. Если вы даёте кому-то файл .rb , .py или .js , у него должна быть установлена реализация Ruby, Python или JavaScript (соответственно). Но в этих языках вам нужна только одна приказ для сборки и запуска вашей программы. В дизайне языков программирования всё — соглашение. Сборка с помощью rustc подходит для простых программ, но по мере роста вашего проекта вы захотите управлять всеми свойствами и упростить передачу кода. Далее мы познакомим вас с средством Cargo, который поможет вам писать программы из реального мира на Rust.","breadcrumbs":"С чего начать » Привет, Мир! » Сборка и запуск - это отдельные шаги","id":"24","title":"Сборка и запуск - это отдельные шаги"},"240":{"body":"У типажа Iterator есть несколько способов, реализация которых по умолчанию предоставляется встроенной библиотекой; вы можете узнать об этих способах, просмотрев документацию API встроенной библиотеки для Iterator. Некоторые из этих способов вызывают next в своём определении, поэтому вам необходимо реализовать способ next при реализации типажа Iterator. Способы, вызывающие next, называются потребляющими адаптерами , поскольку их вызов потребляет повторитель. Примером может служить способ sum, который забирает во владение повторительи перебирает элементы, многократно вызывая next, тем самым потребляя повторитель. В процессе повторения он добавляет каждый элемент к текущей сумме и возвращает итоговое значение по завершении повторения. В приложении 13-13 приведён тест, отображающий использование способа sum: Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-13/src/lib.rs:here}} Приложение 13-13: Вызов способа sum для получения суммы всех элементов в повторителе Мы не можем использовать v1_iter после вызова способа sum, потому что sum забирает во владение повторительу которого вызван способ.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Обработка последовательности элементов с помощью повторителей » Способы, которые потребляют повторитель","id":"240","title":"Способы, которые потребляют повторитель"},"241":{"body":"Адаптеры повторителей - это способы, определённые для трейта Iterator, которые не потребляют повторитель. Вместо этого они создают различные повторители, изменяя некоторые особенности исходного повторителя. В приложении 13-14 показан пример вызова способа адаптера повторителя map, который принимает замыкание и вызывает его для каждого элемента по мере повторения элементов. Способ map возвращает новый повторитель, который создаёт изменённые элементы. Замыкание здесь создаёт новый повторитель, в котором каждый элемент из вектора будет увеличен на 1: Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-14/src/main.rs:here}} Приложение 13-14: Вызов адаптера повторителя map для создания нового повторителя Однако этот код выдаёт предупреждение: {{#include ../listings/ch13-functional-features/listing-13-14/output.txt}} Код в приложении 13-14 ничего не делает; указанное нами замыкание никогда не вызывается. Предупреждение напоминает нам, почему: адаптеры повторителей ленивы, и здесь нам нужно потребить повторитель. Чтобы устранить это предупреждение и потребить повторитель, мы воспользуемся способом collect, который мы использовали в главе 12 с env::args в приложении 12-1. Этот способ потребляет повторительи собирает полученные значения в собрание указанного вида. В приложении 13-15 мы собираем в вектор результаты перебора повторителя, который возвращается в результате вызова map. Этот вектор в итоге будет содержать каждый элемент исходного вектора, увеличенный на 1. Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-15/src/main.rs:here}} Приложение 13-15: Вызов способа map для создания нового повторителя, а затем вызов способа collect для потребления нового повторителя и создания вектора Поскольку map принимает замыкание, мы можем указать любую действие, которую хотим выполнить над каждым элементом. Это отличный пример того, как замыкания позволяют задавать желаемое поведение, используя при этом особенности повторения, которые обеспечивает трейт Iterator. Вы можете выстроить цепочку из нескольких вызовов адаптеров повторителя для выполнения сложных действий в удобочитаемом виде. Но поскольку все повторители являются \"ленивыми\", для получения результатов вызовов адаптеров повторителя необходимо вызвать один из способов потребляющего адаптера.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Обработка последовательности элементов с помощью повторителей » Способы, которые создают другие повторители","id":"241","title":"Способы, которые создают другие повторители"},"242":{"body":"Многие адаптеры повторителей принимают замыкания в качестве переменных, и обычно замыкания, которые мы будем указывать в качестве переменных адаптерам повторителей, это замыкания, которые фиксируют (захватывают) своё окружение. В этом примере мы будем использовать способ filter, который принимает замыкание. Замыкание получает элемент из повторителя и возвращает bool. Если замыкание возвращает true, значение будет включено в повторение, создаваемую filter. Если замыкание возвращает false, значение не будет включено. В приложении 13-16 мы используем filter с замыканием, которое захватывает переменную shoe_size из своего окружения для повторения по собрания экземпляров структуры Shoe. Он будет возвращать обувь только указанного размера. Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-16/src/lib.rs}} Приложение 13-16. Использование способа filter с замыканием, фиксирующим shoe_size Функция shoes_in_size принимает в качестве свойств вектор с экземплярами обуви и размер обуви, а возвращает вектор, содержащий только обувь указанного размера. В теле shoes_in_my_size мы вызываем into_iter чтобы создать повторитель, который становится владельцем вектора. Затем мы вызываем filter, чтобы превратить этот повторительв другой, который содержит только элементы, для которых замыкание возвращает true. Замыкание захватывает свойство shoe_size из окружения и сравнивает его с размером каждой пары обуви, оставляя только обувь указанного размера. Наконец, вызов collect собирает значения, возвращаемые адаптированным повторителем, в вектор, возвращаемый функцией. Тест показывает, что когда мы вызываем shoes_in_my_size, мы возвращаем только туфли, размер которых совпадает с указанным нами значением.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Обработка последовательности элементов с помощью повторителей » Использование замыканий, которые захватывают переменные окружения","id":"242","title":"Использование замыканий, которые захватывают переменные окружения"},"243":{"body":"Вооружившись полученными знаниями об повторителях, мы можем улучшить реализацию работы с вводом/выводом в проекте главы 12, применяя повторители для того, чтобы сделать некоторые места в коде более понятными и лаконичными. Давайте рассмотрим, как повторители могут улучшить нашу реализацию функции Config::build и функции search.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Улучшение нашего проекта с вводом/выводом » Улучшение нашего проекта с вводом/выводом","id":"243","title":"Улучшение нашего проекта с вводом/выводом"},"244":{"body":"В приложении 12-6 мы добавили код, который принимает срез значений String и создаёт экземпляр структуры Config путём упорядочевания среза и клонирования значений, позволяя структуре Config владеть этими значениями. В приложении 13-17 мы воспроизвели реализацию функции Config::build, как это было в приложении 12-23: Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-12-23-reproduced/src/lib.rs:ch13}} Приложение 13-17: Репродукция функции Config::build из приложения 12-23 Ранее мы говорили, что не стоит беспокоиться о неэффективных вызовах clone, потому что мы удалим их в будущем. Ну что же, время пришло! Нам понадобился здесь clone, потому что в свойстве args у нас срез с элементами String, но функция build не владеет args. Чтобы экземпляр Config владел значениями, нам пришлось клонировать их из args в переменные query и file_path. Благодаря нашим новым знаниям об повторителях мы можем изменить функцию build, чтобы вместо заимствования среза она принимала в качестве переменной повторитель. Мы будем использовать функциональность повторителя вместо кода, который проверяет длину среза и обращается по порядковому указателю к определённым значениям. Это позволит лучше понять, что делает функция Config::build, поскольку повторительбудет обращаться к значениям. Как только Config::build получит в своё распоряжение повторительи перестанет использовать действия упорядочевания с заимствованием, мы сможем переместить значения String из повторителя в Config вместо того, чтобы вызывать clone и создавать новое выделение памяти. Использование возвращённого повторителя напрямую Откройте файл src/main.rs проекта ввода-вывода, который должен выглядеть следующим образом: Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-12-24-reproduced/src/main.rs:ch13}} Сначала мы изменим начало функции main, которая была в приложении 12-24, на код в приложении 13-18, который теперь использует повторитель. Это не будет собираться, пока мы не обновим Config::build. Файл: src/main.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-18/src/main.rs:here}} Приложение 13-18: Передача возвращаемого значения из env::args в Config::build Функция env::args возвращает повторитель! Вместо того чтобы собирать значения повторителя в вектор и затем передавать срез в Config::build, теперь мы передаём владение повторителем, возвращённым из env::args в Config::build напрямую. Далее нам нужно обновить определение Config::build. В файле src/lib.rs вашего проекта ввода-вывода изменим сигнатуру Config::build так, чтобы она выглядела как в приложении 13-19. Это все ещё не ссобирается, потому что нам нужно обновить тело функции. Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-19/src/lib.rs:here}} Приложение 13-19: Обновление сигнатуры Config::build для определения повторителя как ожидаемого свойства Документация встроенной библиотеки для функции env::args показывает, что вид возвращаемого ею повторителя - std::env::Args, и этот вид реализует признак Iterator и возвращает значения String. Мы обновили сигнатуру функции Config::build, чтобы свойство args имел универсальный вид ограниченный трейтом impl Iterator<Item = String> вместо &[String]. Такое использование синтаксиса impl Trait, который мы обсуждали в разделе \" Трейты как свойства\" главы 10, означает, что args может быть любым видом, реализующим вид Iterator и возвращающим элементы String. Поскольку мы владеем args и будем изменять args в процессе повторения над ним, мы можем добавить ключевое слово mut в спецификацию свойства args, чтобы сделать его изменяемым. Использование способов типажа Iterator вместо порядковых указателей Далее мы подправим содержимое Config::build. Поскольку args реализует признак Iterator, мы знаем, что можем вызвать у него способ next! В приложении 13-20 код из приложения 12-23 обновлён для использования способа next: Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-20/src/lib.rs:here}} Приложение 13-20: Изменяем тело Config::build так, чтобы использовать способы повторителя Помните, что первое значение в возвращаемых данных env::args - это имя программы. Мы хотим пропренебрегать его и перейти к следующему значению, поэтому сперва мы вызываем next и ничего не делаем с возвращаемым значением. Затем мы вызываем next, чтобы получить значение, которое мы хотим поместить в поле query в Config. Если next возвращает Some, мы используем match для извлечения значения. Если возвращается None, это означает, что было задано недостаточно переменных, и мы досрочно возвращаем значение Err. То же самое мы делаем для значения file_path.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Улучшение нашего проекта с вводом/выводом » Удаляем clone, используем повторитель","id":"244","title":"Удаляем clone, используем повторитель"},"245":{"body":"Мы также можем воспользоваться преимуществами повторителей в функции search в нашем проекте с действиеми ввода-вывода, которая воспроизведена здесь в приложении 13-21 так же, как и в приложении 12-19: Файл: src/lib.rs {{#rustdoc_include ../listings/ch12-an-io-project/listing-12-19/src/lib.rs:ch13}} Приложение 13-21: Реализация функции search из приложения 12-19 Мы можем написать этот код в более сжатом виде, используя способы адаптера повторителя. Это также позволит нам избежать наличия изменяемого временного вектора results. Функциональный стиль программирования предпочитает минимизировать количество изменяемого состояния, чтобы сделать код более понятным. Удаление изменяемого состояния может позволить в будущем сделать поиск параллельным, поскольку нам не придётся управлять одновременным доступом к вектору results. В приложении 13-22 показано это изменение: Файл: src/lib.rs {{#rustdoc_include ../listings/ch13-functional-features/listing-13-22/src/lib.rs:here}} Приложение 13-22: Использование способов адаптера повторителя в реализации функции search Напомним, что назначение функции search - вернуть все строки в contents, которые содержат query. Подобно примеру filter в приложении 13-16, этот код использует адаптер filter, чтобы сохранить только те строки, для которых line.contains(query) возвращает true. Затем мы собираем совпадающие строки в другой вектор с помощью collect. Так гораздо проще! Не стесняйтесь сделать такое же изменение для использования способов повторителя в функции search_case_insensitive.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Улучшение нашего проекта с вводом/выводом » Делаем код понятнее с помощью адаптеров повторителей","id":"245","title":"Делаем код понятнее с помощью адаптеров повторителей"},"246":{"body":"Следующий логичный вопрос - какой стиль вы должны выбрать в своём коде и почему: оригинальную реализацию в приложении 13-21 или исполнение с использованием повторителей в приложении 13-22. Большинство программистов на языке Rust предпочитают использовать стиль повторителей. Сначала разобраться с ним немного сложно, но как только вы почувствуете, что такое различные адаптеры повторителей и что они делают, понять повторители станет проще. Вместо того чтобы возиться с различными элементами цикла и создавать новые векторы, код фокусируется на высокоуровневой цели цикла. Это абстрагирует часть обычного кода, поэтому легче увидеть концепции, уникальные для этого кода, такие как условие фильтрации, которое должен пройти каждый элемент в повторителе. Но действительно ли эти две реализации эквивалентны? Интуитивно можно предположить, что более низкоуровневый цикл будет быстрее. Давайте поговорим о производительности.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Улучшение нашего проекта с вводом/выводом » Выбор между циклами или повторителями","id":"246","title":"Выбор между циклами или повторителями"},"247":{"body":"Чтобы определить, что лучше использовать циклы или повторители, нужно знать, какая реализация быстрее: исполнение функции search с явным циклом for или исполнение с повторителями. Мы выполнили тест производительности, разместив всё содержимое книги (“The Adventures of Sherlock Holmes” by Sir Arthur Conan Doyle) в строку вида String и поискали слово the в её содержимом. Вот результаты теста функции search с использованием цикла for и с использованием повторителей: test bench_search_for ... bench: 19,620,300 ns/iter (+/- 915,700)\ntest bench_search_iter ... bench: 19,234,900 ns/iter (+/- 657,200) Исполнение с использованием повторителей была немного быстрее! Мы не будем приводить здесь непосредственно код теста, поскольку мысль не в том, чтобы доказать, что решения в точности эквивалентны, а в том, чтобы получить общее представление о том, как эти две реализации близки по производительности. Для более исчерпывающего теста, вам нужно проверить различные тексты разных размеров в качестве содержимого для contents, разные слова и слова различной длины в качестве query и всевозможные другие варианты. Дело в том, что повторители, будучи высокоуровневой абстракцией, собираются примерно в тот же код, как если бы вы написали его низкоуровневый вариант самостоятельно. Повторители - это одна из абстракций с нулевой стоимостью ( zero-cost abstractions ) в Rust, под которой мы подразумеваем, что использование абстракции не накладывает дополнительных расходов во время выполнения. Подобно тому, как Бьёрн Страуструп, дизайнер и разработчик C++, определяет нулевые накладные расходы ( zero-overhead ) в книге “Foundations of C++” (2012): В целом, реализация C++ подчиняется принципу отсутствия накладных расходов: за то, чем вы не пользуетесь, платить не нужно. И далее: тот код, что вы используете, нельзя сделать ещё лучше. В качестве другого примера приведём код, взятый из аудио декодера. Алгоритм декодирования использует математическую действие линейного предсказания для оценки будущих значений на основе линейной функции предыдущих выборок. Код использует комбинирование вызовов повторителя для выполнения математических вычислений для трёх переменных в области видимости: срез данных buffer, массив из 12 коэффициентов coefficients и число для сдвига данных в переменной qlp_shift. Переменные определены в примере, но не имеют начальных значений. Хотя этот код не имеет большого значения вне среды, он является кратким, существующим примером того, как Rust переводит идеи высокого уровня в код низкого уровня. let buffer: &mut [i32];\nlet coefficients: [i64; 12];\nlet qlp_shift: i16; for i in 12..buffer.len() { let prediction = coefficients.iter() .zip(&buffer[i - 12..i]) .map(|(&c, &s)| c * s as i64) .sum::<i64>() >> qlp_shift; let delta = buffer[i]; buffer[i] = prediction as i32 + delta;\n} Чтобы вычислить значение переменной prediction, этот код перебирает каждое из 12 значений в переменной coefficients и использует способ zip для объединения значений коэффициентов с предыдущими 12 значениями в переменной buffer. Затем, для каждой пары мы перемножаем значения, суммируем все результаты и у суммы сдвигаем биты вправо в переменную qlp_shift. Для вычислений в таких приложениях, как аудио декодеры, часто требуется производительность. Здесь мы создаём повторитель, используя два адаптера, впоследствии потребляющих значение. В какой ассемблерный код будет собираться этот код на Rust? На момент написания этой главы он собирается в то же самое, что вы написали бы руками. Не существует цикла, соответствующего повторения по значениям в «коэффициентах»coefficients: Rust знает, что существует двенадцать повторений, поэтому он «разворачивает» цикл. Разворачивание - это оптимизация, которая устраняет издержки кода управления циклом и вместо этого генерирует повторяющийся код для каждой повторения цикла. Все коэффициенты сохраняются в регистрах, что означает очень быстрый доступ к значениям. Нет никаких проверок границ доступа к массиву во время выполнения. Все эти оптимизации, которые может применить Rust, делают полученный код чрезвычайно эффективным. Теперь, когда вы это знаете, используйте повторители и замыкания без страха! Они представляют код в более высокоуровневом виде, но без потери производительности во время выполнения.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Сравнение производительности: циклы и повторители » Сравнение производительности циклов и повторителей","id":"247","title":"Сравнение производительности циклов и повторителей"},"248":{"body":"Замыкания (closures) и повторители (iterators) это возможности Rust, вдохновлённые идеями функциональных языков. Они позволяют Rust ясно выражать идеи высокого уровня с производительностью низкоуровневого кода. Реализации замыканий и повторителей таковы, что нет влияния на производительность выполнения кода. Это одна из целей Rust, направленных на обеспечение абстракций с нулевой стоимостью (zero-cost abstractions). Теперь, когда мы улучшили представление кода в нашем проекте, рассмотрим некоторые возможности, которые нам предоставляет cargo для публикации нашего кода в репозитории.","breadcrumbs":"Функциональные возможности языка: повторители и замыкания » Сравнение производительности: циклы и повторители » Итоги","id":"248","title":"Итоги"},"249":{"body":"До сих пор мы использовали только самые основные возможности Cargo для сборки, запуска и тестирования нашего кода, но он может гораздо больше. В этой главе мы обсудим некоторые другие, более продвинутые возможности, чтобы показать вам, как делать следующее: Настройка сборки с помощью релизных профилей Публикация библиотеки на crates.io Управление крупными проектами с помощью рабочих пространств Установка двоичных файлов с crates.io Расширение возможностей Cargo с помощью возможности добавления собственных приказов Cargo может делать значительно больше того, что мы рассмотрим в этой главе, полное описание всех его функций см. в документации .","breadcrumbs":"Подробнее о Cargo и Crates.io » Больше о Cargo и Crates.io","id":"249","title":"Больше о Cargo и Crates.io"},"25":{"body":"Cargo - это система сборки и менеджер пакетов Rust. Большая часть разработчиков используют данный средство для управления проектами, потому что Cargo выполняет за вас множество задач, таких как сборка кода, загрузка библиотек, от которых зависит ваш код, и создание этих библиотек. (Мы называем библиотеки, которые нужны вашему коду, зависимостями .) Самые простые программы на Rust, подобные той, которую мы написали, не имеют никаких зависимостей. Если бы мы сделали проект «Hello, world!» с Cargo, он бы использовал только ту часть Cargo, которая отвечает за сборку вашего кода. По мере написания более сложных программ на Rust вы будете добавлять зависимости, а если вы начнёте проект с использованием Cargo, добавлять зависимости станет намного проще. Поскольку значительное число проектов Rust используют Cargo, оставшаяся часть книги подразумевает, что вы тоже используете Cargo. Cargo входит в комплект поставки Rust, если вы использовали напрямую от разрабочиков программы установки, рассмотренные в разделе \"Установка\" . Если вы установили Rust другим способом, проверьте, установлен ли Cargo, введя в окне вызова следующее: $ cargo --version Если приказ выдал номер исполнения, то значит Cargo установлен. Если вы видите ошибку, вроде command not found (\"приказ не найдена\"), загляните в документацию для использованного вами способа установки, чтобы выполнить установку Cargo отдельно.","breadcrumbs":"С чего начать » Hello, Cargo! » Привет, Cargo!","id":"25","title":"Привет, Cargo!"},"250":{"body":"В Rust профили выпуска — это предопределённые и настраиваемые профили с различными настройками, которые позволяют программисту лучше управлять различные свойства сборки кода. Каждый профиль настраивается независимо от других. Cargo имеет два основных профиля: профиль dev, используемый Cargo при запуске cargo build, и профиль release, используемый Cargo при запуске cargo build --release. Профиль dev определён со значениями по умолчанию для разработки, а профиль release имеет значения по умолчанию для сборок в релиз. Эти имена профилей могут быть знакомы по результатам ваших сборок: $ cargo build Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n$ cargo build --release Finished release [optimized] target(s) in 0.0s dev и release — это разные профили, используемые сборщиком. Cargo содержит настройки по умолчанию для каждого профиля, которые применяются, если вы явно не указали секции [profile.*] в файле проекта Cargo.toml . Добавляя секции [profile.*] для любого профиля, который вы хотите настроить, вы переопределяете любое подмножество свойств по умолчанию. Например, вот значения по умолчанию для свойства opt-level для профилей dev и release: Файл: Cargo.toml [profile.dev]\nopt-level = 0 [profile.release]\nopt-level = 3 Свойство opt-level управляет количеством оптимизаций, которые Rust будет применять к вашему коду, в ряде от 0 до 3. Использование большего количества оптимизаций увеличивает время сборки, поэтому если вы находитесь в процессе разработки и часто собираете свой код, целесообразно использовать меньшее количество оптимизаций, чтобы сборка происходила быстрее, даже если в результате код будет работать медленнее. Поэтому opt-level по умолчанию для dev установлен в 0. Когда вы готовы опубликовать свой код, то лучше потратить больше времени на сборку. Вы ссобираете программу в режиме релиза только один раз, но выполняться она будет многократно, так что использование режима релиза позволяет увеличить скорость выполнения кода за счёт времени сборки. Вот почему по умолчанию opt-level для профиля release равен 3. Вы можете переопределить настройки по умолчанию, добавив другое значение для них в Cargo.toml . Например, если мы хотим использовать уровень оптимизации 1 в профиле разработки, мы можем добавить эти две строки в файл Cargo.toml нашего проекта: Файл: Cargo.toml [profile.dev]\nopt-level = 1 Этот код переопределяет настройку по умолчанию 0. Теперь, когда мы запустим cargo build, Cargo будет использовать значения по умолчанию для профиля dev плюс нашу настройку для opt-level. Поскольку мы установили для opt-level значение 1, Cargo будет применять больше оптимизаций, чем было задано по умолчанию, но не так много, как при сборке релиза. Полный список свойств настройке и значений по умолчанию для каждого профиля вы можете найти в документации Cargo .","breadcrumbs":"Подробнее о Cargo и Crates.io » Настройка билдов с помощью профилей выпуска » Настройка сборок с профилями релизов","id":"250","title":"Настройка сборок с профилями релизов"},"251":{"body":"Мы использовали пакеты из crates.io в качестве зависимостей нашего проекта, но вы также можете поделиться своим кодом с другими людьми, опубликовав свои собственные пакеты. Реестр библиотек по адресу crates.io распространяет исходный код ваших пакетов, поэтому он в основном размещает код с открытым исходным кодом. В Rust и Cargo есть функции, которые облегчают поиск и использование опубликованного пакета. Далее мы поговорим о некоторых из этих функций, а затем объясним, как опубликовать пакет.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Публикация библиотеки в Crates.io","id":"251","title":"Публикация библиотеки в Crates.io"},"252":{"body":"Правильноное документирование ваших пакетов поможет другим пользователям знать, как и когда их использовать, поэтому стоит потратить время на написание документации. В главе 3 мы обсуждали, как комментировать код Rust, используя две косые черты, //. В Rust также есть особый вид комментариев к документации, который обычно называется комментарием к документации , который генерирует документацию HTML. HTML-код отображает содержимое комментариев к документации для публичных элементов API, предназначенных для программистов, увлеченных в знании того, как использовать вашу библиотеку, в отличие от того, как она реализована . Комментарии к документации используют три слеша, /// вместо двух и поддерживают нотацию Markdown для форматирования текста. Размещайте комментарии к документации непосредственно перед элементом, который они документируют. В приложении 14-1 показаны комментарии к документации для функции add_one в библиотеке с именем my_crate: Файл: src/lib.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-01/src/lib.rs}} Приложение 14-1: Комментарий к документации для функции Здесь мы даём описание того, что делает функция add_one, начинаем раздел с заголовка Examples, а затем предоставляем код, который отображает, как использовать функцию add_one. Мы можем сгенерировать документацию HTML из этого комментария к документации, запустив cargo doc. Этот приказ запускает средство rustdoc, поставляемый с Rust, и помещает сгенерированную HTML-документацию в каталог target/doc . Для удобства, запустив cargo doc --open, мы создадим HTML для документации вашей текущей библиотеки (а также документацию для всех зависимостей вашей библиотеки) и откроем результат в веб-браузере. Перейдите к функции add_one и вы увидите, как отображается текст в комментариях к документации, что показано на рисунке 14-1: Рисунок 14-1: HTML документация для функции add_one Часто используемые разделы Мы использовали Markdown заголовок # Examples в приложении 14-1 для создания раздела в HTML с заголовком \"Examples\". Вот некоторые другие разделы, которые авторы библиотек обычно используют в своей документации: Panics : Сценарии, в которых документированная функция может вызывать панику. Вызывающие функцию, которые не хотят, чтобы их программы паниковали, должны убедиться, что они не вызывают функцию в этих ситуациях. Ошибки : Если функция возвращает Result, описание видов ошибок, которые могут произойти и какие условия могут привести к тому, что эти ошибки могут быть возвращены, может быть полезным для вызывающих, так что они могут написать код для обработки различных видов ошибок разными способами. Безопасность : Если функция является unsafe для вызова (мы обсуждаем безопасность в главе 19), должен быть раздел, объясняющий, почему функция небезопасна и охватывающий инварианты, которые функция ожидает от вызывающих сторон. В подавляющем большинстве случаев комментарии к документации не нуждаются во всех этих разделах, но это хорошая подсказка, напоминающая вам о тех особенностях вашего кода, о которых пользователям будет важно узнать. Комментарии к документации как тесты Добавление примеров кода в комментарии к документации может помочь отобразить, как использовать вашу библиотеку, и это даёт дополнительный бонус: запуск cargo test запустит примеры кода в вашей документации как тесты! Нет ничего лучше, чем документация с примерами. Но нет ничего хуже, чем примеры, которые не работают, потому что код изменился с момента написания документации. Если мы запустим cargo test с документацией для функции add_one из приложения 14-1, мы увидим раздел результатов теста, подобный этому: Doc-tests my_crate running 1 test\ntest src/lib.rs - add_one (line 5) ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s Теперь, если мы изменим либо функцию, либо пример, так что assert_eq! в примере паникует, и снова запустим cargo test, мы увидим, что тесты документации обнаруживают, что пример и код не синхронизированы друг с другом! Комментирование содержащихся элементов Стиль комментариев к документам //! добавляет документацию к элементу, содержащему комментарии, а не к элементам, следующим за комментариями. Обычно мы используем эти комментарии внутри корневого файла крейта (по соглашению src/lib.rs ) или внутри модуля для документирования крейта или модуля в целом. Например, чтобы добавить документацию, описывающую назначение my_crate , содержащего функцию add_one , мы добавляем комментарии к документации, начинающиеся с //! в начало файла src/lib.rs , как показано в приложении 14-2: Файл: src/lib.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-02/src/lib.rs:here}} Приложение 14-2: Документация для крейта my_crate в целом Обратите внимание, что после последней строки, начинающейся с //!, нет никакого кода. Поскольку мы начали комментарии с //! вместо ///, мы документируем элемент, который содержит этот комментарий, а не элемент, который следует за этим комментарием. В данном случае таким элементом является файл src/lib.rs , который является корнем crate. Эти комментарии описывают весь крейт. Когда мы запускаем cargo doc --open, эти комментарии будут отображаться на первой странице документации для my_crate над списком публичных элементов в библиотеке, как показано на рисунке 14-2: Рисунок 14-2: Предоставленная документация для my_crate, включая комментарий, описывающие крейт в целом Комментарии к документации внутри элементов полезны для описания крейтов и модулей особенно. Используйте их, чтобы объяснить общую цель дополнения, чтобы помочь вашим пользователям понять организацию крейта.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Создание полезных комментариев к документации","id":"252","title":"Создание полезных комментариев к документации"},"253":{"body":"Структура вашего публичного API является основным фактором при публикации крейта. Люди, которые используют вашу библиотеку, менее знакомы со структурой, чем вы и могут столкнуться с трудностями при поиске частей, которые они хотят использовать, если ваша библиотека имеет большую упорядочевание модулей. В главе 7 мы рассмотрели, как сделать элементы общедоступными с помощью ключевого слова pub и ввести элементы в область видимости с помощью ключевого слова use. Однако структура, которая имеет смысл для вас при разработке крейта, может быть не очень удобной для пользователей. Вы можете организовать структуру в виде упорядочевания с несколькими уровнями, но тогда люди, желающие использовать вид, который вы определили в глубине упорядочевания, могут столкнуться с проблемой его поиска. Их также может раздражать необходимость вводить use my_crate::some_module::another_module::UsefulType; вместо use my_crate::UsefulType;. Хорошей новостью является то, что если структура не удобна для использования другими из другой библиотеки, вам не нужно перестраивать внутреннюю организацию: вместо этого вы можете реэкспортировать элементы, чтобы сделать публичную структуру, отличную от вашей внутренней структуры, используя pub use. Реэкспорт берет открытый элемент в одном месте и делает его публичным в другом месте, как если бы он был определён в другом месте. Например, скажем, мы создали библиотеку с именем art для моделирования художественных концепций. Внутри этой библиотеки есть два модуля: модуль kinds содержащий два перечисления с именами PrimaryColor и SecondaryColor и модуль utils, содержащий функцию с именем mix, как показано в приложении 14-3: Файл: src/lib.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-03/src/lib.rs:here}} Приложение 14-3: Библиотека art с элементами, организованными в модули kinds и utils На рисунке 14-3 показано, как будет выглядеть титульная страница документации для этого крейта, сгенерированный cargo doc: Рисунок 14-3: Первая страница документации для art, в которой перечислены модули kinds и utils Обратите внимание, что виды PrimaryColor и SecondaryColor не указаны на главной странице, равно как и функция mix. Мы должны нажать kinds и utils, чтобы увидеть их. В другой библиотеке, которая зависит от этой библиотеки, потребуются операторы use, которые подключают элементы из art в область видимости, определяя структуру модуля, которая определена в данный момент. В приложении 14-4 показан пример крейта, в котором используются элементы PrimaryColor и mix из крейта art: Файл: src/main.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-04/src/main.rs}} Приложение 14-4: Крейт использующий элементы из крейта art с экспортированной внутренней структурой Автору кода в приложении 14-4, который использует крейт art, пришлось выяснить, что PrimaryColor находится в модуле kinds, а mix - в модуле utils. Структура модуля art крейта больше подходит для разработчиков, работающих над art крейтом, чем для тех, кто его использует. Внутренняя структура не содержит никакой полезной сведений для того, кто пытается понять, как использовать крейт art, а скорее вызывает путаницу, поскольку разработчики, использующие его, должны понять, где искать, и должны указывать имена модулей в выражениях use. Чтобы удалить внутреннюю организацию из общедоступного API, мы можем изменить код крейта art в приложении 14-3, чтобы добавить операторы pub use для повторного реэкспорта элементов на верхнем уровне, как показано в приложении 14-5: Файл: src/lib.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-05/src/lib.rs:here}} Приложение 14-5: Добавление операторов pub use для реэкспорта элементов Документация API, которую cargo doc генерирует для этой библиотеки, теперь будет перечислять и связывать реэкспорты на главной странице, как показано на рисунке 14-4, упрощая поиск видов PrimaryColor, SecondaryColor и функции mix. Рисунок 14-4: Первая страница документации для art, которая перечисляет реэкспорт Пользователи крейта art могут по-прежнему видеть и использовать внутреннюю структуру из приложения 14-3, как показано в приложении 14-4, или они могут использовать более удобную структуру в приложении 14-5, как показано в приложении 14-6: Файл: src/main.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-06/src/main.rs:here}} Приложение 14-6: Программа, использующая реэкспортированные элементы из крейта art В случаях, когда имеется много вложенных модулей, реэкспорт видов на верхнем уровне с помощью pub use может существенно повысить удобство работы для людей, использующих крейт. Ещё одно распространённое использование pub use - это реэкспорт определений зависимого модуля в текущем крейте, чтобы сделать определения этого крейта частью публичного API вашего крейта. Создание полезной публичной структуры API - это больше искусство чем наука, и вы можете повторять, чтобы найти API, который лучше всего подойдёт вашим пользователям. Использование pub use даёт вам гибкость в том, как вы структурируете свою библиотеку внутри и отделяете эту внутреннюю структуру от того, что вы предоставляете пользователям. Посмотрите на код некоторых установленных крейтов, чтобы увидеть отличается ли их внутренняя структура от их публичного API.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Экспорт удобного общедоступного API с pub use","id":"253","title":"Экспорт удобного общедоступного API с pub use"},"254":{"body":"Прежде чем вы сможете опубликовать любые библиотеки, вам необходимо создать учётную запись на crates.io и получить API токен. Для этого зайдите на домашнюю страницу crates.io и войдите в систему через учётную запись GitHub. (В настоящее время требуется наличие учётной записи GitHub, но сайт может поддерживать другие способы создания учётной записи в будущем.) Сразу после входа в систему перейдите в настройки своей учётной записи по адресу https://crates.io/me/ и получите свой ключ API. Затем выполните приказ cargo login с вашим ключом API, например: $ cargo login abcdefghijklmnopqrstuvwxyz012345 Этот приказ сообщит Cargo о вашем API token и сохранит его местно в ~/.cargo/credentials . Обратите внимание, что этот токен является секретным : не делитесь им ни с кем другим. Если вы по какой-либо причине поделитесь им с кем-либо, вы должны отозвать его и сгенерировать новый токен на crates.io .","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Настройка учётной записи Crates.io","id":"254","title":"Настройка учётной записи Crates.io"},"255":{"body":"Допустим, у вас есть крейт, который вы хотите опубликовать. Перед публикацией вам нужно добавить некоторые метаданные в раздел [package] файла Cargo.toml крейта. Вашему крейту понадобится уникальное имя. Пока вы работаете над крейтом местно, вы можете назвать его как угодно. Однако названия крейтов на crates.io фиксируются в момент первой публикации. Как только крейту присвоено название, никто другой не сможет опубликовать крейт с таким же именем. Перед тем как опубликовать крейт, поищите название, которое вы хотите использовать. Если такое имя уже используется, вам придётся подобрать другое и отредактировать поле name в файле Cargo.toml в разделе [package], чтобы использовать новое имя в качестве публикуемого, например, так: Файл: Cargo.toml [package]\nname = \"guessing_game\" Даже если вы выбрали уникальное имя, когда вы запустите cargo publish чтобы опубликовать крейт, вы получите предупреждение, а затем ошибку: $ cargo publish Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io Caused by: the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata Это ошибка, потому что вам не хватает важной сведений: необходимы описание и лицензия, чтобы люди знали, что делает ваш крейт и на каких условиях они могут его использовать. В поле Cargo.toml добавьте описание, состоящее из одного-двух предложений, поскольку оно будет появляться вместе с вашим крейтом в результатах поиска. Для поля license нужно указать значение определителя лицензии . В Linux Foundation's Software Package Data Exchange (SPDX) перечислены определители, которые можно использовать для этого значения. Например, чтобы указать, что вы лицензировали свой crate, используя лицензию MIT, добавьте определитель MIT: Файл: Cargo.toml [package]\nname = \"guessing_game\"\nlicense = \"MIT\" Если вы хотите использовать лицензию, которая отсутствует в SPDX, вам нужно поместить текст этой лицензии в файл, включите файл в свой проект, а затем используйте license-file, чтобы указать имя этого файла вместо использования ключа license. Руководство по выбору лицензии для вашего проекта выходит за рамки этой книги. Многие люди в сообществе Rust лицензируют свои проекты так же, как и Rust, используя двойную лицензию MIT OR Apache 2.0. Эта практика отображает, что вы также можете указать несколько определителей лицензий, разделённых OR, чтобы иметь несколько лицензий для вашего проекта. С добавлением уникального имени, исполнения, вашего описания и лицензии, файл Cargo.toml для проекта, который готов к публикации может выглядеть следующим образом: Файл: Cargo.toml [package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\" [dependencies] Документация Cargo описывает другие метаданные, которые вы можете указать, чтобы другие могли легче находить и использовать ваш крейт.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Добавление метаданных в новую библиотеку","id":"255","title":"Добавление метаданных в новую библиотеку"},"256":{"body":"Теперь, когда вы создали учётную запись, сохранили свой токен API, выбрали имя для своего крейта и указали необходимые метаданные, вы готовы к публикации! Публикация библиотеки загружает определённую исполнение в crates.io для использования другими. Будьте осторожны, потому что публикация является перманентной операцией. Исполнение никогда не сможет быть перезаписана, а код не подлежит удалению. Одна из основных целей crates.io - служить постоянным архивом кода, чтобы сборки всех проектов, зависящих от crates из crates.io продолжали работать. Предоставление возможности удаления исполнений сделало бы выполнение этой цели невозможным. При этом количество исполнений крейтов, которые вы можете опубликовать, не ограничено. Запустите приказ cargo publish ещё раз. Сейчас эта приказ должна выполниться успешно: $ cargo publish Updating crates.io index Packaging guessing_game v0.1.0 (file:///projects/guessing_game) Verifying guessing_game v0.1.0 (file:///projects/guessing_game) Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0) Finished dev [unoptimized + debuginfo] target(s) in 0.19s Uploading guessing_game v0.1.0 (file:///projects/guessing_game) Поздравляем! Теперь вы поделились своим кодом с сообществом Rust и любой может легко добавить вашу библиотеку в качестве зависимости их проекта.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Публикация на Crates.io","id":"256","title":"Публикация на Crates.io"},"257":{"body":"Когда вы внесли изменения в свой крейт и готовы выпустить новую исполнение, измените значение version, указанное в вашем файле Cargo.toml и повторите публикацию. Воспользуйтесь Semantic Versioning rules , чтобы решить, какой номер следующей исполнения подходит для ваших изменений. Затем запустите cargo publish, чтобы загрузить новую исполнение.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Публикация новой исполнения существующей библиотеки","id":"257","title":"Публикация новой исполнения существующей библиотеки"},"258":{"body":"Хотя вы не можете удалить предыдущие исполнения крейта, вы можете помешать любым будущим проектам добавлять его в качестве новой зависимости. Это полезно, когда исполнение крейта сломана по той или иной причине. В таких ситуациях Cargo поддерживает выламывание (yanking) исполнения крейта. Вычёркивание исполнения не позволяет новым проектам зависеть от этой исполнения, но при этом позволяет всем существующим проектам, зависящим от неё, продолжать работу. По сути, исключение означает, что все проекты с Cargo.lock не сломаются, а любые файлы Cargo.lock , которые будут генерироваться в будущем, не смогут использовать исключённую исполнение. Чтобы вычеркнуть исполнение крейта, в папки крейта, который вы опубликовали ранее, выполните приказ cargo yank и укажите, какую исполнение вы хотите вычеркнуть. Например, если мы опубликовали крейт под названием guessing_game исполнения 1.0.1 и хотим вычеркнуть её, в каталоге проекта для guessing_game мы выполним: $ cargo yank --vers 1.0.1 Updating crates.io index Yank guessing_game@1.0.1 Добавив в приказ --undo, вы также можете отменить выламывание и разрешить проектам начать зависеть от исполнения снова: $ cargo yank --vers 1.0.1 --undo Updating crates.io index Unyank guessing_game@1.0.1 Вычёркивание не удаляет код. Оно не может, например, удалить случайно загруженные пароли. Если это произойдёт, вы должны немедленно сбросить эти пароли.","breadcrumbs":"Подробнее о Cargo и Crates.io » Публикация крейта на Crates.io » Устранение устаревших исполнений с Crates.io с помощью cargo yank","id":"258","title":"Устранение устаревших исполнений с Crates.io с помощью cargo yank"},"259":{"body":"В главе 12 мы создали пакет, который включал в себя двоичный и библиотечный крейты. По мере развития вашего проекта может возникнуть ситуация, когда библиотечный крейт будет становиться все больше, и вы захотите разделить ваш пакет на несколько библиотечных крейтов. Cargo предоставляет функциональность под названием workspaces , которая помогает управлять несколькими взаимосвязанными пакетами, которые разрабатываются в тандеме.","breadcrumbs":"Подробнее о Cargo и Crates.io » Рабочие области Cargo » Рабочие пространства Cargo","id":"259","title":"Рабочие пространства Cargo"},"26":{"body":"Давайте создадим новый проект с помощью Cargo и посмотрим, как он отличается от нашего начального проекта \"Hello, world!\". Перейдите обратно в папку projects (или любую другую, где вы решили сохранять код). Затем, в любой операционной системе, запустите приказ: $ cargo new hello_cargo\n$ cd hello_cargo Первая приказ создаёт новый каталог и проект с именем hello_cargo . Мы назвали наш проект hello_cargo , и Cargo создаёт свои файлы в каталоге с тем же именем. Перейдём в каталог hello_cargo и посмотрим файлы. Увидим, что Cargo сгенерировал два файла и одну папку: файл Cargo.toml и каталог src с файлом main.rs внутри. Кроме того, cargo инициализировал новый репозиторий Git вместе с файлом .gitignore . Файлы Git не будут сгенерированы, если вы запустите cargo new в существующем репозитории Git; вы можете изменить это поведение, используя cargo new --vcs=git. Примечание. Git — это распространённая система управления исполнений. Вы можете изменить cargo new, чтобы использовать другую систему управления исполнений или не использовать систему управления исполнений, используя флаг --vcs. Запустите cargo new --help, чтобы увидеть доступные свойства. Откройте файл Cargo.toml в любом текстовом редакторе. Он должен выглядеть как код в приложении 1-2. Файл: Cargo.toml [package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] Приложение 1-2: Содержимое файла Cargo.toml, сгенерированное приказом cargo new Это файл в формате TOML ( Tom’s Obvious, Minimal Language ), который является форматом настроек Cargo. Первая строка, [package], является заголовочной секцией, которая указывает что следующие указания настраивают пакет. По мере добавления больше сведений в данный файл, будет добавляться больше секций и указаний (строк). Следующие три строки задают сведения о настройке, необходимую Cargo для сборки вашей программы: имя, исполнение и издание Rust, который будет использоваться. Мы поговорим о ключе edition в Приложении E . Последняя строка, [dependencies] является началом секции для списка любых зависимостей вашего проекта. В Rust, это внешние пакеты кода, на которые ссылаются ключевым словом crate . Нам не нужны никакие зависимости в данном проекте, но мы будем использовать их в первом проекте главы 2, так что нам пригодится данная секция зависимостей потом. Откройте файл src/main.rs и загляните в него: Файл: src/main.rs fn main() { println!(\"Hello, world!\");\n} Cargo сгенерировал для вас программу \"Hello, world!\", подобную той, которую мы написали в Приложении 1-1! Пока что различия между нашим предыдущим проектом и проектом, сгенерированным при помощи Cargo, заключаются в том, что Cargo поместил исходный код в каталог src , и у нас есть настроечный файл Cargo.toml в верхнем каталоге проекта. Cargo ожидает, что ваши исходные файлы находятся внутри каталога src . Каталог верхнего уровня проекта предназначен только для файлов README, сведений о лицензии, файлы настройке и чего то ещё не относящего к вашему коду. Использование Cargo помогает организовывать проект. Есть место для всего и все находится на своём месте. Если вы начали проект без использования Cargo, как мы делали для \"Hello, world!\" проекта, то можно преобразовывать его в проект с использованием Cargo. Переместите код в подкаталог src и создайте соответствующий файл Cargo.toml в папке.","breadcrumbs":"С чего начать » Hello, Cargo! » Создание проекта с помощью Cargo","id":"26","title":"Создание проекта с помощью Cargo"},"260":{"body":"Workspace - это набор пакетов, которые используют один и тот же Cargo.lock и папку для хранения результатов сборки. Давайте создадим проект с использованием workspace - мы будем использовать тривиальный код, чтобы сосредоточиться на структуре рабочего пространства. Существует несколько способов структурировать рабочую область, но мы покажем только один из них. У нас будет рабочая область, содержащая двоичный файл и две библиотеки. Двоичный файл, который обеспечивает основную функциональность, будет зависеть от двух библиотек. Одна библиотека предоставит функцию add_one, а вторая - add_two. Эти три крейта будут частью одного workspace . Начнём с создания каталога для рабочего окружения: $ mkdir add\n$ cd add Далее в каталоге add мы создадим файл Cargo.toml , который будет определять настройку всего рабочего окружения. В этом файле не будет секции [package]. Вместо этого он будет начинаться с секции [workspace], которая позволит нам добавить модули в рабочее пространство, указав путь к пакету с нашим двоичным крейтом; в данном случае этот путь - adder : Файл: Cargo.toml {{#include ../listings/ch14-more-about-cargo/no-listing-01-workspace-with-adder-crate/add/Cargo.toml}} Затем мы создадим исполняемый крейт adder, запустив приказ cargo new в каталоге add : $ cargo new adder Created binary (application) `adder` package На этом этапе мы можем создать рабочее пространство, запустив приказ cargo build. Файлы в каталоге add должны выглядеть следующим образом: ├── Cargo.lock\n├── Cargo.toml\n├── adder\n│ ├── Cargo.toml\n│ └── src\n│ └── main.rs\n└── target Рабочая область содержит на верхнем уровне один каталог target , в который будут помещены собранные артефакты; пакет adder не имеет собственного каталога target . Даже если мы запустим cargo build из каталога adder , собранные артефакты все равно окажутся в add/target , а не в add/adder/target . Cargo так определил папку target в рабочем пространстве, потому что крейты в рабочем пространстве должны зависеть друг от друга. Если бы каждый крейт имел свой собственный каталог target , каждому крейту пришлось бы пересобирать каждый из других крейтов в рабочем пространстве, чтобы поместить артефакты в свой собственный каталог target . Благодаря совместному использованию единого каталога target крейты могут избежать ненужной пересборки.","breadcrumbs":"Подробнее о Cargo и Crates.io » Рабочие области Cargo » Создание рабочего пространства","id":"260","title":"Создание рабочего пространства"},"261":{"body":"Далее давайте создадим ещё одного участника пакета в рабочей области и назовём его add_one. Внесите изменения в Cargo.toml верхнего уровня так, чтобы указать путь add_one в списке members: Файл: Cargo.toml {{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/Cargo.toml}} Затем сгенерируйте новый крейт библиотеки с именем add_one: $ cargo new add_one --lib Created library `add_one` package Ваш каталог add должен теперь иметь следующие каталоги и файлы: ├── Cargo.lock\n├── Cargo.toml\n├── add_one\n│ ├── Cargo.toml\n│ └── src\n│ └── lib.rs\n├── adder\n│ ├── Cargo.toml\n│ └── src\n│ └── main.rs\n└── target В файле add_one/src/lib.rs добавим функцию add_one: Файл: add_one/src/lib.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/add_one/src/lib.rs}} Теперь мы можем сделать так, чтобы пакет adder с нашим исполняемым файлом зависел от пакета add_one, содержащего нашу библиотеку. Сначала нам нужно добавить зависимость пути от add_one в adder/Cargo.toml . Файл: adder/Cargo.toml {{#include ../listings/ch14-more-about-cargo/no-listing-02-workspace-with-two-crates/add/adder/Cargo.toml:6:7}} Cargo не исходит из того, что крейты в рабочем пространстве могут зависеть друг от друга, поэтому нам необходимо явно указать отношения зависимости. Далее, давайте используем функцию add_one (из крейта add_one) в крейте adder. Откройте файл adder/src/main.rs и добавьте строку use в верхней части, чтобы ввести в область видимости новый библиотечный крейт add_one. Затем измените функцию main для вызова функции add_one, как показано в приложении 14-7. Файл: adder/src/main.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/listing-14-07/add/adder/src/main.rs}} Приложение 14-7: Использование функционала библиотечного крейта add-one в крейте adder Давайте соберём рабочее пространство, запустив приказ cargo build в каталоге верхнего уровня add ! $ cargo build Compiling add_one v0.1.0 (file:///projects/add/add_one) Compiling adder v0.1.0 (file:///projects/add/adder) Finished dev [unoptimized + debuginfo] target(s) in 0.68s Чтобы запустить двоичный крейт из каталога add , нам нужно указать какой пакет из рабочей области мы хотим использовать с помощью переменной -p и названия пакета в приказу cargo run: $ cargo run -p adder Finished dev [unoptimized + debuginfo] target(s) in 0.0s Running `target/debug/adder`\nHello, world! 10 plus one is 11! Запуск кода из adder/src/main.rs , который зависит от add_one. Зависимость от внешних крейтов в рабочем пространстве Обратите внимание, что рабочая область имеет один единственный файл Cargo.lock на верхнем уровне, а не содержит Cargo.lock в каталоге каждого крейта. Это заверяет, что все крейты используют одну и ту же исполнение всех зависимостей. Если мы добавим пакет rand в файлы adder/Cargo.toml и add_one/Cargo.toml , Cargo сведёт их оба к одной исполнения rand и запишет её в один Cargo.lock . Если заставить все крейты в рабочей области использовать одни и те же зависимости, то это будет означать, что крейты всегда будут совместимы друг с другом. Давайте добавим крейт rand в раздел [dependencies] в файле add_one/Cargo.toml , чтобы мы могли использовать крейт rand в крейте add_one: Файл: add_one/Cargo.toml {{#include ../listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add/add_one/Cargo.toml:6:7}} Теперь мы можем добавить use rand; в файл add_one/src/lib.rs и сделать сборку рабочего пространства, запустив cargo build в каталоге add , что загрузит и ссобирает rand крейт: $ cargo build Updating crates.io index Downloaded rand v0.8.5 --snip-- Compiling rand v0.8.5 Compiling add_one v0.1.0 (file:///projects/add/add_one)\nwarning: unused import: `rand` --> add_one/src/lib.rs:1:5 |\n1 | use rand; | ^^^^ | = note: `#[warn(unused_imports)]` on by default warning: `add_one` (lib) generated 1 warning Compiling adder v0.1.0 (file:///projects/add/adder) Finished dev [unoptimized + debuginfo] target(s) in 10.18s Файл Cargo.lock верхнего уровня теперь содержит сведения о зависимости add_one к крейту rand. Тем не менее, не смотря на то что rand использован где-то в рабочем пространстве, мы не можем использовать его в других крейтах рабочего пространства, пока не добавим крейт rand в отдельные Cargo.toml файлы. Например, если мы добавим use rand; в файл adder/src/main.rs крейта adder, то получим ошибку: $ cargo build --snip-- Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand` --> adder/src/main.rs:2:5 |\n2 | use rand; | ^^^^ no external crate `rand` Чтобы исправить это, изменените файл Cargo.toml для пакета adder и укажите, что rand также является его зависимостью. При сборке пакета adder rand будет добавлен в список зависимостей для adder в Cargo.lock , но никаких дополнительных копий rand загружено не будет. Cargo позаботился о том, чтобы все крейты во всех пакетах рабочей области, использующих пакет rand, использовали одну и ту же исполнение, экономя нам место и обеспечивая, что все крейты в рабочей области будут совместимы друг с другом. Добавление теста в рабочее пространство В качестве ещё одного улучшения давайте добавим тест функции add_one::add_one в add_one: Файл: add_one/src/lib.rs {{#rustdoc_include ../listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add/add_one/src/lib.rs}} Теперь запустите cargo test в каталоге верхнего уровня add . Запуск cargo test в рабочем пространстве, структурированном подобно этому, запустит тесты для всех крейтов в рабочем пространстве: $ cargo test Compiling add_one v0.1.0 (file:///projects/add/add_one) Compiling adder v0.1.0 (file:///projects/add/adder) Finished test [unoptimized + debuginfo] target(s) in 0.27s Running unittests src/lib.rs (target/debug/deps/add_one-f0253159197f7841) running 1 test\ntest tests::it_works ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Running unittests src/main.rs (target/debug/deps/adder-49979ff40686fa8e) running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Doc-tests add_one running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Первая секция вывода показывает, что тест it_works в крейте add_one прошёл. Следующая секция показывает, что в крейте adder не было обнаружено ни одного теста, а последняя секция показывает, что в крейте add_one не было найдено ни одного теста документации. Мы также можем запустить тесты для одного определенного крейта в рабочем пространстве из каталог верхнего уровня с помощью флага -p и указанием имени крейта для которого мы хотим запустить тесты: $ cargo test -p add_one Finished test [unoptimized + debuginfo] target(s) in 0.00s Running unittests src/lib.rs (target/debug/deps/add_one-b3235fea9a156f74) running 1 test\ntest tests::it_works ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Doc-tests add_one running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Эти выходные данные показывают, что выполнение cargo test запускает только тесты для крейта add-one и не запускает тесты крейта adder. Если вы соберётесь опубликовать крейты из рабочего пространства на crates.io , каждый крейт будет необходимо будет опубликовать отдельно. Подобно cargo test, мы можем опубликовать определенный крейт из нашей рабочей области, используя флаг -p и указав имя крейта, который мы хотим опубликовать. Для дополнительной практики добавьте крейт add_two в данное рабочее пространство подобным способом, как делали с крейт add_one ! По мере роста проекта рассмотрите возможность использования рабочих областей: легче понять небольшие, отдельные компоненты, чем один большой кусок кода. Кроме того, хранение крейтов в рабочем пространстве может облегчить координацию между крейтами, если они часто изменяются параллельно.","breadcrumbs":"Подробнее о Cargo и Crates.io » Рабочие области Cargo » Добавление второго крейта в рабочее пространство","id":"261","title":"Добавление второго крейта в рабочее пространство"},"262":{"body":"Приказ cargo install позволяет местно устанавливать и использовать исполняемые крейты. Она не предназначена для замены системных пакетов; она используется как удобный способ Rust разработчикам устанавливать средства, которыми другие разработчики поделились на сайте crates.io . Заметьте, можно устанавливать только пакеты, имеющие исполняемые целевые крейты. Исполняемой целью (binary target) является запускаемая программа, созданная и имеющая в составе крейта файл src/main.rs или другой файл, указанный как исполняемый, в отличии от библиотечных крейтов, которые не могут запускаться сами по себе, но подходят для включения в другие программы. Обычно крейт содержит сведения в файле README , является ли он библиотекой, исполняемым файлом или обоими вместе. Все исполняемые файлы установленные приказом cargo install сохранены в корневой установочной папке bin . Если вы установили Rust с помощью rustup.rs и у вас его нет в пользовательских настройках, то этим каталогом будет $HOME/.cargo/bin . Он заверяет, что каталог находится в вашем окружении $PATH, чтобы вы имели возможность запускать программы, которые вы установили приказом cargo install. Так, например, в главе 12 мы упоминали, что для поиска файлов существует реализация утилиты grep на Rust под названием ripgrep. Чтобы установить ripgrep, мы можем выполнить следующее: $ cargo install ripgrep Updating crates.io index Downloaded ripgrep v13.0.0 Downloaded 1 crate (243.3 KB) in 0.88s Installing ripgrep v13.0.0\n--snip-- Compiling ripgrep v13.0.0 Finished release [optimized + debuginfo] target(s) in 3m 10s Installing ~/.cargo/bin/rg Installed package `ripgrep v13.0.0` (executable `rg`) Последняя строка вывода показывает местоположение и название установленного исполняемого файла, который в случае ripgrep называется rg. Если вашей установочной папкой является $PATH, как уже упоминалось ранее, вы можете запустить rg --help и начать использовать более быстрый и грубый средство для поиска файлов!","breadcrumbs":"Подробнее о Cargo и Crates.io » Установка двоичных файлов с Crates.io с помощью cargo install » Установка двоичных файлов с помощью cargo install","id":"262","title":"Установка двоичных файлов с помощью cargo install"},"263":{"body":"Cargo спроектирован так, что вы можете расширять его новыми субприказми без необходимости изменения самого Cargo. Если исполняемый файл доступен через переменную окружения $PATH и назван по шаблону cargo-something, то его можно запускать как субприказ Cargo cargo something. Пользовательские приказы подобные этой также перечисляются в списке доступных через cargo --list. Возможность использовать cargo install для установки расширений и затем запускать их так же, как встроенные в Cargo средства, это очень удобное следствие продуманного дизайна Cargo!","breadcrumbs":"Подробнее о Cargo и Crates.io » Расширение возможностей Cargo путём добавления пользовательских приказов » Расширение Cargo пользовательскими приказми","id":"263","title":"Расширение Cargo пользовательскими приказми"},"264":{"body":"Совместное использование кода с Cargo и crates.io является частью того, что делает экосистему Rust полезной для множества различных задач. Стандартная библиотека Rust небольшая и безотказная, но крейты легко распространять, использовать и улучшать независимо от самого языка. Не стесняйтесь делиться кодом, который был вам полезен, через crates.io ; скорее всего, он будет полезен и кому-то ещё!","breadcrumbs":"Подробнее о Cargo и Crates.io » Расширение возможностей Cargo путём добавления пользовательских приказов » Итоги","id":"264","title":"Итоги"},"265":{"body":"Указатель — это общая концепция для переменной, которая содержит адрес участка памяти. Этот адрес «относится к», или «указывает на» некоторые другие данные. Наиболее общая разновидность указателя в Rust — это ссылка, о которой вы узнали из главы 4. Ссылки обозначаются символом & и заимствуют значение, на которое указывают. Они не имеют каких-либо особых возможностей, кроме как ссылаться на данные, и не имеют никаких накладных расходов. Умные указатели , с другой стороны, являются структурами данных, которые не только действуют как указатель, но также имеют дополнительные метаданные и возможности. Концепция умных указателей не уникальна для Rust: умные указатели возникли в C++ и существуют в других языках. В Rust есть разные умные указатели, определённые в встроенной библиотеке, которые обеспечивают функциональность, выходящую за рамки ссылок. Одним из примеров, который мы рассмотрим в этой главе, является вид умного указателя reference counting (подсчёт ссылок). Этот указатель позволяет иметь несколько владельцев с помощью отслеживания количества владельцев и, когда владельцев не остаётся, очищает данные. Rust с его концепцией владения и заимствования имеет дополнительное различие между ссылками и умными указателями: в то время, как ссылки только заимствуют данные, умные указатели часто владеют данными, на которые указывают. Ранее мы уже сталкивались с умными указателями в этой книге, хотя и не называли их так, например String и Vec<T> в главе 8. Оба этих вида считаются умными указателями, потому что они владеют некоторой областью памяти и позволяют ею манипулировать. У них также есть метаданные и дополнительные возможности или заверения. String, например, хранит свой размер в виде метаданных и заверяет, что содержимое строки всегда будет в кодировке UTF-8. Умные указатели обычно реализуются с помощью структур. Характерной чертой, которая отличает умный указатель от обычной структуры, является то, что для умных указателей реализованы типажи Deref и Drop. Типаж Deref позволяет экземпляру умного указателя вести себя как ссылка, так что вы можете написать код, работающий с ним как со ссылкой, так и как с умным указателем. Типаж Drop позволяет написать код, который будет запускаться когда экземпляр умного указателя выйдет из области видимости. В этой главе мы обсудим оба типажа и выясним, почему они важны для умных указателей. Учитывая, что паттерн умного указателя является общим паттерном проектирования, часто используемым в Rust, эта глава не описывает все существующие умные указатели. Множество библиотек имеют свои умные указатели, и вы также можете написать свои. Мы охватим наиболее распространённые умные указатели из встроенной библиотеки: Box<T> для распределения значений в куче (памяти) Rc<T> вид счётчика ссылок, который допускает множественное владение Виды Ref<T> и RefMut<T>, доступ к которым осуществляется через вид RefCell<T>, который обеспечивает правила заимствования во время выполнения вместо времени сборки Дополнительно мы рассмотрим паттерн внутренней изменчивости (interior mutability) , где неизменяемый вид предоставляет API для изменения своего внутреннего значения. Мы также обсудим ссылочные зацикленности (reference cycles) : как они могут приводить к утечке памяти и как это предотвратить. Приступим!","breadcrumbs":"Умные указатели » Умные указатели","id":"265","title":"Умные указатели"},"266":{"body":"Наиболее простой умный указатель - это box , чей вид записывается как Box<T>. Такие переменные позволяют хранить данные в куче, а не в стеке. То, что остаётся в стеке, является указателем на данные в куче. Обратитесь к Главе 4, чтобы рассмотреть разницу между стеком и кучей. У Box нет проблем с производительностью, кроме хранения данных в куче вместо стека. Но он также и не имеет множества дополнительных возможностей. Вы будете использовать его чаще всего в следующих ситуациях: Когда у вас есть вид, размер которого невозможно определить во время сборки, а вы хотите использовать значение этого вида в среде, требующем точного размера. Когда у вас есть большой объем данных и вы хотите передать владение, но при этом быть уверенным, что данные не будут скопированы Когда вы хотите получить значение во владение и вас важно только то, что оно относится к виду, реализующему определённый трейт, а не то, является ли оно значением какого-то определенного вида Мы выясним первую ситуацию в разделе \"Реализация рекурсивных видов с помощью Box\" . Во втором случае, передача владения на большой объем данных может занять много времени, потому что данные копируются через стек. Для повышения производительности в этой ситуации, мы можем хранить большое количество данных в куче с помощью Box. Затем только небольшое количество данных указателя копируется в стеке, в то время как данные, на которые он ссылается, остаются в одном месте кучи. Третий случай известен как типаж объект (trait object) и глава 17 посвящает целый раздел \"Использование типаж объектов, которые допускают значения разных видов\" только этой теме. Итак, то, что вы узнаете здесь, вы примените снова в Главе 17!","breadcrumbs":"Умные указатели » Использование Box<T> для указания на данные в куче » Использование Box<T> для ссылки на данные в куче","id":"266","title":"Использование Box<T> для ссылки на данные в куче"},"267":{"body":"Прежде чем мы обсудим этот вариант использования Box<T>, мы рассмотрим синтаксис и то, как взаимодействовать со значениями, хранящимися в Box<T>. В приложении 15-1 показано, как использовать поле для хранения значения i32 в куче: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-01/src/main.rs}} Приложение 15-1: Сохранение значения i32 в куче с использованием box Мы объявляем переменную b со значением Box, указывающим на число 5, размещённое в куче. Эта программа выведет b = 5; в этом случае мы получаем доступ к данным в box так же, как если бы эти данные находились в стеке. Как и любое другое значение, когда box выйдет из области видимости, как b в конце main, он будет удалён. Деаллокация происходит как для box ( хранящегося в стеке), так и для данных, на которые он указывает (хранящихся в куче). Размещать одиночные значения в куче не слишком целесообразно, поэтому вряд ли вы будете часто использовать box'ы таким образом. В большинстве ситуаций более уместно размещать такие значения, как i32, в стеке, где они и сохраняются по умолчанию. Давайте рассмотрим ситуацию, когда box позволяет нам определить виды, которые мы не могли бы иметь, если бы у нас не было box.","breadcrumbs":"Умные указатели » Использование Box<T> для указания на данные в куче » Использование Box<T> для хранения данных в куче","id":"267","title":"Использование Box<T> для хранения данных в куче"},"268":{"body":"Значение рекурсивного вида может иметь другое значение такого же вида как свой компонент. Рекурсивные виды представляют собой проблему, поскольку во время сборки Rust должен знать, сколько места занимает вид. Однако вложенность значений рекурсивных видов теоретически может продолжаться бесконечно, поэтому Rust не может определить, сколько места потребуется. Поскольку box имеет известный размер, мы можем включить рекурсивные виды, добавив box в определение рекурсивного вида. В качестве примера рекурсивного вида рассмотрим cons list . Это вид данных, часто встречающийся в функциональных языках программирования. Вид cons list, который мы определим, достаточно прост, за исключением наличия рекурсии; поэтому концепции, заложенные в примере, с которым мы будем работать, пригодятся вам в любой более сложной ситуации, связанной с рекурсивными видами. Больше сведений о cons списке cons list - это структура данных из языка программирования Lisp и его диалектов, представляющая собой набор вложенных пар и являющаяся Lisp-исполнением связного списка. Его название происходит от функции cons (сокращение от \"construct function\") в Lisp, которая формирует пару из двух своих переменных. Вызывая cons для пары, которая состоит из некоторого значения и другой пары, мы можем конструировать списки cons, состоящие из рекурсивных пар. Вот, пример cons list в виде псевдокода, содержащий список 1, 2, 3, где каждая пара заключена в круглые скобки: (1, (2, (3, Nil))) Каждый элемент в cons списке содержит два элемента: значение текущего элемента и следующий элемент. Последний элемент в списке содержит только значение называемое Nil без следующего элемента. Cons список создаётся путём рекурсивного вызова функции cons. Каноничное имя для обозначения основного случая рекурсии - Nil. Обратите внимание, что это не то же самое, что понятие “null” или “nil” из главы 6, которая является недействительным или отсутствующим значением. Cons list не является часто используемой структурой данных в Rust. В большинстве случаев, когда вам нужен список элементов при использовании Rust, лучше использовать Vec<T>. Другие, более сложные рекурсивные виды данных полезны в определённых ситуациях, но благодаря тому, что в этой главе мы начнём с cons list, мы сможем выяснить, как box позволяет нам определить рекурсивный вид данных без особого напряжения. Приложение 15-2 содержит объявление перечисления cons списка. Обратите внимание, что этот код не будет собираться, потому что вид List не имеет известного размера, что мы и выясним. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-02/src/main.rs:here}} Приложение 15-2: Первая попытка определить перечисление в качестве структуры данных cons list, состоящей из i32 значений. Примечание: В данном примере мы реализуем cons list, который содержит только значения i32. Мы могли бы реализовать его с помощью generics, о которых мы говорили в главе 10, чтобы определить вид cons list, который мог бы хранить значения любого вида. Использование вида List для хранения списка 1, 2, 3 будет выглядеть как код в приложении 15-3: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-03/src/main.rs:here}} Приложение 15-3: Использование перечисления List для хранения списка 1, 2, 3 Первое значение Cons содержит 1 и другой List. Это значение List является следующим значением Cons, которое содержит 2 и другой List. Это значение List является ещё один значением Cons, которое содержит 3 и значение List, которое наконец является Nil, не рекурсивным вариантом, сигнализирующим об окончании списка. Если мы попытаемся собрать код в приложении 15-3, мы получим ошибку, показанную в приложении 15-4: {{#include ../listings/ch15-smart-pointers/listing-15-03/output.txt}} Приложение 15-4: Ошибка, которую мы получаем при попытке определить рекурсивное перечисление Ошибка говорит о том, что этот вид \"имеет бесконечный размер\". Причина в том, что мы определили List в форме, которая является рекурсивной: она непосредственно хранит другое значение своего собственного вида. В результате Rust не может определить, сколько места ему нужно для хранения значения List. Давайте разберёмся, почему мы получаем эту ошибку. Сначала мы рассмотрим, как Rust решает, сколько места ему нужно для хранения значения нерекурсивного вида. Вычисление размера нерекурсивного вида Вспомните перечисление Message определённое в приложении 6-2, когда обсуждали объявление enum в главе 6: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/listing-06-02/src/main.rs:here}} Чтобы определить, сколько памяти выделять под значение Message, Rust проходит каждый из вариантов, чтобы увидеть, какой вариант требует наибольшее количество памяти. Rust видит, что для Message::Quit не требуется места, Message::Move хватает места для хранения двух значений i32 и т.д. Так как будет использоваться только один вариант, то наибольшее пространство, которое потребуется для значения Message, это пространство, которое потребуется для хранения самого большого из вариантов перечисления. Сравните это с тем, что происходит, когда Rust пытается определить, сколько места необходимо рекурсивному виду, такому как перечисление List в приложении 15-2. Сборщик смотрит на вариант Cons, который содержит значение вида i32 и значение вида List. Следовательно, Cons нужно пространство, равное размеру i32 плюс размер List. Чтобы выяснить, сколько памяти необходимо виду List, сборщик смотрит на варианты, начиная с Cons. Вариант Cons содержит значение вида i32 и значение вида List, и этот процесс продолжается бесконечно, как показано на рисунке 15-1. Рисунок 15-1: Бесконечный List, состоящий из нескончаемого числа вариантов Cons Использование Box<T> для получения рекурсивного вида с известным размером Поскольку Rust не может определить, сколько места нужно выделить для видов с рекурсивным определением, сборщик выдаёт ошибку с этим полезным предложением: help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable |\n2 | Cons(i32, Box<List>), | ++++ + В данном предложении \"перенаправление\" означает, что вместо того, чтобы непосредственно хранить само значение, мы должны изменить структуру данных, так чтобы хранить его косвенно - хранить указатель на это значение. Поскольку Box<T> является указателем, Rust всегда знает, сколько места нужно Box<T>: размер указателя не меняется в зависимости от объёма данных, на которые он указывает. Это означает, что мы можем поместить Box<T> внутрь экземпляра Cons вместо значения List напрямую. Box<T> будет указывать на значение очередного List, который будет находиться в куче, а не внутри экземпляра Cons. Концептуально у нас все ещё есть список, созданный из списков, содержащих другие списки, но эта реализация теперь больше похожа на размещение элементов рядом друг с другом, а не внутри друг друга. Мы можем изменить определение перечисления List в приложении 15-2 и использование List в приложении 15-3 на код из приложения 15-5, который будет собираться: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-05/src/main.rs}} Приложение 15-5: Определение List, которое использует Box<T> для того, чтобы иметь вычисляемый размер Cons требуется объём i32 плюс место для хранения данных указателя box. Nil не хранит никаких значений, поэтому ему нужно меньше места, чем Cons. Теперь мы знаем, что любое значение List займёт размер i32 плюс размер данных указателя box. Используя box, мы разорвали бесконечную рекурсивную цепочку, поэтому сборщик может определить размер, необходимый для хранения значения List. На рисунке 15-2 показано, как теперь выглядит Cons. Рисунок 15-2: List, который не является бесконечно большим, потому что Cons хранит Box. Box-ы обеспечивают только перенаправление и выделение в куче; у них нет никаких других особых возможностей, подобных тем, которые мы увидим у других видов умных указателей. У них также нет накладных расходов на производительность, которые несут эти особые возможности, поэтому они могут быть полезны в таких случаях, как cons list, где перенаправление - единственная функция, которая нам нужна. В главе 17 мы также рассмотрим другие случаи использования box. Вид Box<T> является умным указателем, поскольку он реализует трейт Deref, который позволяет обрабатывать значения Box<T> как ссылки. Когда значение Box<T> выходит из области видимости, данные кучи, на которые указывает box, также очищаются благодаря реализации типажа Drop. Эти два трейта будут ещё более значимыми для функциональности, предоставляемой другими видами умных указателей, которые мы обсудим в оставшейся части этой главы. Давайте рассмотрим эти два типажа более подробно.","breadcrumbs":"Умные указатели » Использование Box<T> для указания на данные в куче » Включение рекурсивных видов с помощью Boxes","id":"268","title":"Включение рекурсивных видов с помощью Boxes"},"269":{"body":"Используя трейт Deref, вы можете изменить поведение оператора разыменования * (не путать с операторами умножения или вездесущего подключения). Реализовав Deref таким образом, что умный указатель может рассматриваться как обычная ссылка, вы можете писать код, оперирующий ссылками, а также использовать этот код с умными указателями. Давайте сначала посмотрим, как работает оператор разыменования с обычными ссылками. Затем мы попытаемся определить пользовательский вид, который ведёт себя как Box<T> и посмотрим, почему оператор разыменования не работает как ссылка для нового объявленного вида. Мы рассмотрим, как реализация типажа Deref делает возможным работу умных указателей подобно ссылкам. Затем посмотрим на разыменованное приведение (deref coercion) в Rust и как оно позволяет работать с любыми ссылками или умными указателями. Примечание: есть одна большая разница между видом MyBox<T>, который мы собираемся создать и существующим Box<T>: наша исполнение не будет хранить свои данные в куче. В примере мы сосредоточимся на типаже Deref, поэтому менее важно то, где данные хранятся, чем поведение подобное указателю.","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Обращение с умными указателями как с обычными ссылками с помощью Deref типажа","id":"269","title":"Обращение с умными указателями как с обычными ссылками с помощью Deref типажа"},"27":{"body":"Посмотрим, в чем разница при сборке и запуске программы \"Hello, world!\" с помощью Cargo. В каталоге hello_cargo соберите проект следующей приказом: $ cargo build Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo) Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs Этот приказ создаёт исполняемый файл в target/debug/hello_cargo (или target\\debug\\hello_cargo.exe в Windows), а не в вашем текущем каталоге. Поскольку стандартная сборка является отладочной, Cargo помещает двоичный файл в каталог с именем debug . Вы можете запустить исполняемый файл с помощью этой приказы: $ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world! Если все хорошо, то Hello, world! печатается в окне вызова. Запуск приказы cargo build в первый раз также приводит к созданию нового файла Cargo.lock в папке верхнего уровня. Данный файл хранит точные исполнения зависимостей вашего проекта. Так как у нас нет зависимостей, то файл пустой. Вы никогда не должны менять этот файл вручную: Cargo сам управляет его содержимым для вас. Только что мы собрали проект приказом cargo build и запустили его из ./target/debug/hello_cargo. Но мы также можем при помощи приказы cargo run сразу и собрать код, и затем запустить полученный исполняемый файл всего лишь одной приказом: $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs Running `target/debug/hello_cargo`\nHello, world! Использование cargo run более удобно, чем необходимость помнить и запускать cargo build, а затем использовать весь путь к двоичному файлу, поэтому большинство разработчиков используют cargo run. Обратите внимание, что на этот раз мы не видели вывода, указывающего на то, что Cargo собирает hello_cargo. Cargo выяснил, что файлы не изменились, поэтому не стал пересобирать, а просто запустил двоичный файл. Если бы вы изменили свой исходный код, Cargo пересобрал бы проект перед его запуском, и вы бы увидели этот вывод: $ cargo run Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo) Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs Running `target/debug/hello_cargo`\nHello, world! Cargo также предоставляет приказ, называемую cargo check. Этот приказ быстро проверяет ваш код, чтобы убедиться, что он собирается, но не создаёт исполняемый файл: $ cargo check Checking hello_cargo v0.1.0 (file:///projects/hello_cargo) Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs Почему вам не нужен исполняемый файл? Часто cargo check выполняется намного быстрее, чем cargo build, поскольку пропускает этап создания исполняемого файла. Если вы постоянно проверяете свою работу во время написания кода, использование cargo check ускорит процесс информирования вас о том, что ваш проект всё ещё собирается! Таким образом, многие Rustacean периодически запускают cargo check, когда пишут свои программы, чтобы убедиться, что она собирается. Затем они запускают cargo build, когда готовы использовать исполняемый файл. Давайте подытожим, что мы уже узнали о Cargo: Мы можем создать проект с помощью cargo new. можно собирать проект, используя приказ cargo build, можно одновременно собирать и запускать проект одной приказом cargo run, можно собрать проект для проверки ошибок с помощью cargo check, не тратя время на кодогенерацию исполняемого файла, cargo сохраняет результаты сборки не в папку с исходным кодом, а в отдельный каталог target/debug . Дополнительным преимуществом использования Cargo является то, что его приказы одинаковы для разных операционных систем. С этой точки зрения, мы больше не будем предоставлять отдельные указания для Linux, macOS или Windows.","breadcrumbs":"С чего начать » Hello, Cargo! » Сборка и запуск Cargo проекта","id":"27","title":"Сборка и запуск Cargo проекта"},"270":{"body":"Обычная ссылка - это разновидность указателя, а указатель можно рассматривать как своеобразную стрелочку направляющую к значению, хранящемуся в другом месте. В приложении 15-6 мы создаём ссылку на значение i32, а затем используем оператор разыменования для перехода от ссылки к значению: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-06/src/main.rs}} Приложение 15-6: Использование оператора разыменования для следования по ссылке к значению i32 Переменной x присвоено значение5 вида i32. Мы установили в качестве значения y ссылку на x. Мы можем утверждать, что значение x равно 5. Однако, если мы хотим сделать утверждение о значении в y, мы должны использовать *y, чтобы перейти по ссылке к значению, на которое она указывает (таким образом, происходит разыменование ), для того чтобы сборщик при сравнении мог использовать фактическое значение. Как только мы разыменуем y, мы получим доступ к целочисленному значению, на которое указывает y, которое и будем сравнивать с 5. Если бы мы попытались написать assert_eq!(5, y);, то получили ошибку сборки: {{#include ../listings/ch15-smart-pointers/output-only-01-comparing-to-reference/output.txt}} Сравнение числа и ссылки на число не допускается, потому что они различных видов. Мы должны использовать оператор разыменования, чтобы перейти по ссылке на значение, на которое она указывает.","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Следуя за указателем на значение","id":"270","title":"Следуя за указателем на значение"},"271":{"body":"Мы можем переписать код в приложении 15-6, чтобы использовать Box<T> вместо ссылки; оператор разыменования, используемый для Box<T> в приложении 15-7, работает так же, как оператор разыменования, используемый для ссылки в приложении 15-6: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-07/src/main.rs}} Приложение 15-7: Использование оператора разыменования с видом Box<i32> Основное различие между приложением 15-7 и приложением 15-6 заключается в том, что здесь мы устанавливаем y как экземпляр Box<T>, указывающий на скопированное значение x, а не как ссылку, указывающую на значение x. В последнем утверждении мы можем использовать оператор разыменования, чтобы проследовать за указателем Box<T> так же, как мы это делали, когда y был ссылкой. Далее мы рассмотрим, что особенного в Box<T>, что позволяет нам использовать оператор разыменования, определяя наш собственный вид.","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Использование Box<T> как ссылку","id":"271","title":"Использование Box<T> как ссылку"},"272":{"body":"Давайте создадим умный указатель, похожий на вид Box<T> предоставляемый встроенной библиотекой, чтобы понять как поведение умных указателей отличается от поведения обычной ссылки. Затем мы рассмотрим вопрос, как добавить возможность использовать оператор разыменования. Вид Box<T> в конечном итоге определяется как структура кортежа с одним элементом, поэтому в приложении 15-8 подобным образом определяется MyBox<T>. Мы также определим функцию new, чтобы она соответствовала функции new, определённой в Box<T>. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-08/src/main.rs:here}} Приложение 15-8: Определение вида MyBox<T> Мы определяем структуру с именем MyBox и объявляем обобщённый свойство T, потому что мы хотим, чтобы наш вид хранил значения любого вида. Вид MyBox является структурой кортежа с одним элементом вида T. Функция MyBox::new принимает один свойство вида T и возвращает экземпляр MyBox, который содержит переданное значение. Давайте попробуем добавить функцию main из приложения 15-7 в приложение 15-8 и изменим её на использование вида MyBox<T>, который мы определили вместо Box<T>. Код в приложении 15-9 не будет собираться, потому что Rust не знает, как разыменовывать MyBox. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-09/src/main.rs:here}} Приложение 15-9. Попытка использовать MyBox<T> таким же образом, как мы использовали ссылки и Box<T> Вот результат ошибки сборки: {{#include ../listings/ch15-smart-pointers/listing-15-09/output.txt}} Наш вид MyBox<T> не может быть разыменован, потому что мы не реализовали эту возможность. Чтобы включить разыменование с помощью оператора *, мы реализуем типаж Deref.","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Определение собственного умного указателя","id":"272","title":"Определение собственного умного указателя"},"273":{"body":"Как обсуждалось в разделе “Реализация трейта для типа” Главы 10, для реализации типажа нужно предоставить реализации требуемых способов типажа. Типаж Deref, предоставляемый встроенной библиотекой требует от нас реализации одного способа с именем deref, который заимствует self и возвращает ссылку на внутренние данные. Приложение 15-10 содержит реализацию Deref добавленную к определению MyBox: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-10/src/main.rs:here}} Приложение 15-10: Реализация Deref для вида MyBox<T> Синтаксис type Target = T; определяет связанный вид для использования у типажа Deref. Связанные виды - это немного другой способ объявления обобщённого свойства, но пока вам не нужно о них беспокоиться; мы рассмотрим их более подробно в главе 19. Мы заполним тело способа deref оператором &self.0 , чтобы deref вернул ссылку на значение, к которому мы хотим получить доступ с помощью оператора *; вспомним из раздела \"Using Tuple Structs without Named Fields to Create Different Types\" главы 5, что .0 получает доступ к первому значению в кортежной структуре. Функция main в приложении 15-9, которая вызывает * для значения MyBox<T>, теперь собирается, и проверки проходят! Без типажа Deref сборщик может только разыменовывать & ссылки. Способ deref даёт сборщику возможность принимать значение любого вида, реализующего Deref и вызывать способ deref чтобы получить ссылку &, которую он знает, как разыменовывать. Когда мы ввели *y в приложении 15-9, Rust фактически выполнил за кулисами такой код: *(y.deref()) Rust заменяет оператор * вызовом способа deref и затем простое разыменование, поэтому нам не нужно думать о том, нужно ли нам вызывать способ deref. Эта функция Rust позволяет писать код, который функционирует одинаково, независимо от того, есть ли у нас обычная ссылка или вид, реализующий типаж Deref. Причина, по которой способ deref возвращает ссылку на значение, и что простое разыменование вне круглых скобок в *(y.deref()) все ещё необходимо, связана с системой владения. Если бы способ deref возвращал значение напрямую, а не ссылку на него, значение переместилось бы из self. Мы не хотим передавать владение внутренним значением внутри MyBox<T> в этом случае и в большинстве случаев, когда мы используем оператор разыменования. Обратите внимание, что оператор * заменён вызовом способа deref, а затем вызовом оператора * только один раз, каждый раз, когда мы используем * в коде. Поскольку замена оператора * не повторяется бесконечно, мы получаем данные вида i32, которые соответствуют 5 в assert_eq! приложения 15-9.","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Трактование вида как ссылки реализуя типаж Deref","id":"273","title":"Трактование вида как ссылки реализуя типаж Deref"},"274":{"body":"Разыменованное приведение преобразует ссылку на вид, который реализует признак Deref, в ссылку на другой вид. Например, deref coercion может преобразовать &String в &str, потому что String реализует признак Deref, который возвращает &str. Deref coercion - это удобный механизм, который Rust использует для переменных функций и способов, и работает только для видов, реализующих признак Deref. Это происходит самостоятельно , когда мы передаём в качестве переменной функции или способа ссылку на значение определённого вида, которое не соответствует виду свойства в определении функции или способа. В результате серии вызовов способа deref вид, который мы передали, преобразуется в вид, необходимый для свойства. Разыменованное приведение было добавлено в Rust, так что программистам, пишущим вызовы функций и способов, не нужно добавлять множество явных ссылок и разыменований с помощью использования & и *. Функциональность разыменованного приведения также позволяет писать больше кода, который может работать как с ссылками, так и с умными указателями. Чтобы увидеть разыменованное приведение в действии, давайте воспользуемся видом MyBox<T> определённым в приложении 15-8, а также реализацию Deref добавленную в приложении 15-10. Приложение 15-11 показывает определение функции, у которой есть свойство вида срез строки: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-11/src/main.rs:here}} Приложение 15-11: Функция hello имеющая свойство name вида &str Можно вызвать функцию hello со срезом строки в качестве переменной, например hello(\"Rust\");. Разыменованное приведение делает возможным вызов hello со ссылкой на значение вида MyBox<String>, как показано в приложении 15-12. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-12/src/main.rs:here}} Приложение 15-12: Вызов hello со ссылкой на значение MyBox<String>, которое работает из-за разыменованного приведения Здесь мы вызываем функцию hello с переменнаяом &m, который является ссылкой на значение MyBox<String>. Поскольку мы реализовали типаж Deref для MyBox<T> в приложении 15-10, то Rust может преобразовать &MyBox<String> в &String вызывая deref. Стандартная библиотека предоставляет реализацию типажа Deref для вида String, которая возвращает срез строки, это описано в документации API типажа Deref. Rust снова вызывает deref, чтобы превратить &String в &str, что соответствует определению функции hello. Если бы Rust не реализовал разыменованное приведение, мы должны были бы написать код в приложении 15-13 вместо кода в приложении 15-12 для вызова способа hello со значением вида &MyBox<String>. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-13/src/main.rs:here}} Приложение 15-13: Код, который нам пришлось бы написать, если бы в Rust не было разыменованного приведения ссылок Код (*m) разыменовывает MyBox<String> в String. Затем & и [..] принимают строковый срез String, равный всей строке, чтобы соответствовать сигнатуре hello. Код без разыменованного приведения сложнее читать, писать и понимать со всеми этими символами. Разыменованное приведение позволяет Rust обрабатывать эти преобразования для нас самостоятельно . Когда типаж Deref определён для задействованных видов, Rust проанализирует виды и будет использовать Deref::deref столько раз, сколько необходимо, чтобы получить ссылку, соответствующую виду свойства. Количество раз, которое нужно вставить Deref::deref определяется во время сборки, поэтому использование разыменованного приведения не имеет накладных расходов во время выполнения!","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Неявные разыменованные приведения с функциями и способами","id":"274","title":"Неявные разыменованные приведения с функциями и способами"},"275":{"body":"Подобно тому, как вы используете типаж Deref для переопределения оператора * у неизменяемых ссылок, вы можете использовать типаж DerefMut для переопределения оператора * у изменяемых ссылок. Rust выполняет разыменованное приведение, когда находит виды и реализации типажей в трёх случаях: Из вида &T в вид &U когда верно T: Deref<Target=U> Из вида &mut T в вид &mut U когда верно T: DerefMut<Target=U> Из вида &mut T в вид &U когда верно T: Deref<Target=U> Первые два случая равноценны друг другу, за исключением того, что второй реализует изменяемость. В первом случае говорится, что если у вас есть &T, а T реализует Deref для некоторого вида U, вы сможете прозрачно получить &U. Во втором случае говорится, что такое же разыменованное приведение происходит и для изменяемых ссылок. Третий случай хитрее: Rust также приводит изменяемую ссылку к неизменяемой. Но обратное не представляется возможным: неизменяемые ссылки никогда не приводятся к изменяемым ссылкам. Из-за правил заимствования, если у вас есть изменяемая ссылка, эта изменяемая ссылка должна быть единственной ссылкой на данные (в противном случае программа не будет собираться). Преобразование одной изменяемой ссылки в неизменяемую ссылку никогда не нарушит правила заимствования. Преобразование неизменяемой ссылки в изменяемую ссылку потребует наличия только одной неизменяемой ссылки на эти данные, и правила заимствования не заверяют этого. Следовательно, Rust не может сделать предположение, что преобразование неизменяемой ссылки в изменяемую ссылку возможно.","breadcrumbs":"Умные указатели » Работа с умными указателями как с обычными ссылками с помощью трейта Deref » Как разыменованное приведение взаимодействует с изменяемостью","id":"275","title":"Как разыменованное приведение взаимодействует с изменяемостью"},"276":{"body":"Вторым важным типажом умного указателя является Drop, который позволяет регулировать, что происходит, когда значение вот-вот выйдет из области видимости. Вы можете реализовать типаж Drop для любого вида, а также использовать этот код для высвобождения ресурсов, таких как файлы или сетевые соединения. Мы рассматриваем Drop в среде умных указателей, потому что функциональность свойства Drop практически всегда используется при реализации умного указателя. Например, при сбросе Box<T> происходит деаллокация пространства на куче, на которое указывает box. В некоторых языках для некоторых видов программист должен вызывать код для освобождения памяти или ресурсов каждый раз, когда он завершает использование экземпляров этих видов. Примерами могут служить дескрипторы файлов, сокеты или блокировки. Если забыть об этом, система окажется перегруженной и может упасть. В Rust вы можете указать, что определённый фрагмент кода должен выполняться всякий раз, когда значение выходит из области видимости, и сборщик самостоятельно будет его вставлять. Как следствие, вам не нужно заботиться о размещении кода очистки везде в программе, где завершается работа экземпляра определённого вида - утечки ресурсов все равно не будет! Вы можете задать определённую логику, которая будет выполняться, когда значение выходит за пределы области видимости, реализовав признак Drop. Типаж Drop требует от вас реализации одного способа drop, который принимает изменяемую ссылку на self. Чтобы увидеть, когда Rust вызывает drop, давайте реализуем drop с помощью указаний println!. В приложении 15-14 показана структура CustomSmartPointer, единственной уникальной функциональностью которой является печать Dropping CustomSmartPointer!, когда экземпляр выходит из области видимости, чтобы показать, когда Rust выполняет функцию drop. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-14/src/main.rs}} Приложение 15-14: Структура CustomSmartPointer, реализующая типаж Drop, куда мы поместим наш код очистки Типаж Drop включён в прелюдию, поэтому нам не нужно вводить его в область видимости. Мы реализуем типаж Drop для CustomSmartPointer и реализуем способ drop, который будет вызывать println!. Тело функции drop - это место, где должна располагаться вся логика, которую вы захотите выполнять, когда экземпляр вашего вида выйдет из области видимости. Мы печатаем здесь текст, чтобы наглядно отобразить, когда Rust вызовет drop. В main мы создаём два экземпляра CustomSmartPointer и затем печатаем CustomSmartPointers created . В конце main наши экземпляры CustomSmartPointer выйдут из области видимости и Rust вызовет код, который мы добавили в способ drop, который и напечатает наше окончательное сообщение. Обратите внимание, что нам не нужно вызывать способ drop явно. Когда мы запустим эту программу, мы увидим следующий вывод: {{#include ../listings/ch15-smart-pointers/listing-15-14/output.txt}} Rust самостоятельно вызывал drop в момент выхода наших экземпляров из области видимости, тем самым выполнив заданный нами код. Переменные удаляются в обратном порядке их создания, поэтому d была удалена до c. Цель этого примера — дать вам наглядное представление о том, как работает способ drop; в типичных случаях вы будете задавать код очистки, который должен выполнить ваш вид, а не печатать сообщение.","breadcrumbs":"Умные указатели » Выполнение кода при очистке с помощью трейта Drop » Запуск кода при очистке с помощью типажа Drop","id":"276","title":"Запуск кода при очистке с помощью типажа Drop"},"277":{"body":"К сожалению, отключение функции самостоятельного удаления с помощью drop является не простым. Отключение drop обычно не требуется; весь смысл типажа Drop в том, чтобы о функции позаботились самостоятельно . Иногда, однако, вы можете захотеть очистить значение рано. Одним из примеров является использование умных указателей, которые управляют блокировками: вы могли бы потребовать принудительный вызов способа drop который снимает блокировку, чтобы другой код в той же области видимости мог получить блокировку. Rust не позволяет вызвать способ типажа Drop вручную; вместо этого вы должны вызвать функцию std::mem::drop предоставляемую встроенной библиотекой, если хотите принудительно удалить значение до конца области видимости. Если попытаться вызвать способ drop типажа Drop вручную, изменяя функцию main приложения 15-14 так, как показано в приложении 15-15, мы получим ошибку сборщика: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-15/src/main.rs:here}} Приложение 15-15: Попытка вызвать способ drop из трейта Drop вручную для досрочной очистки Когда мы попытаемся собрать этот код, мы получим ошибку: {{#include ../listings/ch15-smart-pointers/listing-15-15/output.txt}} Это сообщение об ошибке говорит, что мы не можем явно вызывать drop. В сообщении об ошибке используется термин деструктор (destructor) , который является общим термином программирования для функции, которая очищает экземпляр. Деструктор подобен конструктору , который создаёт экземпляр. Функция drop в Rust является определённым деструктором. Rust не позволяет обращаться к drop напрямую, потому что он все равно самостоятельно вызовет drop в конце main. Это вызвало бы ошибку double free , потому что в этом случае Rust попытался бы дважды очистить одно и то же значение. Невозможно отключить самостоятельную подстановку вызова drop, когда значение выходит из области видимости, и нельзя вызвать способ drop напрямую. Поэтому, если нам нужно принудительно избавиться от значения раньше времени, следует использовать функцию std::mem::drop. Функция std::mem::drop отличается от способа drop трейта Drop. Мы вызываем её, передавая в качестве переменной значение, которое хотим принудительно уничтожить. Функция находится в прелюдии, поэтому мы можем изменить main в приложении 15-15 так, чтобы вызвать функцию drop, как показано в приложении 15-16: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-16/src/main.rs:here}} Приложение 15-16: Вызов std::mem::drop для принудительного удаления значения до того, как оно выйдет из области видимости Выполнение данного кода выведет следующий результат:: {{#include ../listings/ch15-smart-pointers/listing-15-16/output.txt}} Текст Dropping CustomSmartPointer with data some data!, напечатанный между CustomSmartPointer created. и текстом CustomSmartPointer dropped before the end of main., показывает, что код способа drop вызывается для удаления c в этой точке. Вы можете использовать код, указанный в реализации типажа Drop, чтобы сделать очистку удобной и безопасной: например, вы можете использовать её для создания своего собственного менеджера памяти! С помощью типажа Drop и системы владения Rust не нужно целенаправленно заботиться о том, чтобы освобождать ресурсы, потому что Rust делает это самостоятельно . Также не нужно беспокоиться о проблемах, возникающих в результате случайной очистки значений, которые всё ещё используются: система владения, которая заверяет, что ссылки всегда действительны, также заверяет, что drop вызывается только один раз, когда значение больше не используется. После того, как мы познакомились с Box<T> и характеристиками умных указателей, познакомимся с другими умными указателями, определёнными в встроенной библиотеке.","breadcrumbs":"Умные указатели » Выполнение кода при очистке с помощью трейта Drop » Раннее удаление значения с помощью std::mem::drop","id":"277","title":"Раннее удаление значения с помощью std::mem::drop"},"278":{"body":"В большинстве ситуаций владение является однозначным: вы точно знаете, какая переменная владеет данным значением. Однако бывают случаи, когда у одного значения может быть несколько владельцев. Например, в Графовых структурах может быть несколько рёбер, указывающих на один и тот же узел — таким образом, этот узел становится фактически собственностью всех этих рёбер. Узел не подлежит удалению, за исключением тех случаев, когда на него не указывает ни одно ребро и, соответственно, у него нет владельцев. Вы должны включить множественное владение явно, используя вид Rust Rc<T>, который является аббревиатурой для подсчёта ссылок . Вид Rc<T> отслеживает количество ссылок на значение, чтобы определить, используется ли оно ещё. Если ссылок на значение нет, значение может быть очищено и при этом ни одна ссылка не станет недействительной. Представьте себе Rc<T> как телевизор в гостиной. Когда один человек входит, чтобы смотреть телевизор, он включает его. Другие могут войти в комнату и посмотреть телевизор. Когда последний человек покидает комнату, он выключает телевизор, потому что он больше не используется. Если кто-то выключит телевизор во время его просмотра другими, то оставшиеся телезрители устроят шум! Вид Rc<T> используется, когда мы хотим разместить в куче некоторые данные для чтения несколькими частями нашей программы и не можем определить во время сборки, какая из частей завершит использование данных последней. Если бы мы знали, какая часть завершит использование последней то, мы могли бы сделать эту часть владельцем данных и вступили бы в силу обычные правила владения, применяемые во время сборки. Обратите внимание, что Rc<T> используется только в однопоточных сценариях. Когда мы обсудим состязательность в главе 16, мы рассмотрим, как выполнять подсчёт ссылок во многопоточных программах.","breadcrumbs":"Умные указатели » Rc<T>, умный указатель с подсчётом ссылок » Rc<T>, умный указатель с подсчётом ссылок","id":"278","title":"Rc<T>, умный указатель с подсчётом ссылок"},"279":{"body":"Давайте вернёмся к нашему примеру с cons списком в приложении 15-5. Напомним, что мы определили его с помощью вида Box<T>. В этот раз мы создадим два списка, оба из которых будут владеть третьим списком. Концептуально это похоже на рисунок 15-3: Рисунок 15-3: Два списка, b и c, делят владение над третьим списком, a Мы создадим список a, содержащий 5 и затем 10. Затем мы создадим ещё два списка: b начинающийся с 3 и c начинающийся с 4. Оба списка b и c затем продолжать первый список a, содержащий 5 и 10. Другими словами, оба списка будут разделять первый список, содержащий 5 и 10. Попытка реализовать этот сценарий, используя определение List с видом Box<T> не будет работать, как показано в приложении 15-17: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-17/src/main.rs}} Приложение 15-17: Отображение того, что нельзя иметь два списка, использующих Box<T>, которые пытаются совместно владеть третьим списком При сборки этого кода, мы получаем эту ошибку: {{#include ../listings/ch15-smart-pointers/listing-15-17/output.txt}} Варианты Cons владеют данными, которые они содержат, поэтому, когда мы создаём список b, то a перемещается в b, а b становится владельцем a. Затем, мы пытаемся использовать a снова при создании c, но нам не разрешают, потому что a был перемещён. Мы могли бы изменить определение Cons, чтобы вместо этого хранить ссылки, но тогда нам пришлось бы указывать свойства времени жизни. Указывая свойства времени жизни, мы бы указали, что каждый элемент в списке будет жить как минимум столько же, сколько и весь список. Это относится к элементам и спискам в приложении 15.17, но не во всех сценариях. Вместо этого мы изменим наше определение вида List так, чтобы использовать Rc<T> вместо Box<T>, как показано в приложении 15-18. Каждый вариант Cons теперь будет содержать значение и вид Rc<T>, указывающий на List. Когда мы создадим b то, вместо того чтобы стал владельцем a, мы будем клонировать Rc<List> который содержит a, тем самым увеличивая количество ссылок с единицы до двойки и позволяя переменным a и b разделять владение на данные в виде Rc<List>. Мы также клонируем a при создании c, увеличивая количество ссылок с двух до трёх. Каждый раз, когда мы вызываем Rc::clone, счётчик ссылок на данные внутри Rc<List> будет увеличиваться и данные не будут очищены, если на них нет нулевых ссылок. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-18/src/main.rs}} Приложение 15-18: Определение List, использующее Rc<T> Нам нужно добавить указанию use, чтобы подключить вид Rc<T> в область видимости, потому что он не входит в список самостоятельного импорта прелюдии. В main, мы создаём список владеющий 5 и 10, сохраняем его в новом Rc<List> переменной a. Затем при создании b и c, мы называем функцию Rc::clone и передаём ей ссылку на Rc<List> как переменная a. Мы могли бы вызвать a.clone(), а не Rc::clone(&a), но в Rust принято использовать Rc::clone в таком случае. Внутренняя реализация Rc::clone не делает глубокого копирования всех данных, как это происходит в видах большинства реализаций clone. Вызов Rc::clone только увеличивает счётчик ссылок, что не занимает много времени. Глубокое копирование данных может занимать много времени. Используя Rc::clone для подсчёта ссылок, можно визуально различать виды клонирования с глубоким копированием и клонирования, которые увеличивают количество ссылок. При поиске в коде проблем с производительностью нужно рассмотреть только клонирование с глубоким копированием и пренебрегать вызовы Rc::clone .","breadcrumbs":"Умные указатели » Rc<T>, умный указатель с подсчётом ссылок » Использование Rc<T> для совместного использования данных","id":"279","title":"Использование Rc<T> для совместного использования данных"},"28":{"body":"Когда проект, наконец, готов к релизу, можно использовать приказ cargo build --release для его сборки с оптимизацией. Данная приказ создаёт исполняемый файл в папке target/release в отличии от папки target/debug . Оптимизации делают так, что Rust код работает быстрее, но их включение увеличивает время сборки. По этой причине есть два отдельных профиля: один для разработки, когда нужно осуществлять сборку быстро и часто, и другой, для сборки финальной программы, которую будете отдавать пользователям, которая готова к работе и будет выполняться максимально быстро. Если вы замеряете время выполнения вашего кода, убедитесь, что собрали проект с оптимизацией cargo build --release и тестируете исполняемый файл из папки target/release .","breadcrumbs":"С чего начать » Hello, Cargo! » Сборка финальной исполнения (Release)","id":"28","title":"Сборка финальной исполнения (Release)"},"280":{"body":"Давайте изменим рабочий пример в приложении 15-18, чтобы увидеть как изменяется число ссылок при создании и удалении ссылок на Rc<List> внутри переменной a. В приложении 15-19 мы изменим main так, чтобы она имела внутреннюю область видимости вокруг списка c; тогда мы сможем увидеть, как меняется счётчик ссылок при выходе c из внутренней области видимости. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-19/src/main.rs:here}} Приложение 15-19: Печать количества ссылок В каждой части программы, где количество ссылок меняется, мы выводим количество ссылок, которое получаем, вызывая функцию Rc::strong_count. Эта функция названа strong_count, а не count, потому что вид Rc<T> также имеет weak_count; мы увидим, для чего используется weak_count в разделе \"Предотвращение циклических ссылок: Превращение Rc<T> в Weak<T>\". Код выводит в окно вывода: {{#include ../listings/ch15-smart-pointers/listing-15-19/output.txt}} Можно увидеть, что Rc<List> в переменной a имеет начальный счётчик ссылок равный 1; затем каждый раз при вызове clone счётчик увеличивается на 1. Когда c выходит из области видимости, счётчик уменьшается на 1. Нам не нужно вызывать функцию уменьшения счётчика ссылок, как при вызове Rc::clone для увеличения счётчика ссылок: реализация Drop самостоятельно уменьшает счётчик ссылок, когда значение Rc<T> выходит из области видимости. В этом примере мы не наблюдаем того, что когда b, а затем a выходят из области видимости в конце main, счётчик становится равным 0, и Rc<List> полностью очищается. Использование Rc<T> позволяет одному значению иметь несколько владельцев, а счётчик заверяет, что значение остаётся действительным до тех пор, пока любой из владельцев ещё существует. С помощью неизменяемых ссылок, вид Rc<T> позволяет обмениваться данными между несколькими частями вашей программы только для чтения данных. Если вид Rc<T> позволял бы иметь несколько изменяемых ссылок, вы могли бы нарушить одно из правил заимствования, описанных в главе 4: множественные изменяемые заимствования в одном и том же месте могут вызвать гонки данных (data races) и несогласованность данных. Но возможность изменять данные очень полезна! В следующем разделе мы обсудим шаблон внутренней изменчивости и вид RefCell<T>, который можно использовать вместе с Rc<T> для работы с этим ограничением.","breadcrumbs":"Умные указатели » Rc<T>, умный указатель с подсчётом ссылок » Клонирование Rc<T> увеличивает количество ссылок","id":"280","title":"Клонирование Rc<T> увеличивает количество ссылок"},"281":{"body":"Внутренняя изменяемость - это паттерн проектирования Rust, который позволяет вам изменять данные даже при наличии неизменяемых ссылок на эти данные; обычно такое действие запрещено правилами заимствования. Для изменения данных паттерн использует unsafe код внутри структуры данных, чтобы обойти обычные правила Rust, регулирующие изменяемость и заимствование. Небезопасный (unsafe) код даёт понять сборщику, что мы самостоятельно следим за соблюдением этих правил, а не полагаемся на то, что сборщик будет делать это для нас; подробнее о небезопасном коде мы поговорим в главе 19. Мы можем использовать виды, в которых применяется паттерн внутренней изменяемости, только если мы можем обеспечить, что правила заимствования будут соблюдаться во время выполнения, несмотря на то, что сборщик не сможет этого обеспечить. В этом случае небезопасный код оборачивается безопасным API, и внешне вид остаётся неизменяемым. Давайте изучим данную концепцию с помощью вида данных RefCell<T>, который реализует этот шаблон.","breadcrumbs":"Умные указатели » RefCell<T> и внутренняя изменяемость » RefCell<T> и шаблон внутренней изменяемости","id":"281","title":"RefCell<T> и шаблон внутренней изменяемости"},"282":{"body":"В отличие от Rc<T> вид RefCell<T> предоставляет единоличное владение данными, которые он содержит. В чем же отличие вида RefCell<T> от Box<T>? Давайте вспомним правила заимствования из Главы 4: В любой момент времени вы можете иметь либо одну изменяемую ссылку либо сколько угодно неизменяемых ссылок (но не оба вида ссылок одновременно). Ссылки всегда должны быть действительными. С помощью ссылок и вида Box<T> инварианты правил заимствования применяются на этапе сборки. С помощью RefCell<T> они применяются во время работы программы . Если вы нарушите эти правила, работая с ссылками, то будет ошибка сборки. Если вы работаете с RefCell<T> и нарушите эти правила, то программа вызовет панику и завершится. Преимущества проверки правил заимствования во время сборки заключаются в том, что ошибки будут обнаруживаться раньше - ещё в процессе разработки, а производительность во время выполнения не пострадает, поскольку весь анализ завершён заранее. По этим причинам проверка правил заимствования во время сборки является лучшим выбором в большинстве случаев, и именно поэтому она используется в Rust по умолчанию. Преимущество проверки правил заимствования во время выполнения заключается в том, что определённые сценарии, безопасные для памяти, разрешаются там, где они были бы запрещены проверкой во время сборки. Статический анализ, как и сборщик Rust, по своей сути консервативен. Некоторые свойства кода невозможно обнаружить, анализируя код: самый известный пример - проблема остановки, которая выходит за рамки этой книги, но является важной темой для исследования. Поскольку некоторый анализ невозможен, то если сборщик Rust не может быть уверен, что код соответствует правилам владения, он может отклонить корректную программу; таким образом он является консервативным. Если Rust принял некорректную программу, то пользователи не смогут доверять заверениям, которые даёт Rust. Однако, если Rust отклонит корректную программу, то программист будет испытывать неудобства, но ничего катастрофического не произойдёт. Вид RefCell<T> полезен, когда вы уверены, что ваш код соответствует правилам заимствования, но сборщик не может понять и обеспечить этого. Подобно виду Rc<T>, вид RefCell<T> предназначен только для использования в однопоточных сценариях и выдаст ошибку времени сборки, если вы попытаетесь использовать его в многопоточном среде. Мы поговорим о том, как получить функциональность RefCell<T> во многопоточной программе в главе 16. Вот список причин выбора видов Box<T>, Rc<T> или RefCell<T>: Вид Rc<T> разрешает множественное владение одними и теми же данными; виды Box<T> и RefCell<T> разрешают иметь единственных владельцев. Вид Box<T> разрешает неизменяемые или изменяемые владения, проверенные при сборки; вид Rc<T> разрешает только неизменяемые владения, проверенные при сборки; вид RefCell<T> разрешает неизменяемые или изменяемые владения, проверенные во время выполнения. Поскольку RefCell<T> разрешает изменяемые заимствования, проверенные во время выполнения, можно изменять значение внутри RefCell<T> даже если RefCell<T> является неизменным. Изменение значения внутри неизменного значения является шаблоном внутренней изменяемости (interior mutability). Давайте посмотрим на ситуацию, в которой внутренняя изменяемость полезна и рассмотрим, как это возможно.","breadcrumbs":"Умные указатели » RefCell<T> и внутренняя изменяемость » Применение правил заимствования во время выполнения с помощью RefCell<T>","id":"282","title":"Применение правил заимствования во время выполнения с помощью RefCell<T>"},"283":{"body":"Следствием правил заимствования является то, что когда у вас есть неизменяемое значение, вы не можете заимствовать его с изменением. Например, этот код не будет собираться: {{#rustdoc_include ../listings/ch15-smart-pointers/no-listing-01-cant-borrow-immutable-as-mutable/src/main.rs}} Если вы попытаетесь собрать этот код, вы получите следующую ошибку: {{#include ../listings/ch15-smart-pointers/no-listing-01-cant-borrow-immutable-as-mutable/output.txt}} Однако бывают ситуации, в которых было бы полезно, чтобы объект мог изменять себя при помощи своих методов, но казался неизменным для прочего кода. Код вне методов этого объекта не должен иметь возможности изменять его содержимое. Использование RefCell<T> - один из способов получить возможность внутренней изменяемости, но при этом RefCell<T> не позволяет полностью обойти правила заимствования: средство проверки правил заимствования в сборщике позволяет эту внутреннюю изменяемость, однако правила заимствования проверяются во время выполнения. Если вы нарушите правила, то вместо ошибки сборки вы получите panic!. Давайте разберём практический пример, в котором мы можем использовать RefCell<T> для изменения неизменяемого значения и посмотрим, почему это полезно. Вариант использования внутренней изменяемости: мок объекты Иногда во время тестирования программист использует один вид вместо другого для того, чтобы проверить определённое поведение и убедиться, что оно реализовано правильно. Такой вид-заместитель называется тестовым повторителем . Воспринимайте его как «каскадёра» в кинематографе, когда повторитель заменяет актёра для выполнения определённой сложной сцены. Тестовые повторители заменяют другие виды при выполнении тестов. Инсценировочные (mock) объекты — это особый вид тестовых повторителей, которые сохраняют данные происходящих во время теста действий тем самым позволяя вам убедиться впоследствии, что все действия были выполнены правильно. В Rust нет объектов в том же смысле, в каком они есть в других языках и в Rust нет функциональности мок объектов, встроенных в стандартную библиотеку, как в некоторых других языках. Однако вы определённо можете создать структуру, которая будет служить тем же целям, что и мок объект. Вот сценарий, который мы будем тестировать: мы создадим библиотеку, которая отслеживает значение по отношению к заранее определённому максимальному значению и отправляет сообщения в зависимости от того, насколько текущее значение находится близко к такому максимальному значению. Эта библиотека может использоваться, например, для отслеживания квоты количества вызовов API пользователя, которые ему разрешено делать. Наша библиотека будет предоставлять только функции отслеживания того, насколько близко к максимальному значению находится значение и какие сообщения должны быть внутри в этот момент. Ожидается, что приложения, использующие нашу библиотеку, предоставят механизм для отправки сообщений: приложение может поместить сообщение в приложение, отправить электронное письмо, отправить текстовое сообщение или что-то ещё. Библиотеке не нужно знать эту подробность. Все что ему нужно - это что-то, что реализует типаж, который мы предоставим с названием Messenger. Приложение 15-20 показывает код библиотеки: Файл: src/lib.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-20/src/lib.rs}} Приложение 15-20: Библиотека для отслеживания степени приближения того или иного значения к максимально допустимой величине и предупреждения, в случае если значение достигает определённого уровня Одна важная часть этого кода состоит в том, что типаж Messenger имеет один способ send, принимающий переменнойми неизменяемую ссылку на self и текст сообщения. Он является внешней оболочкой, который должен иметь наш мок объект. Другой важной частью является то, что мы хотим проверить поведение метода set_value у вида LimitTracker. Мы можем изменить значение, которое передаём свойствоом value, но set_value ничего не возвращает и нет основания, чтобы мы могли бы проверить утверждения о выполнении метода. Мы хотим иметь возможность сказать, что если мы создаём LimitTracker с чем-то, что реализует типаж Messenger и с определённым значением для max, то когда мы передаём разные числа в переменной value экземпляр self.messenger отправляет соответствующие сообщения. Нам нужен мок объект, который вместо отправки электронного письма или текстового сообщения будет отслеживать сообщения, которые были ему поручены для отправки через send. Мы можем создать новый экземпляр мок объекта, создать LimitTracker с использованием мок объект для него, вызвать способ set_value у экземпляра LimitTracker, а затем проверить, что мок объект имеет ожидаемое сообщение. В приложении 15-21 показана попытка реализовать мок объект, чтобы сделать именно то что хотим, но анализатор заимствований не разрешит такой код: Файл: src/lib.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-21/src/lib.rs:here}} Приложение 15-21: Попытка реализовать MockMessenger, которая не была принята механизмом проверки заимствований Этот тестовый код определяет структуру MockMessenger, в которой есть поле sent_messages со значениями вида Vec из String для отслеживания сообщений, которые поручены структуре для отправки. Мы также определяем ассоциированную функцию new, чтобы было удобно создавать новые экземпляры MockMessenger, которые создаются с пустым списком сообщений. Затем мы реализуем типаж Messenger для вида MockMessenger, чтобы передать MockMessenger в LimitTracker. В сигнатуре метода send мы принимаем сообщение для передачи в качестве свойства и сохраняем его в MockMessenger внутри списка sent_messages. В этом тесте мы проверяем, что происходит, когда LimitTracker сказано установить value в значение, превышающее 75 процентов от значения max. Сначала мы создаём новый MockMessenger, который будет иметь пустой список сообщений. Затем мы создаём новый LimitTracker и передаём ему ссылку на новый MockMessenger и max значение равное 100. Мы вызываем способ set_value у LimitTracker со значением 80, что составляет более 75 процентов от 100. Затем мы с помощью утверждения проверяем, что MockMessenger должен содержать одно сообщение из списка внутренних сообщений. Однако с этим тестом есть одна проблема, показанная ниже: {{#include ../listings/ch15-smart-pointers/listing-15-21/output.txt}} Мы не можем изменять MockMessenger для отслеживания сообщений, потому что способ send принимает неизменяемую ссылку на self. Мы также не можем принять предложение из текста ошибки, чтобы использовать &mut self, потому что тогда сигнатура send не будет соответствовать сигнатуре в определении типажа Messenger (не стесняйтесь попробовать и посмотреть, какое сообщение об ошибке получите вы). Это ситуация, в которой внутренняя изменяемость может помочь! Мы сохраним sent_messages внутри вида RefCell<T>, а затем в методе send сообщение сможет изменить список sent_messages для хранения сообщений, которые мы видели. Приложение 15-22 показывает, как это выглядит: Файл: src/lib.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-22/src/lib.rs:here}} Приложение 15-22: Использование RefCell<T> для изменения внутреннего значения, в то время как внешнее значение считается неизменяемым Поле sent_messages теперь имеет вид RefCell<Vec<String>> вместо Vec<String>. В функции new мы создаём новый экземпляр RefCell<Vec<String>> для пустого вектора. Для реализации метода send первый свойство по-прежнему является неизменяемым для заимствования self, которое соответствует определению типажа. Мы вызываем borrow_mut для RefCell<Vec<String>> в self.sent_messages, чтобы получить изменяемую ссылку на значение внутри RefCell<Vec<String>>, которое является вектором. Затем мы можем вызвать push у изменяемой ссылки на вектор, чтобы отслеживать сообщения, отправленные во время теста. Последнее изменение, которое мы должны сделать, заключается в утверждении для проверки: чтобы увидеть, сколько элементов находится во внутреннем векторе, мы вызываем способ borrow у RefCell<Vec<String>>, чтобы получить неизменяемую ссылку на внутренний вектор сообщений. Теперь, когда вы увидели как использовать RefCell<T>, давайте изучим как он работает! Отслеживание заимствований во время выполнения с помощью RefCell<T> При создании неизменных и изменяемых ссылок мы используем синтаксис & и &mut соответственно. У вида RefCell<T>, мы используем методы borrow и borrow_mut, которые являются частью безопасного API, который принадлежит RefCell<T>. Способ borrow возвращает вид умного указателя Ref<T>, способ borrow_mut возвращает вид умного указателя RefMut<T>. Оба вида реализуют типаж Deref, поэтому мы можем рассматривать их как обычные ссылки. Вид RefCell<T> отслеживает сколько умных указателей Ref<T> и RefMut<T> активны в данное время. Каждый раз, когда мы вызываем borrow, вид RefCell<T> увеличивает количество активных заимствований. Когда значение Ref<T> выходит из области видимости, то количество неизменяемых заимствований уменьшается на единицу. Как и с правилами заимствования во время сборки, RefCell<T> позволяет иметь много неизменяемых заимствований или одно изменяемое заимствование в любой момент времени. Если попытаться нарушить эти правила, то вместо получения ошибки сборщика, как это было бы со ссылками, реализация RefCell<T> будет вызывать панику во время выполнения. В приложении 15-23 показана модификация реализации send из приложения 15-22. Мы намеренно пытаемся создать два изменяемых заимствования активных для одной и той же области видимости, чтобы показать как RefCell<T> не позволяет нам делать так во время выполнения. Файл: src/lib.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-23/src/lib.rs:here}} Приложение 15-23: Создание двух изменяемых ссылок в одной области видимости, чтобы убедиться, что RefCell<T> вызовет панику Мы создаём переменную one_borrow для умного указателя RefMut<T> возвращаемого из метода borrow_mut. Затем мы создаём другое изменяемое заимствование таким же образом в переменной two_borrow. Это создаёт две изменяемые ссылки в одной области видимости, что недопустимо. Когда мы запускаем тесты для нашей библиотеки, код в приложении 15-23 собирается без ошибок, но тест завершится неудачно: {{#include ../listings/ch15-smart-pointers/listing-15-23/output.txt}} Обратите внимание, что код вызвал панику с сообщением already borrowed: BorrowMutError. Вот так вид RefCell<T> обрабатывает нарушения правил заимствования во время выполнения. Решение отлавливать ошибки заимствования во время выполнения, а не во время сборки, как мы сделали здесь, означает, что вы потенциально будете находить ошибки в своём коде на более поздних этапах разработки: возможно, не раньше, чем ваш код будет развернут в рабочем окружении. Кроме того, ваш код будет иметь небольшие потери производительности в процессе работы, поскольку заимствования будут отслеживаться во время выполнения, а не во время сборки. Однако использование RefCell<T> позволяет написать объект-имитатор, который способен изменять себя, чтобы сохранять сведения о тех значениях, которые он получал, пока вы использовали его в среде, где разрешены только неизменяемые значения. Вы можете использовать RefCell<T>, несмотря на его недостатки, чтобы получить больше функциональности, чем дают обычные ссылки.","breadcrumbs":"Умные указатели » RefCell<T> и внутренняя изменяемость » Внутренняя изменяемость: изменяемое заимствование неизменяемого значения","id":"283","title":"Внутренняя изменяемость: изменяемое заимствование неизменяемого значения"},"284":{"body":"Обычный способ использования RefCell<T> заключается в его сочетании с видом Rc<T>. Напомним, что вид Rc<T> позволяет иметь нескольких владельцев некоторых данных, но даёт только неизменяемый доступ к этим данным. Если у вас есть Rc<T>, который внутри содержит вид RefCell<T>, вы можете получить значение, которое может иметь несколько владельцев и которое можно изменять! Например, вспомните пример cons списка приложения 15-18, где мы использовали Rc<T>, чтобы несколько списков могли совместно владеть другим списком. Поскольку Rc<T> содержит только неизменяемые значения, мы не можем изменить ни одно из значений в списке после того, как мы их создали. Давайте добавим вид RefCell<T>, чтобы получить возможность изменять значения в списках. В приложении 15-24 показано использование RefCell<T> в определении Cons так, что мы можем изменить значение хранящееся во всех списках: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-24/src/main.rs}} Приложение 15-24: Использование Rc<RefCell<i32>> для создания List, который мы можем изменять Мы создаём значение, которое является экземпляром Rc<RefCell<i32>> и сохраняем его в переменной с именем value, чтобы получить к ней прямой доступ позже. Затем мы создаём List в переменной a с вариантом Cons, который содержит value. Нам нужно вызвать клонирование value, так как обе переменные a и value владеют внутренним значением 5, а не передают владение из value в переменную a или не выполняют заимствование с помощью a переменной value. Мы оборачиваем список у переменной a в вид Rc<T>, поэтому при создании списков в переменные b и c они оба могут ссылаться на a, что мы и сделали в приложении 15-18. После создания списков a, b и c мы хотим добавить 10 к значению в value. Для этого вызовем borrow_mut у value, который использует функцию самостоятельного разыменования, о которой мы говорили в главе 5 (см. раздел \"Где находится оператор ->?\" ) во внутреннее значение RefCell<T>. Способ borrow_mut возвращает умный указатель RefMut<T>, и мы используя оператор разыменования, изменяем внутреннее значение. Когда мы печатаем a, b и c то видим, что все они имеют изменённое значение равное 15, а не 5: {{#include ../listings/ch15-smart-pointers/listing-15-24/output.txt}} Эта техника довольно изящна! Используя RefCell<T>, мы получаем внешне неизменяемое значение List. Но мы можем использовать методы RefCell<T>, которые предоставляют доступ к его внутренностям, чтобы мы могли изменять наши данные, когда это необходимо. Проверка правил заимствования во время выполнения защищает нас от гонок данных, и иногда стоит немного пожертвовать производительностью ради такой гибкости наших структур данных. Обратите внимание, что RefCell<T> не работает для многопоточного кода! Mutex<T> - это thread-safe исполнение RefCell<T>, а Mutex<T> мы обсудим в главе 16.","breadcrumbs":"Умные указатели » RefCell<T> и внутренняя изменяемость » Наличие нескольких владельцев изменяемых данных путём объединения видов Rc<T> и RefCell<T>","id":"284","title":"Наличие нескольких владельцев изменяемых данных путём объединения видов Rc<T> и RefCell<T>"},"285":{"body":"Заверения безопасности памяти в Rust затрудняют, но не делают невозможным случайное выделение памяти, которое никогда не очищается (известное как утечка памяти ). Полное предотвращение утечек памяти не является одной из заверений Rust, а это означает, что утечки памяти безопасны в Rust. Мы видим, что Rust допускает утечку памяти с помощью Rc<T> и RefCell<T>: можно создавать ссылки, в которых элементы ссылаются друг на друга в цикле. Это создаёт утечки памяти, потому что счётчик ссылок каждого элемента в цикле никогда не достигнет 0, а значения никогда не будут удалены.","breadcrumbs":"Умные указатели » Ссылочные циклы могут привести к утечке памяти » Ссылочные зацикливания могут приводить к утечке памяти","id":"285","title":"Ссылочные зацикливания могут приводить к утечке памяти"},"286":{"body":"Давайте посмотрим, как может произойти ситуация ссылочного зацикливания и как её предотвратить, начиная с определения перечисления List и способа tail в приложении 15-25: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-25/src/main.rs}} Приложение 15-25: Объявление cons list, который содержит RefCell<T>, чтобы мы могли изменять то, на что ссылается экземпляр Cons Мы используем другую вариацию определения List из приложения 15-5. Второй элемент в варианте Cons теперь RefCell<Rc<List>>, что означает, что вместо возможности менять значение i32, как мы делали в приложении 15-24, мы хотим менять значение List, на которое указывает вариант Cons. Мы также добавляем способ tail, чтобы нам было удобно обращаться ко второму элементу, если у нас есть вариант Cons. В приложении 15-26 мы добавляем main функцию, которая использует определения приложения 15-25. Этот код создаёт список в переменной a и список b, который указывает на список a. Затем он изменяет список внутри a так, чтобы он указывал на b, создавая ссылочное зацикливание. В коде есть указания println!, чтобы показать значения счётчиков ссылок в различных точках этого процесса. Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-26/src/main.rs:here}} Приложение 15-26: Создание ссылочного цикла из двух значений List, указывающих друг на друга Мы создаём экземпляр Rc<List> содержащий значение List в переменной a с начальным списком 5, Nil. Затем мы создаём экземпляр Rc<List> содержащий другое значение List в переменной b, которое содержит значение 10 и указывает на список в a. Мы меняем a так, чтобы он указывал на b вместо Nil, создавая зацикленность. Мы делаем это с помощью способа tail, чтобы получить ссылку на RefCell<Rc<List>> из переменной a, которую мы помещаем в переменную link. Затем мы используем способ borrow_mut из вида RefCell<Rc<List>>, чтобы изменить внутреннее значение вида Rc<List>, содержащего начальное значение Nil на значение вида Rc<List> взятое из переменной b. Когда мы запускаем этот код, оставив последний println! закомментированным в данный момент, мы получим вывод: {{#include ../listings/ch15-smart-pointers/listing-15-26/output.txt}} Количество ссылок на экземпляры Rc<List> как в a, так и в b равно 2 после того, как мы заменили список в a на ссылку на b. В конце main Rust уничтожает переменную b, что уменьшает количество ссылок на Rc<List> из b с 2 до 1. Память, которую Rc<List> занимает в куче, не будет освобождена в этот момент, потому что количество ссылок на неё равно 1, а не 0. Затем Rust удаляет a, что уменьшает количество ссылок экземпляра Rc<List> в a с 2 до 1. Память этого экземпляра также не может быть освобождена, поскольку другой экземпляр Rc<List> по-прежнему ссылается на него. Таким образом, память, выделенная для списка не будет освобождена никогда. Чтобы наглядно представить этот цикл ссылок, мы создали диаграмму на рисунке 15-4. Рисунок 15-4: Ссылочный цикл списков a и b, указывающих друг на друга Если вы удалите последний комментарий с println! и запустите программу, Rust будет пытаться печатать зацикленность в a, указывающей на b, указывающей на a и так далее, пока не переполниться стек. По сравнению с существующей программой, последствия создания цикла ссылок в этом примере не так страшны: сразу после создания цикла ссылок программа завершается. Однако если более сложная программа выделит много памяти в цикле и будет удерживать её в течение длительного времени, программа будет потреблять больше памяти, чем ей нужно, и может перенапрячь систему, что приведёт к исчерпанию доступной памяти. Вызвать образование ссылочной зацикленности не просто, но и не невозможно. Если у вас есть значения RefCell<T> которые содержат значения Rc<T> или подобные вложенные сочетания видов с внутренней изменчивостью и подсчётом ссылок, вы должны убедиться, что вы не создаёте зацикленность; Вы не можете полагаться на то, что Rust их обнаружит. Создание ссылочной зацикленности являлось бы логической ошибкой в программе, для которой вы должны использовать самостоятельно е тесты, проверку кода и другие практики разработки программного обеспечения для её минимизации. Другое решение для избежания ссылочной зацикленности - это реорганизация ваших структур данных, чтобы некоторые ссылки выражали владение, а другие - отсутствие владения. В результате можно иметь циклы, построенные на некоторых отношениях владения и некоторые не основанные на отношениях владения, тогда только отношения владения влияют на то, можно ли удалить значение. В приложении 15-25 мы всегда хотим, чтобы варианты Cons владели своим списком, поэтому реорганизация структуры данных невозможна. Давайте рассмотрим пример с использованием графов, состоящих из родительских и дочерних узлов, чтобы увидеть, когда отношения владения не являются подходящим способом предотвращения ссылочной зацикленности.","breadcrumbs":"Умные указатели » Ссылочные циклы могут привести к утечке памяти » Создание ссылочного зацикливания","id":"286","title":"Создание ссылочного зацикливания"},"287":{"body":"До сих пор мы выясняли, что вызов Rc::clone увеличивает strong_count экземпляра Rc<T>, а экземпляр Rc<T> удаляется, только если его strong_count равен 0. Вы также можете создать слабую ссылку на значение внутри экземпляра Rc<T>, вызвав Rc::downgrade и передав ссылку на Rc<T>. Сильные ссылки - это то с помощью чего вы можете поделиться владением экземпляра Rc<T>. Слабые ссылки не отражают связи владения, и их подсчёт не влияет на то, когда экземпляр Rc<T> будет очищен. Они не приведут к ссылочному циклу, потому что любой цикл, включающий несколько слабых ссылок, будет разорван, как только количество сильных ссылок для задействованных значений станет равным 0. Когда вы вызываете Rc::downgrade, вы получаете умный указатель вида Weak<T>. Вместо того чтобы увеличить strong_count в экземпляре Rc<T> на 1, вызов Rc::downgrade увеличивает weak_count на 1. Вид Rc<T> использует weak_count для отслеживания количества существующих ссылок Weak<T>, подобно strong_count. Разница в том, что weak_count не должен быть равен 0, чтобы экземпляр Rc<T> мог быть удалён. Поскольку значение, на которое ссылается Weak<T> могло быть удалено, то необходимо убедиться, что это значение все ещё существует, чтобы сделать что-либо со значением на которое указывает Weak<T>. Делайте это вызывая способ upgrade у экземпляра вида Weak<T>, который вернёт Option<Rc<T>>. Вы получите результат Some, если значение Rc<T> ещё не было удалено и результат None, если значение Rc<T> было удалено. Поскольку upgrade возвращает вид Option<T>, Rust обеспечит обработку обоих случаев Some и None и не будет некорректного указателя. В качестве примера, вместо того чтобы использовать список чей элемент знает только о следующем элементе, мы создадим дерево, чьи элементы знают о своих дочерних элементах и о своих родительских элементах. Создание древовидной структуры данных: Node с дочерними узлами Для начала мы построим дерево с узлами, которые знают о своих дочерних узлах. Мы создадим структуру с именем Node, которая будет содержать собственное значение i32, а также ссылки на его дочерние значения Node: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-27/src/main.rs:here}} Мы хотим, чтобы Node владел своими дочерними узлами и мы хотим поделиться этим владением с переменными так, чтобы мы могли напрямую обращаться к каждому Node в дереве. Для этого мы определяем внутренние элементы вида Vec<T> как значения вида Rc<Node>. Мы также хотим изменять те узлы, которые являются дочерними по отношению к другому узлу, поэтому у нас есть вид RefCell<T> в поле children оборачивающий вид Vec<Rc<Node>>. Далее мы будем использовать наше определение структуры и создадим один экземпляр Node с именем leaf со значением 3 и без дочерних элементов, а другой экземпляр с именем branch со значением 5 и leaf в качестве одного из его дочерних элементов, как показано в приложении 15-27: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-27/src/main.rs:there}} Приложение 15-27: Создание узла leaf без дочерних элементов и узла branch с leaf в качестве одного из дочерних элементов Мы клонируем содержимое Rc<Node> из переменной leaf и сохраняем его в переменной branch, что означает, что Node в leaf теперь имеет двух владельцев: leaf и branch. Мы можем получить доступ из branch к leaf через обращение branch.children, но нет способа добраться из leaf к branch. Причина в том, что leaf не имеет ссылки на branch и не знает, что они связаны. Мы хотим, чтобы leaf знал, что branch является его родителем. Мы сделаем это далее. Добавление ссылки от ребёнка к его родителю Для того, чтобы дочерний узел знал о своём родительском узле нужно добавить поле parent в наше определение структуры Node. Проблема в том, чтобы решить, каким должен быть вид parent. Мы знаем, что он не может содержать Rc<T>, потому что это создаст ссылочную зацикленность с leaf.parent указывающей на branch и branch.children, указывающей на leaf, что приведёт к тому, что их значения strong_count никогда не будут равны 0. Подумаем об этих отношениях по-другому, родительский узел должен владеть своими потомками: если родительский узел удаляется, его дочерние узлы также должны быть удалены. Однако дочерний элемент не должен владеть своим родителем: если мы удаляем дочерний узел то родительский элемент все равно должен существовать. Это случай для использования слабых ссылок! Поэтому вместо Rc<T> мы сделаем так, чтобы поле parent использовало вид Weak<T>, а именно RefCell<Weak<Node>>. Теперь наше определение структуры Node выглядит так: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-28/src/main.rs:here}} Узел сможет ссылаться на свой родительский узел, но не владеет своим родителем. В приложении 15-28 мы обновляем main на использование нового определения так, чтобы у узла leaf был бы способ ссылаться на его родительский узел branch: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-28/src/main.rs:there}} Приложение 15-28: Узел leaf со слабой ссылкой на его родительский узел branch Создание узла leaf выглядит подобно примеру из Приложения 15-27, за исключением поля parent: leaf изначально не имеет родителя, поэтому мы создаём новый, пустой экземпляр ссылки Weak<Node>. На этом этапе, когда мы пытаемся получить ссылку на родительский узел у узла leaf с помощью способа upgrade, мы получаем значение None. Мы видим это в выводе первой указания println!: leaf parent = None Когда мы создаём узел branch у него также будет новая ссылка вида Weak<Node> в поле parent, потому что узел branch не имеет своего родительского узла. У нас все ещё есть leaf как один из потомков узла branch. Когда мы получили экземпляр Node в переменной branch, мы можем изменить переменную leaf чтобы дать ей Weak<Node> ссылку на её родителя. Мы используем способ borrow_mut у вида RefCell<Weak<Node>> поля parent у leaf, а затем используем функцию Rc::downgrade для создания Weak<Node> ссылки на branch из Rc<Node> в branch. Когда мы снова напечатаем родителя leaf то в этот раз мы получим вариант Some содержащий branch, теперь leaf может получить доступ к своему родителю! Когда мы печатаем leaf, мы также избегаем цикла, который в конечном итоге заканчивался переполнением стека, как в приложении 15-26; ссылки вида Weak<Node> печатаются как (Weak): leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } }) Отсутствие бесконечного вывода означает, что этот код не создал ссылочной зацикленности. Мы также можем сказать это, посмотрев на значения, которые мы получаем при вызове Rc::strong_count и Rc::weak_count. Визуализация изменений в strong_count и weak_count Давайте посмотрим, как изменяются значения strong_count и weak_count экземпляров вида Rc<Node> с помощью создания новой внутренней области видимости и перемещая создания экземпляра branch в эту область. Таким образом можно увидеть, что происходит, когда branch создаётся и затем удаляется при выходе из области видимости. Изменения показаны в приложении 15-29: Файл: src/main.rs {{#rustdoc_include ../listings/ch15-smart-pointers/listing-15-29/src/main.rs:here}} Приложение 15-29: Создание branch во внутренней области видимости и подсчёт сильных и слабых ссылок После того, как leaf создан его Rc<Node> имеет значения strong count равное 1 и weak count равное 0. Во внутренней области мы создаём branch и связываем её с leaf, после чего при печати значений счётчиков Rc<Node> в branch они будет иметь strong count 1 и weak count 1 (для leaf.parent указывающего на branch с Weak<Node> ). Когда мы распечатаем счётчики из leaf, мы увидим, что они будут иметь strong count 2, потому что branch теперь имеет клон Rc<Node> переменной leaf хранящийся в branch.children, но все равно будет иметь weak count 0. Когда заканчивается внутренняя область видимости, branch выходит из области видимости и strong count Rc<Node> уменьшается до 0, поэтому его Node удаляется. Weak count 1 из leaf.parent не имеет никакого отношения к тому, был ли Node удалён, поэтому не будет никаких утечек памяти! Если мы попытаемся получить доступ к родителю переменной leaf после окончания области видимости, мы снова получим значение None. В конце программы Rc<Node> внутри leaf имеет strong count 1 и weak count 0 потому что переменная leaf снова является единственной ссылкой на Rc<Node>. Вся логика, которая управляет счётчиками и сбросом их значений, встроена внутри Rc<T> и Weak<T> и их реализаций типажа Drop. Указав, что отношение из дочернего к родительскому элементу должно быть ссылкой вида Weak<T> в определении Node, делает возможным иметь родительские узлы, указывающие на дочерние узлы и наоборот, не создавая ссылочной зацикленности и утечек памяти.","breadcrumbs":"Умные указатели » Ссылочные циклы могут привести к утечке памяти » Предотвращение ссылочной зацикленности: замена умного указателя Rc<T> на Weak<T>","id":"287","title":"Предотвращение ссылочной зацикленности: замена умного указателя Rc<T> на Weak<T>"},"288":{"body":"В этой главе рассказано как использовать умные указатели для обеспечения различных заверений и соглашений по сравнению с обычными ссылками, которые Rust использует по умолчанию. Вид Box<T> имеет известный размер и указывает на данные размещённые в куче. Вид Rc<T> отслеживает количество ссылок на данные в куче, поэтому данные могут иметь несколько владельцев. Вид RefCell<T> с его внутренней изменяемостью предоставляет вид, который можно использовать при необходимости неизменного вида, но необходимости изменить внутреннее значение этого типа; он также обеспечивает соблюдение правил заимствования во время выполнения, а не во время сборки. Мы обсудили также типажи Deref и Drop, которые обеспечивают большую функциональность умных указателей. Мы исследовали ссылочную зацикленность, которая может вызывать утечки памяти и как это предотвратить с помощью вида Weak<T>. Если эта глава вызвала у вас влечение и вы хотите реализовать свои собственные умные указатели, обратитесь к \"The Rustonomicon\" за более полезной сведениями. Далее мы поговорим о параллелизме в Rust. Вы даже узнаете о нескольких новых умных указателях.","breadcrumbs":"Умные указатели » Ссылочные циклы могут привести к утечке памяти » Итоги","id":"288","title":"Итоги"},"289":{"body":"Безопасное и эффективное управление многопоточным программированием — ещё одна из основных целей Rust. Многопоточное программирование , когда разные части программы выполняются независимо, и параллельное программирование , когда разные части программы выполняются одновременно, становятся всё более важными, поскольку всё больше компьютеров используют преимущества нескольких процессоров. Исторически программирование в этих условиях было сложным и подверженным ошибкам: Rust надеется изменить это. Первоначально приказ Rust считала, что обеспечение безопасности памяти и предотвращение проблем многопоточности — это две отдельные проблемы, которые необходимо решать различными способами. Со временем приказ обнаружила, что системы владения и система видов являются мощным набором средств, помогающих управлять безопасностью памяти и проблемами многопоточного параллелизма! Используя владение и проверку видов, многие ошибки многопоточности являются ошибками времени сборки в Rust, а не ошибками времени выполнения. Поэтому вместо того, чтобы тратить много времени на попытки воспроизвести точные обстоятельства, при которых возникает ошибка многопоточности во время выполнения, некорректный код будет отклонён с ошибкой. В результате вы можете исправить свой код во время работы над ним, а не после развёртывания на рабочем сервере. Мы назвали этот особенность Rust бесстрашной многопоточностью . Бесстрашная многопоточность позволяет вам писать код, который не содержит скрытых ошибок и легко реорганизуется без внесения новых. Примечание: для простоты мы будем называть многие проблемы многопоточными , хотя более точный термин здесь — многопоточные и/или параллельные . Если бы эта книга была о многопоточности и/или параллелизме, мы были бы более определены. В этой главе, пожалуйста, всякий раз, когда мы используем термин «многопоточный» , мысленно замените на понятие «многопоточный и/или параллельный» . Многие языки предлагают довольно консервативные решения проблем многопоточности. Например, Erlang обладает элегантной функциональностью для многопоточности при передаче сообщений, но не определяет ясных способов совместного использования состояния между потоками. Поддержка только подмножества возможных решений является разумной стратегией для языков более высокого уровня, поскольку язык более высокого уровня обещает выгоду при отказе от некоторого управления над получением абстракций. Однако ожидается, что языки низкого уровня обеспечат решение с наилучшей производительностью в любой именно ситуации и будут иметь меньше абстракций по сравнению с аппаратным обеспечением. Поэтому Rust предлагает множество средств для моделирования проблем любым способом, который подходит для вашей ситуации и требований. Вот темы, которые мы рассмотрим в этой главе: Как создать потоки для одновременного запуска нескольких фрагментов кода Многопоточность передачи сообщений , где потоки передают сообщения между потоками Многопоточность для совместно используемого состояния , когда несколько потоков имеют доступ к некоторому фрагменту данных Типажи Sync и Send, которые расширяют заверения многопоточности в Rust для пользовательских видов, а также видов, предоставляемых встроенной библиотекой","breadcrumbs":"Безбоязненный параллелизм » Многопоточность без страха","id":"289","title":"Многопоточность без страха"},"29":{"body":"В простых проектах Cargo не даёт больших преимуществ по сравнению с использованием rustc, но он проявит себя, когда ваши программы станут более сложными. Когда программы вырастают до нескольких файлов или нуждаются в зависимостях, гораздо проще позволить Cargo координировать сборку. Не смотря на то, что проект hello_cargo простой, теперь он использует большую часть реального набора средств, который вы будете повседневно использовать в вашей карьере, связанной с Rust. Когда потребуется работать над проектами размещёнными в сети, вы сможете просто использовать следующую последовательность приказовдля получения кода с помощью Git, перехода в каталог проекта, сборку проекта: $ git clone example.org/someproject\n$ cd someproject\n$ cargo build Для получения дополнительной сведений о Cargo ознакомьтесь с его документацией .","breadcrumbs":"С чего начать » Hello, Cargo! » Cargo как Конвенция","id":"29","title":"Cargo как Конвенция"},"290":{"body":"В большинстве современных операционных систем программный код выполняется в виде процесса , причём операционная система способна управлять несколькими процессами сразу. Программа, в свою очередь, может состоять из нескольких независимых частей, выполняемых одновременно. Конструкция, благодаря которой эти независимые части выполняются, называется потоком . Например, веб-сервер может иметь несколько потоков для того, чтобы он мог обрабатывать больше одного запроса за раз. Разбиение вычислений на несколько потоков может повысить производительность программы, поскольку программа выполняет несколько задач одновременно, но такое разбиение также добавляет сложности. Поскольку потоки могут работать одновременно, нет чёткой заверения, определяющей порядок выполнения частей вашего кода в разных потоках. Это может привести к таким проблемам, как: Состояния гонки, когда потоки обращаются к данным, либо ресурсам, несогласованно. Взаимные блокировки, когда два потока ожидают друг друга, не позволяя тем самым продолжить работу каждому из потоков. Ошибки, которые случаются только в определённых ситуациях, которые трудно воспроизвести и, соответственно, трудно надёжно исправить. Rust пытается смягчить негативные последствия использования потоков, но программирование в многопоточном среде все ещё требует тщательного обдумывания структуры кода, которая отличается от структуры кода программ, работающих в одном потоке. Языки программирования реализуют потоки несколькими различными способами, и многие операционные системы предоставляют API, который язык может вызывать для создания новых потоков. Стандартная библиотека Rust использует модель реализации потоков 1:1 , при которой одному потоку операционной системы соответствует ровно один \"языковой\" поток. Существуют крейты, в которых реализованы другие модели многопоточности, отличающиеся от модели 1:1.","breadcrumbs":"Безбоязненный параллелизм » Использование потоков для параллельного выполнения кода » Использование потоков для одновременного выполнения кода","id":"290","title":"Использование потоков для одновременного выполнения кода"},"291":{"body":"Чтобы создать новый поток, мы вызываем функцию thread::spawn и передаём ей замыкание (мы говорили о замыканиях в главе 13), содержащее код, который мы хотим запустить в новом потоке. Пример в приложении 16-1 печатает некоторый текст из основного потока, а также другой текст из нового потока: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-01/src/main.rs}} Приложение 16-1: Создание нового потока для печати определённого текста, в то время как основной поток печатает что-то другое Обратите внимание, что когда основной поток программы на Rust завершается, все порождённые потоки закрываются, независимо от того, завершили они работу или нет. Вывод этой программы может каждый раз немного отличаться, но он будет выглядеть примерно так: hi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread! Вызовы thread::sleep заставляют поток на короткое время останавливать своё выполнение, позволяя выполняться другим потокам. Очерёдность выполнения потоков вероятно будет меняться, но это не обязательно: это зависит от того, как ваша операционная система планирует потоки. В этом цикле основной поток печатает первым, несмотря на то, что указание печати из порождённого потока появляется раньше в коде. И даже несмотря на то, что мы указали порождённый поток печатать до тех пор, пока значение i не достигнет числа 9, оно успело дойти только до 5, когда основной поток завершился. Если вы запустите этот код и увидите вывод только из основного потока или не увидите печати из других потоков, попробуйте увеличить числа в рядах, чтобы дать операционной системе больше возможностей для переключения между потоками.","breadcrumbs":"Безбоязненный параллелизм » Использование потоков для параллельного выполнения кода » Создание нового потока с помощью spawn","id":"291","title":"Создание нового потока с помощью spawn"},"292":{"body":"Код в приложении 16-1 преждевременно останавливает порождённый поток в большинстве случаев, из-за завершения основного потока. Более того, так как порядок выполнения потоков чётко не определён, этот код не даёт заверения, что порождённый поток вообще начнёт исполняться! Мы можем исправить проблему, когда созданный поток не запускается или завершается преждевременно, сохранив возвращаемое значение thread::spawn в какой-либо переменной. Вид возвращаемого значения thread::spawn — JoinHandle . JoinHandle — это владеющее значение, которое, при вызове способа join , будет ждать завершения своего потока. Приложение 16-2 отображает, как использовать JoinHandle потока, созданного в приложении 16-1, и вызывать функцию join , для того, чтобы убедиться, что порождённый поток завершится раньше, чем поток main: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-02/src/main.rs}} Приложение 16-2. Сохранение значения JoinHandle потока thread::spawn , обеспечивающее, что поток выполнит всю необходимую работу, перед тем, как завершится Вызов join у дескриптора блокирует текущий поток, пока поток, представленный дескриптором не завершится. Блокировка потока означает, что потоку запрещено выполнять работу или выходить из него. Поскольку мы поместили вызов join после цикла for основного потока, выполнение приложения 16-2 должно привести к выводу, подобному следующему: hi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread! Два потока продолжают чередоваться, но основной поток находится в ожидании из-за вызова handle.join() и не завершается до тех пор, пока не завершится запущенный поток. Но давайте посмотрим, что произойдёт, если мы вместо этого переместим handle.join() перед циклом for в main, например так: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/no-listing-01-join-too-early/src/main.rs}} Основной поток будет ждать завершения порождённого потока, а затем запустит свой цикл for , поэтому выходные данные больше не будут чередоваться, как показано ниже: hi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread! Небольшие подробности, такие как место вызова join, могут повлиять на то, выполняются ли ваши потоки одновременно.","breadcrumbs":"Безбоязненный параллелизм » Использование потоков для параллельного выполнения кода » Ожидание завершения работы всех потоков используя join","id":"292","title":"Ожидание завершения работы всех потоков используя join"},"293":{"body":"Мы часто используем ключевое слово move с замыканиями, переданными в thread::spawn, потому что в этом случае замыкание получает из окружения права владения на используемые им значения, таким образом передавая права владения этими значениями от одного потока к другому. В разделе \"Захват ссылок или перемещение прав владения\" главы 13 мы обсудили move в среде замыканий. Теперь мы сосредоточимся на взаимодействии между move и thread::spawn. Обратите внимание, что в приложении 16-1 замыкание, которое мы передаём в thread::spawn не принимает переменных: мы не используем никаких данных из основного потока в коде порождённого потока. Чтобы использовать данные из основного потока в порождённом потоке, замыкание порождённого потока должно захватывать значения, которые ему необходимы. Приложение 16-3 показывает попытку создать вектор в главном потоке и использовать его в порождённом потоке. Тем не менее, это не будет работать, как вы увидите через мгновение. Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-03/src/main.rs}} Приложение 16-3: Попытка использовать вектор, созданный основным потоком, в другом потоке Замыкание использует переменную v, поэтому оно захватит v и сделает его частью окружения замыкания. Поскольку thread::spawn запускает это замыкание в новом потоке, мы должны иметь доступ к v внутри этого нового потока. Но при сборки этого примера, мы получаем следующую ошибку: {{#include ../listings/ch16-fearless-concurrency/listing-16-03/output.txt}} Rust выводит как захватить v и так как в println! нужна только ссылка на v, то замыкание пытается заимствовать v. Однако есть проблема: Rust не может определить, как долго будет работать порождённый поток, поэтому он не знает, будет ли всегда действительной ссылка на v. В приложении 16-4 приведён сценарий, который с большей вероятностью будет иметь ссылку на v, что будет недопустимо: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-04/src/main.rs}} Приложение 16-4. Поток с замыканием, который пытается захватить ссылку на v из основного потока, удаляющего v Если бы Rust позволил нам запустить этот код, есть вероятность, что порождённый поток был бы немедленно переведён в фоновый режим, не выполнив ничего. Порождённый поток имеет ссылку на v, но основной поток немедленно удаляет v , используя функцию drop , которую мы обсуждали в главе 15. Затем, когда порождённый поток начинает выполняться, v уже не существует, поэтому ссылка на него также будет недействительной. О, нет! Чтобы исправить ошибку сборщика в приложении 16-3, мы можем использовать совет из сообщения об ошибке: help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword |\n6 | let handle = thread::spawn(move || { | ++++ Добавляя ключевое слово move перед замыканием, мы заставляем замыкание забирать используемые значения во владение, вместо того, чтобы позволить Rust вывести необходимость заимствования значения. Модификация Приложения 16-3, показанная в Приложении 16-5, будет собрана и запущена так, как мы ожидаем: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-05/src/main.rs}} Приложение 16-5. Использование ключевого слова move , чтобы замыкание стало владельцем используемых им значений. У нас может возникнуть соблазн попробовать то же самое, чтобы исправить код в приложении 16.4, где основной поток вызывал drop с помощью замыкания move . Однако это исправление не сработает, потому что то, что пытается сделать приложение 16.4, запрещено по другой причине. Если мы добавим move к замыканию, мы переместим v в окружение замыкания и больше не сможем вызывать для него drop в основном потоке. Вместо этого мы получим эту ошибку сборщика: {{#include ../listings/ch16-fearless-concurrency/output-only-01-move-drop/output.txt}} Правила владения Rust снова нас спасли! Мы получили ошибку кода из приложения 16-3, потому что Rust был консервативен и заимствовал v только для потока, что означало, что основной поток теоретически может сделать недействительной ссылку на порождённый поток. Сообщив Rust о передаче владения v в порождаемый поток, мы заверяем Rust, что основной поток больше не будет использовать v. Если мы изменим Приложение 16-4 таким же образом, то мы нарушаем правила владения при попытке использовать v в главном потоке. Ключевое слово move отменяет основное консервативное поведение Rust по заимствованию, что не позволяет нам нарушать правила владения. Имея достаточное понимание потоков и API потоков, давайте посмотрим, что мы можем делать с помощью потоков.","breadcrumbs":"Безбоязненный параллелизм » Использование потоков для параллельного выполнения кода » Использование move-замыканий в потоках","id":"293","title":"Использование move-замыканий в потоках"},"294":{"body":"Всё большую популярность для обеспечения безопасной многопоточности набирает способ, называемый передача сообщений . В этом случае потоки или акторы взаимодействуют друг с другом путём отправки сообщений с данными. Мысль этого подхода выражена в слогане из документации языка Go таким образом: «Не стоит передавать сведения с помощью разделяемой памяти; лучше делитесь памятью, передавая сведения». Для обеспечения отправки многопоточных сообщений в встроенной библиотеке языка Rust реализованы потоки . Поток в программировании - это общепринятый механизм, с помощью которого данные из одного потока отправляются другому потоку. Вы можете представить поток в программировании как направленное движение воды, например как ручей или реку. Если вы поместите какую-нибудь вещь на воду, например резиновую уточку, она будет плыть вниз по течению до тех пор, пока это течение не кончится. Поток состоит из двух половин: передатчика и приёмника. Передатчик — это место вверх по течению, где вы опускаете резиновых уточек в реку, а приёмник — это место, где резиновые уточки оказываются в конце пути. Одна часть вашего кода вызывает способы передатчика с данными, которые вы хотите отправить, а другая часть проверяет принимающую сторону на наличие поступающих сообщений. Поток считается закрытым , если либо передающая, либо принимающая его половина уничтожена. Давайте создадим программу, в которой один поток будет генерировать значения и отправлять их в поток, а другой поток будет получать значения и распечатывать их. Мы будем отправлять между потоками простые значения, используя поток, чтобы изобразить эту функцию. После того, как вы ознакомитесь с этим способом, вы сможете использовать потоки с любыми потоками, которым необходимо взаимодействовать друг с другом. Это может быть например система чата или система, в которой несколько вычислительных потоков выполняют свою часть расчёта, а затем отправляют эту часть в отдельный поток, который уже агрегирует полученные результаты. Сначала в приложении 16-6 мы создадим поток, но не будем ничего с ним делать. Обратите внимание, что этот код ещё не собирается, потому что Rust не может сказать, какой вид значений мы хотим отправить через поток. Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-06/src/main.rs}} Приложение 16-6: Создание потока и присваивание двух значений переменным tx и rx Мы создаём новый поток, используя функцию mpsc::channel; mpsc означает несколько производителей, один потребитель (multiple producer, single consumer). Коротко, способ которым стандартная библиотека Rust реализует потоки, означает, что поток может иметь несколько отправляющих источников генерирующих значения, но только одну принимающую сторону, которая потребляет эти значения. Представьте, что несколько ручьёв втекают в одну большую реку: всё, что плывёт вниз по любому из ручьёв, в конце концов окажется в одной реке. Сейчас мы пока начнём с одного производителя, а когда пример заработает, добавим ещё несколько. Функция mpsc::channel возвращает кортеж, первый элемент которого является отправляющей стороной (передатчиком), а вторым элементом является принимающая сторона (получатель). Аббревиатуры tx и rx традиционно используются во многих полях для передатчика и приёмника соответственно, поэтому мы называем соответствующие переменные именно так. Мы используем указанию let с шаблоном, который деструктурирует кортежи; мы обсудим использование шаблонов в указаниях let и деструктуризацию в главе 18. А пока знайте, что описанное использование указания let является удобным способом извлечения частей кортежа, возвращаемых mpsc::channel . Давайте переместим передающую часть в порождённый поток так, чтобы он отправлял одну строку и чтобы таким образом, порождённый поток связывался с основным потоком, как показано в приложении 16-7. Это похоже на то, как если бы вы поместили резиновую утку в реку вверх по течению или отправили сообщение чата из одного потока в другой. Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-07/src/main.rs}} Приложение 16-7: Перемещение tx в созданный поток и отправка сообщения «привет» Опять же, мы используем thread::spawn для создания нового потока, а затем используем move для перемещения tx в замыкание, чтобы порождённый поток владел tx . Порождённый поток должен владеть передатчиком, чтобы иметь возможность отправлять сообщения через поток. Передатчик имеет способ send , который принимает значение, которое мы хотим отправить. Способ send возвращает вид Result<T, E> , поэтому, если получатель уже удалён и отправить значение некуда, действие отправки вернёт ошибку. В этом примере мы вызываем unwrap для паники в случае ошибки. В реальном приложении мы обработали бы эту ситуацию более корректно: вернитесь к главе 9, если хотите ещё раз разобрать стратегии правильной обработки ошибок. В приложении 16-8 мы получим значение от приёмника в основном потоке. Это похоже на извлечение резиновой уточки из воды в конце реки или получение сообщения в чате. Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-08/src/main.rs}} Приложение 16-8: В основном потоке получаем сообщение \"hi\" и печатаем его Получатель имеет два важных способа: recv и try_recv. Мы используем recv, что является сокращением от receive , который блокирует выполнение основного потока и ждёт, пока данные не будут переданы по потоку. Как только значение будет получено, recv вернёт его в виде Result<T, E>. Когда поток закроется, recv вернёт ошибку, чтобы дать понять, что больше никаких сообщений не поступит. В свою очередь, способ try_recv не блокирует, а сразу возвращает результат Result<T, E>: значение Ok, содержащее сообщение, если оно доступно или значение Err, если никаких сообщений не поступило. Использование try_recv полезно, если у этого потока есть и другая работа в то время, пока происходит ожидание сообщений: так, мы можем написать цикл, который вызывает try_recv время от времени, обрабатывает сообщение, если оно доступно, а в промежутке выполняет другую работу до того момента, как вновь будет произведена проверка. Мы использовали recv в этом примере для простоты; у нас нет никакой другой работы для основного потока, кроме как ждать сообщений, поэтому блокировка основного потока уместна. При запуске кода приложения 16-8, мы увидим значение, напечатанное из основного потока: Got: hi Отлично!","breadcrumbs":"Безбоязненный параллелизм » Пересылка сообщений для передачи данных между потоками » Передача данных с помощью сообщений между потоками","id":"294","title":"Передача данных с помощью сообщений между потоками"},"295":{"body":"Правила владения играют жизненно важную роль в отправке сообщений, потому что они помогают писать безопасный многопоточный код. Предотвращение ошибок в многопоточном программировании является преимуществом для размышлений о владении во всех ваших Rust программах. Давайте проведём эксперимент, чтобы показать как потоки и владение действуют совместно для предотвращения проблем: мы попытаемся использовать значение val в порождённом потоке после того как отправим его в поток. Попробуйте собрать код в приложении 16-9, чтобы понять, почему этот код не разрешён: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-09/src/main.rs}} Приложение 16-9: Попытка использовать val после того, как мы отправили его по потоку Здесь мы пытаемся напечатать значение val после того, как отправили его в поток вызвав tx.send. Разрешить это было бы плохой идеей: после того, как значение было отправлено в другой поток, текущий поток мог бы изменить или удалить значение, прежде чем мы попытались бы использовать значение снова. Потенциально изменения в другом потоке могут привести к ошибкам или не ожидаемым результатам из-за противоречивых или несуществующих данных. Однако Rust выдаёт нам ошибку, если мы пытаемся собрать код в приложении 16-9: {{#include ../listings/ch16-fearless-concurrency/listing-16-09/output.txt}} Наша ошибка для многопоточности привела к ошибке сборки. Функция send вступает во владение своим свойствоом и когда значение перемещается, получатель становится владельцем этого свойства. Это останавливает нас от случайного использования значения снова после его отправки; анализатор заимствования проверяет, что все в порядке.","breadcrumbs":"Безбоязненный параллелизм » Пересылка сообщений для передачи данных между потоками » потоки и передача владения","id":"295","title":"потоки и передача владения"},"296":{"body":"Код в приложении 16-8 собирается и выполняется, но в нем неясно показано то, что два отдельных потока общаются друг с другом через поток. В приложении 16-10 мы внесли некоторые изменения, которые докажут, что код в приложении 16-8 работает одновременно: порождённый поток теперь будет отправлять несколько сообщений и делать паузу на секунду между каждым сообщением. Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-10/src/main.rs}} Приложение 16-10: Отправка нескольких сообщений и пауза между ними На этот раз порождённый поток имеет вектор строк, которые мы хотим отправить основному потоку. Мы перебираем их, отправляя каждую строку по отдельности и делаем паузу между ними, вызывая функцию thread::sleep со значением Duration равным 1 секунде. В основном потоке мы больше не вызываем функцию recv явно: вместо этого мы используем rx как повторитель. Для каждого полученного значения мы печатаем его. Когда поток будет закрыт, повторение закончится. При выполнении кода в приложении 16-10 вы должны увидеть следующий вывод с паузой в 1 секунду между каждой строкой: Got: hi\nGot: from\nGot: the\nGot: thread Поскольку у нас нет кода, который приостанавливает или задерживает цикл for в основном потоке, мы можем сказать, что основной поток ожидает получения значений из порождённого потока.","breadcrumbs":"Безбоязненный параллелизм » Пересылка сообщений для передачи данных между потоками » Отправка нескольких значений и ожидание получателем","id":"296","title":"Отправка нескольких значений и ожидание получателем"},"297":{"body":"Ранее мы упоминали, что mpsc — это аббревиатура от множество поставщиков, один потребитель . Давайте используем mpsc в полной мере и расширим код в приложении 16.10, создав несколько потоков, которые отправляют значения одному и тому же получателю. Мы можем сделать это, клонировав передатчик, как показано в приложении 16.11: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-11/src/main.rs:here}} Приложение 16-11: Отправка нескольких сообщений от нескольких производителей На этот раз, прежде чем мы создадим первый порождённый поток, мы вызовем функцию clone на передатчике. В результате мы получим новый передатчик, который мы сможем передать первому порождённому потоку. Исходный передатчик мы передадим второму порождённому потоку. Это даст нам два потока, каждый из которых отправляет разные сообщения одному получателю. Когда вы запустите код, вывод должен выглядеть примерно так: Got: hi\nGot: more\nGot: from\nGot: messages\nGot: for\nGot: the\nGot: thread\nGot: you Вы можете увидеть значения в другом порядке, в зависимости от вашей системы. Именно такое поведение делает параллелизм как важным, так и сложным. Если вы поэкспериментируете с thread::sleep , задавая различные значения переменной в разных потоках, каждый запуск будет более недетерминированным и каждый раз будут выводиться разные данные. Теперь, когда мы посмотрели, как работают потоки, давайте рассмотрим другой способ многопоточности.","breadcrumbs":"Безбоязненный параллелизм » Пересылка сообщений для передачи данных между потоками » Создание нескольких отправителей путём клонирования передатчика","id":"297","title":"Создание нескольких отправителей путём клонирования передатчика"},"298":{"body":"Передача сообщений — прекрасный способ обработки параллелизма, но не единственный. Другим способом может быть доступ нескольких потоков к одним и тем же общим данным. Рассмотрим ещё раз часть слогана из документации по языку Go: «Не стоит передавать сведения с помощью разделяемой памяти». Как бы выглядело общение, используя разделяемую память? Кроме того, почему энтузиасты передачи сообщений предостерегают от его использования? В каком-то смысле потоки в любом языке программирования похожи на единоличное владение, потому что после передачи значения по потоку вам больше не следует использовать отправленное значение. Многопоточная, совместно используемая память подобна множественному владению: несколько потоков могут одновременно обращаться к одной и той же области памяти. Как вы видели в главе 15, где умные указатели сделали возможным множественное владение, множественное владение может добавить сложность, потому что нужно управлять этими разными владельцами. Система видов Rust и правила владения очень помогают в их правильном управлении. Для примера давайте рассмотрим мьютексы, один из наиболее распространённых многопоточных примитивов для разделяемой памяти.","breadcrumbs":"Безбоязненный параллелизм » Параллелизм с общим состоянием » Многопоточное разделяемое состояние","id":"298","title":"Многопоточное разделяемое состояние"},"299":{"body":"Mutex - это сокращение от взаимное исключение (mutual exclusion), так как мьютекс позволяет только одному потоку получать доступ к некоторым данным в любой момент времени. Для того, чтобы получить доступ к данным в мьютексе, поток должен сначала подать сигнал, что он хочет получить доступ запрашивая блокировку (lock) мьютекса. Блокировка - это структура данных, являющаяся частью мьютекса, которая отслеживает кто в настоящее время имеет эксклюзивный доступ к данным. Поэтому мьютекс описывается как объект защищающий данные, которые он хранит через систему блокировки. Мьютексы имеют репутацию трудных в использовании, потому что вы должны помнить два правила: Перед тем как попытаться получить доступ к данным необходимо получить блокировку. Когда вы закончили работу с данными, которые защищает мьютекс, вы должны разблокировать данные, чтобы другие потоки могли получить блокировку. Для понимания мьютекса, представьте пример из жизни как групповое обсуждение на конференции с одним микрофоном. Прежде чем участник дискуссии сможет говорить, он должен спросить или дать сигнал, что он хочет использовать микрофон. Когда он получает микрофон, то может говорить столько, сколько хочет, а затем передаёт микрофон следующему участнику, который попросит дать ему выступить. Если участник дискуссии забудет освободить микрофон, когда закончит с ним, то никто больше не сможет говорить. Если управление общим микрофоном идёт не правильно, то конференция не будет работать как было запланировано! Правильное управление мьютексами может быть невероятно сложным и именно поэтому многие люди с энтузиазмом относятся к потокам. Однако, благодаря системе видов и правилам владения в Rust, вы не можете использовать блокировку и разблокировку неправильным образом. Mutex<T> API Давайте рассмотрим пример использования мьютекса в приложении 16-12 без использования нескольких потоков: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-12/src/main.rs}} Приложение 16-12: Изучение API Mutex<T> для простоты в однопоточном среде Как и во многих других видах, мы создаём Mutex<T> с помощью сопутствующей функции new. Чтобы получить доступ к данным внутри мьютекса, мы используем способ lock для получения блокировки. Этот вызов блокирует выполнение текущего потока, так что он не сможет выполнять никакие действия, до тех пор пока не наступит наша очередь получить блокировку. Вызов lock потерпит неудачу, если другой поток, удерживающий блокировку, запаникует. В таком случае никто не сможет получить блокировку, поэтому мы предпочли использовать unwrap и заставить этот поток паниковать, если мы окажемся в такой ситуации. После получения блокировки мы можем воспринимать возвращённое значение, названное в данном случае num, как изменяемую ссылку на содержащиеся внутри данные. Система видов заверяет, что мы получим блокировку перед использованием значения в m. Вид m - Mutex<i32>, а не i32, поэтому мы должны вызвать lock, чтобы иметь возможность использовать значение i32. Мы не должны об этом забывать, тем более что в иных случаях система видов и не даст нам доступ к внутреннему значению i32. Как вы наверное подозреваете, Mutex<T> является умным указателем. Точнее, вызов lock возвращает умный указатель, называемый MutexGuard, обёрнутый в LockResult, который мы обработали с помощью вызова unwrap. Умный указатель вида MutexGuard реализует типаж Deref для указания на внутренние данные; умный указатель также имеет реализацию типажа Drop, самостоятельно снимающего блокировку, когда MutexGuard выходит из области видимости, что происходит в конце внутренней области видимости. В результате у нас нет риска забыть снять блокировку и оставить мьютекс в заблокированном состоянии, препятствуя его использованию другими потоками (снятие блокировки происходит самостоятельно ). После снятия блокировки можно напечатать значение мьютекса и увидеть, что мы смогли изменить внутреннее i32 на 6. Разделение Mutex<T> между множеством потоков Теперь давайте попробуем с помощью Mutex<T> совместно использовать значение между несколькими потоками. Мы стартуем 10 потоков и каждый из них увеличивает значение счётчика на 1, поэтому счётчик изменяется от 0 до 10. Обратите внимание, что в следующих нескольких примерах будут ошибки сборщика и мы будем использовать эти ошибки, чтобы узнать больше об использовании вида Mutex<T> и как Rust помогает нам правильно его использовать. Приложение 16-13 содержит наш начальный пример: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-13/src/main.rs}} Приложение 16-13. Десять потоков, увеличивающих счётчик, защищённый Mutex<T> Мы создаём переменную-счётчик counter для хранения i32 значения внутри Mutex<T>, как мы это делали в приложении 16-12. Затем мы создаём 10 потоков, перебирая рядчисел. Мы используем thread::spawn и передаём всем этим потокам одинаковое замыкание, которое перемещает счётчик в поток, запрашивает блокировку на Mutex<T>, вызывая способ lock, а затем добавляет 1 к значению в мьютексе. Когда поток завершит выполнение своего замыкания, num выйдет из области видимости и освободит блокировку, чтобы её мог получить другой поток. В основном потоке мы собираем все дескрипторы в переменную handles. Затем, как мы это делали в приложении 16-2, вызываем join для каждого дескриптора, чтобы убедиться в завершении всех потоков. В этот момент основной поток получит доступ к блокировке и тоже напечатает результат программы. Сборщик намекнул, что этот пример не собирается. Давайте выясним почему! {{#include ../listings/ch16-fearless-concurrency/listing-16-13/output.txt}} Сообщение об ошибке указывает, что значение counter было перемещёно в замыкание на предыдущей повторения цикла. Rust говорит нам, что мы не можем передать counter во владение нескольким потокам. Давайте исправим ошибку сборщика с помощью способа множественного владения, который мы обсуждали в главе 15. Множественное владение между множеством потоков В главе 15 мы давали значение нескольким владельцам, используя умный указатель Rc<T> для создания значения подсчитанных ссылок. Давайте сделаем то же самое здесь и посмотрим, что произойдёт. Мы завернём Mutex<T> в Rc<T> в приложении 16-14 и клонируем Rc<T> перед передачей владения в поток. Теперь, когда мы увидели ошибки, мы также вернёмся к использованию цикла for и сохраним ключевое слово move у замыкания. Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-14/src/main.rs}} Приложение 16-14: Попытка использования Rc<T>, чтобы позволить нескольким потокам владеть Mutex<T> Ещё раз, мы собираем и получаем ... другие ошибки! Сборщик учит нас. {{#include ../listings/ch16-fearless-concurrency/listing-16-14/output.txt}} Ничего себе, это сообщение об ошибке очень многословно! Вот важная часть, на которой следует сосредоточиться: ``Rc<Mutex> cannot be sent between threads safely. Сборщик также сообщает нам причину: the trait Sendis not implemented forRc<Mutex> . Мы поговорим о Send в следующем разделе: это один из типажей, который заверяет, что виды которые мы используем с потоками, предназначены для использования в многопоточном коде. К сожалению, Rc<T> небезопасен для совместного использования между потоками. Когда Rc<T> управляет счётчиком ссылок, он добавляется значение к счётчику для каждого вызова clone и вычитается значение из счётчика, когда каждое клонированное значение удаляется при выходе из области видимости. Но он не использует примитивы многопоточности, чтобы обеспечить, что изменения в подсчёте не могут быть прерваны другим потоком. Это может привести к неправильным подсчётам - незначительным ошибкам, которые в свою очередь, могут привести к утечкам памяти или удалению значения до того, как мы отработали с ним. Нам нужен вид точно такой же как Rc<T>, но который позволяет изменять счётчик ссылок безопасно из разных потоков. Атомарный счётчик ссылок Arc<T> К счастью, Arc<T> является видом подобным виду Rc<T>, который безопасен для использования в ситуациях многопоточности. Буква А означает атомарное , что означает вид ссылка подсчитываемая атомарно . Atomics - это дополнительный вид примитивов для многопоточности, который мы не будем здесь подробно описывать: дополнительную сведения смотрите в документации встроенной библиотеки для std::sync::atomic. На данный момент вам просто нужно знать, что atomics работают как примитивные виды, но безопасны для совместного использования между потоками. Вы можете спросить, почему все примитивные виды не являются атомарными и почему стандартные виды библиотек не реализованы для использования вместе с видом Arc<T> по умолчанию. Причина в том, что безопасность потоков сопровождается снижением производительности, которое вы хотите платить только тогда, когда вам это действительно нужно. Если вы просто выполняете действия со значениями в одном потоке, то ваш код может работать быстрее, если он не должен обеспечивать заверения предоставляемые atomics. Давайте вернёмся к нашему примеру: виды Arc<T> и Rc<T> имеют одинаковый API, поэтому мы исправляем нашу программу, заменяя вид в строках use, вызове new и вызове clone. Код в приложении 16-15, наконец ссобирается и запустится: Файл: src/main.rs {{#rustdoc_include ../listings/ch16-fearless-concurrency/listing-16-15/src/main.rs}} Приложение 16-15: Использование вида Arc<T> для обёртывания Mutex<T>, теперь несколько потоков могут совместно владеть мьютексом Код напечатает следующее: Result: 10 Мы сделали это! Мы посчитали от 0 до 10, что может показаться не очень впечатляющим, но это позволило больше узнать про Mutex<T> и безопасность потоков. Вы также можете использовать структуру этой программы для выполнения более сложных действий, чем просто увеличение счётчика. Используя эту стратегию, вы можете разделить вычисления на независимые части, разделить эти части на потоки, а затем использовать Mutex<T>, чтобы каждый поток обновлял конечный результат своей частью кода. Обратите внимание, что если вы выполняете простые числовые действия, то существуют виды более простые, чем Mutex<T>, которые предоставляет модуль std::sync::atomic встроенной библиотеки . Эти виды обеспечивают безопасный, параллельный, атомарный доступ к простым видам. Мы решили использовать Mutex<T> с простым видом в этом примере, чтобы подробнее рассмотреть, как работает Mutex<T>.","breadcrumbs":"Безбоязненный параллелизм » Параллелизм с общим состоянием » Мьютексы предоставляют доступ к данным из одного потока (за раз)","id":"299","title":"Мьютексы предоставляют доступ к данным из одного потока (за раз)"},"3":{"body":"Rust наилучше подходит для многих людей по целому ряду причин. Давайте рассмотрим несколько наиболее важных групп.","breadcrumbs":"Введение » Кому подходит Rust","id":"3","title":"Кому подходит Rust"},"30":{"body":"Теперь вы готовы начать своё Rust путешествие! В данной главе вы изучили как: установить последнюю безотказную исполнение Rust, используя rustup, обновить Rust до последней исполнения, открыть местно установленную документацию, написать и запустить программу вида \"Hello, world!\", используя напрямую сборщик rustc, создать и запустить новый проект, используя соглашения и приказы Cargo. Это отличное время для создания более существенной программы, чтобы привыкнуть читать и писать код на языке Rust. Итак, в главе 2 мы построим программу для игры в угадай число. Если вы предпочитаете начать с изучения того, как работают общие концепции программирования в Rust, обратитесь к главе 3, а затем вернитесь к главе 2.","breadcrumbs":"С чего начать » Hello, Cargo! » Итоги","id":"30","title":"Итоги"},"300":{"body":"Вы могли заметить, что counter сам по себе не изменяемый (immutable), но мы можем получить изменяемую ссылку на значение внутри него; это означает, что Mutex<T> обеспечивает внутреннюю изменяемость, также как и семейство Cell видов. Мы использовали RefCell<T> в главе 15, чтобы получить возможность изменять содержимое внутри Rc<T>, теперь подобным образом мы используем Mutex<T> для изменения содержимого внутри Arc<T> . Ещё одна подробность, на которую стоит обратить внимание: Rust не может защитить вас от всевозможных логических ошибок при использовании Mutex<T>. Вспомните в главе 15, что использование Rc<T> сопряжено с риском создания ссылочной зацикленности, где два значения Rc<T> ссылаются друг на друга, что приводит к утечкам памяти. Подобным образом, Mutex<T> сопряжён с риском создания взаимных блокировок (deadlocks). Это происходит, когда действия необходимо заблокировать два ресурса и каждый из двух потоков получил одну из блокировок, заставляя оба потока ждать друг друга вечно. Если вам важна тема взаимных блокировок, попробуйте создать программу Rust, которая её содержит; затем исследуйте стратегии устранения взаимных блокировок для мьютексов на любом языке и попробуйте реализовать их в Rust. Документация встроенной библиотеки для Mutex<T> и MutexGuard предлагает полезную сведения. Мы завершим эту главу, рассказав о типажах Send и Sync и о том, как мы можем использовать их с пользовательскими видами.","breadcrumbs":"Безбоязненный параллелизм » Параллелизм с общим состоянием » Сходства RefCell<T> / Rc<T> и Mutex<T> / Arc<T>","id":"300","title":"Сходства RefCell<T> / Rc<T> и Mutex<T> / Arc<T>"},"301":{"body":"Важно, что сам язык Rust имеет очень мало возможностей для многопоточности. Почти все функции многопоточности о которых мы говорили в этой главе, были частью встроенной библиотеки, а не языка. Ваши варианты работы с многопоточностью не ограничиваются языком или встроенной библиотекой; Вы можете написать свой собственный многопоточный функционал или использовать возможности написанные другими. Тем не менее, в язык встроены две концепции многопоточности: std::marker типажи Sync и Send.","breadcrumbs":"Безбоязненный параллелизм » Расширяемый параллелизм с помощью трейтов Sync и Send » Расширенная многопоточность с помощью типажей Sync и Send","id":"301","title":"Расширенная многопоточность с помощью типажей Sync и Send"},"302":{"body":"Маркерный типаж Send указывает, что владение видом реализующим Send, может передаваться между потоками. Почти каждый вид Rust является видом Send, но есть некоторые исключения, вроде Rc<T>: он не может быть Send, потому что если вы клонировали значение Rc<T> и попытались передать владение клоном в другой поток, оба потока могут обновить счётчик ссылок одновременно. По этой причине Rc<T> реализован для использования в однопоточных ситуациях, когда вы не хотите платить за снижение производительности. Следовательно, система видов Rust и ограничений типажа заверяют, что вы никогда не сможете случайно небезопасно отправлять значение Rc<T> между потоками. Когда мы попытались сделать это в приложении 16-14, мы получили ошибку, the trait Send is not implemented for Rc<Mutex<i32>>. Когда мы переключились на Arc<T>, который является видом Send, то код собрался. Любой вид полностью состоящий из видов Send самостоятельно помечается как Send. Почти все примитивные виды являются Send, кроме сырых указателей, которые мы обсудим в главе 19.","breadcrumbs":"Безбоязненный параллелизм » Расширяемый параллелизм с помощью трейтов Sync и Send » Разрешение передачи во владение между потоками с помощью Send","id":"302","title":"Разрешение передачи во владение между потоками с помощью Send"},"303":{"body":"Маркерный типаж Sync указывает, что на вид реализующий Sync можно безопасно ссылаться из нескольких потоков. Другими словами, любой вид T является видом Sync, если &T (ссылка на T ) является видом Send, что означает что ссылку можно безопасно отправить в другой поток. Подобно Send, примитивные виды являются видом Sync, а виды полностью скомбинированные из видов Sync, также являются Sync видом. Умный указатель Rc<T> не является Sync видом по тем же причинам, по которым он не является Send. Вид RefCell<T> (о котором мы говорили в главе 15) и семейство связанных видов Cell<T> не являются Sync. Реализация проверки заимствования, которую делает вид RefCell<T> во время выполнения программы не является поточно-безопасной. Умный указатель Mutex<T> является видом Sync и может использоваться для совместного доступа из нескольких потоков, как вы уже видели в разделе «Совместное использование Mutex<T> между несколькими потоками» .","breadcrumbs":"Безбоязненный параллелизм » Расширяемый параллелизм с помощью трейтов Sync и Send » Разрешение доступа из нескольких потоков с Sync","id":"303","title":"Разрешение доступа из нескольких потоков с Sync"},"304":{"body":"Поскольку виды созданные из типажей Send и Sync самостоятельно также являются видами Send и Sync, мы не должны реализовывать эти типажи вручную. Являясь маркерными типажами у них нет никаких способов для реализации. Они просто полезны для реализации инвариантов, связанных с многопоточностью. Ручная реализация этих типажей включает в себя реализацию небезопасного кода Rust. Мы поговорим об использовании небезопасного кода Rust в главе 19; на данный момент важная сведения заключается в том, что для создания новых многопоточных видов, не состоящих из частей Send и Sync необходимо тщательно продумать заверения безопасности. В Rustonomicon есть больше сведений об этих заверениях и о том как их соблюдать.","breadcrumbs":"Безбоязненный параллелизм » Расширяемый параллелизм с помощью трейтов Sync и Send » Реализация Send и Sync вручную небезопасна","id":"304","title":"Реализация Send и Sync вручную небезопасна"},"305":{"body":"Это не последний случай, когда вы увидите многопоточность в этой книге: проект в главе 20 будет использовать концепции этой главы для более реалистичного случая, чем небольшие примеры обсуждаемые здесь. Как упоминалось ранее, поскольку в языке Rust очень мало того, с помощью чего можно управлять многопоточностью, многие решения реализованы в виде крейтов. Они развиваются быстрее, чем стандартная библиотека, поэтому обязательно поищите в Интернете текущие современные крейты. Стандартная библиотека Rust предоставляет потоки для передачи сообщений и виды умных указателей, такие как Mutex<T> и Arc<T>, которые можно безопасно использовать в многопоточных средах. Система видов и анализатор заимствований заверяют, что код использующий эти решения не будет содержать гонки данных или недействительные ссылки. Получив компилирующийся код, вы можете быть уверены, что он будет успешно работать в нескольких потоках без ошибок, которые трудно обнаружить в других языках. Многопоточное программирование больше не является концепцией, которую стоит опасаться: иди вперёд и сделай свои программы многопоточными безбоязненно! Далее мы поговорим об идиоматичных способах моделирования проблем и структурирования решений по мере усложнения ваших программ на Rust. Кроме того, мы обсудим как идиомы Rust связаны с теми, с которыми вы, возможно, знакомы по объектно-ориентированному программированию.","breadcrumbs":"Безбоязненный параллелизм » Расширяемый параллелизм с помощью трейтов Sync и Send » Итоги","id":"305","title":"Итоги"},"306":{"body":"Объектно-ориентированное программирование (ООП) — это способ построения программ. Объекты, как программная концепция, были введены в язык программирования Simula в 1960-х годах. Эти объекты повлияли на архитектуру программирования Алана Кея, в которой объекты передают сообщения друг другу. Чтобы описать эту архитектуру, он ввёл термин объектно-ориентированное программирование в 1967 году. Есть много конкурирующих определений ООП, и по некоторым из этих определений Rust является объектно-ориентированным, а по другим — нет. В этой главе мы рассмотрим некоторые характеристики, которые обычно считаются объектно-ориентированными, и то, как эти характеристики транслируются в идиомы языка Rust. Затем мы покажем, как реализовать шаблон объектно-ориентированного проектирования в Rust, и обсудим соглашения между этим вариантом и решением, использующим вместо этого некоторые сильные стороны Rust.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Возможности объектно-ориентированного программирования в Rust","id":"306","title":"Возможности объектно-ориентированного программирования в Rust"},"307":{"body":"В сообществе программистов нет единого мнения о том, какими свойствами должен обладать язык, чтобы считаться объектно-ориентированным. На Rust повлияли многие парадигмы программирования, включая ООП - например, в главе 13 мы изучали особенности, пришедшие из функционального программирования. Однозначно можно утверждать, что ООП-языкам присущи следующие характерные особенности: объекты, инкапсуляция и наследование. Давайте рассмотрим, что каждая из них означает и поддерживает ли их Rust.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Характеристики объектно-ориентированных языков » Характеристики объектно-ориентированных языков","id":"307","title":"Характеристики объектно-ориентированных языков"},"308":{"body":"Книга Приёмы объектно-ориентированного проектирования. Паттерны проектирования Erich Gamma, Richard Helm, Ralph Johnson, и John Vlissides (Addison-Wesley Professional, 1994), в просторечии называемая Книга банды четырёх , представляет собой сборник примеров объектно-ориентированного проектирования. В ней даётся следующее определение ООП: Объектно-ориентированные программы состоят из объектов. Объект представляет собой сущность, своего рода дополнение, с данными и процедурами, которые работают с этими данными. Процедуры обычно называются способами или действиеми . В соответствии с этим определением, Rust является объектно-ориентированным языком - в структурах и перечислениях содержатся данные, а в х impl определяются способы для них. Хотя структуры и перечисления, имеющие способы, не называются объектами, они обеспечивают функциональность, соответствующую определению объектов в книге банды четырёх.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Характеристики объектно-ориентированных языков » Объекты содержат данные и поведение","id":"308","title":"Объекты содержат данные и поведение"},"309":{"body":"Другим особенностью, обычно связанным с объектно-ориентированным программированием, является мысль инкапсуляции : подробности реализации объекта недоступны для кода, использующего этот объект. Единственный способ взаимодействия с объектом — через его публичный внешняя оболочка; код, использующий этот объект, не должен иметь возможности взаимодействовать с внутренними свойствами объекта и напрямую изменять его данные или поведение. Инкапсуляция позволяет изменять и реорганизовывать внутренние свойства объекта без необходимости изменять код, который использует объект. В главе 7 мы уже говорили о том, как управлять инкапсуляцией: мы можем использовать ключевое слово pub, чтобы определить, какие модули, виды, функции и способы в нашем коде будут публичными, а всё остальное по умолчанию будет приватными. Например, мы можем определить структуру AveragedCollection, в которой есть поле, содержащее вектор значений i32. Также, структура будет иметь поле, содержащее среднее арифметическое чисел этого вектора, таким образом, среднее не нужно будет вычислять каждый раз, когда оно кому-то понадобится. Другими словами, AveragedCollection будет кэшировать вычисленное среднее для нас. В приложении 17-1 приведено определение структуры AveragedCollection: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-01/src/lib.rs}} Приложение 17-1: структура AveragedCollection содержит список целых чисел и их среднее арифметическое. Обратите внимание, что структура помечена ключевым словом pub, что позволяет другому коду её использовать, однако, поля структуры остаются недоступными. Это важно, потому что мы хотим обеспечить обновление среднего значения при добавлении или удалении элемента из списка. Мы можем получить нужное поведение, определив в структуре способы add, remove и average, как показано в примере 17-2: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-02/src/lib.rs:here}} Приложение 17-2: Реализация публичных способов add,remove, и average для AveragedCollection Публичные способы add, remove и average являются единственным способом получить или изменить данные в экземпляре AveragedCollection. Когда элемент добавляется в list способом add, или удаляется с помощью способа remove, код реализации каждого из этих способов вызывает приватный способ update_average, который позаботится об обновлении поля average. Мы оставляем поля list и average приватными, чтобы внешний код не мог добавлять или удалять элементы непосредственно в поле list; в противном случае поле average может оказаться не синхронизировано при подобном вмешательстве. Способ average возвращает значение в поле average, что позволяет внешнему коду читать значение average, но не изменять его. Поскольку мы инкапсулировали подробности реализации структуры AveragedCollection, мы можем легко изменить такие особенности, как структура данных, в будущем. Например, мы могли бы использовать HashSet<i32> вместо Vec<i32> для поля list. Благодаря тому, что сигнатуры публичных способов add, remove и average остаются неизменными, код, использующий AveragedCollection, также не будет нуждаться в изменении. У нас бы не получилось этого достичь, если бы мы сделали поле list доступным внешнему коду: HashSet<i32> иVec<i32> имеют разные способы для добавления и удаления элементов, поэтому внешний код, вероятно, должен измениться, если он модифицирует list напрямую. Если инкапсуляция является обязательным особенностью для определения языка как объектно-ориентированного, то Rust соответствует этому требованию. Возможность использовать или не использовать модификатор доступа pub для различных частей кода позволяет скрыть подробности реализации.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Характеристики объектно-ориентированных языков » Инкапсуляция, скрывающая подробности реализации","id":"309","title":"Инкапсуляция, скрывающая подробности реализации"},"31":{"body":"Давайте окунёмся в Rust, вместе поработав над практическим проектом! В этой главе вы познакомитесь с несколькими общими концепциями Rust, показав, как использовать их в существующей программе. Вы узнаете о let , match, способах, ассоциированных функциях, внешних дополнениях и многом другом! В следующих главах мы рассмотрим эти идеи более подробно. В этой главе вы просто попрактикуетесь в основах. Мы реализуем классическую для начинающих программистов задачу — игру в загадки. Вот как это работает: программа генерирует случайное целое число в ряде от 1 до 100. Затем она предлагает игроку его угадать. После ввода числа программа укажет, меньше или больше было загаданное число. Если догадка верна, игра напечатает поздравительное сообщение и завершится.","breadcrumbs":"Программирование игры в загадки » Программируем игру в загадки","id":"31","title":"Программируем игру в загадки"},"310":{"body":"Наследование — это механизм, с помощью которого объект может унаследовать элементы из определения другого объекта, то есть получить данные и поведение родительского объекта без необходимости повторно их определять. Если язык должен иметь наследование, чтобы быть объектно-ориентированным, то Rust таким не является. Здесь нет способа определить структуру, наследующую поля и реализации способов родительской структуры, без использования макроса. Однако, если вы привыкли иметь наследование в своём наборе средств для программирования, вы можете использовать другие решения в Rust, в зависимости от того, по какой причине вы изначально хотите использовать наследование. Вы могли бы выбрать наследование по двум основным причинам. Одна из них - возможность повторного использования кода: вы можете реализовать определённое поведение для одного вида, а наследование позволит вам повторно использовать эту реализацию для другого вида. В Rust для этого есть ограниченный способ, использующий реализацию способа типажа по умолчанию, который вы видели в приложении 10-14, когда мы добавили реализацию по умолчанию в способе summarize типажа Summary. Любой вид, реализующий свойство Summary будет иметь доступный способ summarize без дополнительного кода. Это похоже на то, как родительский класс имеет реализацию способа, и класс-наследник тоже имеет реализацию способа. Мы также можем переопределить реализацию по умолчанию для способа summarize, когда реализуем типаж Summary, что похоже на дочерний класс, переопределяющий реализацию способа, унаследованного от родительского класса. Вторая причина использования наследования относится к системе видов: чтобы иметь возможность использовать дочерний вид в тех же места, что и родительский. Эта возможность также называется полиморфизм и означает возможность подменять объекты во время исполнения, если они имеют одинаковые характеристики.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Характеристики объектно-ориентированных языков » Наследование как система видов и способ совместного использования кода","id":"310","title":"Наследование как система видов и способ совместного использования кода"},"311":{"body":"Для многих людей полиморфизм является синонимом наследования. Но на самом деле это более общая концепция, относящаяся к коду, который может работать с данными нескольких видов. Обычно такими видами выступают подклассы при наследовании. Вместо этого Rust использует обобщённые виды для абстрагирования от видов, и ограничения типажей (trait bounds) для указания того, какие возможности эти виды должны предоставлять. Это иногда называют ограниченным свойствоическим полиморфизмом . Наследование, как подход к разработке, в последнее время утратило популярность во многих языках программирования, поскольку часто существует риск, что мы будем наследовать код чаще, чем это необходимо. Подклассы не всегда должны обладать всеми характеристиками родительского класса, но при использовании наследования другого варианта нет. Это может сделать дизайн программы менее гибким. Кроме этого, появляется возможность вызова у подклассов способов, которые не имеют смысла или вызывают ошибки, потому что эти способы неприменимы к подклассу. Кроме того, в некоторых языках разрешается только одиночное наследование (т.е. подкласс может наследоваться только от одного класса), что ещё больше ограничивает гибкость разработки программы. По этим причинам в Rust применяется иной подход, с использованием типажей-объектов вместо наследования. Давайте посмотрим как типажи-объекты реализуют полиморфизм в Rust.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Характеристики объектно-ориентированных языков » Полиморфизм","id":"311","title":"Полиморфизм"},"312":{"body":"В главе 8 мы упоминали, что одним из ограничений векторов является то, что они могут хранить элементы только одного вида. Мы создали обходное решение в приложении 8-9, где мы определили перечисление SpreadsheetCell в котором были варианты для хранения целых чисел, чисел с плавающей точкой и текста. Это означало, что мы могли хранить разные виды данных в каждой ячейке и при этом иметь вектор, представляющий строку из ячеек. Это очень хорошее решение, когда наши взаимозаменяемые элементы вектора являются видами с фиксированным набором, известным при сборки кода. Однако иногда мы хотим, чтобы пользователь нашей библиотеки мог расширить набор видов, которые допустимы в именно ситуации. Чтобы показать как этого добиться, мы создадим пример средства с графическим внешней оболочкой пользователя (GUI), который просматривает список элементов, вызывает способ draw для каждого из них, чтобы нарисовать его на экране - это обычная техника для средств GUI. Мы создадим библиотечный крейт с именем gui, содержащий структуру библиотеки GUI. Этот крейт мог бы включать некоторые готовые виды для использования, такие как Button или TextField. Кроме того, пользователи такого крейта gui захотят создавать свои собственные виды, которые могут быть нарисованы: например, кто-то мог бы добавить вид Image, а кто-то другой добавить вид SelectBox. Мы не будем реализовывать полноценную библиотеку GUI для этого примера, но покажем, как её части будут подходить друг к другу. На момент написания библиотеки мы не можем знать и определить все виды, которые могут захотеть создать другие программисты. Но мы знаем, что gui должен отслеживать множество значений различных видов и ему нужно вызывать способ draw для каждого из этих значений различного вида. Ему не нужно точно знать, что произойдёт, когда вызывается способ draw, просто у значения будет доступен такой способ для вызова. Чтобы сделать это на языке с наследованием, можно определить класс с именем Component у которого есть способ с названием draw. Другие классы, такие как Button, Image и SelectBox наследуются от Component и следовательно, наследуют способ draw. Каждый из них может переопределить реализацию способа draw, чтобы определить своё пользовательское поведение, но платформа может обрабатывать все виды, как если бы они были экземплярами Component и вызывать draw у них. Но поскольку в Rust нет наследования, нам нужен другой способ структурировать gui библиотеку, чтобы позволить пользователям расширять её новыми видами.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Использование трейт-объектов, допускающих значения разных видов » Использование типаж-объектов, допускающих значения разных видов","id":"312","title":"Использование типаж-объектов, допускающих значения разных видов"},"313":{"body":"Чтобы реализовать поведение, которое мы хотим иметь в gui, определим типаж с именем Draw, который будет содержать один способ с названием draw. Затем мы можем определить вектор, который принимает типаж-объект . Типаж-объект указывает как на экземпляр вида, реализующего указанный типаж, так и на внутреннюю таблицу, используемую для поиска способов типажа указанного вида во время выполнения. Мы создаём типаж-объект в таком порядке: используем какой-нибудь вид указателя, например ссылку & или умный указатель Box<T>, затем ключевое слово dyn, а затем указываем соответствующий типаж. (Мы будем говорить о причине того, что типаж-объекты должны использовать указатель в разделе \"Виды изменяемого размера и типаж Sized \" главы 19). Мы можем использовать типаж-объекты вместо универсального или определенного вида. Везде, где мы используем типаж-объект, система видов Rust проверит во время сборки, что любое значение, используемое в этом среде, будет реализовывать нужный типаж у типаж-объекта. Следовательно, нам не нужно знать все возможные виды во время сборки. Мы упоминали, что в Rust мы воздерживаемся называть структуры и перечисления «объектами», чтобы отличать их от объектов в других языках. В структуре или перечислении данные в полях структуры и поведение в разделах impl разделены, тогда как в других языках данные и поведение объединены в одну концепцию, часто обозначающуюся как объект. Тем не менее, типаж-объекты являются более похожими на объекты на других языках, в том смысле, что они сочетают в себе данные и поведение. Но типаж-объекты отличаются от традиционных объектов тем, что не позволяют добавлять данные к типаж-объекту. Типаж-объекты обычно не настолько полезны, как объекты в других языках: их определенная цель - обеспечить абстракцию через общее поведение. В приложении 17.3 показано, как определить типаж с именем Draw с помощью одного способа с именем draw: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-03/src/lib.rs}} Приложение 17-3: Определение типажа Draw Этот синтаксис должен выглядеть знакомым из наших дискуссий о том, как определять типажи в главе 10. Далее следует новый синтаксис: в приложении 17.4 определена структура с именем Screen, которая содержит вектор с именем components. Этот вектор имеет вид Box<dyn Draw>, который и является типаж-объектом; это замена для любого вида внутри Box который реализует типаж Draw. Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-04/src/lib.rs:here}} Приложение 17-4: Определение структуры Screen с полем components, которое является вектором типаж-объектов, которые реализуют типаж Draw В структуре Screen, мы определим способ run, который будет вызывать способ draw каждого элемента вектора components, как показано в приложении 17-5: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-05/src/lib.rs:here}} Приложение 17-5: Реализация способа run у структуры Screen, который вызывает способ draw каждого компонента из вектора Это работает иначе, чем определение структуры, которая использует свойство общего вида с ограничениями типажа. Обобщённый свойство вида может быть заменён только одним определенным видом, тогда как типаж-объекты позволяют нескольким определенным видам замещать типаж-объект во время выполнения. Например, мы могли бы определить структуру Screen используя общий вид и ограничение типажа, как показано в приложении 17-6: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-06/src/lib.rs:here}} Приложение 17-6: Иная реализация структуры Screen и способа run, используя обобщённый вид и ограничения типажа Это вариант ограничивает нас экземпляром Screen, который имеет список компонентов всех видов Button или всех видов TextField. Если у вас когда-либо будут только однородные собрания, использование обобщений и ограничений типажа является предпочтительным, поскольку определения будут мономорфизированы во время сборки для использования с определенными видами. С другой стороны, с помощью способа, использующего типаж-объекты, один экземпляр Screen может содержать Vec<T> который содержит Box<Button>, также как и Box<TextField>. Давайте посмотрим как это работает, а затем поговорим о влиянии на производительность во время выполнения.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Использование трейт-объектов, допускающих значения разных видов » Определение типажа для общего поведения","id":"313","title":"Определение типажа для общего поведения"},"314":{"body":"Теперь мы добавим несколько видов, реализующих типаж Draw. Мы объявим вид Button. Опять же, фактическая реализация библиотеки GUI выходит за рамки этой книги, поэтому тело способа draw не будет иметь никакой полезной реализации. Чтобы представить, как может выглядеть такая реализация, структура Button может иметь поля для width, height и label, как показано в приложении 17-7: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-07/src/lib.rs:here}} Приложение 17-7: Структура Button реализует типаж Draw Поля width, height и label структуры Button будут отличаться от, например, полей других компонентов вроде вида TextField, которая могла бы иметь те же поля плюс поле placeholder. Каждый из видов, который мы хотим нарисовать на экране будет реализовывать типаж Draw, но будет использовать отличающийся код способа draw для определения как именно рисовать определенный вид, например Button в этом примере (без фактического кода GUI, который выходит за рамки этой главы). Например, вид Button может иметь дополнительный разделimpl, содержащий способы, относящиеся к тому, что происходит, когда пользователь нажимает кнопку. Эти варианты способов не будут применяться к видам вроде TextField. Если кто-то использующий нашу библиотеку решает реализовать структуру SelectBox, которая имеет width, height и поля options, он реализует также и типаж Draw для вида SelectBox, как показано в приложении 17-8: Файл: src/main.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-08/src/main.rs:here}} Приложение 17-8: Другой крейт, использующий gui и реализующий типаж Draw у структуры SelectBox Пользователь нашей библиотеки теперь может написать свою функцию main для создания экземпляра Screen. К экземпляру Screen он может добавить SelectBox и Button, поместив каждый из них в Box<T>, чтобы он стал типаж-объектом. Затем он может вызвать способ run у экземпляра Screen, который вызовет draw для каждого из компонентов. Приложение 17-9 показывает эту реализацию: Файл: src/main.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-09/src/main.rs:here}} Приложение 17-9: Использование типаж-объектов для хранения значений разных видов, реализующих один и тот же типаж Когда мы писали библиотеку, мы не знали, что кто-то может добавить вид SelectBox, но наша реализация Screen могла работать с новым видом и рисовать его, потому что SelectBox реализует типаж Draw, что означает, что он реализует способ draw. Эта концепция, касающаяся только сообщений, на которые значение отвечает, в отличие от определенного вида у значения, подобна концепции duck typing в изменяемых типизированных языках: если что-то ходит как утка и крякает как утка, то она должна быть утка! В реализации способа run у Screen в приложении 17-5, run не нужно знать каким будет определенный вид каждого компонента. Он не проверяет, является ли компонент экземпляром Button или SelectBox, он просто вызывает способ draw компонента. Указав Box<dyn Draw> в качестве вида значений в векторе components, мы определили Screen для значений у которых мы можем вызвать способ draw. Преимущество использования типаж-объектов и системы видов Rust для написания кода, похожего на код с использованием концепции duck typing состоит в том, что нам не нужно во время выполнения проверять реализует ли значение в векторе определенный способ или беспокоиться о получении ошибок, если значение не реализует способ, мы все равно вызываем способ. Rust не ссобирает наш код, если значения не реализуют типаж, который нужен типаж-объектам. Например, в приложении 17-10 показано, что произойдёт, если мы попытаемся создать Screen с String в качестве его компонента: Файл: src/main.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-10/src/main.rs}} Приложение 17-10: Попытка использования вида, который не реализует типаж для типаж-объекта Мы получим ошибку, потому что String не реализует типаж Draw: {{#include ../listings/ch17-oop/listing-17-10/output.txt}} Эта ошибка даёт понять, что либо мы передаём в компонент Screen что-то, что мы не собирались передавать и мы тогда должны передать другой вид, либо мы должны реализовать типаж Draw у вида String, чтобы Screen мог вызывать draw у него.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Использование трейт-объектов, допускающих значения разных видов » Реализации типажа","id":"314","title":"Реализации типажа"},"315":{"body":"Вспомните, в разделе «Производительность кода, использующего обобщённые виды» в главе 10 наше обсуждение процесса мономорфизации, выполняемого сборщиком, когда мы используем ограничения типажей для обобщённых видов: сборщик генерирует частные реализации функций и способов для каждого определенного вида, который мы применяем для свойства обобщённого вида. Код, который получается в результате мономорфизации, выполняет статическую управление , то есть когда сборщик знает, какой способ вы вызываете во время сборки. Это противоположно изменяемой управления , когда сборщик не может определить во время сборки, какой способ вы вызываете. В случае изменяемой управления сборщик формирует код, который во время выполнения определит, какой способ нужно вызвать. Когда мы используем типаж-объекты, Rust должен использовать изменяемую управление. Сборщик не знает всех видов, которые могут быть использованы с кодом, использующим типаж-объекты, поэтому он не знает, какой способ реализован для какого вида при вызове. Вместо этого, во время выполнения, Rust использует указатели внутри типаж-объекта, чтобы узнать какой способ вызвать. Такой поиск вызывает дополнительные затраты во время исполнения, которые не требуются при статической управления. Изменяемая управление также не позволяет сборщику выбрать встраивание кода способа, что в свою очередь делает невозможными некоторые оптимизации. Однако мы получили дополнительную гибкость в коде, который мы написали в приложении 17-5, и которую смогли поддержать в приложении 17-9, поэтому все \"за\" и \"против\" нужно рассматривать в комплексе.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Использование трейт-объектов, допускающих значения разных видов » Типаж-объекты выполняют изменяемую управление (связывание)","id":"315","title":"Типаж-объекты выполняют изменяемую управление (связывание)"},"316":{"body":"Шаблон \"Состояние\" — это объектно-ориентированный шаблон проектирования. Суть шаблона заключается в том, что мы определяем набор состояний, которые может иметь внутреннее значение. Состояния представлены набором объектов состояния , а поведение элемента изменяется в зависимости от его состояния. Мы рассмотрим пример структуры записи в блоге, в которой есть поле для хранения состояния, которое будет объектом состояния из набора «черновик», «обзор» или «опубликовано». Объекты состояния имеют общую функциональность: конечно в Rust мы используем структуры и типажи, а не объекты и наследование. Каждый объект состояния отвечает за своё поведение и сам определяет, когда он должен перейти в другое состояние. Элемент, который содержит объект состояния, ничего не знает о различиях в поведении состояний или о том, когда одно состояние должно перейти в другое. Преимуществом шаблона \"Состояние\" является то, что при изменении требований заказчика программы не требуется изменять код элемента, содержащего состояние, или код, использующий такой элемент. Нам нужно только обновить код внутри одного из объектов состояния, чтобы изменить его порядок действий, либо, возможно, добавить больше объектов состояния. Для начала реализуем шаблон \"Состояние\" более традиционным объектно-ориентированным способом, а затем воспользуемся подходом, более естественным для Rust. Давайте шаг за шагом реализуем поток действий для записи в блоге, использующий шаблон \"Состояние\". Окончательный функционал будет выглядеть так: Запись в блоге создаётся как пустой черновик. Когда черновик готов, запрашивается его проверка. После проверки происходит публикация записи. Только опубликованные записи блога возвращают содержимое записи на печать, поэтому сообщения, не прошедшие проверку, не могут быть опубликованы случайно. Любые другие изменения, сделанные в записи, не должны иметь никакого эффекта. Например, если мы попытаемся подтвердить черновик записи в блоге до того, как запросим проверку, запись должна остаться неопубликованным черновиком. В приложении 17-11 показан этот поток действий в виде кода: это пример использования API, который мы собираемся реализовать в библиотеке (крейте) с именем blog. Он пока не собирается, потому что крейт blog ещё не создан. Файл: src/main.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-11/src/main.rs:all}} Приложение 17-11: Код, отображающий желаемое поведение, которое мы хотим получить в крейте blog Мы хотим, чтобы пользователь мог создать новый черновик записи в блоге с помощью Post::new. Затем мы хотим разрешить добавление текста в запись блога. Если мы попытаемся получить содержимое записи сразу, до её проверки, мы не должны получить никакого текста на выходе, потому что запись все ещё является черновиком. Мы добавили утверждение (assert_eq!) в коде для опытных целей. Утверждение (assertion), что черновик записи блога должен возвращать пустую строку из способа content было бы отличным модульным тестом, но мы не собираемся писать тесты для этого примера. Далее мы хотим разрешить сделать запрос на проверку записи и хотим, чтобы content возвращал пустую строку, пока проверки не завершена. Когда запись пройдёт проверку, она должна быть опубликована, то есть при вызове content будет возвращён текст записи. Обратите внимание, что единственный вид из крейта, с которым мы взаимодействуем - это вид Post. Этот вид будет использовать шаблон \"Состояние\" и будет содержать значение, которое будет являться одним из трёх объектов состояний, представляющих различные состояния, в которых может находиться запись: \"черновик\", \"ожидание проверки\" или \"опубликовано\". Управление переходом из одного состояния в другое будет осуществляться внутренней логикой вида Post. Состояния будут переключаться в результате реакции на вызов способов экземпляра Post пользователями нашей библиотеки, но пользователи не должны управлять изменениями состояния напрямую. Кроме того, пользователи не должны иметь возможность ошибиться с состояниями, например, опубликовать сообщение до его проверки.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Реализация объектно-ориентированного шаблона проектирования","id":"316","title":"Реализация объектно-ориентированного шаблона проектирования"},"317":{"body":"Приступим к реализации библиотеки! Мы знаем, что нам нужна публичная структура Post, хранящая некоторое содержимое, поэтому мы начнём с определения структуры и связанной с ней публичной функцией new для создания экземпляра Post, как показано в приложении 17-12. Мы также сделаем приватный типаж State, который будет определять поведение, которое должны будут иметь все объекты состояний структуры Post. Затем Post будет содержать типаж-объект Box<dyn State> внутри Option<T> в закрытом поле state для хранения объекта состояния. Чуть позже вы поймёте, зачем нужно использовать Option<T> . Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-12/src/lib.rs}} Приложение 17-12. Определение структуры Post и функции new, которая создаёт новый экземпляр Post, типажа State и структуры Draft Типаж State определяет поведение, совместно используемое различными состояниями поста. Все объекты состояний (Draft - \"черновик\", PendingReview - \"ожидание проверки\" и Published - \"опубликовано\") будут реализовывать типаж State. Пока у этого типажа нет никаких способов, и мы начнём с определения состояния Draft, просто потому, что это первое состояние, с которого, как мы хотим, публикация будет начинать свой путь. Когда мы создаём новый экземпляр Post, мы устанавливаем его поле state в значение Some, содержащее Box. Этот Box указывает на новый экземпляр структуры Draft. Это заверяет, что всякий раз, когда мы создаём новый экземпляр Post, он появляется как черновик. Поскольку поле state в структуре Post является приватным, нет никакого способа создать Post в каком-либо другом состоянии! В функции Post::new мы объявим поле content новой пустой строкой вида String.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Определение Post и создание нового экземпляра в состоянии черновика","id":"317","title":"Определение Post и создание нового экземпляра в состоянии черновика"},"318":{"body":"В приложении 17-11 показано, что мы хотим иметь возможность вызывать способ add_text и передать ему &str, которое добавляется к текстовому содержимому записи блога. Мы реализуем эту возможность как способ, а не делаем поле content публично доступным, используя pub. Это означает, что позже мы сможем написать способ, который будет управлять, как именно читаются данные из поля content. Способ add_text довольно прост, поэтому давайте добавим его реализацию в разделimpl Postприложения 17-13: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-13/src/lib.rs:here}} Приложение 17-13. Реализация add_text для добавления текста к content (содержимому записи) Способ add_text принимает изменяемую ссылку на self, потому что мы меняем экземпляр Post, для которого вызываем add_text. Затем мы вызываем push_str для String у поля content и передаём text переменнаяом для добавления к сохранённому content. Это поведение не зависит от состояния, в котором находится запись, таким образом оно не является частью шаблона \"Состояние\". Способ add_text вообще не взаимодействует с полем state, но это часть поведения, которое мы хотим поддерживать.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Хранение текста содержимого записи","id":"318","title":"Хранение текста содержимого записи"},"319":{"body":"Даже после того, как мы вызвали add_text и добавили некоторый контент в нашу запись, мы хотим, чтобы способ content возвращал пустой фрагмент строки, так как запись всё ещё находится в черновом состоянии, как это показано в строке 7 приложения 17-11. А пока давайте реализуем способ content наиболее простым способом, который будет удовлетворять этому требованию: будем всегда возвращать пустой фрагмент строки. Мы изменим код позже, как только реализуем возможность изменить состояние записи, чтобы она могла бы быть опубликована. Пока что записи могут находиться только в черновом состоянии, поэтому содержимое записи всегда должно быть пустым. Приложение 17-14 показывает такую реализацию-заглушку: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-14/src/lib.rs:here}} Приложение 17-14. Добавление реализации-заглушки для способа content в Post, которая всегда возвращает пустой фрагмент строки. С добавленным таким образом способом content всё в приложении 17-11 работает, как задумано, вплоть до строки 7.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Убедимся, что содержание черновика будет пустым","id":"319","title":"Убедимся, что содержание черновика будет пустым"},"32":{"body":"Для настройки нового проекта перейдите в каталог projects , который вы создали в главе 1, и создайте новый проект с использованием Cargo, как показано ниже: $ cargo new guessing_game\n$ cd guessing_game Первая приказ, cargo new, принимает в качестве первого переменной имя проекта (guessing_game). Вторая приказ изменяет каталог на новый каталог проекта. Загляните в созданный файл Cargo.toml : Файл: Cargo.toml {{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/Cargo.toml}} Как вы уже видели в главе 1, cargo new создаёт программу «Hello, world!». Посмотрите файл src/main.rs : Файл: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/src/main.rs}} Теперь давайте соберем программу «Hello, world!» и сразу на этом же этапе запустим её с помощью приказы cargo run: {{#include ../listings/ch02-guessing-game-tutorial/no-listing-01-cargo-new/output.txt}} Приказ run пригодится, когда необходимо ускоренно выполнить повторение проекта. Именно так мы собираемся делать в этом проекте, быстро тестируя каждую повторение, прежде чем перейти к следующей. Снова откройте файл src/main.rs . Весь код вы будете писать в нем.","breadcrumbs":"Программирование игры в загадки » Настройка нового проекта","id":"32","title":"Настройка нового проекта"},"320":{"body":"Далее нам нужно добавить функциональность для запроса проверки записи, который должен изменить её состояние с Draft на PendingReview. Приложение 17-15 показывает такой код: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-15/src/lib.rs:here}} Приложение 17-15. Реализация способов request_review в структуре Post и типаже State Мы добавляем в Post публичный способ с именем request_review (\"запросить проверку\"), который будет принимать изменяемую ссылку на self. Затем мы вызываем внутренний способ request_review для текущего состояния Post, и этот второй способ request_review поглощает текущее состояние и возвращает новое состояние. Мы добавляем способ request_review в типаж State; все виды, реализующие этот типаж, теперь должны будут реализовать способ request_review. Обратите внимание, что вместо self, &self или &mut self в качестве первого свойства способа у нас указан self: Box<Self>. Этот синтаксис означает, что способ действителен только при его вызове с обёрткой Box, содержащей наш вид. Этот синтаксис становится владельцем Box<Self>, делая старое состояние недействительным, поэтому значение состояния Post может быть преобразовано в новое состояние. Чтобы поглотить старое состояние, способ request_review должен стать владельцем значения состояния. Это место, где приходит на помощь вид Option поля state записи Post: мы вызываем способ take, чтобы забрать значение Some из поля state и оставить вместо него значение None, потому что Rust не позволяет иметь необъявленные поля в структурах. Это позволяет перемещать значение state из Post, а не заимствовать его. Затем мы установим новое значение state как результат этой действия. Нам нужно временно установить state в None, вместо того, чтобы установить его напрямую с помощью кода вроде self.state = self.state.request_review();. Нам нужно завладеть значением поля state. Это даст нам заверение, что Post не сможет использовать старое значение state после того, как мы преобразовали его в новое состояние. Способ request_review в Draft должен вернуть новый экземпляр новой структуры PendingReview, обёрнутый в Box. Эта структура будет представлять состояние, в котором запись ожидает проверки. Структура PendingReview также реализует способ request_review, но не выполняет никаких преобразований. Она возвращает сама себя, потому что, когда мы запрашиваем проверку записи, уже находящейся в состоянии PendingReview, она всё так же должна продолжать оставаться в состоянии PendingReview. Теперь мы начинаем видеть преимущества шаблона \"Состояние\": способ request_review для Post одинаков, он не зависит от значения state. Каждое состояние само несёт ответственность за свои действия. Оставим способ content у Post таким как есть, возвращающим пустой фрагмент строки. Теперь мы можем иметь Post как в состоянии PendingReview, так и в состоянии Draft, но мы хотим получить такое же поведение в состоянии PendingReview. Приложение 17-11 теперь работает до строки 10!","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Запрос на проверку записи меняет её состояние","id":"320","title":"Запрос на проверку записи меняет её состояние"},"321":{"body":"Способ approve (\"одобрить\") будет подобен способу request_review: он будет устанавливать у state значение, которое должна иметь запись при её одобрении, как показано в приложении 17-16: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-16/src/lib.rs:here}} Приложение 17-16. Реализация способа approve для вида Post и типажа State Мы добавляем способ approve в типаж State, добавляем новую структуру, которая реализует этот типаж State и структуру для состояния Published. Подобно тому, как работает request_review для PendingReview, если мы вызовем способ approve для Draft, он не будет иметь никакого эффекта, потому что approve вернёт self. Когда мы вызываем для PendingReview способ approve, то он возвращает новый упакованный экземпляр структуры Published. Структура Published реализует трейт State, и как для способа request_review, так и для способа approve она возвращает себя, потому что в этих случаях запись должна оставаться в состоянии Published. Теперь нам нужно обновить способ content для Post. Мы хотим, чтобы значение, возвращаемое из content, зависело от текущего состояния Post, поэтому мы собираемся перенести часть функциональности Post в способ content, заданный для state, как показано в приложении 17.17: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-17/src/lib.rs:here}} Приложение 17-17: Обновление способа content в структуре Post для делегирования части функциональности способу content структуры State Поскольку наша цель состоит в том, чтобы сохранить все эти действия внутри структур, реализующих типаж State, мы вызываем способ content у значения в поле state и передаём экземпляр публикации (то есть self ) в качестве переменной. Затем мы возвращаем значение, которое нам выдаёт вызов способа content поля state. Мы вызываем способ as_ref у Option, потому что нам нужна ссылка на значение внутри Option, а не владение значением. Поскольку state является видом Option<Box<dyn State>>, то при вызове способа as_ref возвращается Option<&Box<dyn State>>. Если бы мы не вызывали as_ref, мы бы получили ошибку, потому что мы не можем переместить state из заимствованного свойства &self функции. Затем мы вызываем способ unwrap. Мы знаем, что этот способ здесь никогда не приведёт к аварийному завершению программы, так все способы Post устроены таким образом, что после их выполнения, в поле state всегда содержится значение Some. Это один из случаев, про которых мы говорили в разделе \"Случаи, когда у вас больше сведений, чем у сборщика\" главы 9 - случай, когда мы знаем, что значение None никогда не встретится, даже если сборщик не может этого понять. Теперь, когда мы вызываем content у вида &Box<dyn State>, в действие вступает принудительное приведение (deref coercion) для & и Box, поэтому в конечном итоге способ content будет вызван для вида, который реализует типаж State. Это означает, что нам нужно добавить способ content в определение типажа State, и именно там мы поместим логику для определения того, какое содержимое возвращать, в зависимости от текущего состояния, как показано в приложении 17-18: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-18/src/lib.rs:here}} Приложение 17-18. Добавление способа content в трейт State Мы добавляем реализацию по умолчанию способа content, который возвращает пустой фрагмент строки. Это означает, что нам не придётся реализовывать content в структурах Draft и PendingReview. Структура Published будет переопределять способ content и вернёт значение из post.content. Обратите внимание, что для этого способа нам нужны изложении времени жизни, как мы обсуждали в главе 10. Мы берём ссылку на post в качестве переменной и возвращаем ссылку на часть этого post, поэтому время жизни возвращённой ссылки связано с временем жизни переменной post. И вот, мы закончили - теперь всё из приложения 17-11 работает! Мы реализовали шаблон \"Состояние\", определяющий правила процесса работы с записью в блоге. Логика, связанная с этими правилами, находится в объектах состояний, а не разбросана по всей структуре Post. Почему не перечисление? Возможно, вам было важно, почему мы не использовали enum с различными возможными состояниями записи в качестве вариантов. Это, безусловно, одно из возможных решений. Попробуйте его реализовать и сравните конечные результаты, чтобы выбрать, какой из вариантов вам больше нравится! Одним из недостатков использования перечисления является то, что в каждом месте, где проверяется значение перечисления, потребуется выражение match или что-то подобное для обработки всех возможных вариантов. Возможно в этом случае нам придётся повторять больше кода, чем это было в решении с типаж-объектом.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Добавление approve для изменения поведения content","id":"321","title":"Добавление approve для изменения поведения content"},"322":{"body":"Мы показали, что Rust способен реализовать объектно-ориентированный шаблон \"Состояние\" для инкапсуляции различных видов поведения, которые должна иметь запись в каждом состоянии. Способы в Post ничего не знают о различных видах поведения. При такой организации кода, нам достаточно взглянуть только на один его участок, чтобы узнать отличия в поведении опубликованной публикации: в реализацию типажа State у структуры Published. Если бы мы захотели создать иную реализацию, не использующую паттерн состояния, мы могли бы вместо этого использовать выражения match в способах Post или даже в main, которые бы проверяли состояние записи и изменяли поведение в этих местах. Это приведёт к тому, что нам придётся в нескольких местах исследовать все следствия того, что пост перешёл в состояние \"опубликовано\"! И эта нагрузка будет только увеличиваться по мере добавления новых состояний: для каждого из этих выражений match потребуются дополнительные ответвления. С помощью шаблона \"Состояние\" способы Post и участки, где мы используем Post, не требуют использования выражений match, а для добавления нового состояния нужно только добавить новую структуру и реализовать способы типажа у одной этой структуры. Реализацию с использованием шаблона \"Состояние\" легко расширить для добавления новой функциональности. Чтобы увидеть, как легко поддерживать код, использующий данный шаблон, попробуйте выполнить некоторые из предложений ниже: Добавьте способ reject, который изменяет состояние публикации с PendingReview обратно на Draft. Потребуйте два вызова способа approve, прежде чем переводить состояние в Published. Разрешите пользователям добавлять текстовое содержимое только тогда, когда публикация находится в состоянии Draft. Подсказка: пусть объект состояния решает, можно ли менять содержимое, но не отвечает за изменение Post. Одним из недостатков шаблона \"Состояние\" является то, что поскольку состояния сами реализуют переходы между собой, некоторые из состояний получаются связанными друг с другом. Если мы добавим другое состояние между PendingReview и Published, например Scheduled (\"запланировано\"), то придётся изменить код в PendingReview, чтобы оно теперь переходило в Scheduled. Если бы не нужно было менять PendingReview при добавлении нового состояния, было бы меньше работы, но это означало бы, что мы переходим на другой шаблон проектирования. Другим недостатком является то, что мы сделали повторение некоторую логику. Чтобы устранить некоторое повторение, мы могли бы попытаться сделать реализации по умолчанию для способов request_review и approve типажа State, которые возвращают self; однако это нарушило бы безопасность объекта, потому что типаж не знает, каким определенно будет self. Мы хотим иметь возможность использовать State в качестве типаж-объекта, поэтому нам нужно, чтобы его способы были объектно-безопасными. Другое повторение включает в себя схожие реализации способов request_review и approve у Post. Оба способа делегируют реализации одного и того же способа значению поля state вида Option и устанавливают результатом новое значение поля state. Если бы у Post было много способов, которые следовали этому шаблону, мы могли бы рассмотреть определение макроса для устранения повторения (смотри раздел \"Макросы\" в главе 19). Реализуя шаблон \"Состояние\" точно так, как он определён для объектно-ориентированных языков, мы не настолько полно используем преимущества Rust, как могли бы. Давайте посмотрим на некоторые изменения, которые мы можем внести в крейт blog, чтобы недопустимые состояния и переходы превратить в ошибки времени сборки. Кодирование состояний и поведения в виде видов Мы покажем вам, как переосмыслить шаблон \"Состояние\", чтобы получить другой набор соглашений. Вместо того, чтобы полностью инкапсулировать состояния и переходы, так, чтобы внешний код не знал о них, мы будем кодировать состояния с помощью разных видов. Следовательно, система проверки видов Rust предотвратит попытки использовать черновые публикации, там где разрешены только опубликованные публикации, вызывая ошибки сборки. Давайте рассмотрим первую часть main в приложении 17-11: Файл: src/main.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-11/src/main.rs:here}} Мы по-прежнему поддерживаем создание новых сообщений в состоянии \"черновика\" с помощью способа Post::new и возможность добавлять текст к содержимому публикации. Но вместо способа content у чернового сообщения, возвращающего пустую строку, мы сделаем так, что у черновых сообщений вообще не будет способа content. Таким образом, если мы попытаемся получить содержимое черновика, мы получим ошибку сборщика, сообщающую, что способ не существует. В результате мы не сможем случайно отобразить черновик содержимого записи в работающей программе, потому что этот код даже не ссобирается. В приложении 17-19 показано определение структур Post и DraftPost, а также способов для каждой из них: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-19/src/lib.rs}} Приложение 17-19: Структура Post с способом content и структура DraftPost без способа content Обе структуры, Post и DraftPost, имеют приватное поле content, в котором хранится текст сообщения блога. Структуры больше не содержат поле state, потому что мы перемещаем кодирование состояния в виды структур. Структура Post будет представлять опубликованную публикацию, и у неё есть способ content, который возвращает content. У нас все ещё есть функция Post::new, но вместо возврата экземпляра Post она возвращает экземпляр DraftPost. Поскольку поле content является приватным и нет никаких функций, которые возвращают Post, просто так создать экземпляр Post уже невозможно. Структура DraftPost имеет способ add_text, поэтому мы можем добавлять текст к content как и раньше, но учтите, что в DraftPost не определён способ content! Так что теперь программа заверяет, что все записи начинаются как черновики, а черновики публикаций не имеют своего контента для отображения. Любая попытка обойти эти ограничения приведёт к ошибке сборщика. Реализация переходов в виде преобразований в другие виды Так как же получить опубликованный пост? Мы хотим обеспечить соблюдение правила, согласно которому черновик записи должен быть рассмотрен и утверждён до того, как он будет опубликован. Запись, находящаяся в состоянии проверки, по-прежнему не должна отображать содержимое. Давайте реализуем эти ограничения, добавив ещё одну структуру, PendingReviewPost, определив способ request_review у DraftPost, возвращающий PendingReviewPost, и определив способ approve у PendingReviewPost, возвращающий Post, как показано в приложении 17-20: Файл: src/lib.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-20/src/lib.rs:here}} Приложение 17-20: Вид PendingReviewPost, который создаётся путём вызова request_review экземпляра DraftPost и способ approve, который превращает PendingReviewPost в опубликованный Post. Способы request_review и approve забирают во владение self, таким образом поглощая экземпляры DraftPost и PendingReviewPost, которые потом преобразуются в PendingReviewPost и опубликованную Post, соответственно. Таким образом, у нас не будет никаких долгоживущих экземпляров DraftPost, после того, как мы вызвали у них request_review и так далее. В структуре PendingReviewPost не определён способ content, поэтому попытка прочитать его содержимое приводит к ошибке сборщика, также как и в случае с DraftPost. Так как единственным способом получить опубликованный экземпляр Post, у которого действительно есть объявленный способ content, является вызов способа approve у экземпляра PendingReviewPost, а единственный способ получить PendingReviewPost - это вызвать способ request_review у экземпляра DraftPost, теперь мы закодировали процесс смены состояний записи блога с помощью системы видов. Кроме этого, нужно внести небольшие изменения в main. Так как способы request_review и approve теперь возвращают объекты, а не преобразуют структуру от которой были вызваны, нам нужно добавить больше затеняющих присваиваний let post =, чтобы сохранять возвращаемые объекты. Также, теперь мы не можем использовать утверждения (assertions) для проверки того является ли содержимое черновиков и записей, находящихся на рассмотрении, пустыми строками, да они нам и не нужны - теперь стало невозможным собрать код, который бы пытался использовать содержимое записей, находящихся в этих состояниях. Обновлённый код в main показан в приложении 17-21: Файл: src/main.rs {{#rustdoc_include ../listings/ch17-oop/listing-17-21/src/main.rs}} Приложение 17-21: Изменения в main, использующие новую реализацию процесса подготовки записи блога Изменения, которые нам нужно было внести в main, чтобы переназначить post означают, что эта реализация теперь не совсем соответствует объектно-ориентированному шаблону \"Состояние\": преобразования между состояниями больше не инкапсулированы внутри реализации Post полностью. Тем не менее, мы получили большую выгоду в том, что недопустимые состояния теперь невозможны из-за системы видов и проверки видов, которая происходит во время сборки! У нас есть заверенияия, что некоторые ошибки, такие как отображение содержимого неопубликованной публикации, будут обнаружены до того, как они дойдут до пользователей. Попробуйте выполнить задачи, предложенные в начале этого раздела, в исполнения крейта blog, каким он стал после приложения 17-20, чтобы сформировать своё мнение о дизайне этой исполнения кода. Обратите внимание, что некоторые задачи в этом варианте могут быть уже выполнены. Мы увидели, что хотя Rust и способен реализовывать объектно-ориентированные шаблоны проектирования, в нём также доступны и другие шаблоны, такие как кодирование состояния с помощью системы видов. Эти модели имеют различные соглашения. Хотя вы, возможно, очень хорошо знакомы с объектно-ориентированными шаблонами, переосмысление проблем для использования преимуществ и возможностей Rust может дать такие выгоды, как предотвращение некоторых ошибок во время сборки. Объектно-ориентированные шаблоны не всегда будут лучшим решением в Rust из-за наличия определённых возможностей, таких как владение, которого нет у объектно-ориентированных языков.","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Соглашенияы шаблона \"Состояние\"","id":"322","title":"Соглашенияы шаблона \"Состояние\""},"323":{"body":"Независимо от того, что вы думаете о принадлежности Rust к объектно-ориентированным языкам после прочтения этой главы, теперь вы знаете, что можете использовать типаж-объекты, чтобы реализовать некоторые объектно-ориентированные свойства в Rust. Изменяемая управление может дать вашему коду некоторую гибкость в обмен на небольшое ухудшение производительности во время выполнения. Вы можете использовать эту гибкость для реализации объектно-ориентированных шаблонов, которые могут улучшить сопровождаемость вашего кода. В Rust также есть другие особенности, такие как владение, которых нет у объектно-ориентированных языков. Объектно-ориентированный шаблон не всегда будет лучшим способом использовать преимущества Rust, но является доступной опцией. Далее мы рассмотрим шаблоны, которые являются ещё одной особенностью Rust, обеспечивающей высокую гибкость. Мы бегло рассказывали о них на протяжении всей книги, но ещё не видели всех их возможностей. Вперёд!","breadcrumbs":"Возможности объектно-ориентированного программирования Rust » Реализация шаблона объектно-ориентированного проектирования » Итоги","id":"323","title":"Итоги"},"324":{"body":"Шаблоны - это особый синтаксис в Rust для сопоставления со структурой видов, как сложных, так и простых. Использование шаблонов в сочетании с выражениями match и другими конструкциями даёт вам больший управление над потоком управления программы. Шаблон состоит из некоторой сочетания следующего: Литералы Деструктурированные массивы, перечисления, структуры или кортежи Переменные Специальные символы Заполнители Некоторые примеры шаблонов включают x , (a, 3) и Some(Color::Red) . В средах, в которых допустимы шаблоны, эти компоненты описывают форму данных. Затем наша программа сопоставляет значения с шаблонами, чтобы определить, имеет ли значение правильную форму данных для продолжения выполнения определённого фрагмента кода. Чтобы использовать шаблон, мы сравниваем его с некоторым значением. Если шаблон соответствует значению, мы используем части значения в нашем дальнейшем коде. Вспомните выражения match главы 6, в которых использовались шаблоны, например, описание машины для сортировки монет. Если значение в памяти соответствует форме шаблона, мы можем использовать именованные части шаблона. Если этого не произойдёт, то не выполнится код, связанный с шаблоном. Эта глава - справочник по всем моментам, связанным с шаблонами. Мы расскажем о допустимых местах использования шаблонов, разнице между опровержимыми и неопровержимыми шаблонами и про различные виды синтаксиса шаблонов, которые вы можете увидеть. К концу главы вы узнаете, как использовать шаблоны для ясного выражения многих понятий.","breadcrumbs":"Шаблоны и сопоставление » Шаблоны и сопоставление","id":"324","title":"Шаблоны и сопоставление"},"325":{"body":"В процессе использования языка Rust вы часто используете шаблоны, даже не осознавая этого! В этом разделе обсуждаются все случаи, где использование шаблонов является корректным.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Все случаи, где могут быть использованы шаблоны","id":"325","title":"Все случаи, где могут быть использованы шаблоны"},"326":{"body":"Как обсуждалось в главе 6, мы используем шаблоны в ветках выражений match. Формально выражения match определяется как ключевое слово match, значение используемое для сопоставления, одна или несколько веток, которые состоят из шаблона и выражения для выполнения, если значение соответствует шаблону этой ветки, как здесь: match VALUE { PATTERN => EXPRESSION, PATTERN => EXPRESSION, PATTERN => EXPRESSION,\n} Например, вот выражение match из приложения 6-5, которое соответствует значению Option<i32> в переменной x: match x { None => None, Some(i) => Some(i + 1),\n} Шаблонами в этом выражении match являются None и Some(i) слева от каждой стрелки. Одно из требований к выражениям match состоит в том, что они должны быть исчерпывающими (exhaustive) в том смысле, что они должны учитывать все возможности для значения в выражении match. Один из способов убедиться, что вы рассмотрели каждую возможность - это иметь шаблон перехвата всех вариантов в последней ветке выражения: например, имя переменной, совпадающее с любым значением, никогда не может потерпеть неудачу и таким образом, охватывает каждый оставшийся случай. Специальный шаблон _ будет соответствовать чему угодно, но он никогда не привязывается к переменной, поэтому он часто используется в последней ветке. Шаблон _ может быть полезен, если вы, например, хотите пренебрегать любое не указанное значение. Мы рассмотрим шаблон _ более подробно в разделе \"Пренебрежение значений в шаблоне позже в этой главе.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Ветки match","id":"326","title":"Ветки match"},"327":{"body":"В главе 6 мы обсуждали, как использовать выражения if let как правило в качестве более короткого способа записи эквивалента match, которое обрабатывает только один случай. Дополнительно if let может иметь соответствующий else, содержащий код для выполнения, если шаблон выражения if let не совпадает. В приложении 18-1 показано, что можно также смешивать и сопоставлять выражения if let, else if и else if let. Это даёт больше гибкости, чем match выражение, в котором можно выразить только одно значение для сравнения с шаблонами. Кроме того, условия в серии if let, else if, else if let не обязаны соотноситься друг с другом. Код в приложении 18-1 показывает последовательность проверок нескольких условий, определяющих каким должен быть цвет фона. В данном примере мы создали переменные с предопределёнными значениями, которые в существующей программе могли бы быть получены из пользовательского ввода. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-01/src/main.rs}} Приложение 18-1: Использование условных конструкций if let, else if, else if let, и else Если пользователь указывает любимый цвет, то этот цвет используется в качестве цвета фона. Если любимый цвет не указан, и сегодня вторник, то цвет фона - зелёный. Иначе, если пользователь указывает свой возраст в виде строки, и мы можем успешно проанализировать её и представить в виде числа, то цвет будет либо фиолетовым, либо оранжевым, в зависимости от значения числа. Если ни одно из этих условий не выполняется, то цвет фона будет синим. Эта условная структура позволяет поддерживать сложные требования. С жёстко закодированными значениями, которые у нас здесь есть, этот пример напечатает Using purple as the background color. Можно увидеть, что if let может также вводить затенённые переменные, как это можно сделать в match ветках: строка if let Ok(age) = age вводит новую затенённую переменную age, которая содержит значение внутри варианта Ok. Это означает, что нам нужно поместить условие if age > 30 внутри этого блок: мы не можем объединить эти два условия в if let Ok(age) = age && age > 30. Затенённый age, который мы хотим сравнить с 30, не является действительным, пока не начнётся новая область видимости с фигурной скобки. Недостатком использования if let выражений является то, что сборщик не проверяет полноту (exhaustiveness) всех вариантов, в то время как с помощью выражения match это происходит. Если мы не напишем последний разделelse и, благодаря этому, пропустим обработку некоторых случаев, сборщик не предупредит нас о возможной логической ошибке.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Условные выражения if let","id":"327","title":"Условные выражения if let"},"328":{"body":"Подобно конструкции if let, конструкция условного цикла while let позволяет повторять цикл while до тех пор, пока шаблон продолжает совпадать. Пример в приложении 18-2 отображает цикл while let, который использует вектор в качестве стека и печатает значения вектора в порядке, обратном тому, в котором они были помещены. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-02/src/main.rs:here}} Приложение 18-2: Использование цикла while let для печати значений до тех пор, пока stack.pop() возвращает Some В этом примере выводится 3, 2, а затем 1. Способ pop извлекает последний элемент из вектора и возвращает Some(value). Если вектор пуст, то pop возвращает None. Цикл while продолжает выполнение кода в своём разделе, пока pop возвращает Some. Когда pop возвращает None, цикл останавливается. Мы можем использовать while let для удаления каждого элемента из стека.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Условные циклы while let","id":"328","title":"Условные циклы while let"},"329":{"body":"В цикле for значение, которое следует непосредственно за ключевым словом for , является шаблоном. Например, в for x in y выражение x является шаблоном. В приложении 18-3 показано, как использовать шаблон в цикле for , чтобы деструктурировать или разбить кортеж как часть цикла for . {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-03/src/main.rs:here}} Приложение 18-3: Использование шаблона в цикле for для деструктурирования кортежа Код в приложении 18-3 выведет следующее: {{#include ../listings/ch18-patterns-and-matching/listing-18-03/output.txt}} Мы адаптируем повторительс помощью способа enumerate, чтобы он генерировал кортеж, состоящий из значения и порядкового казателя этого значения. Первым сгенерированным значением будет кортеж (0, 'a'). Когда это значение сопоставляется с шаблоном (index, value), index будет равен 0, а value будет равно 'a' и будет напечатана первая строка выходных данных.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Цикл for","id":"329","title":"Цикл for"},"33":{"body":"Первая часть программы запрашивает ввод данных пользователем, обрабатывает их и проверяет, что они в ожидаемой форме. Начнём с того, что позволим игроку ввести догадку. Вставьте код из приложения 2-1 в src/main.rs . Файл: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:all}} Приложение 2-1: код, который получает догадку от пользователя и выводит её на экран Этот код содержит много сведений, поэтому давайте рассмотрим его построчно. Чтобы получить пользовательский ввод и затем вывести результат, нам нужно включить в область видимости библиотеку ввода/вывода io. Библиотека io является частью встроенной библиотеки, известной как std: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:io}} По умолчанию в Rust есть набор элементов, определённых в встроенной библиотеке, которые он добавляет в область видимости каждой программы. Этот набор называется прелюдией , и вы можете изучить его содержание в документации встроенной библиотеки . Если вид, который требуется использовать, отсутствует в прелюдии, его нужно явно ввести в область видимости с помощью оператора use. Использование библиотеки std::io предоставляет ряд полезных функциональных возможностей, включая способность принимать пользовательский ввод. Как уже отмечалось в главе 1, функция main является точкой входа в программу: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:main}} Ключевое слово fn объявляет новую функцию, круглые скобки () показывают, что у функции нет входных свойств, фигурная скобка { - обозначение начала тела функции. Также в главе 1 упоминалось, что println! — это макрос, который выводит строку на экран: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print}} Этот код показывает сведения о ходе игры и запрашивает пользовательский ввод.","breadcrumbs":"Программирование игры в загадки » Обработка догадки","id":"33","title":"Обработка догадки"},"330":{"body":"До этой главы мы подробно обсуждали только использование шаблонов с match и if let, но на самом деле, мы использовали шаблоны и в других местах, в том числе в указаниях let. Например, рассмотрим следующее простое назначение переменной с помощью let: let x = 5; Каждый раз, когда вы использовали подобным образом указанию let, вы использовали шаблоны, хотя могли и не осознавать этого! Более формально указание let выглядит так: let PATTERN = EXPRESSION; В указаниях вида let x = 5; с именем переменной в слоте PATTERN, имя переменной является просто отдельной, простой формой шаблона. Rust сравнивает выражение с шаблоном и присваивает любые имена, которые он находит. Так что в примере let x = 5;, x - это шаблон, который означает \"привязать то, что соответствует здесь, переменной x\". Поскольку имя x является полностью шаблоном, этот шаблон фактически означает \"привязать все к переменной x независимо от значения\". Чтобы более чётко увидеть особенность сопоставления с шаблоном let, рассмотрим приложение 18-4, в котором используется шаблон с let для деструктурирования кортежа. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-04/src/main.rs:here}} Приложение 18-4. Использование шаблона для деструктуризации кортежа и создания трёх переменных одновременно Здесь мы сопоставляем кортеж с шаблоном. Rust сравнивает значение (1, 2, 3) с шаблоном (x, y, z) и видит, что значение соответствует шаблону, поэтому Rust связывает 1 с x, 2 с y и 3 с z. Вы можете думать об этом шаблоне кортежа как о вложении в него трёх отдельных шаблонов переменных. Если количество элементов в шаблоне не совпадает с количеством элементов в кортеже, то весь вид не будет совпадать и мы получим ошибку сборщика. Например, в приложении 18-5 показана попытка деструктурировать кортеж с тремя элементами в две переменные, что не будет работать. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-05/src/main.rs:here}} Приложение 18-5: Неправильное построение шаблона, переменные не соответствуют количеству элементов в кортеже Попытка собрать этот код приводит к ошибке: {{#include ../listings/ch18-patterns-and-matching/listing-18-05/output.txt}} Чтобы исправить ошибку, мы могли бы пренебрегать одно или несколько значений в кортеже, используя _ или .., как вы увидите в разделе “Пренебрежение значений в Шаблоне” . Если шаблон содержит слишком много переменных в шаблоне, можно решить проблему, сделав виды совпадающими, удалив некоторые переменные таким образом, чтобы число переменных равнялось числу элементов в кортеже.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Указание let","id":"330","title":"Указание let"},"331":{"body":"Свойства функции также могут быть шаблонами. Код в приложении 18-6 объявляет функцию с именем foo, которая принимает один свойство с именем x вида i32, к настоящему времени это должно выглядеть знакомым. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-06/src/main.rs:here}} Приложение 18-6: Сигнатура функции использует шаблоны в свойствах x это часть шаблона! Как и в случае с let, мы можем сопоставить кортеж в переменных функции с шаблоном. Приложение 18-7 разделяет значения в кортеже при его передачи в функцию. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-07/src/main.rs}} Приложение 18-7: Функция с свойствами, которая разрушает кортеж Этот код печатает Current location: (3, 5). Значения &(3, 5) соответствуют шаблону &(x, y), поэтому x - это значение 3, а y - это значение 5. Добавляя к вышесказанному, мы можем использовать шаблоны в списках свойств замыкания таким же образом, как и в списках свойств функции, потому что, как обсуждалось в главе 13, замыкания похожи на функции. На данный момент вы видели несколько способов использования шаблонов, но шаблоны работают не одинаково во всех местах, где их можно использовать. В некоторых местах шаблоны должны быть неопровержимыми; в других обстоятельствах они могут быть опровергнуты. Мы обсудим эти две концепции далее.","breadcrumbs":"Шаблоны и сопоставление » Все места, где могут использоваться шаблоны » Свойства функции","id":"331","title":"Свойства функции"},"332":{"body":"Шаблоны бывают двух форм: опровержимые и неопровержимые. Шаблоны, которые будут соответствовать любому возможному переданному значению, являются неопровержимыми (irrefutable). Примером может быть x в указания let x = 5;, потому что x соответствует чему-либо и, следовательно, не может не совпадать. Шаблоны, которые могут не соответствовать некоторому возможному значению, являются опровержимыми (refutable). Примером может быть Some(x) в выражении if let Some(x) = a_value, потому что если значение в переменной a_value равно None, а не Some, то шаблон Some(x) не будет совпадать. Свойства функций, указания let и циклы for могут принимать только неопровержимые шаблоны, поскольку программа не может сделать ничего значимого, если значения не совпадают. А выражения if let и while let принимают опровержимые и неопровержимые шаблоны, но сборщик предостерегает от неопровержимых шаблонов, поскольку по определению они предназначены для обработки возможного сбоя: функциональность условного выражения заключается в его способности выполнять разный код в зависимости от успеха или неудачи. В общем случае, вам не нужно беспокоиться о разнице между опровержимыми (refutable) и неопровержимыми (irrefutable) шаблонами; тем не менее, вам необходимо ознакомиться с концепцией возможности опровержения, чтобы вы могли отреагировать на неё, увидев в сообщении об ошибке. В таких случаях вам потребуется изменить либо шаблон, либо конструкцию, с которой вы используете шаблон, в зависимости от предполагаемого поведения кода. Давайте посмотрим на пример того, что происходит, когда мы пытаемся использовать опровержимый шаблон, где Rust требует неопровержимый шаблон, и наоборот. В приложении 18-8 показана указание let, но для образца мы указали Some(x), являющийся шаблоном, который можно опровергнуть. Как и следовало ожидать, этот код не будет собираться. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-08/src/main.rs:here}} Приложение 18-8: Попытка использовать опровержимый шаблон вместе с let Если some_option_value было бы значением None, то оно не соответствовало бы шаблону Some(x), что означает, что шаблон является опровержимым. Тем не менее, указание let может принимать только неопровержимый шаблон, потому что нет корректного кода, который может что-то сделать со значением None. Во время сборки Rust будет жаловаться на то, что мы пытались использовать опровержимый шаблон, для которого требуется неопровержимый шаблон: {{#include ../listings/ch18-patterns-and-matching/listing-18-08/output.txt}} Поскольку мы не покрыли (и не могли покрыть!) каждое допустимое значение с помощью образца Some(x), то Rust выдаёт ошибку сборки. Чтобы исправить проблему наличия опровержимого шаблона, там, где нужен неопровержимый шаблон, можно изменить код, использующий шаблон: вместо использования let, можно использовать if let. Затем, если шаблон не совпадает, выполнение кода внутри фигурных скобок будет пропущено, что даст возможность продолжить корректное выполнение. В приложении 18-9 показано, как исправить код из приложения 18-8. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-09/src/main.rs:here}} Приложение 18-9. Использование if let и раздела с опровергнутыми шаблонами вместо let Код исправлен! Этот код совершенно корректный, хотя это означает, что мы не можем использовать неопровержимый образец без получения ошибки. Если мы используем шаблон if let, который всегда будет совпадать, то для примера x, показанного в приложении 18-10, сборщик выдаст предупреждение. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-10/src/main.rs:here}} Приложение 18-10. Попытка использовать неопровержимый шаблон с if let Rust жалуется, что не имеет смысла использовать if let с неопровержимым образцом: {{#include ../listings/ch18-patterns-and-matching/listing-18-10/output.txt}} По этой причине совпадающие ветки выражений должны использовать опровержимые шаблоны, за исключением последнего, который должен сопоставлять любые оставшиеся значения с неопровержимым шаблоном. Rust позволяет нам использовать неопровержимый шаблон в match только с одной веткой, но этот синтаксис не особенно полезен и может быть заменён более простой указанием let. Теперь, когда вы знаете, где использовать шаблоны и разницу между опровержимыми и неопровержимыми шаблонами, давайте рассмотрим весь синтаксис, который мы можем использовать для создания шаблонов.","breadcrumbs":"Шаблоны и сопоставление » Опровержимость: может ли шаблон не соответствовать » Возможность опровержения: может ли шаблон не совпадать","id":"332","title":"Возможность опровержения: может ли шаблон не совпадать"},"333":{"body":"В этом разделе мы рассмотрим все виды допустимого синтаксиса в шаблонах и расскажем, когда и для чего вам может понадобиться каждый из них.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Синтаксис шаблонов","id":"333","title":"Синтаксис шаблонов"},"334":{"body":"Как мы уже видели в главе 6, можно сопоставлять шаблоны с литералами напрямую. В следующем коде есть несколько примеров: {{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-01-literals/src/main.rs:here}} Этот код печатает one, потому что значение в x равно 1. Данный синтаксис полезен, когда вы хотите, чтобы ваш код предпринял действие, если он получает определенное значение.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Сопоставление с литералом","id":"334","title":"Сопоставление с литералом"},"335":{"body":"Именованные переменные - это неопровержимые (irrefutable) шаблоны, которые соответствуют любому значению и мы использовали их много раз в книге. Однако при использовании именованных переменных в выражениях match возникает сложность. Поскольку match начинает новую область видимости, то переменные, объявленные как часть шаблона внутри выражения match, будут затенять переменные с тем же именем вне конструкции match как и в случае со всеми переменными. В приложении 18-11 мы объявляем переменную с именем x со значением Some(5) и переменную y со значением 10. Затем мы создаём выражение match для значения x. Посмотрите на шаблоны в ветках, println! в конце и попытайтесь выяснить, какой код будет напечатан прежде чем запускать его или читать дальше. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-11/src/main.rs:here}} Приложение 18-11: Выражение match с веткой, которая добавляет затенённую переменную y Давайте рассмотрим, что происходит, когда выполняется выражение match. Шаблон в первой ветке не соответствует определённому значению x, поэтому выполнение продолжается. Шаблон во второй ветке вводит новую переменную с именем y, которая будет соответствовать любому значению в Some. Поскольку мы находимся в новой области видимости внутри выражения match, это новая переменная y, а не y которую мы объявили в начале со значением 10. Эта новая привязка y будет соответствовать любому значению из Some, которое находится в x. Следовательно, эта новая y связывается с внутренним значением Some из переменной x. Этим значением является 5, поэтому выражение для этой ветки выполняется и печатает Matched, y = 5. Если бы x было значением None вместо Some(5), то шаблоны в первых двух ветках не совпали бы, поэтому значение соответствовало бы подчёркиванию. Мы не ввели переменную x в шаблоне ветки со знаком подчёркивания, поэтому x в выражении все ещё является внешней переменной x, которая не была затенена. В этом гипотетическом случае совпадение match выведет Default case, x = None. Когда выражение match завершается, заканчивается его область видимости как и область действия внутренней переменной y. Последний println! печатает at the end: x = Some(5), y = 10. Чтобы создать выражение match, которое сравнивает значения внешних x и y, вместо введения затенённой переменной нужно использовать условие в сопоставлении образца. Мы поговорим про условие в сопоставлении шаблона позже в разделе “Дополнительные условия в сопоставлении образца” .","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Сопоставление именованных переменных","id":"335","title":"Сопоставление именованных переменных"},"336":{"body":"В выражениях match можно сравнивать сразу с несколькими шаблонами, используя синтаксис |, который является оператором паттерна or . Например, в следующем примере мы сопоставляем значение x с ветвями match, первая из которых содержит оператор or , так что если значение x совпадёт с любым из значений в этой ветви, то будет выполнен её код: {{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-02-multiple-patterns/src/main.rs:here}} Будет напечатано one or two.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Группа шаблонов","id":"336","title":"Группа шаблонов"},"337":{"body":"Синтаксис ..= позволяет нам выполнять сравнение с рядом значений. В следующем коде, когда в шаблоне найдётся совпадение с любым из значений заданного ряда, будет выполнена эта ветка: {{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-03-ranges/src/main.rs:here}} Если x равен 1, 2, 3, 4 или 5, то совпадение будет достигнуто в первой ветке. Этот синтаксис более удобен при указании нескольких значений для сравнения, чем использование оператора | для определения этой же идеи; если бы мы решили использовать |, нам пришлось бы написать 1 | 2 | 3 | 4 | 5. Указание ряда намного короче, особенно если мы хотим подобрать, скажем, любое число от 1 до 1 000! Сборщик проверяет, что рядне является пустым во время сборки, и поскольку единственными видами, для которых Rust может определить, пуст рядили нет, являются char и числовые значения, ряды допускаются только с числовыми или char значениями. Вот пример использования рядов значений char: {{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-04-ranges-of-char/src/main.rs:here}} Rust может сообщить, что 'c' находится в ряде первого шаблона и напечатать early ASCII letter.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Сопоставление рядов с помощью ..=","id":"337","title":"Сопоставление рядов с помощью ..="},"338":{"body":"Мы также можем использовать шаблоны для деструктуризации структур, перечислений и кортежей, чтобы использовать разные части этих значений. Давайте пройдёмся по каждому варианту. Деструктуризация структуры В приложении 18-12 показана структура Point с двумя полями x и y, которые мы можем разделить, используя шаблон с указанием let. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-12/src/main.rs}} Приложение 18-12: Разбиение полей структуры в отдельные переменные Этот код создаёт переменные a и b , которые сопоставляются значениям полей x и y структуры p . Этот пример показывает, что имена переменных в шаблоне не обязательно должны совпадать с именами полей структуры. Однако обычно имена переменных сопоставляются с именами полей, чтобы было легче запомнить, какие переменные взяты из каких полей. Из-за этого, а также из-за того, что строчка let Point { x: x, y: y } = p; содержит много повторения, в Rust ввели особое сокращение для шаблонов, соответствующих полям структуры: вам нужно только указать имя поля структуры, и тогда переменные, созданные из шаблона, будут иметь те же имена. Код в приложении 18-13 подобен коду в Приложении 18-12, но в шаблоне let создаются переменные x и y, вместо a и b . Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-13/src/main.rs}} Приложение 18-13: Деструктуризация полей структуры с использованием сокращённой записи Этот код создаёт переменные x и y, которые соответствуют полям x и y из переменной p. В результате переменные x и y содержат значения из структуры p. А ещё, используя литеральные значения в шаблоне, мы можем деструктурировать, не создавая переменные для всех полей. Это даёт возможность, проверяя одни поля на соответствие определенным значениям, создавать переменные для деструктуризации других. В приложении 18-14 показано выражение match, которое разделяет значения Point на три случая: точки, которые лежат непосредственно на оси x (что верно, когда y = 0), на оси y (x = 0) или ни то, ни другое. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-14/src/main.rs:here}} Приложение 18-14: Деструктуризация и сопоставление с литералами в одном шаблоне Первая ветвь будет соответствовать любой точке, лежащей на оси x, если значение поля y будет соответствовать литералу 0. Шаблон по-прежнему создаёт переменную x, которую мы сможем использовать в коде этой ветви. Подобно, вторая ветвь совпадёт с любой точкой на оси y, в случае, если значение поля x будет равно 0, а для значения поля y будет создана переменная y. Третья ветвь не содержит никаких литералов, поэтому она соответствует любому другому Point и создаёт переменные как для поля x, так и для поля y. В этом примере значение p совпадает по второй ветке, так как x содержит значение 0, поэтому этот код будет печатать On the y axis at 7. Помните, что выражение match перестаёт проверять следующие ветви, как только оно находит первый совпадающий шаблон, поэтому, даже если Point { x: 0, y: 0} находится на оси x и оси y, этот код будет печатать только On the x axis at 0 . Деструктуризация перечислений Мы уже деструктурировали перечисления в книге (см., например, приложение 6-5 главы 6), ноне обсуждали явно, что шаблон для деструктуризации перечисления должен соответствовать способу объявления данных, хранящихся в перечислении. Например, в приложении 18-15 мы используем перечисление Message из приложения 6-2 и пишем match с шаблонами, которые будут деструктурировать каждое внутреннее значение. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-15/src/main.rs}} Приложение 18-15: Деструктуризация вариантов перечисления, содержащих разные виды значений Этот код напечатает Change the color to red 0, green 160, and blue 255. Попробуйте изменить значение переменной msg, чтобы увидеть выполнение кода в других ветках. Для вариантов перечисления без каких-либо данных, вроде Message::Quit, мы не можем деструктурировать значение, которого нет. Мы можем сопоставить только буквальное значение Message::Quit в этом шаблоне, но без переменных. Для вариантов перечисления похожих на структуры, таких как Message::Move, можно использовать шаблон, подобный шаблону, который мы указываем для сопоставления структур. После имени варианта мы помещаем фигурные скобки и затем перечисляем поля именами переменных. Таким образом мы разделяем фрагменты, которые будут использоваться в коде этой ветки. Здесь мы используем сокращённую форму, как в приложении 18-13. Для вариантов перечисления, подобных кортежу, вроде Message::Write, который содержит кортеж с одним элементом и Message::ChangeColor, содержащему кортеж с тремя элементами, шаблон подобен тому, который мы указываем для сопоставления кортежей. Количество переменных в шаблоне должно соответствовать количеству элементов в варианте, который мы сопоставляем. Деструктуризация вложенных структур и перечислений До сих пор все наши примеры сопоставляли структуры или перечисления на один уровень глубины, но сопоставление может работать и с вложенными элементами! Например, мы можем реорганизовать код в приложении 18-15 для поддержки цветов RGB и HSV в сообщении ChangeColor , как показано в приложении 18-16. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-16/src/main.rs}} Приложение 18-16: Сопоставление со вложенными перечислениями Шаблон первой ветки в выражении match соответствует варианту перечисления Message::ChangeColor, который содержит вариант Color::Rgb; затем шаблон привязывается к трём внутренними значениями i32. Шаблон второй ветки также соответствует варианту перечисления Message::ChangeColor, но внутреннее перечисление соответствует варианту Color::Hsv. Мы можем указать эти сложные условия в одном выражении match, даже если задействованы два перечисления. Деструктуризация структур и кортежей Можно смешивать, сопоставлять и вкладывать шаблоны деструктуризации ещё более сложными способами. В следующем примере показана сложная деструктуризация, где мы вкладываем структуры и кортежи внутрь кортежа и деструктурируем из него все примитивные значения: {{#rustdoc_include ../listings/ch18-patterns-and-matching/no-listing-05-destructuring-structs-and-tuples/src/main.rs:here}} Этот код позволяет нам разбивать сложные виды на составные части, чтобы мы могли использовать нужным нас значения по отдельности. Деструктуризация с помощью шаблонов - это удобный способ использования фрагментов значений, таких как как значение из каждого поля в структуре, по отдельности друг от друга.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Деструктуризация для получения значений","id":"338","title":"Деструктуризация для получения значений"},"339":{"body":"Вы видели, что иногда полезно пренебрегать значения в шаблоне, например в последней ветке match, чтобы получить ветку, обрабатывающую любые значения, которая на самом деле ничего не делает, но учитывает все оставшиеся возможные значения. Есть несколько способов пренебрегать целые значения или части значений в шаблоне: используя шаблон _ (который вы видели), используя шаблон _ внутри другого шаблона, используя имя, начинающееся с подчёркивания, либо используя .., чтобы пренебрегать оставшиеся части значения. Давайте рассмотрим, как и зачем использовать каждый из этих шаблонов. Пренебрежение всего значения с помощью шаблона _ Мы использовали подчёркивание (_) в качестве шаблона подстановочного знака (wildcard), который будет сопоставляться с любом значением, но не будет привязываться к этому значению. Это особенно удобно в последней ветке выражения match, но мы также можем использовать его в любом шаблоне, в том числе в свойствах функции, как показано в приложении 18-17. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-17/src/main.rs}} Приложение 18-15: Использование _ в сигнатуре функции Этот код полностью пренебрегает значение 3, переданное в качестве первого переменной, и выведет на печать This code only uses the y parameter: 4. В большинстве случаев, когда вам больше не нужен какой-то из свойств функции, вы можете изменить её сигнатуру, убрав неиспользуемый свойство. Пренебрежение свойства функции может быть особенно полезно в случаях когда, например, вы реализуете типаж с определённой сигнатурой, но тело функции в вашей реализации не нуждается в одном из свойств. В таком случае сборщик не будет выдавать предупреждения о неиспользуемых свойствах функции, как это было бы, если бы вы указали имя свойства. Пренебрежение частей значения с помощью вложенного _ Также, _ можно использовать внутри шаблонов, чтобы пренебрегать какую-то часть значения, например, когда мы хотим проверить только определённую подробность, а остальные свойства нам не понадобятся в коде, который нужно выполнить. В приложении 18-18 показан код, ответственный за управление значениями настроек. Согласно бизнес-требованиям, пользователь не может изменить установленное значение свойства, но может удалить его и задать ему новое значение, если на данный момент оно отсутствует. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-18/src/main.rs:here}} Приложение 18-18: Использование подчёркивания в шаблонах, соответствующих вариантам Some, когда нам не нужно использовать значение внутри Some Этот код будет печатать Can't overwrite an existing customized value, а затем setting is Some(5). В первой ветке нам не нужно сопоставлять или использовать значения внутри варианта Some, но нам нужно проверить случай, когда setting_value и new_setting_value являются вариантом Some. В этом случае мы печатаем причину, почему мы не меняем значение setting_value и оно не меняется. Во всех других случаях (если либо setting_value, либо new_setting_value являются вариантом None), выраженных шаблоном _ во второй ветке, мы хотим, чтобы new_setting_value стало равно setting_value. Мы также можем использовать подчёркивание в нескольких местах в одном шаблоне, чтобы пренебрегать определенные значения. Приложение 18-19 показывает пример пренебрежения второго и четвёртого значения в кортеже из пяти элементов. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-19/src/main.rs:here}} Приложение 18-19: Пренебрежение нескольких частей кортежа Этот код напечатает Some numbers: 2, 8, 32, а значения 4 и 16 будут пренебрежены. Пренебрежение неиспользуемой переменной, начинающейся с символа _ в имени Если вы создаёте переменную, но нигде её не используете, Rust обычно выдаёт предупреждение, потому что неиспользуемая переменная может быть ошибкой. Но иногда полезно создать переменную, которую вы пока не используете, например, когда вы создаёте протовид или только начинаете проект. В этой ситуации вы можете сказать Rust не предупреждать вас о неиспользуемой переменной, начав имя переменной с подчёркивания. В приложении 18-20 мы создаём две неиспользуемые переменные, но когда мы собираем такой код, мы должны получить предупреждение только об одной из них. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-20/src/main.rs}} Приложение 18-20: Начинаем имя переменной с подчёркивания, чтобы не получить предупреждения о неиспользованных переменных Здесь мы получаем предупреждение о том, что не используем переменную y, но мы не получаем предупреждения о неиспользовании переменной_x. Обратите внимание, что есть небольшая разница между использованием только _ и использованием имени, начинающегося с подчёркивания. Синтаксис _x по-прежнему привязывает значение к переменной, тогда как _ не привязывает ничего. В приложении 18-21 представлена ошибка, показывающая, в каком случае это различие имеет значение. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-21/src/main.rs:here}} Приложение 18-21: Неиспользуемая переменная, начинающаяся с подчёркивания, по-прежнему привязывает значение, что может привести к смене владельца значения Мы получим ошибку, поскольку значение s все равно будет перемещено в _s, что не позволит нам больше воспользоваться s. Однако использование подчёркивания само по себе никогда не приводит к привязке к значению. Приложение 18-22 ссобирается без ошибок, поскольку s не будет перемещён в _. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-22/src/main.rs:here}} Приложение 18-22. Использование подчёркивания не привязывает значение Этот код работает нормально, потому что мы никогда не привязываем s к чему либо; оно не перемещается. Пренебрежение оставшихся частей значения с помощью .. Со значениями, которые имеют много частей, можно использовать синтаксис .., чтобы использовать только некоторые части и пренебрегать остальные, избегая необходимости перечислять подчёркивания для каждого пренебрегаемого значения. Шаблон .. пренебрегает любые части значения, которые мы явно не сопоставили в остальной частью шаблона. В приложении 18-23 мы имеем структуру Point, которая содержит координату в трёхмерном пространстве. В выражении match мы хотим работать только с координатой x и пренебрегать значения полей y и z. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-23/src/main.rs:here}} Приложение 18-21: Пренебрежение полей структуры Point кроме поля x с помощью .. Мы перечисляем значение x и затем просто включаем шаблон ... Это быстрее, чем перечислять y: _ и z: _, особенно когда мы работаем со структурами, которые имеют много полей, в ситуациях, когда только одно или два поля представляют для нас влечение. Синтаксис .. раскроется до необходимого количества значений. В приложении 18-24 показано, как использовать .. с кортежем. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-24/src/main.rs}} Приложение 18-24: Сопоставление только первого и последнего значений в кортеже и пренебрежение всех других значений В этом коде первое и последнее значение соответствуют first и last. Конструкция .. будет соответствовать и пренебрегать всё, что находится между ними. Однако использование .. должно быть однозначным. Если неясно, какие значения предназначены для сопоставления, а какие следует пренебрегать, Rust выдаст ошибку. В приложении 18-25 показан пример неоднозначного использования .., поэтому он не будет собираться. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-25/src/main.rs}} Приложение 18-25: Попытка использовать .. неоднозначным способом При сборки примера, мы получаем эту ошибку: {{#include ../listings/ch18-patterns-and-matching/listing-18-25/output.txt}} Rust не может определить, сколько значений в кортеже нужно пренебрегать, прежде чем сопоставить значение с second, и сколько следующих значений пропренебрегать после этого. Этот код может означать, что мы хотим пренебрегать 2, связать second с 4, а затем пренебрегать 8, 16 и 32; или что мы хотим пренебрегать 2 и 4, связать second с 8, а затем пренебрегать 16 и 32; и так далее. Имя переменной second не означает ничего особенного для Rust, поэтому мы получаем ошибку сборщика, так как использование .. в двух местах как здесь, является неоднозначным.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Пренебрежение значений в шаблоне","id":"339","title":"Пренебрежение значений в шаблоне"},"34":{"body":"Далее мы создаём переменную для хранения пользовательского ввода, как показано ниже: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:string}} Вот теперь программа становится важнее! В этой маленькой строке на самом деле происходит очень многое. Для создания переменной мы используем оператор let. Вот ещё один пример: let apples = 5; Эта строка создаёт новую переменную с именем apples и привязывает её к значению 5. В Rust переменные неизменяемы по умолчанию, то есть как только мы присвоим переменной значение, оно не изменится. Мы подробно обсудим эту концепцию в разделе \"Переменные и изменчивость\". в главе 3. Чтобы сделать переменную изменяемой, мы добавляем mut перед её именем: let apples = 5; // неизменяемая\nlet mut bananas = 5; // изменяемая Примечание: сочетание знаков // начинает комментарий, который продолжается до конца строки. Rust пренебрегает всё, что находится в комментариях. Мы обсудим комментарии более подробно в Главе 3 . Возвращаясь к программе игры \"Угадайка\" — теперь вы знаете, что let mut guess предоставит изменяемую переменную с именем guess. Знак равенства (=) сообщает Rust, что сейчас нужно связать что-то с этой переменной. Справа от знака равенства находится значение, связанное с guess, которое является результатом вызова функции String::new, возвращающей новый экземпляр String. String — это вид строки, предоставляемый встроенной библиотекой, который является расширяемым фрагментом текста в кодировке UTF-8. Синтаксис :: в строке ::new указывает, что new является ассоциированной функцией вида String. Ассоциированная функция — это функция, реализованная для вида, в данном случае String. Функция new создаёт новую пустую строку. Функцию new можно встретить во многих видах, это привычное название для функции, которая создаёт новое значение какого-либо вида. В конечном итоге строка let mut guess = String::new(); создала изменяемую переменную, которая связывается с новым пустым экземпляром String. Фух!","breadcrumbs":"Программирование игры в загадки » Хранение значений с помощью переменных","id":"34","title":"Хранение значений с помощью переменных"},"340":{"body":"Условие сопоставления (match guard) является дополнительным условием if, указанным после шаблона в ветке match, которое также должно быть выполнено, чтобы ветка была выбрана. Условия сопоставления полезны для выражения более сложных идей, чем позволяет только шаблон. Условие может использовать переменные, созданные в шаблоне. В приложении 18-26 показан match, в котором первая ветка имеет шаблон Some(x), а также имеет условие сопоставления, if x % 2 == 0 (которое будет истинным, если число чётное). {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-26/src/main.rs:here}} Приложение 18-26: Добавление условия сопоставления в шаблон В этом примере будет напечатано The number 4 is even. Когда num сравнивается с шаблоном в первой ветке, он совпадает, потому что Some(4) соответствует Some(x). Затем условие сопоставления проверяет, равен ли 0 остаток от деления x на 2 и если это так, то выбирается первая ветка. Если бы num вместо этого было Some(5), условие в сопоставлении первой ветки было бы ложным, потому что остаток от 5 делённый на 2, равен 1, что не равно 0. Rust тогда перешёл бы ко второй ветке, которое совпадает, потому что вторая ветка не имеет условия сопоставления и, следовательно, соответствует любому варианту Some. Невозможно выразить условие if x % 2 == 0 внутри шаблона, поэтому условие в сопоставлении даёт нам возможность выразить эту логику. Недостатком этой дополнительной выразительности является то, что сборщик не пытается проверять полноту, когда задействованы выражения с условием в сопоставлении. В приложении 18-11 мы упомянули, что можно использовать условия сопоставления для решения нашей проблемы затенения шаблона. Напомним, что внутри шаблона в выражении match была создана новая переменная, вместо использования внешней к match переменной. Эта новая переменная означала, что мы не могли выполнить сравнение с помощью значения внешней переменной. В приложении 18-27 показано, как мы можем использовать условие сопоставления для решения этой проблемы. Файл: src/main.rs {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-27/src/main.rs}} Приложение 18-27. Использование условия сопоставления для проверки на равенство со значением внешней переменной Этот код теперь напечатает Default case, x = Some(5). Шаблон во второй ветке не вводит новую переменную y, которая будет затенять внешнюю y, это означает, что теперь можно использовать внешнюю переменную y в условии сопоставления. Вместо указания шаблона как Some(y), который бы затенял бы внешнюю y, мы указываем Some(n). Это создаёт новую переменную n, которая ничего не затеняет, так как переменной n нет вне конструкции match. Условие сопоставления if n == y не является шаблоном и следовательно, не вводит новые переменные. Переменная y и есть внешняя y, а не новая затенённая y, и теперь мы можем искать элемент, который будет иметь то же значение, что и внешняя y, путём сравнения n и y. Вы также можете использовать оператор или | в условии сопоставления, чтобы указать несколько шаблонов; условие сопоставления будет применяться ко всем шаблонам. В приложении 18-28 показан приоритет комбинирования условия сопоставления с шаблоном, который использует |. Важной частью этого примера является то, что условие сопоставления if y применяется к 4, 5, и к 6, хотя это может выглядеть как будто if y относится только к 6. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-28/src/main.rs:here}} Приложение 18-28: Комбинирование нескольких шаблонов с условием сопоставления Условие сопоставления гласит, что ветка совпадает, только если значение x равно 4, 5 или 6, и если y равно true. Когда этот код выполняется, шаблон первой ветки совпадает, потому что x равно 4, но условие сопоставления if y равно false, поэтому первая ветка не выбрана. Код переходит ко второй ветке, которая совпадает, и эта программа печатает no. Причина в том, что условие if применяется ко всему шаблону 4 | 5 | 6, а не только к последнему значению 6. Другими словами, приоритет условия сопоставления по отношению к шаблону ведёт себя так: (4 | 5 | 6) if y => ... а не так: 4 | 5 | (6 if y) => ... После запуска кода, старшинство в поведении становится очевидным: если условие сопоставления применялось бы только к конечному значению в списке, указанном с помощью оператора |, то ветка бы совпала и программа напечатала бы yes.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Дополнительные условия оператора сопоставления (Match Guards)","id":"340","title":"Дополнительные условия оператора сопоставления (Match Guards)"},"341":{"body":"Оператор at (@) позволяет создать переменную, которая содержит значение, одновременно с тем, как мы проверяем, соответствует ли это значение шаблону. В приложении 18-29 показан пример, в котором мы хотим проверить, что перечисление Message::Hello со значением поля id находится в ряде 3..=7. Но мы также хотим привязать такое значение к переменной id_variable, чтобы использовать его внутри кода данной ветки. Мы могли бы назвать эту переменную id, так же как поле, но для этого примера мы будем использовать другое имя. {{#rustdoc_include ../listings/ch18-patterns-and-matching/listing-18-29/src/main.rs:here}} Приложение 18-29: Использование @ для привязывания значения в шаблоне, с одновременной его проверкой В этом примере будет напечатано Found an id in range: 5. Указывая id_variable @ перед рядом 3..=7, мы захватываем любое значение, попадающее в ряд, одновременно проверяя, что это значение соответствует ряду в шаблоне. Во второй ветке, где у нас в шаблоне указан только ряд, код этой ветки не имеет переменной, которая содержит фактическое значение поля id. Значение поля id могло бы быть 10, 11 или 12, но код, соответствующий этому шаблону, не знает, чему оно равно. Код шаблона не может использовать значение из поля id, потому что мы не сохранили значение id в переменной. В последней ветке, где мы указали переменную без ряда, у нас есть значение, доступное для использования в коде ветки, в переменной с именем id. Причина в том, что мы использовали упрощённый синтаксис полей структуры. Но мы не применяли никакого сравнения со значением в поле id в этой ветке, как мы это делали в первых двух ветках: любое значение будет соответствовать этому шаблону. Использование @ позволяет проверять значение и сохранять его в переменной в пределах одного шаблона.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Связывание @","id":"341","title":"Связывание @"},"342":{"body":"Шаблоны Rust очень помогают различать разные виды данных. При использовании их в выражениях match, Rust заверяет, что ваши шаблоны охватывают все возможные значения, потому что иначе ваша программа не ссобирается. Шаблоны в указаниях let и свойствах функций делают такие конструкции более полезными, позволяя разбивать элементы на более мелкие части, одновременно присваивая их значения переменным. Мы можем создавать простые или сложные шаблоны в соответствии с нашими потребностями. Далее, в предпоследней главе книги, мы рассмотрим некоторые продвинутые особенности различных возможностей Rust.","breadcrumbs":"Шаблоны и сопоставление » Синтаксис шаблона » Итоги","id":"342","title":"Итоги"},"343":{"body":"На данный момент вы изучили все наиболее используемые части языка программирования Rust. Прежде чем мы выполним ещё один проект в главе 20, мы рассмотрим несколько особенностей языка, с которыми вы можете сталкиваться время от времени, но не использовать каждый день. Вы можете использовать эту главу в качестве справочника, когда столкнётесь с какими-либо незнакомыми вещами. Рассмотренные здесь функции будут полезны в очень отличительных ситуациях. Хотя вы, возможно, не будете часто пользоваться ими, мы хотим убедиться, что вы знаете все возможности языка Rust. В этой главе мы рассмотрим: Небезопасный Rust: как отказаться от некоторых заверений Rust и взять на себя ответственность за их ручное соблюдение Продвинутые типажи: ассоциированные виды, свойства вида по умолчанию, полностью квалифицированный синтаксис, супер-типажи и шаблон создания (newtype) по отношению к типажам Расширенные виды: больше о шаблоне newtype, псевдонимах вида, вид never и виды изменяемыхх размеров Расширенные функции и замыкания: указатели функций и возврат замыканий Макросы: способы определения кода, который определяет большую часть кода во время сборки Это набор возможностей Rust для всех! Давайте погрузимся в него!","breadcrumbs":"Расширенные возможности » Расширенные возможности","id":"343","title":"Расширенные возможности"},"344":{"body":"Во всех предыдущих главах этой книги мы обсуждали код на Rust, безопасность памяти в котором обеспечивается во время сборки. Однако внутри Rust скрывается другой язык - небезопасный Rust, который не обеспечивает безопасной работы с памятью. Этот язык называется unsafe Rust и работает также как и первый, но предоставляет вам дополнительные возможности. Небезопасный Rust существует потому что по своей природе статический анализ довольно консервативен. Когда сборщик пытается определить, соответствует ли код заверениям, то он скорее отвергнет несколько допустимых программ, чем пропустит несколько недопустимых. Не смотря на то, что код может быть в порядке, если сборщик Rust не будет располагать достаточной сведениями, чтобы убедиться в этом, он отвергнет код. В таких случаях вы можете использовать небезопасный код, чтобы сказать сборщику: \"Поверь мне, я знаю, что делаю\". Однако имейте в виду, что вы используете небезопасный Rust на свой страх и риск: если вы неправильно используете небезопасный код, могут возникнуть проблемы, связанные с нарушением безопасности памяти, например, разыменование нулевого указателя. Другая причина, по которой у Rust есть небезопасное альтер эго, заключается в том, что по существу аппаратное обеспечение компьютера небезопасно. Если Rust не позволял бы вам выполнять небезопасные действия, вы не могли бы выполнять определённые задачи. Rust должен позволить вам использовать системное, низкоуровневое программирование, такое как прямое взаимодействие с операционной системой, или даже написание вашей собственной операционной системы. Возможность написания низкоуровневого, системного кода является одной из целей языка. Давайте рассмотрим, что и как можно делать с небезопасным Rust.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Unsafe Rust","id":"344","title":"Unsafe Rust"},"345":{"body":"Чтобы переключиться на небезопасный Rust, используйте ключевое слово unsafe, а затем начните новый блок, содержащий небезопасный код. В небезопасном Rust можно выполнять пять действий, которые недоступны в безопасном Rust, которые мы называем небезопасными супер силами . Эти супер силы включают в себя следующее: Разыменование сырого указателя Вызов небезопасной функции или небезопасного способа Доступ или изменение изменяемой статической переменной Реализация небезопасного типажа Доступ к полям в union Важно понимать, что unsafe не отключает проверку заимствования или любые другие проверки безопасности Rust: если вы используете ссылку в небезопасном коде, она всё равно будет проверена. Единственное, что делает ключевое слово unsafe - даёт вам доступ к этим пяти возможностям, безопасность работы с памятью в которых не проверяет сборщик. Вы по-прежнему получаете некоторую степень безопасности внутри небезопасного раздела. Кроме того, unsafe не означает, что код внутри этого раздела является неизбежно опасным или он точно будет иметь проблемы с безопасностью памяти: цель состоит в том, что вы, как программист, заверяете, что код внутри раздела unsafe будет обращаться к действительной памяти корректным образом. Люди подвержены ошибкам и ошибки будут происходить, но требуя размещение этих четырёх небезопасных действия внутри разделов, помеченных как unsafe, вы будете знать, что любые ошибки, связанные с безопасностью памяти, будут находиться внутри unsafe разделов. Делайте unsafe разделы маленькими; вы будете благодарны себе за это позже, при исследовании ошибок с памятью. Чтобы максимально изолировать небезопасный код, советуется заключить небезопасный код в безопасную абстракцию и предоставить безопасный API, который мы обсудим позже, когда будем обсуждать небезопасные функции и способы. Части встроенной библиотеки реализованы как проверенные, безопасные абстракции над небезопасным кодом. Оборачивание небезопасного кода в безопасную абстракцию предотвращает возможную утечку использования unsafe кода во всех местах, где вы или ваши пользователи могли бы захотеть напрямую использовать функциональность, реализованную unsafe кодом, потому что использование безопасной абстракции само безопасно. Давайте поговорим о каждой из четырёх небезопасных сверх способностей, и по ходу дела рассмотрим некоторые абстракции, которые обеспечивают безопасный внешняя оболочка для небезопасного кода.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Небезопасные сверхспособности","id":"345","title":"Небезопасные сверхспособности"},"346":{"body":"В главе 4 раздела \"Недействительные ссылки\" мы упоминали, что сборщик заверяет, что ссылки всегда действительны. Небезопасный Rust имеет два новых вида, называемых сырыми указателями (raw pointers), которые похожи на ссылки. Как и в случае ссылок, сырые указатели могут быть неизменяемыми или изменяемыми и записываться как *const T и *mut T соответственно. Звёздочка не является оператором разыменования; это часть имени вида. В среде сырых указателей неизменяемый (immutable) означает, что указателю нельзя напрямую присвоить что-то после того как он разыменован. В отличие от ссылок и умных указателей, сырые указатели: могут пренебрегать правила заимствования и иметь неизменяемые и изменяемые указатели, или множество изменяемых указателей на одну и ту же область памяти не заверяют что ссылаются на действительную память могут быть null не реализуют самостоятельную очистку памяти Отказавшись от этих заверений, вы можете обменять безопасность на большую производительность или возможность взаимодействия с другим языком или оборудованием, где заверения Rust не применяются. В приложении 19-1 показано, как создать неизменяемый и изменяемый сырой указатель из ссылок. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-01/src/main.rs:here}} Приложение 19-1: Создание необработанных указателей из ссылок Обратите внимание, что мы не используем ключевое слово unsafe в этом коде. Можно создавать сырые указатели в безопасном коде; мы просто не можем разыменовывать сырые указатели за пределами небезопасного раздела, как вы увидите чуть позже. Мы создали сырые указатели, используя as для приведения неизменяемой и изменяемой ссылки к соответствующим им видам сырых указателей. Поскольку мы создали их непосредственно из ссылок, которые обязательно являются действительными, мы знаем, что эти определенные сырые указатели являются действительными, но мы не можем делать такое же предположение о любом сыром указателе. Чтобы отобразить это, создадим сырой указатель, в достоверности которого мы не можем быть так уверены. В приложении 19-2 показано, как создать необработанный указатель на произвольное место в памяти. Попытка использовать произвольную память является непредсказуемой: по этому адресу могут быть данные, а могут и не быть, сборщик может оптимизировать код так, что доступа к памяти не будет, или программа может завершиться с ошибкой сегментации. Обычно нет веских причин писать такой код, но это возможно. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-02/src/main.rs:here}} Приложение 19-2: Создание сырого указателя на произвольный адрес памяти Напомним, что можно создавать сырые указатели в безопасном коде, но нельзя разыменовывать сырые указатели и читать данные, на которые они указывают. В приложении 19-3 мы используем оператор разыменования * для сырого указателя, который требует unsafe раздела. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-03/src/main.rs:here}} Приложение 19-3: Разыменование сырых указателей в разделе unsafe Создание указателей безопасно. Только при попытке доступа к объекту по адресу в указателе мы можем получить недопустимое значение. Также обратите внимание, что в примерах кода 19-1 и 19-3 мы создали *const i32 и *mut i32, которые ссылаются на одну и ту же область памяти, где хранится num. Если мы попытаемся создать неизменяемую и изменяемую ссылку на num вместо сырых указателей, такой код не ссобирается, т.к. будут нарушены правила заимствования, запрещающие наличие изменяемой ссылки одновременно с неизменяемыми ссылками. С помощью сырых указателей мы можем создать изменяемый указатель и неизменяемый указатель на одну и ту же область памяти и изменять данные с помощью изменяемого указателя, потенциально создавая эффект гонки данных. Будьте осторожны! С учётом всех этих опасностей, зачем тогда использовать сырые указатели? Одним из основных применений является взаимодействие с кодом C, как вы увидите в следующем разделе \"Вызов небезопасной функции или способа\" . Другой случай это создание безопасных абстракций, которые не понимает анализатор заимствований. Мы введём понятие небезопасных функций и затем рассмотрим пример безопасной абстракции, которая использует небезопасный код.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Разыменование сырых указателей","id":"346","title":"Разыменование сырых указателей"},"347":{"body":"Второй вид действий, которые можно выполнять в небезопасном разделе - это вызов небезопасных функций. Небезопасные функции и способы выглядят точно так же, как обычные функции и способы, но перед остальным определением у них есть дополнительное unsafe. Ключевое слово unsafe в данном среде указывает на то, что к функции предъявляются требования, которые мы должны соблюдать при вызове этой функции, поскольку Rust не может обеспечить, что мы их выполняем. Вызывая небезопасную функцию внутри раздела unsafe, мы говорим, что прочитали документацию к этой функции и берём на себя ответственность за соблюдение её условий. Вот небезопасная функция с именем dangerous которая ничего не делает в своём теле: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-01-unsafe-fn/src/main.rs:here}} Мы должны вызвать функцию dangerous в отдельном unsafe разделе. Если мы попробуем вызвать dangerous без unsafe раздела, мы получим ошибку: {{#include ../listings/ch19-advanced-features/output-only-01-missing-unsafe/output.txt}} С помощью раздела unsafe мы сообщаем Rust, что прочитали документацию к функции, поняли, как правильно её использовать, и убедились, что выполняем контракт функции. Тела небезопасных функций являются фактически unsafe разделами, поэтому для выполнения других небезопасных действий внутри небезопасной функции не нужно добавлять ещё один unsafe блок. Создание безопасных абстракций вокруг небезопасного кода То, что функция содержит небезопасный код, не означает, что мы должны пометить всю функцию как небезопасную. На самом деле, обёртывание небезопасного кода в безопасную функцию - это обычная абстракция. В качестве примера рассмотрим функцию split_at_mut из встроенной библиотеки, которая требует некоторого небезопасного кода. Рассмотрим, как мы могли бы её реализовать. Этот безопасный способ определён для изменяемых срезов: он берет один срез и превращает его в два, разделяя срез по порядковому казателю, указанному в качестве переменной. В приложении 19-4 показано, как использовать split_at_mut. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-04/src/main.rs:here}} Приложение 19-4: Использование безопасной функции split_at_mut Эту функцию нельзя реализовать, используя только безопасный Rust. Попытка реализации могла бы выглядеть примерно как в приложении 19-5, который не собирается. Для простоты мы реализуем split_at_mut как функцию, а не как способ, и только для значений вида i32, а не обобщённого вида T. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-05/src/main.rs:here}} Приложение 19-5: Попытка реализации split_at_mut с использованием только безопасного Rust Эта функция сначала получает общую длину среза. Затем она проверяет (assert), что порядковый указатель, переданный в качестве свойства, находится в границах среза, сравнивая его с длиной. Assert означает, что если мы передадим порядковый указатель, который больше, чем длина среза, функция запаникует ещё до попытки использования этого порядкового указателя. Затем мы возвращаем два изменяемых фрагмента в кортеже: один от начала исходного фрагмента до mid порядкового казателя (не включая сам mid), а другой - от mid (включая сам mid) до конца фрагмента. При попытке собрать код в приложении 19-5, мы получим ошибку. {{#include ../listings/ch19-advanced-features/listing-19-05/output.txt}} Анализатор заимствований Rust не может понять, что мы заимствуем различные части среза, он понимает лишь, что мы хотим осуществить заимствование частей одного среза дважды. Заимствование различных частей среза в принципе нормально, потому что они не перекрываются, но Rust недостаточно умён, чтобы это понять. Когда мы знаем, что код верный, но Rust этого не понимает, значит пришло время прибегнуть к небезопасному коду. Приложение 19-6 отображает, как можно использовать unsafe блок, сырой указатель и вызовы небезопасных функций чтобы split_at_mut заработала: {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-06/src/main.rs:here}} Приложение 19-6. Использование небезопасного кода в реализации функции split_at_mut Напомним, из раздела \"Вид срез\" главы 4, что срезы состоят из указателя на некоторые данные и длины. Мы используем способ len для получения длины среза и способ as_mut_ptr для доступа к сырому указателю среза. Поскольку у нас есть изменяемый срез на значения вида i32, функция as_mut_ptr возвращает сырой указатель вида *mut i32, который мы сохранили в переменной ptr. Далее проверяем, что порядковый казательmid находится в границах среза. Затем мы обращаемся к небезопасному коду: функция slice::from_raw_parts_mut принимает сырой указатель, длину и создаёт срез. Мы используем эту функцию для создания среза, начинающегося с ptr и имеющего длину в mid элементов. Затем мы вызываем способ add у ptr с mid в качестве переменной, чтобы получить сырой указатель, который начинается с mid, и создаём срез, используя этот указатель и оставшееся количество элементов после mid в качестве длины. Функция slice::from_raw_parts_mut является небезопасной, потому что она принимает необработанный указатель и должна полагаться на то, что этот указатель действителен. Способ add для необработанных указателей также небезопасен, поскольку он должен считать, что местоположение смещения также является действительным указателем. Поэтому мы были вынуждены разместить unsafe разделвокруг наших вызовов slice::from_raw_parts_mut и add, чтобы иметь возможность вызвать их. Посмотрев на код и добавив утверждение, что mid должен быть меньше или равен len, мы можем сказать, что все необработанные указатели, используемые в разделе unsafe, будут корректными указателями на данные внутри среза. Это приемлемое и уместное использование unsafe. Обратите внимание, что нам не нужно помечать результирующую функцию split_at_mut как unsafe, и мы можем вызвать эту функцию из безопасного Rust. Мы создали безопасную абстракцию для небезопасного кода с помощью реализации функции, которая использует код unsafe раздела безопасным образом, поскольку она создаёт только допустимые указатели из данных, к которым эта функция имеет доступ. Напротив, использование slice::from_raw_parts_mut в приложении 19-7 приведёт к вероятному сбою при использовании среза. Этот код использует произвольный адрес памяти и создаёт срез из 10000 элементов. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-07/src/main.rs:here}} Приложение 19-7: Создание среза из произвольного адреса памяти Мы не владеем памятью в этом произвольном месте, и нет никакой заверения, что созданный этим кодом фрагмент содержит допустимые значения i32. Попытка использовать values так, как будто это допустимый срез, приводит к неопределённому поведению. Использование extern функций для вызова внешнего кода Иногда вашему коду на языке Rust может потребоваться взаимодействие с кодом, написанным на другом языке. Для этого в Rust есть ключевое слово extern, которое облегчает создание и использование внешней оболочки внешних функций (Foreign Function Interface - FFI) . FFI - это способ для языка программирования определить функции и позволить другому (внешнему) языку программирования вызывать эти функции. Приложение 19-8 отображает, как настроить встраивание с функцией abs из встроенной библиотеки C. Функции, объявленные внутри разделов extern, всегда небезопасны для вызова из кода Rust. Причина в том, что другие языки не обеспечивают соблюдение правил и заверений Rust, Rust также не может проверить заверения, поэтому ответственность за безопасность ложится на программиста. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-08/src/main.rs}} Приложение 19-8: Объявление и вызов extern функции, написанной на другом языке программирования Внутри раздела extern \"C\" мы перечисляем имена и сигнатуры внешних функций из другого языка, которые мы хотим вызвать. Часть \"C\" определяет какой application binary interface (ABI - двоичный внешняя оболочка приложений) использует внешняя функция. Внешнюю оболочку ABI определяет как вызвать функцию на уровне ассемблера. Использование ABI \"C\" является наиболее часто используемым и следует правилам ABI внешней оболочки языка Си. Вызов функций Rust из других языков Также можно использовать extern для создания внешней оболочки, позволяющего другим языкам вызывать функции Rust. Вместо того чтобы создавать целый разделextern, мы добавляем ключевое слово extern и указываем ABI для использования непосредственно перед ключевым словом fn для необходимой функции. Нам также нужно добавить изложение #[no_mangle], чтобы сказать сборщику Rust не искажать имя этой функции. Искажение - это когда сборщик меняет имя, которое мы дали функции, на другое имя, которое содержит больше сведений для других частей процесса сборки, но менее читабельно для человека. Сборщик каждого языка программирования искажает имена по-разному, поэтому, чтобы функция Rust могла быть использована другими языками, мы должны отключить искажение имён в сборщике Rust. В следующем примере мы делаем функцию call_from_c доступной из кода на C, после того как она будет собрана в разделяемую библиотеку и прилинкована с C: #[no_mangle]\npub extern \"C\" fn call_from_c() { println!(\"Just called a Rust function from C!\");\n} Такое использование extern не требует unsafe.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Вызов небезопасной функции или способа","id":"347","title":"Вызов небезопасной функции или способа"},"348":{"body":"В этой книге мы ещё не говорили о вездесущих переменных , которые Rust поддерживает, но с которыми могут возникнуть проблемы из-за действующих в Rust правил владения. Если два потока обращаются к одной и той же изменяемой вездесущей переменной, это может привести к гонке данных. Вездесущие переменные в Rust называют статическими (static). Приложение 19-9 отображает пример объявления и использования в качестве значения статической переменной, имеющей вид строкового среза: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-09/src/main.rs}} Приложение 19-9: Определение и использование неизменяемой статической переменной Статические переменные похожи на константы, которые мы обсуждали в разделе “Различия между переменными и константами” главы 3. Имена статических переменных по общему соглашению пишутся в нотации SCREAMING_SNAKE_CASE, и мы должны указывать вид переменной, которым в данном случае является &'static str. Статические переменные могут хранить только ссылки со временем жизни 'static, это означает что сборщик Rust может вывести время жизни и нам не нужно прописывать его явно. Доступ к неизменяемой статической переменной является безопасным. Тонкое различие между константами и неизменяемыми статическими переменными заключается в том, что значения в статической переменной имеют фиксированный адрес в памяти. При использовании значения всегда будут доступны одни и те же данные. Константы, с другой стороны, могут повторять свои данные при каждом использовании. Ещё одно отличие заключается в том, что статические переменные могут быть изменяемыми. Обращение к изменяемым статическим переменным и их изменение является небезопасным . В приложении 19-10 показано, как объявить, получить доступ и модифицировать изменяемую статическую переменную с именем COUNTER. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-10/src/main.rs}} Приложение 19-10: Чтение из изменяемой статической переменной или запись в неё небезопасны Как и с обычными переменными, мы определяем изменяемость с помощью ключевого слова mut. Любой код, который читает из или пишет в переменную COUNTER должен находиться в unsafe разделе. Этот код собирается и печатает COUNTER: 3, как и следовало ожидать, потому что выполняется в одном потоке. Наличие нескольких потоков с доступом к COUNTER приведёт к ситуации гонки данных. Наличие изменяемых данных, которые доступны вездесуще, делает трудным реализацию заверения отсутствия гонок данных, поэтому Rust считает изменяемые статические переменные небезопасными. Там, где это возможно, предпочтительно использовать техники многопоточности и умные указатели, ориентированные на многопоточное исполнение, которые мы обсуждали в главе 16. Таким образом, сборщик сможет проверить, что обращение к данным, доступным из разных потоков, выполняется безопасно.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Получение доступа и внесение изменений в изменяемую статическую переменную","id":"348","title":"Получение доступа и внесение изменений в изменяемую статическую переменную"},"349":{"body":"Мы можем использовать unsafe для реализации небезопасного трейта. Трейт является небезопасным, если хотя бы один из его способов имеет некоторый инвариант, который сборщик не может проверить. Мы объявляем трейты unsafe, добавляя ключевое слово unsafe перед trait и помечая реализацию трейта как unsafe, как показано в приложении 19-11. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-11/src/main.rs}} Приложение 19-11: Определение и реализация небезопасного трейта Используя unsafe impl, мы даём обещание поддерживать инварианты, которые сборщик не может проверить. Для примера вспомним маркерные типажи Sync и Send, которые мы обсуждали в разделе \"Расширяемый параллелизм с помощью типажей Sync и Send\" главы 16: сборщик реализует эти типажи самостоятельно , если наши виды полностью состоят из видов Send и Sync. Если мы создадим вид, который содержит вид, не являющийся Send или Sync, такой, как сырой указатель, и мы хотим пометить этот вид как Send или Sync, мы должны использовать unsafe блок. Rust не может проверить, что наш вид поддерживает заверения того, что он может быть безопасно передан между потоками или доступен из нескольких потоков; поэтому нам нужно добавить эти проверки вручную и указать это с помощью unsafe.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Реализация небезопасных типажей","id":"349","title":"Реализация небезопасных типажей"},"35":{"body":"Напомним: мы подключили функциональность ввода/вывода из встроенной библиотеки с помощью use std::io; в первой строке программы. Теперь мы вызовем функцию stdin из модуля io, которая позволит нам обрабатывать пользовательский ввод: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:read}} Если бы мы не импортировали библиотеку io с помощью use std::io в начале программы, мы все равно могли бы использовать эту функцию, записав её вызов как std::io::stdin. Функция stdin возвращает экземпляр std::io::Stdin , который является видом, представляющим дескриптор принятого ввода для вашего окна вызова. Далее строка .read_line(&mut guess) вызывает способ read_line на дескрипторе принятого ввода для получения ввода от пользователя. Мы также передаём &mut guess в качестве переменной read_line, сообщая ему, в какой строке хранить пользовательский ввод. Главная задача read_line — принять все, что пользователь вводит в стандартный ввод, и сложить это в строку (не переписывая её содержимое), поэтому мы передаём эту строку в качестве переменной. Строковый переменная должен быть изменяемым, чтобы способ мог изменить содержимое строки. Символ & указывает, что этот переменная является ссылкой , которая предоставляет возможность нескольким частям вашего кода получить доступ к одному фрагменту данных без необходимости копировать эти данные в память несколько раз. Ссылки — это сложная функциональная возможность, а одним из главных преимуществ Rust является безопасность и простота использования ссылок. Чтобы дописать эту программу, вам не понадобится знать много таких подробностей. Пока вам достаточно знать, что ссылки, как и переменные, по умолчанию неизменяемы. Соответственно, чтобы сделать её изменяемой, нужно написать &mut guess, а не &guess. (В главе 4 ссылки будут описаны более подробно).","breadcrumbs":"Программирование игры в загадки » Получение пользовательского ввода","id":"35","title":"Получение пользовательского ввода"},"350":{"body":"Последнее действие, которое работает только с unsafe - это доступ к полям union . union похож на struct, но в каждом определенном экземпляре одновременно может использоваться только одно объявленное поле. Объединения в основном используются для взаимодействия с объединениями в коде на языке Си. Доступ к полям объединений небезопасен, поскольку Rust не может обязательно определить вид данных, которые в данный момент хранятся в экземпляре объединения. Подробнее об объединениях вы можете узнать в the Rust Reference .","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Доступ к полям объединений (union)","id":"350","title":"Доступ к полям объединений (union)"},"351":{"body":"Использование unsafe для выполнения одного из пяти действий (супер способностей), которые только что обсуждались, не является ошибочным или не одобренным. Но получить корректный unsafe код сложнее, потому что сборщик не может помочь в обеспечении безопасности памяти. Если у вас есть причина использовать unsafe код, вы можете делать это, а наличие явной unsafe изложении облегчает отслеживание источника проблем, если они возникают.","breadcrumbs":"Расширенные возможности » Небезопасный код в Rust » Когда использовать небезопасный код","id":"351","title":"Когда использовать небезопасный код"},"352":{"body":"Мы познакомились с трейтами в разделе \"Трейты: Определение общего поведения\" в главе 10, но там мы не обсуждали более сложные подробности. Теперь, когда вы больше знаете о Rust, мы можем перейти к более подробному рассмотрению.","breadcrumbs":"Расширенные возможности » Продвинутые типажи » Продвинутые типажи","id":"352","title":"Продвинутые типажи"},"353":{"body":"Ассоциированные виды связывают вид-заполнитель с типажом таким образом, что определения способов типажа могут использовать эти виды-заполнители в своих сигнатурах. Для именно реализации типажа вместо типа-заполнителя указывается определенный вид, который будет использоваться. Таким образом, мы можем определить типажи, использующие некоторые виды, без необходимости точно знать, что это за виды, пока типажи не будут реализованы. Мы назвали большинство продвинутых возможностей в этой главе редко востребованными. Ассоциированные виды находятся где-то посередине: они используются реже чем возможности описанные в остальной части книги, но чаще чем многие другие возможности обсуждаемые в этой главе. Одним из примеров трейта с ассоциированным видом является типаж Iterator из встроенной библиотеки. Ассоциированный вид называется Item и символизирует вид значений, по которым повторяется вид, реализующий типаж Iterator. Определение трейта Iterator показано в приложении 19-12. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-12/src/lib.rs}} Приложение 19-12: Определение трейта Iterator, который имеет ассоциированный вид Item Вид Item является заполнителем и определение способа next показывает, что он будет возвращать значения вида Option<Self::Item>. Разработчики типажа Iterator определят определенный вид для Item, а способ next вернёт Option содержащий значение этого определенного вида. Ассоциированные виды могут показаться концепцией похожей на обобщения, поскольку последние позволяют нам определять функцию, не указывая, какие виды она может обрабатывать. Чтобы изучить разницу между этими двумя концепциями, мы рассмотрим реализацию типажа Iterator для вида с именем Counter, который указывает, что вид Item равен u32: Файл: src/lib.rs {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-22-iterator-on-counter/src/lib.rs:ch19}} Этот синтаксис весьма напоминает обобщённые виды. Так почему же типаж Iterator не определён обобщённым видом, как показано в приложении 19-13? {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-13/src/lib.rs}} Приложение 19-13: Гипотетическое определение типажа Iterator используя обобщённые виды Разница в том, что при использовании обобщений, как показано в приложении 19-13, мы должны аннотировать виды в каждой реализации; потому что мы также можем реализовать Iterator<String> for Counter или любого другого вида, мы могли бы иметь несколько реализации Iterator для Counter. Другими словами, когда типаж имеет обобщённый свойство, он может быть реализован для вида несколько раз, каждый раз меняя определенные виды свойств обобщённого вида. Когда мы используем способ next у Counter, нам пришлось бы предоставить изложении вида, указывая какую реализацию Iterator мы хотим использовать. С ассоциированными видами не нужно аннотировать виды, потому что мы не можем реализовать типаж у вида несколько раз. В приложении 19-12 с определением, использующим ассоциированные виды можно выбрать только один вид Item, потому что может быть только одно объявление impl Iterator for Counter. Нам не нужно указывать, что нужен повторительзначений вида u32 везде, где мы вызываем next у Counter. Ассоциированные виды также становятся частью контракта типажа: разработчики типажа должны предоставить вид, который заменит ассоциированный заполнитель вида. Связанные виды часто имеют имя, описывающее то, как будет использоваться вид, и хорошей практикой является документирование связанного вида в документации по API.","breadcrumbs":"Расширенные возможности » Продвинутые типажи » Указание видов-заполнителей в определениях трейтов с ассоциированными видами","id":"353","title":"Указание видов-заполнителей в определениях трейтов с ассоциированными видами"},"354":{"body":"Когда мы используем свойства обобщённого вида, мы можем указать определенный вид по умолчанию для обобщённого вида. Это устраняет необходимость разработчикам указывать определенный вид, если работает вид по умолчанию. Вид по умолчанию указывается при объявлении обобщённого вида с помощью синтаксиса <PlaceholderType=ConcreteType>. Отличным примером, когда этот способ полезен, является перегрузка оператора (operator overloading), когда вы настраиваете поведение оператора (например, + ) для определённых ситуаций. Rust не позволяет создавать собственные операторы или перегружать произвольные операторы. Но можно перегрузить перечисленные действия и соответствующие им типажи из std::ops путём реализации типажей, связанных с этими операторами. Например, в приложении 19-14 мы перегружаем оператор +, чтобы складывать два экземпляра Point. Мы делаем это реализуя типаж Add для структуры Point: Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-14/src/main.rs}} Приложение 19-14: Реализация типажа Add для перегрузки оператора + для экземпляров Point Способ add складывает значения x двух экземпляров Point и значения y у Point для создания нового экземпляра Point. Типаж Add имеет ассоциированный вид с именем Output, который определяет вид, возвращаемый из способа add. Обобщённый вид по умолчанию в этом коде находится в типаже Add . Вот его определение: trait Add<Rhs = Self> { type Output; fn add(self, rhs: Rhs) -> Self::Output;\n} Этот код должен выглядеть знакомым: типаж с одним способом и ассоциированным видом. Новый синтаксис это RHS=Self. Такой синтаксис называется свойства вида по умолчанию (default type parameters). Свойство обобщённого вида RHS (сокращённо “right hand side”) определяет вид свойства rhs в способе add. Если мы не укажем определенный вид для RHS при реализации типажа Add, то видом для RHS по умолчанию будет Self, который будет видом для которого реализуется типаж Add. Когда мы реализовали Add для структуры Point, мы использовали стандартное значение для RHS, потому что хотели сложить два экземпляра Point. Давайте посмотрим на пример реализации типажа Add, где мы хотим пользовательский вид RHS вместо использования вида по умолчанию. У нас есть две разные структуры Millimeters и Meters, хранящие значения в разных единицах измерения. Это тонкое обёртывание существующего вида в другую структуру известно как шаблон newtype , который мы более подробно опишем в разделе \"Шаблон Newtype для реализация внешних типажей у внешних видов\" . Мы хотим добавить значения в миллиметрах к значениям в метрах и хотим иметь реализацию типажа Add, которая делает правильное преобразование единиц. Можно реализовать Add для Millimeters с видом Meters в качестве Rhs, как показано в приложении 19-15. Файл: src/lib.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-15/src/lib.rs}} Приложение 19-15: Реализация типажа Add для структуры Millimeters, чтобы складывать Millimeters и Meters Чтобы сложить Millimeters и Meters, мы указываем impl Add<Meters>, чтобы указать значение свойства вида RHS (Meters) вместо использования значения по умолчанию Self (Millimeters). Свойства вида по умолчанию используются в двух основных случаях: Чтобы расширить вид без внесения изменений ломающих существующий код Чтобы позволить пользовательское поведение в особых случаях, которые не нужны большинству пользователей Типаж Add из встроенной библиотеки является примером второй цели: обычно вы складываете два одинаковых вида, но типаж Add позволяет сделать больше. Использование свойства вида по умолчанию в объявлении типажа Add означает, что не нужно указывать дополнительный свойство большую часть времени. Другими словами, большая часть кода реализации не нужна, что делает использование типажа проще. Первая цель похожа на вторую, но используется наоборот: если вы хотите добавить свойство вида к существующему типажу, можно дать ему значение по умолчанию, чтобы разрешить расширение функциональности типажа без нарушения кода существующей реализации.","breadcrumbs":"Расширенные возможности » Продвинутые типажи » Свойства обобщённого вида по умолчанию и перегрузка операторов","id":"354","title":"Свойства обобщённого вида по умолчанию и перегрузка операторов"},"355":{"body":"В Rust ничего не мешает типажу иметь способ с одинаковым именем, таким же как способ другого типажа и Rust не мешает реализовывать оба таких типажа у одного вида. Также возможно реализовать способ с таким же именем непосредственно у вида, такой как и способы у типажей. При вызове способов с одинаковыми именами в Rust нужно указать, какой из трёх возможных вы хотите использовать. Рассмотрим код в приложении 19-16, где мы определили два типажа: Pilot и Wizard, у обоих есть способ fly. Затем мы реализуем оба типажа у вида Human в котором уже реализован способ с именем fly. Каждый способ fly делает что-то своё. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-16/src/main.rs:here}} Приложение 19-16: Два типажа определены с способом fly и реализованы у вида Human, а также способ fly реализован непосредственно у Human Когда мы вызываем fly у экземпляра Human, то сборщик по умолчанию вызывает способ, который непосредственно реализован для вида, как показано в приложении 19-17. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-17/src/main.rs:here}} Приложение 19-17: Вызов fly у экземпляра Human Запуск этого кода напечатает *waving arms furiously* , показывая, что Rust называется способ fly реализованный непосредственно у Human. Чтобы вызвать способы fly у типажа Pilot или типажа Wizard нужно использовать более явный синтаксис, указывая какой способ fly мы имеем в виду. Приложение 19-18 отображает такой синтаксис. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-18/src/main.rs:here}} Приложение 19-18: Указание какой способа fly мы хотим вызвать Указание имени типажа перед именем способа проясняет сборщику Rust, какую именно реализацию fly мы хотим вызвать. Мы могли бы также написать Human::fly(&person), что эквивалентно используемому нами person.fly() в приложении 19-18, но это писание немного длиннее, когда нужна неоднозначность. Выполнение этого кода выводит следующее: {{#include ../listings/ch19-advanced-features/listing-19-18/output.txt}} Поскольку способ fly принимает свойство self, если у нас было два вида оба реализующих один типаж , то Rust может понять, какую реализацию типажа использовать в зависимости от вида self. Однако, ассоциированные функции, не являющиеся способами, не имеют свойства self. Когда существует несколько видов или типажей, определяющих функции, не являющиеся способами, с одним и тем же именем функции, Rust не всегда знает, какой вид вы имеете в виду, если только вы не используете полный синтаксис . Например, в приложении 19-19 мы создаём типаж для приюта животных, который хочет назвать всех маленьких собак Spot . Мы создаём типаж Animal со связанной с ним функцией baby_name, не являющейся способом. Типаж Animal реализован для структуры Dog, для которой мы также напрямую предоставляем связанную функцию baby_name, не являющуюся способом. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-19/src/main.rs}} Приложение 19-19: Типаж с ассоциированной функцией и вид с ассоциированной функцией с тем же именем, которая тоже реализует типаж Мы реализовали код для приюта для животных, который хочет назвать всех щенков именем Spot, в ассоциированной функции baby_name, которая определена для Dog. Вид Dog также реализует типаж Animal, который описывает характеристики, которые есть у всех животных. Маленьких собак называют щенками, и это выражается в реализации Animal у Dog в функции baby_name ассоциированной с типажом Animal. В main мы вызываем функцию Dog::baby_name, которая вызывает ассоциированную функцию определённую напрямую у Dog. Этот код печатает следующее: {{#include ../listings/ch19-advanced-features/listing-19-19/output.txt}} Этот вывод не является тем, что мы хотели бы получить. Мы хотим вызвать функцию baby_name, которая является частью типажа Animal реализованного у Dog, так чтобы код печатал A baby dog is called a puppy. Техника указания имени типажа использованная в приложении 19-18 здесь не помогает; если мы изменим main код как в приложении 19-20, мы получим ошибку сборки. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-20/src/main.rs:here}} Приложение 19-20. Попытка вызвать функцию baby_name из типажа Animal, но Rust не знает какую реализацию использовать Поскольку Animal::baby_name не имеет свойства self, и могут быть другие виды, реализующие типаж Animal, Rust не может понять, какую реализацию Animal::baby_name мы хотим использовать. Мы получим эту ошибку сборщика: {{#include ../listings/ch19-advanced-features/listing-19-20/output.txt}} Чтобы устранить неоднозначность и сказать Rust, что мы хотим использовать реализацию Animal для Dog, нужно использовать полный синтаксис. Приложение 19-21 отображает, как использовать полный синтаксис. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-21/src/main.rs:here}} Приложение 19-21: Использование полного синтаксиса для указания, что мы мы хотим вызвать функцию baby_name у типажа Animal реализованную в Dog Мы указываем изложение вида в угловых скобках, которая указывает на то что мы хотим вызвать способ baby_name из типажа Animal реализованный в Dog, также указывая что мы хотим рассматривать вид Dog в качестве Animal для вызова этой функции. Этот код теперь напечатает то, что мы хотим: {{#include ../listings/ch19-advanced-features/listing-19-21/output.txt}} В общем, полный синтаксис определяется следующим образом: <Type as Trait>::function(receiver_if_method, next_arg, ...); Для ассоциированных функций, которые не являются способами, будет отсутствовать receiver (объект приёмника): будет только список переменных. Вы можете использовать полный синтаксис везде, где вызываете функции или способы. Тем не менее, разрешается опустить любую часть этого синтаксиса, которую Rust может понять из другой сведений в программе. Вам нужно использовать более подробный синтаксис только в тех случаях, когда существует несколько реализаций, использующих одно и то же название, и Rust нужно помочь определить, какую реализацию вы хотите вызвать.","breadcrumbs":"Расширенные возможности » Продвинутые типажи » Полностью квалифицированный синтаксис для устранения неоднозначности: вызов способов с одинаковым именем","id":"355","title":"Полностью квалифицированный синтаксис для устранения неоднозначности: вызов способов с одинаковым именем"},"356":{"body":"Иногда вы можете написать определение типажа, которое зависит от другого типажа: для вида, реализующего первый типаж, вы хотите потребовать, чтобы этот вид также реализовал второй типаж. Вы должны сделать это, чтобы ваше определение типажа могло использовать связанные элементы второго типажа. Типаж, на который опирается ваше определение типажа, называется supertrait вашего типажа. Например, мы хотим создать типаж OutlinePrint с способом outline_print, который будет печатать значение обрамлённое звёздочками. Мы хотим чтобы структура Point, реализующая типаж встроенной библиотеки Display, вывела на печать (x, y) при вызове outline_print у экземпляра Point, который имеет значение 1 для x и значение 3 для y. Она должна напечатать следующее: **********\n* *\n* (1, 3) *\n* *\n********** В реализации outline_print мы хотим использовать функциональность типажа Display. Поэтому нам нужно указать, что типаж OutlinePrint будет работать только для видов, которые также реализуют Display и предоставляют функциональность, которая нужна в OutlinePrint. Мы можем сделать это в объявлении типажа, указав OutlinePrint: Display. Этот способ похож на добавление ограничения в типаж. В приложении 19-22 показана реализация типажа OutlinePrint. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-22/src/main.rs:here}} Приложение 19-22: Реализация типажа OutlinePrint которая требует функциональности типажа Display Поскольку мы указали, что типаж OutlinePrint требует типажа Display, мы можем использовать функцию to_string, которая самостоятельно реализована для любого вида реализующего Display. Если бы мы попытались использовать to_string не добавляя двоеточие и не указывая типаж Display после имени типажа, мы получили бы сообщение о том, что способ с именем to_string не был найден у вида &Self в текущей области видимости. Давайте посмотрим что происходит, если мы пытаемся реализовать типаж OutlinePrint для вида, который не реализует Display, например структура Point: Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-02-impl-outlineprint-for-point/src/main.rs:here}} Мы получаем сообщение о том, что требуется реализация Display, но её нет: {{#include ../listings/ch19-advanced-features/no-listing-02-impl-outlineprint-for-point/output.txt}} Чтобы исправить, мы реализуем Display у структуры Point и выполняем требуемое ограничение OutlinePrint, вот так: Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-03-impl-display-for-point/src/main.rs:here}} Тогда реализация типажа OutlinePrint для структуры Point будет собрана успешно и мы можем вызвать outline_print у экземпляра Point для отображения значения обрамлённое звёздочками.","breadcrumbs":"Расширенные возможности » Продвинутые типажи » Использование супер типажей для требования функциональности одного типажа в рамках другого типажа","id":"356","title":"Использование супер типажей для требования функциональности одного типажа в рамках другого типажа"},"357":{"body":"В разделе \"Реализация типажа у типа\" главы 10, мы упоминали \"правило сироты\" (orphan rule), которое гласит, что разрешается реализовать типаж у вида, если либо типаж, либо вид являются местными для нашего крейта. Можно обойти это ограничение, используя шаблон нового вида (newtype pattern), который включает в себя создание нового вида в кортежной структуре. (Мы рассмотрели кортежные структуры в разделе \"Использование структур кортежей без именованных полей для создания различных видов\" главы 5.) Структура кортежа будет иметь одно поле и будет тонкой оболочкой для вида которому мы хотим реализовать типаж. Тогда вид оболочки является местным для нашего крейта и мы можем реализовать типаж для местной обёртки. Newtype это термин, который происходит от языка программирования Haskell. В нем нет ухудшения производительности времени выполнения при использовании этого шаблона и вид оболочки исключается во время сборки. В качестве примера, мы хотим реализовать типаж Display для вида Vec<T>, где \"правило сироты\" (orphan rule) не позволяет нам этого делать напрямую, потому что типаж Display и вид Vec<T> объявлены вне нашего крейта. Мы можем сделать структуру Wrapper, которая содержит экземпляр Vec<T>; тогда мы можем реализовать Display у структуры Wrapper и использовать значение Vec<T> как показано в приложении 19-23. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-23/src/main.rs}} Приложение 19-23. Создание вида Wrapper Vec<String> для реализации Display Реализация Display использует self.0 для доступа к внутреннему Vec<T>, потому что Wrapper это структура кортежа, а Vec<T> это элемент с порядковым казателем 0 в кортеже. Затем мы можем использовать функциональные возможности вида Display у Wrapper. Недостатком использования этой техники является то, что Wrapper является новым видом, поэтому он не имеет способов для значения, которое он держит в себе. Мы должны были бы реализовать все способы для Vec<T> непосредственно во Wrapper, так чтобы эти способы делегировались внутреннему self.0, что позволило бы нам обращаться с Wrapper точно так же, как с Vec<T>. Если бы мы хотели, чтобы новый вид имел каждый способ имеющийся у внутреннего вида, реализуя типаж Deref (обсуждается в разделе \"Работа с умными указателями как с обычными ссылками с помощью Deref типажа\" главы 15) у Wrapper для возвращения внутреннего вида, то это было бы решением. Если мы не хотим, чтобы вид Wrapper имел все способы внутреннего вида, например, для ограничения поведения вида Wrapper, то пришлось бы вручную реализовать только те способы, которые нам нужны. Этот шаблон newtype также полезен, даже когда типажи не задействованы. Давайте переключим внимание и рассмотрим некоторые продвинутые способы взаимодействия с системой видов Rust.","breadcrumbs":"Расширенные возможности » Продвинутые типажи » Шаблон Newtype для реализация внешних типажей у внешних видов","id":"357","title":"Шаблон Newtype для реализация внешних типажей у внешних видов"},"358":{"body":"Система видов Rust имеет некоторые особенности, о которых мы уже упоминали, но ещё не обсуждали. Мы начнём с общего обзора newtypes, а затем разберёмся, чем они могут пригодиться в качестве видов. Далее мы перейдём к псевдонимам видов - возможности, похожей на newtypes, но с несколько иной семантикой. Мы также обсудим вид ! и виды с изменяемым размером.","breadcrumbs":"Расширенные возможности » Продвинутые виды » Продвинутые виды","id":"358","title":"Продвинутые виды"},"359":{"body":"Примечание: В этом разделе предполагается, что вы прочитали предыдущий раздел \"Использование паттерна Newtype для реализации внешних трейтов для внешних видов.\" Паттерн newtype полезен и для других задач, помимо тех, которые мы обсуждали до сих пор, в частности, для статического обеспечения того, чтобы значения никогда не путались, а также для указания единиц измерения значения. Пример использования newtypes для указания единиц измерения вы видели в приложении 19-15: вспомните, как структуры Millimeters и Meters обернули значения u32 в newtype. Если бы мы написали функцию с свойствоом вида Millimeters, мы не смогли бы собрать программу, которая случайно попыталась бы вызвать эту функцию со значением вида Meters или обычным u32. Мы также можем использовать паттерн newtype для абстрагирования от некоторых подробностей реализации вида: новый вид может предоставлять публичный API, который отличается от API скрытого внутри вида. Newtypes также позволяют скрыть внутреннюю реализацию. Например, мы можем создать вид People, который обернёт HashMap<i32, String>, хранящий ID человека, связанный с его именем. Код, использующий People, будет взаимодействовать только с публичным API, который мы предоставляем, например, способ добавления имени в собрание People; этому коду не нужно будет знать, что внутри мы присваиваем i32 ID именам. Паттерн newtype - это лёгкий способ достижения инкапсуляции для скрытия подробностей реализации, который мы обсуждали в разделе \"Инкапсуляция, скрывающая подробности реализации\" главы 17.","breadcrumbs":"Расширенные возможности » Продвинутые виды » Использование паттерна Newtype для обеспечения безопасности видов и создания абстракций","id":"359","title":"Использование паттерна Newtype для обеспечения безопасности видов и создания абстракций"},"36":{"body":"Мы всё ещё работаем над этой строкой кода. Сейчас мы обсуждаем третью строку, но обратите внимание, что она по-прежнему является частью одной логической строки. Следующая часть — способ: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:expect}} Мы могли бы написать этот код так: io::stdin().read_line(&mut guess).expect(\"Failed to read line\"); Однако одну длинную строку трудно читать, поэтому лучше разделить её. При вызове способа с помощью синтаксиса .method_name() часто целесообразно вводить новую строку и другие пробельные символы, чтобы разбить длинные строки. Теперь давайте обсудим, что делает эта строка. Как упоминалось ранее, read_line помещает всё, что вводит пользователь, в строку, которую мы ему передаём, но также возвращает значение Result. Result — это перечисление , часто называемое enum , то есть вид, который может находиться в одном из нескольких возможных состояний. Мы называем каждое такое состояние вариантом . В Главе 6 рассмотрим перечисления более подробно. Задачей видов Result является кодирование сведений для обработки ошибок. Вариантами Result являются Ok и Err. Вариант Ok указывает, что действие завершилась успешно, а внутри Ok находится успешно сгенерированное значение. Вариант Err означает, что действие не удалась, а Err содержит сведения о причинах неудачи. Значения вида Result, как и значения любого вида, имеют определённые для них способы. У экземпляра Result есть способ expect , который можно вызвать. Если этот экземпляр Result является значением Err, expect вызовет сбой программы и отобразит сообщение, которое вы передали в качестве переменной. Если способ read_line возвращает Err, то это, скорее всего, результат ошибки основной операционной системы. Если экземпляр Result является значением Ok, expect возьмёт возвращаемое значение, которое удерживает Ok, и вернёт вам только это значение, чтобы вы могли его использовать далее. В данном случае это значение представляет собой количество байтов, введённых пользователем. Если не вызвать expect, программа ссобирается, но будет получено предупреждение: {{#include ../listings/ch02-guessing-game-tutorial/no-listing-02-without-expect/output.txt}} Rust предупреждает о неиспользованном значении Result, возвращаемого из read_line, показывая, что программа не учла возможность возникновения ошибки. Правильный способ убрать предупреждение — это написать обработку ошибок, но в нашем случае мы просто хотим аварийно завершить программу при возникновении проблемы, поэтому используем expect. О способах восстановления после ошибок вы узнаете в главе 9 .","breadcrumbs":"Программирование игры в загадки » Обработка потенциального сбоя с помощью вида Result","id":"36","title":"Обработка потенциального сбоя с помощью вида Result"},"360":{"body":"Rust предоставляет возможность объявить псевдоним вида чтобы дать существующему виду другое имя. Для этого мы используем ключевое слово type. Например, мы можем создать псевдоним вида Kilometers для i32 следующим образом: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-04-kilometers-alias/src/main.rs:here}} Теперь псевдоним Kilometers является синонимом для i32; в отличие от видов Millimeters и Meters, которые мы создали в приложении 19-15, Kilometers не является отдельным, новым видом. Значения, имеющие вид Kilometers, будут обрабатываться так же, как и значения вида i32: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-04-kilometers-alias/src/main.rs:there}} Поскольку Kilometers и i32 являются одним и тем же видом, мы можем добавлять значения обоих видов и передавать значения Kilometers функциям, принимающим свойства i32. Однако, используя этот способ, мы не получаем тех преимуществ проверки видов, которые мы получаем от паттерна newtype, рассмотренного ранее. Другими словами, если мы где-то перепутаем значения Kilometers и i32, сборщик не выдаст нам ошибку. Синонимы в основном используются для сокращения повторений. Например, у нас может быть такой многословный тип: Box<dyn Fn() + Send + 'static> Написание таких длинных видов в сигнатурах функций и в виде аннотаций видов по всему коду может быть утомительным и чреватым ошибками. Представьте себе проект, наполненный таким кодом, как в приложении 19-24. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-24/src/main.rs:here}} Приложение 19-24: Использование длинного вида во многих местах Псевдоним вида делает этот код более удобным для работы, сокращая количество повторений. В приложении 19-25 мы ввели псевдоним Thunk для вида verbose и можем заменить все использования этого вида более коротким псевдонимом Thunk. {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-25/src/main.rs:here}} Приложение 19-25: Представление псевдонима Thunk для уменьшения количества повторений Такой код гораздо легче читать и писать! Выбор осмысленного имени для псевдонима вида также может помочь прояснить ваши намерения ( thunk - название для кода, который будет вычисляться позднее, поэтому это подходящее имя для сохраняемого замыкания). Псевдонимы видов также часто используются с видом Result<T, E> для сокращения повторений. Рассмотрим модуль std::io в встроенной библиотеке. Действия ввода-вывода часто возвращают Result<T, E> для обработки ситуаций, когда эти действия не удаются. В данной библиотеке есть структура std::io::Error, которая отражает все возможные ошибки ввода/вывода. Многие функции в std::io будут возвращать Result<T, E>, где E - это std::io::Error, например, эти функции в трейте Write: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-05-write-trait/src/lib.rs}} Result<..., Error> часто повторяется. Поэтому std::io содержит такое объявление псевдонима вида: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-06-result-alias/src/lib.rs:here}} Поскольку это объявление находится в модуле std::io, мы можем использовать полный псевдоним std::io::Result<T>; это и есть Result<T, E>, где в качестве E выступает std::io::Error. Сигнатуры функций трейта Write в итоге выглядят следующим образом: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-06-result-alias/src/lib.rs:there}} Псевдоним вида помогает двумя способами: он облегчает написание кода и даёт нам согласованный внешняя оболочка для всего из std::io. Поскольку это псевдоним, то это просто ещё один вид Result<T, E>, что означает, что с ним мы можем использовать любые способы, которые работают с Result<T, E>, а также особый синтаксис вроде ? оператора.","breadcrumbs":"Расширенные возможности » Продвинутые виды » Создание синонимов вида с помощью псевдонимов вида","id":"360","title":"Создание синонимов вида с помощью псевдонимов вида"},"361":{"body":"В Rust есть особый вид !, который на жаргоне теории видов известен как empty type (пустой вид), потому что он не содержит никаких значений. Мы предпочитаем называть его never type (никакой вид), потому что он используется в качестве возвращаемого вида, когда функция ничего не возвращает. Вот пример: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-07-never-type/src/lib.rs:here}} Этот код читается как \"функция bar ничего не возвращает\". Функции, которые ничего не возвращают, называются рассеивающими функциями (diverging functions). Мы не можем производить значения вида !, поэтому bar никогда ничего не вернёт. Но для чего нужен вид, для которого вы никогда не сможете создать значения? Напомним код из приложения 2-5, фрагмента \"игры в загадки\"; мы воспроизвели его часть здесь в приложении 19-26. {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:ch19}} Приложение 19-26: Сопоставление match с веткой, которая заканчивается continue В то время мы опустили некоторые подробности в этом коде. В главе 6 раздела \"Оператор управления потоком match\" мы обсуждали, что все ветви match должны возвращать одинаковый вид. Например, следующий код не работает: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-08-match-arms-different-types/src/main.rs:here}} Вид guess в этом коде должен быть целым и строкой, а Rust требует, чтобы guess имел только один вид. Так что же возвращает continue? Как нам позволили вернуть u32 из одной ветви и при этом иметь другую ветвь, которая оканчивается continue в приложении 19-26? Как вы уже возможно догадались, continue имеет значение !. То есть, когда Rust вычисляет вид guess, он смотрит на обе сопоставляемые ветки, первая со значением u32 и последняя со значением !. Так как ! никогда не может иметь значение, то Rust решает что видом guess является вид u32. Формальный подход к описанию такого поведения заключается в том, что выражения вида ! могут быть преобразованы в любой другой вид. Нам позволяется завершить этот match с помощью continue, потому что continue не возвращает никакого значения; вместо этого он передаёт управление обратно в начало цикла, поэтому в случае Err мы никогда не присваиваем значение guess. Вид never полезен также для макроса panic!. Вспомните функцию unwrap, которую мы вызываем для значений Option<T>, чтобы создать значение или вызвать панику с этим определением: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-09-unwrap-definition/src/lib.rs:here}} В этом коде происходит то же самое, что и в match в приложении 19-26: Rust видит, что val имеет вид T, а panic! имеет вид !, поэтому результатом общего выражения match является T. Этот код работает, потому что panic! не производит никакого значения; он завершает программу. В случае None мы не будем возвращать значение из unwrap, поэтому этот код работает. Последнее выражение, которое имеет вид ! это loop: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-10-loop-returns-never/src/main.rs:here}} В данном случае цикл никогда не завершится, поэтому ! является значением выражения. Но это не будет так, если мы добавим break, так как цикл завершит свою работу, когда дойдёт до break.","breadcrumbs":"Расширенные возможности » Продвинутые виды » Вид Never, который никогда не возвращается","id":"361","title":"Вид Never, который никогда не возвращается"},"362":{"body":"Rust необходимо знать некоторые подробности о видах, например, сколько места нужно выделить для значения определённого вида. Из-за этого один из особенностей системы видов поначалу вызывает некоторое недоумение: концепция видов с изменяемым размером . Иногда называемые DST или безразмерные виды , эти виды позволяют нам писать код, используя значения, размер которых мы можем узнать только во время выполнения. Давайте углубимся в подробности изменяемого вида str, который мы использовали на протяжении всей книги. Все верно, не вида &str, а вида str самого по себе, который является DST. Мы не можем знать, какой длины строка до момента времени выполнения, то есть мы не можем создать переменную вида str и не можем принять переменная вида str. Рассмотрим следующий код, который не работает: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-11-cant-create-str/src/main.rs:here}} Rust должен знать, сколько памяти выделить для любого значения определенного вида и все значения вида должны использовать одинаковый объем памяти. Если Rust позволил бы нам написать такой код, то эти два значения str должны были бы занимать одинаковое количество памяти. Но они имеют разную длину: s1 нужно 12 байтов памяти, а для s2 нужно 15. Вот почему невозможно создать переменную имеющую вид изменяемого размера. Так что же нам делать? В этом случае вы уже знаете ответ: мы преобразуем виды s1 и s2 в &str, а не в str. Вспомните из раздела \"Строковые срезы\" главы 4, что структура данных среза просто хранит начальную позицию и длину среза. Так, в отличие от &T, который содержит только одно значение - адрес памяти, где находится T, в &str хранятся два значения - адрес str и его длина. Таким образом, мы можем узнать размер значения &str во время сборки: он вдвое больше длины usize. То есть, мы всегда знаем размер &str, независимо от длины строки, на которую оно ссылается. В целом, именно так в Rust используются виды изменяемого размера: они содержат дополнительный бит метаданных, который хранит размер изменяемой сведений. Золотое правило изменяемых размерных видов заключается в том, что мы всегда должны помещать значения таких видов за каким-либо указателем. Мы можем комбинировать str со всеми видами указателей: например, Box<str> или Rc<str>. На самом деле, вы уже видели это раньше, но с другим изменяемым размерным видом: трейтами. Каждый трейт - это изменяемый размерный вид, на который мы можем ссылаться, используя имя трейта. В главе 17 в разделе \"Использование трейт-объектов, допускающих значения разных видов\" мы упоминали, что для использования трейтов в качестве трейт-объектов мы должны поместить их за указателем, например &dyn Trait или Box<dyn Trait> (Rc<dyn Trait> тоже подойдёт). Для работы с DST Rust использует трейт Sized чтобы решить, будет ли размер вида известен на стадии сборки. Этот трейт самостоятельно реализуется для всего, чей размер известен к моменту сборки. Кроме того, Rust неявно добавляет ограничение на Sized к каждой универсальной функции. То есть, определение универсальной функции, такое как: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-12-generic-fn-definition/src/lib.rs}} на самом деле рассматривается как если бы мы написали её в виде: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-13-generic-implicit-sized-bound/src/lib.rs}} По умолчанию обобщённые функции будут работать только с видами чей размер известен во время сборки. Тем не менее, можно использовать следующий особый синтаксис, чтобы ослабить это ограничение: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-14-generic-maybe-sized/src/lib.rs}} Ограничение трейта ?Sized означает «T может или не может быть Sized», эта нотация отменяет стандартное правило, согласно которому универсальные виды должны иметь известный размер во время сборки. Использовать синтаксис ?Trait в таком качестве можно только для Sized, и ни для каких других трейтов. Также обратите внимание, что мы поменяли вид свойства t с T на &T. Поскольку вид мог бы не быть Sized, мы должны использовать его за каким-либо указателем. В данном случае мы выбрали ссылку. Далее мы поговорим о функциях и замыканиях!","breadcrumbs":"Расширенные возможности » Продвинутые виды » Виды с изменяемым размером и трейт Sized","id":"362","title":"Виды с изменяемым размером и трейт Sized"},"363":{"body":"В этом разделе рассматриваются некоторые продвинутые возможности, относящиеся к функциям и замыканиям, такие как указатели функций и возвращаемые замыкания.","breadcrumbs":"Расширенные возможности » Продвинутые функции и замыкания » Продвинутые функции и замыкания","id":"363","title":"Продвинутые функции и замыкания"},"364":{"body":"Мы уже обсуждали, как передавать замыкания в функции; но также можно передавать обычные функции в функции! Эта техника полезна, когда вы хотите передать ранее созданную функцию, а не определять новое замыкание. Функции соответствуют виду fn (со строчной буквой f), не путать с трейтом замыкания Fn. Вид fn называется указателем функции . Передача функций с помощью указателей функций позволяет использовать функции в качестве переменных других функций. Для указания того, что свойство является указателем на функцию, используется синтаксис, такой же, как и для замыканий, что отображается в приложении 19-27, где мы определили функцию add_one, которая добавляет единицу к переданному ей свойству. Функция do_twice принимает два свойства: указатель на любую функцию, принимающую свойство i32 и возвращающую i32, и число вида i32. Функция do_twice дважды вызывает функцию f, передавая ей значение arg, а затем складывает полученные результаты. Функция main вызывает функцию do_twice с переменнойми add_one и 5. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-27/src/main.rs}} Приложение 19-27: Использование вида fn для получения указателя на функцию в качестве переменной Этот код выводит Ответ: 12. Мы указали, что свойство f в do_twice является fn, которая принимает на вход единственный свойство вида i32 и возвращает i32. Затем мы можем вызвать f в теле do_twice. В main мы можем передать имя функции add_one в качестве первого переменной в do_twice. В отличие от замыканий, fn является видом, а не трейтом, поэтому мы указываем fn непосредственно в качестве вида свойства, а не объявляем свойство универсального вида с одним из трейтов Fn в качестве связанного. Указатели функций реализуют все три трейта замыканий (Fn, FnMut и FnOnce), то есть вы всегда можете передать указатель функции в качестве переменной функции, которая ожидает замыкание. Лучше всего для описания функции использовать универсальный вид и один из трейтов замыканий, чтобы ваши функции могли принимать как функции, так и замыкания. Однако, одним из примеров, когда вы бы хотели принимать только fn, но не замыкания, является взаимодействие с внешним кодом, который не имеет замыканий: функции языка C могут принимать функции в качестве переменных, однако замыканий в языке C нет. В качестве примера того, где можно использовать либо замыкание, определяемое непосредственно в месте передачи, либо именованную функцию, рассмотрим использование способа map, предоставляемого трейтом Iterator в встроенной библиотеке. Чтобы использовать функцию map для преобразования вектора чисел в вектор строк, мы можем использовать замыкание, например, так: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-15-map-closure/src/main.rs:here}} Или мы можем использовать функцию в качестве переменной map вместо замыкания, например, так: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-16-map-function/src/main.rs:here}} Обратите внимание, что мы должны использовать полный синтаксис, о котором мы говорили ранее в разделе \"Продвинутые трейты\" , потому что доступно несколько функций с именем to_string. Здесь мы используем функцию to_string определённую в типаже ToString, который реализован в встроенной библиотеке для любого вида реализующего типаж Display. Вспомните из раздела \"Значения перечислений\" главы 6, что имя каждого определённого нами варианта перечисления также становится функцией-объявителем. Мы можем использовать эти объявители в качестве указателей на функции, реализующих трейты замыканий, что означает, что мы можем использовать объявители в качестве переменных для способов, принимающих замыкания, например, так: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-17-map-initializer/src/main.rs:here}} Здесь мы создаём экземпляры Status::Value, используя каждое значение u32 в ряде (0..20), с которым вызывается map с помощью функции объявителя Status::Value. Некоторые люди предпочитают этот стиль, а некоторые предпочитают использовать замыкания. Оба варианта собирается в один и тот же код, поэтому используйте любой стиль, который вам понятнее.","breadcrumbs":"Расширенные возможности » Продвинутые функции и замыкания » Указатели функций","id":"364","title":"Указатели функций"},"365":{"body":"Замыкания представлены трейтами, что означает, что вы не можете возвращать замыкания из функций. В большинстве случаев, когда вам захочется вернуть трейт, вы можете использовать определенный вид, реализующий этот трейт, в качестве возвращаемого значения функции. Однако вы не можете сделать подобного с замыканиями, поскольку у них не может быть определенного вида, который можно было бы вернуть; например, вы не можете использовать указатель на функцию fn в качестве возвращаемого вида. Следующий код пытается напрямую вернуть замыкание, но он не собирается: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-18-returns-closure/src/lib.rs}} Ошибка сборщика выглядит следующим образом: {{#include ../listings/ch19-advanced-features/no-listing-18-returns-closure/output.txt}} Ошибка снова ссылается на типаж Sized ! Rust не знает, сколько памяти нужно будет выделить для замыкания. Мы видели решение этой проблемы ранее. Мы можем использовать типаж-объект: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-19-returns-closure-trait-object/src/lib.rs}} Этот код просто отлично собирается. Для получения дополнительной сведений об типаж-объектах обратитесь к разделу \"Использование типаж-объектов которые допускают значения разных видов\" главы 17. Далее давайте посмотрим на макросы!","breadcrumbs":"Расширенные возможности » Продвинутые функции и замыкания » Возврат замыканий","id":"365","title":"Возврат замыканий"},"366":{"body":"Мы использовали макросы, такие как println! на протяжении всей этой книги, но мы не изучили полностью, что такое макрос и как он работает. Термин макрос относится к семейству возможностей в Rust. Это декларативные (declarative) макросы с помощью macro_rules! и три вида процедурных (procedural) макросов: Пользовательские (выводимые) #[derive] макросы, которые указывают код, добавленный с помощью атрибута derive, используемые для структур и перечислений Макросы подобные атрибутам (attribute-like), которые определяют настраиваемые атрибуты, используемые для любого элемента языка Похожие на функции (function-like) макросы, которые выглядят как вызовы функций, но работают с TokenStream Мы поговорим о каждом из них по очереди, но сначала давайте рассмотрим, зачем вообще нужны макросы, если есть функции.","breadcrumbs":"Расширенные возможности » Макросы » Макросы","id":"366","title":"Макросы"},"367":{"body":"По сути, макросы являются способом написания кода, который записывает другой код, что известно как мета программирование . В Приложении C мы обсуждаем атрибут derive, который генерирует за вас реализацию различных типажей. Мы также использовали макросы println! и vec! на протяжении книги. Все эти макросы раскрываются для генерации большего количества кода, чем исходный код написанный вами вручную. Мета программирование полезно для уменьшения объёма кода, который вы должны написать и поддерживать, что также является одним из предназначений функций. Однако макросы имеют некоторые дополнительные возможности, которых функции не имеют. Сигнатура функции должна объявлять некоторое количество и вид этих свойств имеющихся у функции. Макросы, с другой стороны, могут принимать переменное число свойств: мы можем вызвать println!(\"hello\") с одним переменнаяом или println!(\"hello {}\", name) с двумя переменнойми. Также макросы раскрываются до того как сборщик преобразует смысл кода, поэтому макрос может, например, реализовать типаж заданного вида. Функция этого не может, потому что она вызывается во время выполнения и типаж должен быть реализован во время сборки. Обратной стороной реализации макроса вместо функции является то, что определения макросов являются более сложными, чем определения функций, потому что вы создаёте Rust код, который записывает другой Rust код. Из-за этой косвенности, объявления макросов, как правило, труднее читать, понимать и поддерживать, чем объявления функций. Другое важное различие между макросами и функциями заключается в том, что вы должны объявить макросы или добавить их в область видимости прежде чем можете вызывать их в файле, в отличии от функций, которые вы можете объявить где угодно и вызывать из любого места.","breadcrumbs":"Расширенные возможности » Макросы » Разница между макросами и функциями","id":"367","title":"Разница между макросами и функциями"},"368":{"body":"Наиболее широко используемой формой макросов в Rust являются декларативные макросы . Они также иногда упоминаются как \"макросы на примере\", \"macro_rules! макрос\" или просто \"макросы\". По своей сути декларативные макросы позволяют писать нечто похожее на выражение match в Rust. Как обсуждалось в главе 6, match выражения являются управляющими структурами, которые принимают некоторое выражение, результат значения выражения сопоставляют с шаблонами, а затем запускают код для сопоставляемой ветки. Макросы также сравнивают значение с шаблонами, которые связаны с определенным кодом: в этой ситуации значение является литералом исходного кода Rust, переданным в макрос. Шаблоны сравниваются со структурами этого исходного кода и при совпадении код, связанный с каждым шаблоном, заменяет код переданный макросу. Все это происходит во время сборки. Для определения макроса используется конструкция macro_rules!. Давайте рассмотрим, как использовать macro_rules! глядя на то, как объявлен макрос vec!. В главе 8 рассказано, как можно использовать макрос vec! для создания нового вектора с определёнными значениями. Например, следующий макрос создаёт новый вектор, содержащий три целых числа: let v: Vec<u32> = vec![1, 2, 3]; Мы также могли использовать макрос vec! для создания вектора из двух целых чисел или вектора из пяти строковых срезов. Мы не смогли бы использовать функцию, чтобы сделать то же самое, потому что мы не знали бы заранее количество или вид значений. В приложении 19-28 приведено несколько упрощённое определение макроса vec!. Файл: src/lib.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-28/src/lib.rs}} Приложение 19-28: Упрощённая исполнение определения макроса vec! Примечание: фактическое определение макроса vec! в встроенной библиотеке содержит код для предварительного выделения правильного объёма памяти. Этот код является оптимизацией, которую мы здесь не используем, чтобы сделать пример проще. Изложение #[macro_export] указывает, что данный макрос должен быть доступен всякий раз, когда крейт с объявленным макросом, добавлен в область видимости. Без этой изложении макрос нельзя добавить в область видимости. Затем мы начинаем объявление макроса с помощью macro_rules! и имени макроса, который объявляется без восклицательного знака. Название, в данном случае vec, после которого следуют фигурные скобки, указывающие тело определения макроса. Структура в теле макроса vec! похожа на структуру match выражения. Здесь у нас есть одна ветвь с шаблоном ( $( $x:expr ),* ), затем следует ветвь => и раздел кода, связанный с этим шаблоном. Если шаблон сопоставлен успешно, то соответствующий раздел кода будет сгенерирован. Учитывая, что данный код является единственным шаблоном в этом макросе, существует только один действительный способ сопоставления, любой другой шаблон приведёт к ошибке. Более сложные макросы будут иметь более одной ветви. Допустимый синтаксис шаблона в определениях макросов отличается от синтаксиса шаблона рассмотренного в главе 18, потому что шаблоны макроса сопоставляются со структурами кода Rust, а не со значениями. Давайте пройдёмся по тому, какие части шаблона в приложении 19-28 что означают; полный синтаксис шаблонов макроса можно найти в Справочнике по Rust . Во-первых, мы используем набор скобок, чтобы охватить весь шаблон. Мы используем знак доллара ( $) для объявления переменной в системе макросов, которая будет содержать код на Rust, соответствующий шаблону. Знак доллара показывает, что это макропеременная, а не обычная переменная Rust. Далее следует набор скобок, в котором фиксируются значения, соответствующие шаблону в скобках, для использования в коде замены. Внутри $() находится $x:expr, которое соответствует любому выражению Rust и даёт выражению имя $x. Запятая, следующая за $() указывает на то, что буквенный символ-разделитель запятая может дополнительно появиться после кода, который соответствует коду в $(). Звёздочка * указывает, что шаблон соответствует ноль или больше раз тому, что предшествует *. Когда вызывается этот макрос с помощью vec![1, 2, 3]; шаблон $x соответствует три раза всем трём выражениям 1, 2 и 3. Теперь давайте посмотрим на шаблон в теле кода, связанного с этой ветвью: temp_vec.push() внутри $()* генерируется для каждой части, которая соответствует символу $() в шаблоне ноль или более раз в зависимости от того, сколько раз шаблон сопоставлен. Символ $x заменяется на каждое совпадающее выражение. Когда мы вызываем этот макрос с vec![1, 2, 3];, сгенерированный код, заменяющий этот вызов макроса будет следующим: { let mut temp_vec = Vec::new(); temp_vec.push(1); temp_vec.push(2); temp_vec.push(3); temp_vec\n} Мы определили макрос, который может принимать любое количество переменных любого вида и может генерировать код для создания вектора, содержащего указанные элементы. Чтобы узнать больше о том, как писать макросы, обратитесь к онлайн-документации или другим ресурсам, таким как «Маленькая книга макросов Rust» , начатая Дэниелом Кипом и продолженная Лукасом Виртом.","breadcrumbs":"Расширенные возможности » Макросы » Декларативные макросы с macro_rules! для общего мета программирования","id":"368","title":"Декларативные макросы с macro_rules! для общего мета программирования"},"369":{"body":"Вторая форма макросов - это процедурные макросы (procedural macros), которые действуют как функции (и являются видом процедуры). Процедурные макросы принимают некоторый код в качестве входных данных, работают над этим кодом и создают некоторый код в качестве вывода, а не выполняют сопоставления с шаблонами и замену кода другим кодом, как это делают декларативные макросы. Процедурные макросы могут быть трёх видов: \"пользовательского вывода\" (custom-derive), \"похожие на атрибут\" (attribute-like) и \"похожие на функцию\" (function-like), все они работают схожим образом. При создании процедурных макросов объявления должны находиться в собственном крейте целенаправленного вида. Это из-за сложных технических причин, которые мы надеемся будут устранены в будущем. В приложении 19-29 показано, как задать процедурный макрос, где some_attribute является заполнителем для использования целенаправленного макроса. Файл: src/lib.rs use proc_macro; #[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n} Приложение 19-29: Пример определения процедурного макроса Функция, которая определяет процедурный макрос, принимает TokenStream в качестве входных данных и создаёт TokenStream в качестве вывода. Вид TokenStream объявлен крейтом proc_macro, включённым в Rust и представляет собой последовательность токенов. Это ядро макроса: исходный код над которым работает макрос, является входным TokenStream, а код создаваемый макросом является выходным TokenStream. К функции имеет также прикреплённый атрибут, определяющий какой вид процедурного макроса мы создаём. Можно иметь несколько видов процедурных макросов в одном и том же крейте. Давайте посмотрим на различные виды процедурных макросов. Начнём с пользовательского, выводимого (derive) макроса и затем объясним небольшие различия, делающие другие формы отличающимися.","breadcrumbs":"Расширенные возможности » Макросы » Процедурные макросы для генерации кода из атрибутов","id":"369","title":"Процедурные макросы для генерации кода из атрибутов"},"37":{"body":"Кроме закрывающей фигурной скобки, в коде на данный момент есть ещё только одно место для обсуждения: {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-01/src/main.rs:print_guess}} Этот код выводит строку, которая теперь содержит ввод пользователя. Набор фигурных скобок {} является заполнителем: думайте о {} как о маленьких клешнях краба, которые удерживают значение на месте. При печати значения переменной имя переменной может заключаться в фигурные скобки. При печати результата вычисления выражения поместите пустые фигурные скобки в строку формата, затем после строки формата укажите список выражений, разделённых запятыми, которые будут напечатаны в каждом заполнителе пустой фигурной скобки в том же порядке. Печать переменной и результата выражения одним вызовом println! будет выглядеть так: let x = 5;\nlet y = 10; println!(\"x = {x} and y + 2 = {}\", y + 2); Этот код выведет x = 5 and y + 2 = 12.","breadcrumbs":"Программирование игры в загадки » Вывод значений с помощью заполнителей println!","id":"37","title":"Вывод значений с помощью заполнителей println!"},"370":{"body":"Давайте создадим крейт с именем hello_macro, который определяет типаж с именем HelloMacro и имеет одну с ним ассоциированную функцию с именем hello_macro. Вместо того, чтобы пользователи нашего крейта самостоятельно реализовывали типаж HelloMacro для каждого из своих видов, мы предоставим им процедурный макрос, чтобы они могли аннотировать свой вид с помощью атрибута #[derive(HelloMacro)] и получили реализацию по умолчанию для функции hello_macro. Реализация по умолчанию выведет Hello, Macro! My name is TypeName!, где TypeName - это имя вида, для которого был определён этот типаж. Другими словами, мы напишем крейт, использование которого позволит другому программисту писать код показанный в приложении 19-30. Файл: src/main.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-30/src/main.rs}} Приложение 19-30: Код, который сможет писать пользователь нашего крейта при использовании нашего процедурного макроса Этот код напечатает Hello, Macro! My name is Pancakes!, когда мы закончим. Первый шаг - создать новый, библиотечный крейт так: $ cargo new hello_macro --lib Далее, мы определим типаж HelloMacro и ассоциированную с ним функцию: Файл: src/lib.rs {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-20-impl-hellomacro-for-pancakes/hello_macro/src/lib.rs}} У нас есть типаж и его функция. На этом этапе пользователь крейта может реализовать типаж для достижения желаемой функциональности, так: {{#rustdoc_include ../listings/ch19-advanced-features/no-listing-20-impl-hellomacro-for-pancakes/pancakes/src/main.rs}} Тем не менее, ему придётся написать разделреализации для каждого вида, который он хотел использовать вместе с hello_macro; а мы хотим избавить их от необходимости делать эту работу. Кроме того, мы пока не можем предоставить функцию hello_macro с реализацией по умолчанию, которая будет печатать имя вида, для которого реализован типаж: Rust не имеет возможностей рефлексии (reflection), поэтому он не может выполнить поиск имени вида во время выполнения кода. Нам нужен макрос для генерации кода во время сборки. Следующим шагом является определение процедурного макроса. На момент написания этой статьи процедурные макросы должны быть в собственном крейте. Со временем это ограничение может быть отменено. Соглашение о структурировании крейтов и макросов является следующим: для крейта с именем foo, его пользовательский, крейт с выводимым процедурным макросом называется foo_derive. Давайте начнём с создания нового крейта с именем hello_macro_derive внутри проекта hello_macro: $ cargo new hello_macro_derive --lib Наши два крейта тесно связаны, поэтому мы создаём процедурный макрос-крейт в каталоге крейта hello_macro. Если мы изменим определение типажа в hello_macro, то нам придётся также изменить реализацию процедурного макроса в hello_macro_derive. Два крейта нужно будет опубликовать отдельно и программисты, использующие эти крейты, должны будут добавить их как зависимости, а затем добавить их в область видимости. Мы могли вместо этого сделать так, что крейт hello_macro использует hello_macro_derive как зависимость и реэкспортирует код процедурного макроса. Однако то, как мы структурировали проект, делает возможным программистам использовать hello_macro даже если они не хотят derive функциональность. Нам нужно объявить крейт hello_macro_derive как процедурный макрос-крейт. Также понадобятся функционал из крейтов syn и quote, как вы увидите через мгновение, поэтому нам нужно добавить их как зависимости. Добавьте следующее в файл Cargo.toml для hello_macro_derive: Файл: hello_macro_derive/Cargo.toml {{#include ../listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/Cargo.toml:6:12}} Чтобы начать определение процедурного макроса, поместите код приложения 19-31 в ваш файл src/lib.rs крейта hello_macro_derive. Обратите внимание, что этот код не ссобирается пока мы не добавим определение для функции impl_hello_macro. Файл: hello_macro_derive/src/lib.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/src/lib.rs}} Приложение 19-31: Код, который потребуется в большинстве процедурных макро крейтов для обработки Rust кода Обратите внимание, что мы разделили код на функцию hello_macro_derive, которая отвечает за синтаксический анализ TokenStream и функцию impl_hello_macro, которая отвечает за преобразование синтаксического дерева: это делает написание процедурного макроса удобнее. Код во внешней функции ( hello_macro_derive в данном случае) будет одинаковым для почти любого процедурного макрос крейта, который вы видите или создаёте. Код, который вы указываете в теле внутренней функции (в данном случае impl_hello_macro ) будет отличаться в зависимости от цели вашего процедурного макроса. Мы представили три новых крейта: proc_macro syn и quote . Макрос proc_macro поставляется с Rust, поэтому нам не нужно было добавлять его в зависимости внутри Cargo.toml . Макрос proc_macro - это API сборщика, который позволяет нам читать и манипулировать Rust кодом из нашего кода. Крейт syn разбирает Rust код из строки в структуру данных над которой мы может выполнять действия. Крейт quote превращает структуры данных syn обратно в код Rust. Эти крейты упрощают разбор любого вида Rust кода, который мы хотели бы обрабатывать: написание полного синтаксического анализатора для кода Rust не является простой задачей. Функция hello_macro_derive будет вызываться, когда пользователь нашей библиотеки указывает своему виду #[derive(HelloMacro)]. Это возможно, потому что мы аннотировали функцию hello_macro_derive с помощью proc_macro_derive и указали имя HelloMacro, которое соответствует имени нашего типажа; это соглашение, которому следует большинство процедурных макросов. Функция hello_macro_derive сначала преобразует input из TokenStream в структуру данных, которую мы можем затем преобразовать и над которой выполнять действия. Здесь крейт syn вступает в игру. Функция parse в syn принимает TokenStream и возвращает структуру DeriveInput, представляющую разобранный код Rust. Приложение 19-32 показывает соответствующие части структуры DeriveInput, которые мы получаем при разборе строки struct Pancakes;: DeriveInput { // --snip-- ident: Ident { ident: \"Pancakes\", span: #0 bytes(95..103) }, data: Struct( DataStruct { struct_token: Struct, fields: Unit, semi_token: Some( Semi ) } )\n} Приложение 19-32: Экземпляр DeriveInput получаемый, когда разбирается код имеющий атрибут макроса из приложения 19-30 Поля этой структуры показывают, что код Rust, который мы разобрали, является разделструктуры с ident (определителем, означающим имя) Pancakes. В этой структуре есть больше полей для описания всех видов кода Rust; проверьте документацию syn о структуре DeriveInput для получения дополнительной сведений. Вскоре мы определим функцию impl_hello_macro, в которой построим новый, дополнительный код Rust. Но прежде чем мы это сделаем, обратите внимание, что выводом для нашего выводимого (derive) макроса также является TokenStream. Возвращаемый TokenStream добавляется в код, написанный пользователями макроса, поэтому, когда они соберут свой крейт, они получат дополнительную функциональность, которую мы предоставляем в изменённом TokenStream. Возможно, вы заметили, что мы вызываем unwrap чтобы выполнить панику в функции hello_macro_derive, если вызов функции syn::parse потерпит неудачу. Наш процедурный макрос должен паниковать при ошибках, потому что функции proc_macro_derive должны возвращать TokenStream, а не вид Result для соответствия API процедурного макроса. Мы упростили этот пример с помощью unwrap, но в рабочем коде вы должны предоставить более определенные сообщения об ошибках, если что-то пошло не правильно, используя panic! или expect. Теперь, когда у нас есть код для преобразования аннотированного Rust кода из TokenStream в экземпляр DeriveInput, давайте сгенерируем код реализующий типаж HelloMacro у аннотированного вида, как показано в приложении 19-33. Файл: hello_macro_derive/src/lib.rs {{#rustdoc_include ../listings/ch19-advanced-features/listing-19-33/hello_macro/hello_macro_derive/src/lib.rs:here}} Приложение 19-33: Реализация типажа HelloMacro с использованием проанализированного кода Rust. Мы получаем экземпляр структуры Ident содержащий имя (определитель) аннотированного вида с использованием ast.ident. Структура в приложении 19-32 показывает, что когда мы запускаем функцию impl_hello_macro для кода из приложения 19-30, то получаемый ident будет иметь поле ident со значением \"Pancakes\". Таким образом, переменная name в приложении 19-33 будет содержать экземпляр структуры Ident, что при печати выдаст строку \"Pancakes\", что является именем структуры в приложении 19-30. Макрос quote! позволяет определить код Rust, который мы хотим вернуть. Сборщик ожидает что-то отличное от прямого результата выполнения макроса quote!, поэтому нужно преобразовать его в TokenStream. Мы делаем это путём вызова способа into, который использует промежуточное представление и возвращает значение требуемого вида TokenStream. Макрос quote! также предоставляет очень классную механику шаблонов: мы можем ввести #name и quote! заменит его значением из переменной name. Вы можете даже сделать некоторое повторение, подобное тому, как работают обычные макросы. Проверьте документацию крейта quote для подробного введения. Мы хотим, чтобы наш процедурный макрос генерировал реализацию нашего типажа HelloMacro для вида, который аннотировал пользователь, который мы можем получить, используя #name. Реализация типажа имеет одну функцию hello_macro, тело которой содержит функциональность, которую мы хотим предоставить: напечатать Hello, Macro! My name is с именем аннотированного вида. Макрос stringify! используемый здесь, встроен в Rust. Он принимает Rust выражение, такое как 1 + 2 и во время сборки сборщик превращает выражение в строковый литерал, такой как \"1 + 2\". Он отличается от макросов format! или println!, которые вычисляют выражение, а затем превращают результат в виде вида String. Существует возможность того, что введённый #name может оказаться выражением для печати буквально как есть, поэтому здесь мы используем stringify!. Использование stringify! также экономит выделение памяти путём преобразования #name в строковый литерал во время сборки. На этом этапе приказ cargo build должна завершиться успешно для обоих hello_macro и hello_macro_derive. Давайте подключим эти крейты к коду в приложении 19-30, чтобы увидеть процедурный макрос в действии! Создайте новый двоичный проект в каталоге ваших проектов с использованием приказы cargo new pancakes. Нам нужно добавить hello_macro и hello_macro_derive в качестве зависимостей для крейта pancakes в файл Cargo.toml . Если вы публикуете свои исполнения hello_macro и hello_macro_derive на сайт crates.io , они будут обычными зависимостями; если нет, вы можете указать их как path зависимости следующим образом: {{#include ../listings/ch19-advanced-features/no-listing-21-pancakes/pancakes/Cargo.toml:7:9}} Поместите код в приложении 19-30 в src/main.rs и выполните cargo run: он должен вывести Hello, Macro! My name is Pancakes!. Реализация типажа HelloMacro из процедурного макроса была включена без необходимости его реализации крейтом pancakes; #[derive(HelloMacro)] добавил реализацию типажа. Далее давайте рассмотрим, как другие виды процедурных макросов отличаются от пользовательских выводимых макросов.","breadcrumbs":"Расширенные возможности » Макросы » Как написать пользовательский derive макрос","id":"370","title":"Как написать пользовательский derive макрос"},"371":{"body":"Подобные атрибутам макросы похожи на пользовательские выводимые макросы, но вместо генерации кода для derive атрибута, они позволяют создавать новые атрибуты. Они являются также более гибкими: derive работает только для структур и перечислений; атрибут-подобные могут применяться и к другим элементам, таким как функции. Вот пример использования атрибутного макроса: допустим, у вас есть атрибут именованный route который аннотирует функции при использовании фреймворка для веб-приложений: #[route(GET, \"/\")]\nfn index() { Данный атрибут #[route] будет определён платформой как процедурный макрос. Сигнатура функции определения макроса будет выглядеть так: #[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream { Здесь есть два свойства вида TokenStream. Первый для содержимого атрибута: часть GET, \"/\" . Второй это тело элемента, к которому прикреплён атрибут: в данном случае fn index() {} и остальная часть тела функции. Кроме того, атрибутные макросы работают так же как и пользовательские выводимые макросы: вы создаёте крейт с видом proc-macro и реализуете функцию, которая генерирует код, который хотите!","breadcrumbs":"Расширенные возможности » Макросы » Макросы, похожие на атрибут","id":"371","title":"Макросы, похожие на атрибут"},"372":{"body":"Макросы, похожие на функции, выглядят подобно вызову функций. Подобно макросам macro_rules! они являются более гибкими, чем функции; например, они могут принимать неизвестное количество переменных. Тем не менее, макросы macro_rules! можно объявлять только с использованием синтаксиса подобного сопоставлению, который мы обсуждали ранее в разделе \"Декларативные макросы macro_rules! для общего мета программирования\". Макросы, похожие на функции, принимают свойство TokenStream и их определение манипулирует этим TokenStream, используя код Rust, как это делают два других вида процедурных макроса. Примером подобного функционально подобного макроса является макрос sql!, который можно вызвать так: let sql = sql!(SELECT * FROM posts WHERE id=1); Этот макрос будет разбирать SQL указанию внутри него и проверять, что она синтаксически правильная, что является гораздо более сложной обработкой, чем то что может сделать макрос macro_rules!. Макрос sql! мог бы быть определён так: #[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream { Это определение похоже на сигнатуру пользовательского выводимого макроса: мы получаем токены, которые находятся внутри скобок и возвращаем код, который мы хотели сгенерировать.","breadcrumbs":"Расширенные возможности » Макросы » Макросы, похожие на функции","id":"372","title":"Макросы, похожие на функции"},"373":{"body":"Фух! Теперь у вас в распоряжении есть некоторые возможности Rust, которые вы не будете часто использовать, но вы будете знать, что они доступны в особых обстоятельствах. Мы представили несколько сложных тем, чтобы при появлении сообщения с предложением исправить ошибку или в коде других людей, вы могли бы распознать эти концепции и синтаксис. Используйте эту главу как справочник, который поможет вам найти решение. Далее мы применим на практике все, что обсуждали на протяжении всей книги, и выполним ещё один проект!","breadcrumbs":"Расширенные возможности » Макросы » Итоги","id":"373","title":"Итоги"},"374":{"body":"Это был долгий путь, но мы дошли до финала книги. В этой главе мы сделаем ещё один проект, чтобы закрепить несколько тем из последних глав и резюмировать то, что прошли в самом начале. В качестве нашего финального проекта мы напишем веб-сервер, который выводит надпись “hello” в веб-браузере, как на рисунке 20-1. hello from rust Рисунок 20-1: Наш последний совместный проект Для создания веб-сервера нам понадобится: Узнать немного о протоколах TCP и HTTP. Сделать прослушивание TCP соединения у сокета. Создать функциональность для парсинга небольшого количества HTTP-запросов. Научить сервер отдавать корректный HTTP-ответ. Улучшить пропускную способность нашего сервера с помощью пула потоков. Прежде чем мы начнём, заметим: способ, который мы будем использовать - не лучшим способ создания веб-сервера на Rust. Члены сообщества уже опубликовали на crates.io несколько готовых к использованию крейтов, которые предоставляют более полные реализации веб-сервера и пула потоков, чем те, которые мы создадим. Однако наша цель в этой главе — научиться новому, а не идти по лёгкому пути. Поскольку Rust — это язык системного программирования, мы можем выбирать тот уровень абстракции, который нам подходит, и можем переходить на более низкий уровень, что может быть невозможно или непрактично в других языках. Поэтому мы напишем основной HTTP-сервер и пул потоков вручную, чтобы вы могли изучить общие идеи и способы, лежащие в основе крейтов, которые, возможно, вы будете использовать в будущем.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Финальный проект: создание многопоточного веб-сервера","id":"374","title":"Финальный проект: создание многопоточного веб-сервера"},"375":{"body":"Начнём с однопоточного веб-сервера. Перед тем, как начать, давайте сделаем краткий обзор протоколов, задействованных при создании веб-серверов. Детальное описание этих протоколов выходит за рамки этой книги, но краткий обзор даст вам необходимую сведения. Двумя основными протоколами, используемыми в веб-серверах, являются протокол передачи гипертекста (HTTP - Hypertext Transfer Protocol) и Протокол управления передачей (TCP - Transmission Control Protocol) . Оба протокола являются протоколами вида запрос-ответ (request-response), то есть клиент объявляет запросы, а сервер слушает эти запросы и предоставляет ответ клиенту. Содержимое этих запросов и ответов определяется протоколами. TCP - это протокол нижнего уровня, который описывает подробности того, как сведения передаётся от одного сервера к другому, но не определяет, что это за сведения. HTTP строится поверх TCP, определяя содержимое запросов и ответов. Технически возможно использовать HTTP с другими протоколами, но в подавляющем большинстве случаев HTTP отправляет свои данные поверх TCP. Мы будем работать с необработанными байтами в TCP и запросами и ответами в HTTP.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Создание однопоточного веб-сервера","id":"375","title":"Создание однопоточного веб-сервера"},"376":{"body":"Нашему веб-серверу необходимо прослушивать TCP-соединение, так что это первая часть, над которой мы будем работать. Стандартная библиотека предлагает для этого модуль std::net. Сделаем новый проект обычным способом: $ cargo new hello Created binary (application) `hello` project\n$ cd hello Дл начала добавьте код из приложения 20-1 в файл src/main.rs . Этот код будет прослушивать входящие TCP потоки по адресу 127.0.0.1:7878. Когда сервер примет входящий поток, он напечатает Connection established! (\"Соединение установлено!\"). Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-01/src/main.rs}} Приложение 20-1: Прослушивание входящих потоков и печать сообщения при получении потока Используя TcpListener мы можем слушать TCP соединения к адресу 127.0.0.1:7878. В адресе, в его части перед двоеточием, сначала идёт IP-адрес, относящийся к вашему компьютеру (он одинаковый на каждом компьютере и не представляет определенный компьютер автора), а часть 7878 является портом. Мы выбрали этот порт по двум причинам: HTTP обычно не используется на этом порту, поэтому маловероятно, что наш сервер будет конфликтовать с каким-нибудь другим сервером, который может выполняться на вашей машине, и ещё 7878 - это слово rust , набранное на телефоне. Функция bind в этом сценарии работает так же, как функция new, поскольку она возвращает новый экземпляр TcpListener . Причина, по которой функция называется bind заключается в том, что в сетевой терминологии подключение к порту для прослушивания называется «привязка к порту» (“binding to a port”). Функция bind возвращает Result<T, E>, а это значит, что привязка может не состояться. Так, например, подключение к порту 80 предполагает наличие привилегий администратора (прочие пользователи могут прослушивать порты только от 1023-го и выше), поэтому если мы попытаемся подключиться к порту 80, не будучи администратором, привязка не сработает. Привязка также не выполнится, например, если мы запустим два экземпляра нашей программы, прослушивающие один и тот же порт. Поскольку мы пишем простейший сервер в учебных целях, мы не будем беспокоиться об обработке подобных ошибок; вместо этого мы используем unwrap для прекращения работы программы в случае возникновения ошибок. Способ incoming в TcpListener возвращает повторитель, который даёт нам последовательность потоков (определеннее, потоков вида TcpStream ). Один поток представляет собой открытое соединение между клиентом и сервером. Соединением называется полный процесс запроса и ответа, в котором клиент подключается к серверу, сервер генерирует ответ, и сервер закрывает соединение. Таким образом, мы будем читать из потока TcpStream то, что отправил клиент, а затем записывать наш ответ в поток, для отправки его обратно клиенту. В целом, цикл for будет обрабатывать каждое соединение по очереди и создавать серию потоков, которые мы будем обрабатывать. На текущий момент наша обработка потока состоит из вызова unwrap для завершения программы, если в потоке возникли ошибки, если же таковых не обнаружится, программа выведет сообщение. В следующем приложении мы добавим больше функциональности для успешного сценария. Причиной того, что мы можем получать ошибки от способа incoming, когда клиент подключается к серверу, является то, что на самом деле мы не перебираем подключения. На самом деле мы перебираем попытки подключения . Подключение может не состояться по ряду причин, многие из которых зависят от операционной системы. Например, многие операционные системы имеют ограничение на количество одновременно открытых соединений, которые они могут поддерживать; при превышении этого лимита новые попытки установить соединение будут приводить к ошибке, пока какие-либо из уже открытых соединений не будут закрыты. Попробуем запустить этот код! Вызовите cargo run в окне вызова, а затем загрузите 127.0.0.1:7878 в веб-браузере. В браузере должно отображаться сообщение об ошибке, например «Connection reset», поскольку сервер в настоящее время не отправляет обратно никаких данных. Но когда вы посмотрите на свой окно вызова, вы должны увидеть несколько сообщений, которые были напечатаны, когда браузер подключался к серверу! Running `target/debug/hello` Connection established! Connection established! Connection established! Иногда вы видите несколько сообщений, напечатанных для одного запроса браузера; Причина может заключаться в том, что браузер выполняет запрос страницы, а также других ресурсов, таких как значок favicon.ico, который отображается на вкладке браузера. Также может быть, что браузер пытается подключиться к серверу несколько раз, потому что сервер не отвечает. Когда stream выходит из области видимости и отбрасывается в конце цикла, соединение закрывается как часть реализации drop. Браузеры иногда обрабатывают закрытые соединения, повторяя попытки, потому что проблема может быть временной. Важным фактором является то, что мы успешно получили дескриптор TCP-соединения! Не забудьте остановить программу, нажав ctrl-c, когда вы закончите выполнение определённой исполнения кода. Затем перезапустите программу, вызвав приказ cargo run, после того, как вы внесли какой-либо набор изменений, чтобы убедиться, что выполняется самая свежая исполнение кода.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Прослушивание TCP соединения","id":"376","title":"Прослушивание TCP соединения"},"377":{"body":"Реализуем функционал чтения запроса из браузера! Чтобы разделить части, связанные с получением соединения и последующим действием с ним, мы запустим новую функцию для обработки соединения. В этой новой функции handle_connection мы будем читать данные из потока TCP и распечатывать их, чтобы мы могли видеть данные, отправленные из браузера. Измените код, чтобы он выглядел как в приложении 20-2. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-02/src/main.rs}} Приложение 20-2: Чтение из TcpStream и печать данных Мы добавляем std::io::prelude и std::io::BufReader в область видимости, чтобы получить доступ к типажам и видам, которые позволяют нам читать и писать в поток. В цикле for функции main вместо вывода сообщения о том, что мы установили соединение, мы теперь вызываем новую функцию handle_connection и передаём ей stream. В функции handle_connection мы создаём новый экземпляр BufReader, который оборачивает изменяемую ссылку на stream. BufReader добавляет буферизацию, управляя вызовами способов типажа std::io::Read за нас. Мы создаём переменную http_request для сбора строк запроса, который браузер отправляет на наш сервер. Мы указываем, что хотим собрать эти строки в вектор, добавляя изложение вида Vec<_>. BufReader реализует трейт std::io::BufRead, который реализует способ lines. Способ lines возвращает повторительResult<String, std::io::Error>, разделяющий поток данных на части всякий раз, когда ему попадается байт новой строки. Чтобы получить все строки String, мы с помощью map вызываем unwrap у каждого Result. Значение Result может быть ошибкой, если данные не соответствуют стандарту UTF-8 или если возникли проблемы с чтением из потока. Опять же, программа в промышленном исполнении должна обрабатывать эти ошибки более изящно, но мы для простоты решили прекращать работу программы в случае ошибки. Браузер сигнализирует об окончании HTTP-запроса, отправляя два символа перевода строки подряд, поэтому, чтобы получить один запрос из потока, мы забираем строки, пока не получим строку, которая является пустой строкой. После того, как мы собрали строки в вектор, мы распечатываем их, используя красивое отладочное форматирование, чтобы мы могли взглянуть на указания, которые веб-браузер отправляет на наш сервер. Попробуем этот код! Запустите программу и снова сделайте запрос в веб-браузере. Обратите внимание, что мы по-прежнему будем получать в браузере страницу с ошибкой, но вывод нашей программы в окне вызова теперь будет выглядеть примерно так: $ cargo run Compiling hello v0.1.0 (file:///projects/hello) Finished dev [unoptimized + debuginfo] target(s) in 0.42s Running `target/debug/hello`\nRequest: [ \"GET / HTTP/1.1\", \"Host: 127.0.0.1:7878\", \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\", \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\", \"Accept-Language: en-US,en;q=0.5\", \"Accept-Encoding: gzip, deflate, br\", \"DNT: 1\", \"Connection: keep-alive\", \"Upgrade-Insecure-Requests: 1\", \"Sec-Fetch-Dest: document\", \"Sec-Fetch-Mode: navigate\", \"Sec-Fetch-Site: none\", \"Sec-Fetch-User: ?1\", \"Cache-Control: max-age=0\",\n] В зависимости от вашего браузера результат может немного отличаться. Теперь, когда мы печатаем данные запроса, мы можем понять, почему мы получаем несколько подключений из одного запроса браузера, посмотрев на путь после GET в первой строке запроса. Если все повторяющиеся соединения запрашивают / , мы знаем, что браузер пытается получить / повторно, потому что он не получает ответа от нашей программы. Давайте разберём эти данные запроса, чтобы понять, что браузер запрашивает у нашей программы.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Чтение запросов","id":"377","title":"Чтение запросов"},"378":{"body":"HTTP - это текстовый протокол и запрос имеет следующий формат: Method Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body Первая строка - это строка запроса , содержащая сведения о том, что запрашивает клиент. Первая часть строки запроса указывает используемый способ , например GET или POST , который описывает, как клиент выполняет этот запрос. Наш клиент использовал запрос GET, что означает, что он просит нас предоставить сведения. Следующая часть строки запроса - это / , которая указывает унифицированный определитель ресурса (URI), который запрашивает клиент: URI почти, но не совсем то же самое, что и унифицированный указатель ресурса (URL) . Разница между URI и URL-адресами не важна для наших целей в этой главе, но спецификация HTTP использует термин URI, поэтому мы можем просто мысленно заменить URL-адрес здесь. Последняя часть - это исполнение HTTP, которую использует клиент, а затем строка запроса заканчивается последовательностью CRLF . (CRLF обозначает возврат каретки и перевод строки , что является термином из дней пишущих машинок!) Последовательность CRLF также может быть записана как \\r\\n , где \\r - возврат каретки, а \\n - перевод строки. Последовательность CRLF отделяет строку запроса от остальных данных запроса. Обратите внимание, что при печати CRLF мы видим начало новой строки, а не \\r\\n . Глядя на данные строки запроса, которые мы получили от запуска нашей программы, мы видим, что GET - это способ, / - это URI запроса, а HTTP/1.1 - это исполнение. После строки запроса оставшиеся строки, начиная с Host: далее, являются заголовками. GET запросы не имеют тела. Попробуйте сделать запрос из другого браузера или запросить другой адрес, например 127.0.0.1:7878/test , чтобы увидеть, как изменяются данные запроса. Теперь, когда мы знаем, что запрашивает браузер, давайте отправим обратно в ответ некоторые данные!","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Пристальный взгляд на HTTP запрос","id":"378","title":"Пристальный взгляд на HTTP запрос"},"379":{"body":"Теперь реализуем отправку данных в ответ на запрос клиента. Ответы имеют следующий формат: HTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body Первая строка - это строка состояния , которая содержит исполнение HTTP, используемую в ответе, числовой код состояния, который суммирует результат запроса, и фразу причины, которая предоставляет текстовое описание кода состояния. После последовательности CRLF идут любые заголовки, другая последовательность CRLF и тело ответа. Вот пример ответа, который использует HTTP исполнения 1.1, имеет код состояния 200, фразу причины OK, без заголовков и без тела: HTTP/1.1 200 OK\\r\\n\\r\\n Код состояния 200 - это стандартный успешный ответ. Текст представляет собой крошечный успешный HTTP-ответ. Давайте запишем это в поток как наш ответ на успешный запрос! Из функции handle_connection удалите println! который печатал данные запроса и заменял их кодом из Приложения 20-3. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-03/src/main.rs:here}} Приложение 20-3: Запись крошечного успешного HTTP-ответа в поток Первый перевод строки определяет переменную response, которая содержит данные сообщения об успешном выполнении. Затем мы вызываем as_bytes в нашем response, чтобы преобразовать строковые данные в байты. Способ write_all в stream принимает вид &[u8] и отправляет эти байты непосредственно получателю. Поскольку действие write_all может завершиться с ошибкой, мы, как и ранее, используем unwrap на любом потенциально ошибочном результате. И опять, в реальном приложении здесь вам нужно было бы добавить обработку ошибок. После этих изменений давайте запустим наш код и сделаем запрос. Мы больше не печатаем никаких данных в окно вызова, поэтому мы не увидим никакого вывода, кроме сообщений от Cargo. Когда вы загрузите 127.0.0.1:7878 в веб-браузере, вы должны получить пустую страницу вместо ошибки. Вы только что вручную написали код получения HTTP-запроса и отправки ответа на него!","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Написание ответа","id":"379","title":"Написание ответа"},"38":{"body":"Давайте протестируем первую часть игры. Запустите её используя cargo run: $ cargo run Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 6.44s Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6 На данном этапе первая часть игры завершена: мы получаем ввод с клавиатуры и затем печатаем его.","breadcrumbs":"Программирование игры в загадки » Тестирование первой части","id":"38","title":"Тестирование первой части"},"380":{"body":"Давайте реализуем функционал чего-нибудь большего, чем просто пустой страницы. Создайте новый файл hello.html в корне каталога вашего проекта, а не в каталоге src . Вы можете ввести любой HTML-код, который вам заблагорассудится; В приложении 20-4 показан один из вариантов. Файл: hello.html {{#include ../listings/ch20-web-server/listing-20-05/hello.html}} Приложение 20-4: Пример HTML-файла для ответа на запрос Это простейший HTML5-документ с заголовком и каким-то текстом. Чтобы сервер возвращал его в ответ на полученный запрос, мы изменим handle_connection, как показано в приложении 20-5, чтобы считать HTML-файл, добавить его в ответ в качестве тела и отправить. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-05/src/main.rs:here}} Приложение 20-5. Отправка содержимого hello.html в качестве тела ответа Мы добавили элемент fs в указанию use, чтобы включить в область видимости модуль файловой системы встроенной библиотеки. Код для чтения содержимого файла в строку должен выглядеть знакомым для вас; мы использовали его в главе 12, когда читали содержимое файла для нашего проекта ввода-вывода в приложении 12-4. Далее мы используем format! чтобы добавить содержимое файла в качестве тела ответа об успешном завершении. Чтобы обеспечить действительный HTTP-ответ, мы добавляем заголовок Content-Length который имеет размер тела нашего ответа, в данном случае размер hello.html . Запустите этот код приказом cargo run и загрузите 127.0.0.1:7878 в браузере; вы должны увидеть выведенный HTML в браузере! В настоящее время мы пренебрегаем данные запроса в переменной http_request и в любом случае просто отправляем обратно содержимое HTML-файла. Это означает, что если вы попытаетесь запросить адрес 127.0.0.1:7878/something-else в своём браузере, вы все равно получите тот же самый HTML-ответ. Пока что наш сервер очень ограничен, и не умеет делать то, что делает большинство веб-серверов. Мы хотим настроить наши ответы в зависимости от запроса и отправлять обратно HTML-файл только для правильно сформированного запроса к пути / .","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Возвращение реального HTML","id":"380","title":"Возвращение реального HTML"},"381":{"body":"Сейчас наш веб-сервер возвращает HTML из файла независимо от того, что определенно запросил клиент. Давайте добавим проверку того, что браузер запрашивает / , прежде чем вернуть HTML-файл, и будем возвращать ошибку, если браузер запрашивает что-то постороннее. Для этого нам нужно модифицировать handle_connection, как показано в приложении 20-6. Новый код проверяет соответствует ли требуемый запросом ресурс с определителем / , и содержит разделы if и else, чтобы иначе обрабатывать другие запросы. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-06/src/main.rs:here}} Приложение 20-6: Обрабатываем запросы для корневого ресурса / не так, как запросы для других ресурсов Мы будем рассматривать только первую строку HTTP-запроса, поэтому вместо того, чтобы читать весь запрос в вектор, мы вызываем next , чтобы получить первый элемент из повторителя. Первый вызов unwrap заботится об обработке Option и останавливает программу, если в повторителе нет элементов. Второй unwrap обрабатывает Result и имеет тот же эффект, что и unwrap, который был в map, добавленном в приложении 20-2. Затем мы проверяем переменную request_line, чтобы увидеть, равна ли она строке запроса, соответствующей запросу GET для пути / . Если это так, разделif возвращает содержимое нашего HTML-файла. Если request_line не равна запросу GET для пути / , это означает, что мы получили какой-то другой запрос. Мы скоро добавим код в разделelse, чтобы ответить на все остальные запросы. Запустите этот код сейчас и запросите 127.0.0.1:7878 ; вы должны получить HTML в hello.html . Если вы сделаете любой другой запрос, например 127.0.0.1:7878/something-else , вы получите ошибку соединения, подобную той, которую вы видели при запуске кода из Приложения 20-1 и Приложения 20-2. Теперь давайте добавим код из приложения 20-7 в разделelse чтобы вернуть ответ с кодом состояния 404, который сигнализирует о том, что контент для запроса не найден. Мы также вернём HTML-код для страницы, отображаемой в браузере, с указанием ответа конечному пользователю. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-07/src/main.rs:here}} Приложение 20-7: Отвечаем кодом состояния 404 и страницей ошибки, если было запрошено что-то, отличающееся от ресурса / Здесь ответ имеет строку состояния с кодом 404 и фразу причины NOT FOUND. Тело ответа будет HTML из файла 404.html . Вам нужно создать файл 404.html рядом с hello.html для этой страницы ошибки; снова не стесняйтесь использовать любой HTML код или пример HTML кода в приложении 20-8. Файл: 404.html {{#include ../listings/ch20-web-server/listing-20-07/404.html}} Приложение 20-8. Пример содержимого страницы для отправки с любым ответом 404 С этими изменениями снова запустите сервер. Запрос на 127.0.0.1:7878 должен возвращать содержимое hello.html , и любой другой запрос, как 127.0.0.1:7878/foo , должен возвращать сообщение об ошибке HTML от 404.html .","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Проверка запроса и выборочное возвращение ответа","id":"381","title":"Проверка запроса и выборочное возвращение ответа"},"382":{"body":"На текущий момент разделы if и else во многом повторяются: они оба читают файлы и записывают содержимое файлов в поток. Разница лишь в строке состояния и имени файла. Давайте сделаем код более лаконичным, вынеся эти отличия в отдельные разделы if и else, в которых переменным будут присвоены значения строки состояния и имени файла; далее эти переменные мы сможем использовать в коде для чтения файла и создания ответа. В приложении 20-9 показан код после изменения объёмных разделов if и else. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-09/src/main.rs:here}} Приложение 20-9: Рефакторинг разделов if и else, чтобы они содержали только код, который отличается для каждого из случаев Теперь разделы if и else возвращают только соответствующие значения для строки состояния и имени файла в кортеже. Затем мы используем деструктурирование, чтобы присвоить эти два значения status_line и filename используя шаблон в указания let, как обсуждалось в главе 18. Ранее повторяющийся код теперь находится вне разделов if и else и использует переменные status_line и filename. Это позволяет легче увидеть разницу между этими двумя случаями и означает, что у нас есть только одно место для обновления кода, если захотим изменить работу чтения файлов и записи ответов. Поведение кода в приложении 20-9 будет таким же, как и в 20-8. Потрясающие! Теперь у нас есть простой веб-сервер примерно на 40 строках кода Rust, который отвечает на один запрос страницей с контентом и отвечает на все остальные запросы ответом 404. В настоящее время наш сервер работает в одном потоке, что означает, что он может обслуживать только один запрос за раз. Давайте разберёмся, почему это может быть проблемой, сымитировав несколько медленных запросов. Затем мы исправим ситуацию так, чтобы наш сервер мог обрабатывать несколько запросов одновременно.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Создание однопоточного веб-сервера » Рефакторинг","id":"382","title":"Рефакторинг"},"383":{"body":"В текущей реализации сервер обрабатывает каждый запрос по очереди, то есть, он не начнёт обрабатывать второе соединение, пока не завершит обработку первого. При росте числа запросов к серверу, такое последовательное выполнение было бы все менее и менее оптимальным. Если сервер получает какой-то запрос, обработка которого занимает достаточно много времени, последующим запросам придётся ждать завершения обработки длительного запроса, даже если эти новые запросы сами по себе могут быть обработаны быстро. Нам нужно это исправить, но сначала рассмотрим проблему в действии.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Превращение нашего однопоточного сервера в многопоточный сервер » Превращение однопоточного сервера в многопоточный сервер","id":"383","title":"Превращение однопоточного сервера в многопоточный сервер"},"384":{"body":"Мы посмотрим, как запрос с медленной обработкой может повлиять на другие запросы, сделанные к серверу в текущей реализации. В приложении 20-10 реализована обработка запроса к ресурсу /sleep с эмуляцией медленного ответа, при которой сервер будет ждать 5 секунд перед тем, как ответить. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-10/src/main.rs:here}} Приложение 20-10: Подражание медленного запроса с помощью 5-секундной задержки Мы переключились с if на match, так как теперь у нас есть три случая. Нам придётся явно сопоставить срез от request_line для проверки совпадения шаблона со строковыми литералами; match не делает самостоятельно е ссылки и разыменования, как это делает способ равенства. Первая ветка совпадает с разделом if из приложения 20-9. Вторая ветка соответствует запросу /sleep . Когда этот запрос получен, сервер заснёт на 5 секунд, прежде чем отдать успешную HTML-страницу. Третья ветка совпадает с разделом else из приложения 20-9. Можно увидеть, насколько примитивен наш сервер: в существующих библиотеках распознавание разных запросов осуществлялось бы гораздо менее многословно! Запустите сервер приказом cargo run. Затем откройте два окна браузера: одно с адресом http://127.0.0.1:7878/ , другое с http://127.0.0.1:7878/sleep . Если вы несколько раз обратитесь к URI / , то как и раньше увидите, что сервер быстро ответит. Но если вы введёте URI /sleep , а затем загрузите URI / , то увидите что / ждёт, пока /sleep не отработает полные 5 секунд перед загрузкой страницы. Есть несколько способов, которые можно использовать, чтобы избавиться от подтормаживания запросов после одного медленного запроса; способ, который мы реализуем, называется пулом потоков.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Превращение нашего однопоточного сервера в многопоточный сервер » Подражание медленного запроса в текущей реализации сервера","id":"384","title":"Подражание медленного запроса в текущей реализации сервера"},"385":{"body":"Пул потоков является группой заранее порождённых потоков, ожидающих в пуле и готовых выполнить задачу. Когда программа получает новую задачу, она назначает эту задачу одному из потоков в пуле, и тогда задача будет обработана этим потоком. Остальные потоки в пуле доступны для обработки любых других задач, поступающих в то время, пока первый поток занят. Когда первый поток завершает обработку своей задачи, он возвращается в пул свободных потоков, готовых приступить к новой задаче. Пул потоков позволяет обрабатывать соединения параллельно, увеличивая пропускную способность вашего сервера. Мы ограничим число потоков в пуле небольшим числом, чтобы защитить нас от атак вида «отказ в обслуживании» (DoS - Denial of Service); если бы наша программа создавала новый поток в момент поступления каждого запроса, то кто-то сделавший 10 миллионов запросов к серверу, мог бы создать хаос, использовать все ресурсы нашего сервера и остановить обработку запросов. Вместо порождения неограниченного количества потоков, у нас будет фиксированное количество потоков, ожидающих в пуле. Поступающие запросы будут отправляться в пул для обработки. Пул будет иметь очередь входящих запросов. Каждый из потоков в пуле будет извлекать запрос из этой очереди, обрабатывать запрос и затем запрашивать в очереди следующий запрос. При таком дизайне мы можем обрабатывать N запросов одновременно, где N - количество потоков. Если каждый поток отвечает на длительный запрос, последующие запросы могут по-прежнему задержаться в очереди, но теперь мы увеличили количество \"длинных\" запросов, которые мы можем обработать, перед тем, как эта ситуация снова возникнет. Этот подход - лишь один из многих способов улучшить пропускную способность веб-сервера. Другими вариантами, на которые возможно стоило бы обратить внимание, являются: модель fork/join , модель однопоточного не согласованного ввода-вывода или модель многопоточного не согласованного ввода-вывода . Если вам важна эта тема, вы можете почитать больше сведений о других решениях и попробовать реализовать их самостоятельно. С таким низкоуровневым языком как Rust, любой из этих вариантов осуществим. Прежде чем приступить к реализации пула потоков, давайте поговорим о том, как должно выглядеть использование пула. Когда вы пытаетесь проектировать код, сначала необходимо написать клиентский внешнюю оболочку. Напишите API кода, чтобы он был структурирован так, как вы хотите его вызывать, затем реализуйте функциональность данной структуры, вместо подхода реализовывать функционал, а затем разрабатывать общедоступный API. Подобно тому, как мы использовали разработку через тестирование (test-driven) в проекте главы 12, мы будем использовать здесь разработку, управляемую сборщиком (compiler-driven). Мы напишем код, вызывающий нужные нам функции, а затем посмотрим на ошибки сборщика, чтобы определить, что мы должны изменить дальше, чтобы заставить код работать. Однако перед этим, в качестве отправной точки, мы рассмотрим технику, которую мы не будем применять в дальнейшем. Порождение потока для каждого запроса Сначала давайте рассмотрим, как мог бы выглядеть код, если бы он создавал бы новый поток для каждого соединения. Как упоминалось ранее, мы не планируем использовать этот способ в окончательной реализации, из-за возможных проблем при потенциально неограниченном числе порождённых потоков. Это лишь отправная точка, с которой начнёт работу наш многопоточный сервер. Затем мы улучшим код, добавив пул потоков, и тогда разницу между этими двумя решениями будет легче заметить. В приложении 20-11 показаны изменения, которые нужно внести в код main, чтобы порождать новый поток для обработки каждого входящего соединения внутри цикла for. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-11/src/main.rs:here}} Приложение 20-11: Порождение нового потока для каждого соединения Как вы изучили в главе 16, функция thread::spawn создаст новый поток и затем запустит код замыкания в этом новом потоке. Если вы запустите этот код и загрузите /sleep в своём браузере, а затем загрузите / в двух других вкладках браузера, вы действительно увидите, что запросам к / не приходится ждать завершения /sleep . Но, как мы уже упоминали, это в какой-то момент приведёт к сильному снижению производительности системы, так как вы будете создавать новые потоки без каких-либо ограничений. Создание конечного числа потоков Мы хотим, чтобы наш пул потоков работал подобным, знакомым образом, чтобы переключение с потоков на пул потоков не требовало больших изменений в коде использующем наш API. В приложении 20-12 показан гипотетический внешняя оболочка для структуры ThreadPool, который мы хотим использовать вместо thread::spawn. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-12/src/main.rs:here}} Приложение 20-12: Наш наилучший внешняя оболочка ThreadPool Мы используем ThreadPool::new, чтобы создать новый пул потоков с конфигурируемым числом потоков, в данном случае четырьмя. Затем в цикле for функция pool.execute имеет внешнюю оболочку, похожий на thread::spawn, в том смысле, что он так же принимает замыкание, код которого пул должен выполнить для каждого соединения. Нам нужно реализовать pool.execute, чтобы он принимал замыкание и передавал его потоку из пула для выполнения. Этот код пока не ссобирается, но мы постараемся, чтобы сборщик помог нам это исправить. Создание ThreadPool с помощью разработки, управляемой сборщиком Внесите изменения приложения 20-12 в файл src/main.rs , а затем давайте воспользуемся ошибками сборщика из приказы cargo check для управления нашей разработкой. Вот первая ошибка, которую мы получаем: {{#include ../listings/ch20-web-server/listing-20-12/output.txt}} Замечательно! Ошибка говорит о том, что нам нужен вид или модуль ThreadPool, поэтому мы сейчас его создадим. Наша реализация ThreadPool не будет зависеть от того, что делает наш веб-сервер. Итак, давайте переделаем крейт hello из двоичного в библиотечный, чтобы хранить там нашу реализацию ThreadPool. После того, как мы переключимся в библиотечный крейт, мы также сможем использовать отдельную библиотеку пула потоков для любой подходящей работы, а не только для обслуживания веб-запросов. Создайте файл src/lib.rs , который содержит следующий код, который является простейшим определением структуры ThreadPool, которое мы можем иметь на данный момент: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-01-define-threadpool-struct/src/lib.rs}} Затем изменените файл main.rs , чтобы внести ThreadPool из библиотечного крейта в текущую область видимости, добавив следующий код в начало src/main.rs : Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-01-define-threadpool-struct/src/main.rs:here}} Этот код по-прежнему не будет работать, но давайте проверим его ещё раз, чтобы получить следующую ошибку, которую нам нужно устранить: {{#include ../listings/ch20-web-server/no-listing-01-define-threadpool-struct/output.txt}} Эта ошибка указывает, что далее нам нужно создать ассоциированную функцию с именем new для ThreadPool. Мы также знаем, что new должна иметь один свойство, который может принимать 4 в качестве переменной и должен возвращать экземпляр ThreadPool. Давайте реализуем простейшую функцию new, которая будет иметь эти характеристики: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-02-impl-threadpool-new/src/lib.rs}} Мы выбираем usize в качестве вида свойства size, потому что мы знаем, что отрицательное число потоков не имеет никакого смысла. Мы также знаем, что мы будем использовать число 4 в качестве количества элементов в собрания потоков, для чего предназначен вид usize, как обсуждалось в разделе \"Целочисленные виды\" главы 3. Давайте проверим код ещё раз: {{#include ../listings/ch20-web-server/no-listing-02-impl-threadpool-new/output.txt}} Теперь мы ошибка возникает из-за того, что у нас нет способа execute в структуре ThreadPool. Вспомните раздел \"Создание конечного числа потоков\" , в котором мы решили, что наш пул потоков должен иметь внешнюю оболочку, похожий на thread::spawn. Кроме того, мы реализуем функцию execute, чтобы она принимала замыкание и передавала его свободному потоку из пула для запуска. Мы определим способ execute у ThreadPool, принимающий замыкание в качестве свойства. Вспомните из раздела \"Перемещение захваченных значений из замыканий и трейты Fn\" главы 13 сведения о том, что мы можем принимать замыкания в качестве свойств тремя различными типажами: Fn , FnMut и FnOnce. Нам нужно решить, какой вид замыкания использовать здесь. Мы знаем, что в конечном счёте мы сделаем что-то похожее на реализацию встроенной библиотеки thread::spawn, поэтому мы можем посмотреть, какие ограничения накладывает на свой свойство сигнатура функции thread::spawn. Документация показывает следующее: pub fn spawn<F, T>(f: F) -> JoinHandle<T> where F: FnOnce() -> T, F: Send + 'static, T: Send + 'static, Свойство вида F - это как раз то, что нас важно; свойство вида T относится к возвращаемому значению и нам он не важен. Можно увидеть, что spawn использует FnOnce в качестве ограничения типажа у F. Возможно это как раз то, чего мы хотим, так как в конечном итоге мы передадим полученный в execute переменная в функцию spawn. Дополнительную уверенность в том, что FnOnce - это именно тот типаж, который мы хотим использовать, нам даёт факт, что поток для выполнения запроса будет выполнять замыкание этого запроса только один раз, что соответствует части Once (\"единожды\") в названии типажа FnOnce. Свойство вида F также имеет ограничение типажа Send и ограничение времени жизни 'static, которые полезны в нашей ситуации: нам нужен Send для передачи замыкания из одного потока в другой и 'static, потому что мы не знаем, сколько времени поток будет выполняться. Давайте создадим способ execute для ThreadPool, который будет принимать обобщённый свойство вида F со следующими ограничениями: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-03-define-execute/src/lib.rs:here}} Мы по-прежнему используем () после FnOnce потому что типаж FnOnce представляет замыкание, которое не принимает свойств и возвращает единичный вид (). Также как и при определении функций, вид возвращаемого значения в сигнатуре может быть опущен, но даже если у нас нет свойств, нам все равно нужны скобки. Опять же, это самая простая реализация способа execute: она ничего не делает, мы просто пытаемся сделать код собираемым. Давайте проверим снова: {{#include ../listings/ch20-web-server/no-listing-03-define-execute/output.txt}} Сейчас мы получаем только предупреждения, что означает, что код собирается! Но обратите внимание, если вы попробуете cargo run и сделаете запрос в браузере, вы увидите ошибки в браузере, которые мы видели в начале главы. Наша библиотека на самом деле ещё не вызывает замыкание, переданное в execute! Примечание: вы возможно слышали высказывание о языках со строгими сборщиками, таких как Haskell и Rust, которое звучит так: «Если код собирается, то он работает». Но это высказывание не всегда верно. Наш проект собирается, но абсолютно ничего не делает! Если бы мы создавали существующий, законченный проект, это был бы хороший момент начать писать модульные тесты, чтобы проверять, что код собирается и имеет желаемое поведение. Проверка количества потоков в new Мы ничего не делаем с свойствами new и execute. Давайте реализуем тела этих функций с нужным нам поведением. Для начала давайте подумаем о new. Ранее мы выбрали беззнаковый вид для свойства size, потому что пул с отрицательным числом потоков не имеет смысла. Пул с нулём потоков также не имеет смысла, однако ноль - это вполне допустимое значение usize. Мы добавим код для проверки того, что size больше нуля, прежде чем вернуть экземпляр ThreadPool, и заставим программу паниковать, если она получит ноль, используя макрос assert!, как показано в приложении 20-13. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-13/src/lib.rs:here}} Приложение 20-13: Реализация ThreadPool::new с аварийным завершениям работы, если size равен нулю Мы добавили немного документации для нашей структуры ThreadPool с помощью комментариев. Обратите внимание, что мы следовали хорошим практикам документирования, добавив раздел, в котором указывается ситуация, при которой функция может аварийно завершаться, как это обсуждалось в главе 14. Попробуйте запустить cargo doc --open и кликнуть на структуру ThreadPool, чтобы увидеть как выглядит сгенерированная документация для new! Вместо добавления макроса assert!, как мы здесь сделали, мы могли бы преобразовать функцию new в функцию build таким образом, чтобы она возвращала Result , подобно тому, как мы делали в функции Config::new проекта ввода/вывода в приложении 12-9. Но в данном случае мы решили, что попытка создания пула потоков без указания хотя бы одного потока должна быть непоправимой ошибкой. Если вы чувствуете такое стремление, попробуйте написать функцию build с сигнатурой ниже, для сравнения с функцией new: pub fn build(size: usize) -> Result<ThreadPool, PoolCreationError> { Создание места для хранения потоков Теперь, имея возможность удостовериться, что количество потоков для хранения в пуле соответствует требованиям, мы можем создавать эти потоки и сохранять их в структуре ThreadPool перед тем как возвратить её. Но как мы \"сохраним\" поток? Давайте ещё раз посмотрим на сигнатуру thread::spawn: pub fn spawn<F, T>(f: F) -> JoinHandle<T> where F: FnOnce() -> T, F: Send + 'static, T: Send + 'static, Функция spawn возвращает вид JoinHandle<T>, где T является видом, который возвращает замыкание. Давайте попробуем использовать JoinHandle и посмотрим, что произойдёт. В нашем случае замыкания, которые мы передаём пулу потоков, будут обрабатывать соединение и не будут возвращать ничего, поэтому T будет единичным (unit) видом (). Код в приложении 20-14 ссобирается, но пока не создаст ни одного потока. Мы изменили определение ThreadPool так, чтобы он содержал вектор экземпляров thread::JoinHandle<()>, инициализировали вектор ёмкостью size, установили цикл for, который будет выполнять некоторый код для создания потоков, и вернули экземпляр ThreadPool, содержащий их. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-14/src/lib.rs:here}} Приложение 20-14: Создание вектора в ThreadPool для хранения потоков Мы включили std::thread в область видимости библиотечного крейта, потому что мы используем thread::JoinHandle в качестве вида элементов вектора в ThreadPool. После получения корректного значения size, наш ThreadPool создаёт новый вектор, который может содержать size элементов. Функция with_capacity выполняет ту же задачу, что и Vec::new, но с важным отличием: она заранее выделяет необходимый объём памяти в векторе. Поскольку мы знаем, что нам нужно хранить size элементов в векторе, предварительное выделение памяти для этих элементов будет немного более эффективным, чем использование Vec::new, при котором размер вектора будет увеличиваться по мере вставки элементов. Если вы снова запустите приказ cargo check, она должна завершиться успешно. Структура Worker, ответственная за отправку кода из ThreadPool в поток Мы целенаправленно оставили комментарий в цикле for в Приложении 20-14 по поводу создания потоков. Сейчас мы разберёмся, как на самом деле создаются потоки. Стандартная библиотека предоставляет thread::spawn для создания потоков, причём thread::spawn ожидает получить некоторый код, который поток должен выполнить, как только он будет создан. Однако в нашем случае мы хотим создавать потоки и заставлять их ожидать код, который мы будем передавать им позже. Реализация потоков в встроенной библиотеке не предоставляет никакого способа сделать это, мы должны реализовать это вручную. Мы будем реализовывать это поведение, добавив новую структуру данных между ThreadPool и потоками, которая будет управлять этим новым поведением. Мы назовём эту структуру Worker (\"работник\"), это общепринятое имя в реализации пулов. Работник берёт код, который нужно выполнить, и запускает этот код внутри рабочего потока. Представьте людей, работающих на кухне ресторана: работники ожидают, пока не поступят заказы от клиентов, а затем они несут ответственность за принятие этих заказов и их выполнение. Вместо того чтобы хранить вектор экземпляров JoinHandle<()> в пуле потоков, мы будем хранить экземпляры структуры Worker. Каждый Worker будет хранить один экземпляр JoinHandle<()>. Затем мы реализуем способ у Worker, который будет принимать замыкание и отправлять его в существующий поток для выполнения. Для того чтобы мы могли различать работники в пуле при логировании или отладке, мы также присвоим каждому работнику id. Вот как выглядит новая последовательность действий, которые будут происходить при создании ThreadPool. Мы реализуем код, который будет отправлять замыкание в поток, после того, как у нас будет Worker , заданный следующим образом: Определим структуру Worker, которая содержит id и JoinHandle<()>. Изменим ThreadPool, чтобы он содержал вектор экземпляров Worker. Определим функцию Worker::new, которая принимает номер id и возвращает экземпляр Worker, который содержит id и поток, порождённый с пустым замыканием. В ThreadPool::new используем счётчик цикла for для генерации id, создаём новый Worker с этим id и сохраняем экземпляр \"работника\" в вектор. Если вы готовы принять вызов, попробуйте реализовать эти изменения самостоятельно, не глядя на код в приложении 20-15. Готовы? Вот приложение 20-15 с одним из способов сделать указанные ранее изменения. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-15/src/lib.rs:here}} Приложение 20-15: Изменение ThreadPool для хранения экземпляров Worker вместо непосредственного хранения потоков Мы изменили название поля в ThreadPool с threads на workers, поскольку теперь оно содержит экземпляры Worker вместо экземпляров JoinHandle<()>. Мы используем счётчик в цикле for для передачи цифрового определителя в качестве переменной Worker::new, и сохраняем каждый новый Worker в векторе с именем workers. Внешний код (вроде нашего сервера в src/bin/main.rs ) не обязательно должен знать подробности реализации, касающиеся использования структуры Worker внутри ThreadPool, поэтому мы делаем структуру Worker и её функцию new приватными. Функция Worker::new использует заданный нами id и сохраняет экземпляр JoinHandle<()>, который создаётся при порождении нового потока с пустым замыканием. Примечание: Если операционная система не может создать поток из-за нехватки системных ресурсов, thread::spawn аварийно завершится. Это приведёт к аварийному завершению нашего сервера целиком, даже если некоторые потоки были созданы успешно. Для простоты будем считать, что нас устраивает такое поведение, но в существующей реализации пула потоков вы, вероятно, захотите использовать std::thread::Builder и его способ spawn , который вместо этого возвращает Result . Этот код ссобирается и будет хранить количество экземпляров Worker, которое мы указали в качестве переменной функции ThreadPool::new. Но мы всё ещё не обрабатываем замыкание, которое мы получаем в способе execute. Давайте посмотрим, как это сделать далее. Отправка запросов в потоки через потоки Следующая проблема, с которой мы будем бороться, заключается в том, что замыкания, переданные в thread::spawn абсолютно ничего не делают. Сейчас мы получаем замыкание, которое хотим выполнить, в способе execute. Но мы должны передать какое-то замыкание в способ thread::spawn, при создании каждого Worker во время создания ThreadPool. Мы хотим, чтобы вновь созданные структуры Worker извлекали код для запуска из очереди, хранящейся в ThreadPool и отправляли этот код в свой поток для выполнения. потоки (channels), простой способ коммуникации между двумя потоками, с которыми мы познакомились в главе 16, кажется наилучше подойдут для этого сценария. Мы будем использовать поток в качестве очереди заданий, а приказ execute отправит задание из ThreadPool экземплярам Worker, которые будут отправлять задание в свой поток. План таков: ThreadPool создаст поток и будет хранить отправитель. Каждый Worker будет хранить приёмник. Мы создадим новую структуру Job, которая будет хранить замыкания, которые мы хотим отправить в поток. Способ execute отправит задание, которое он хочет выполнить, в отправляющую сторону потока. В своём потоке Worker будет циклически опрашивать принимающую сторону потока и выполнять замыкание любого задания, которое он получит. Давайте начнём с создания потока в ThreadPool::new и удержания отправляющей стороны в экземпляре ThreadPool, как показано в приложении 20-16. В структуре Job сейчас ничего не содержится, но это будет вид элемента, который мы отправляем в поток. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-16/src/lib.rs:here}} Приложение 20-16: Модификация ThreadPool для хранения отправляющей части потока, который отправляет экземпляры Job В ThreadPool::new мы создаём наш новый поток и сохраняем в пуле его отправляющую сторону. Код успешно ссобирается. Давайте попробуем передавать принимающую сторону потока каждому \"работнику\" (структуре Worker), когда пул потоков создаёт поток. Мы знаем, что хотим использовать получающую часть потока в потоке, порождаемым \"работником\", поэтому мы будем ссылаться на свойство receiver в замыкании. Код 20-17 пока не собирается. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-17/src/lib.rs:here}} Приложение 20-17: Передача принимающей части потока \"работникам\" Мы внесли несколько небольших и простых изменений: мы передаём принимающую часть потока в Worker::new, а затем используем его внутри замыкания. При попытке проверить код, мы получаем ошибку: {{#include ../listings/ch20-web-server/listing-20-17/output.txt}} Код пытается передать receiver нескольким экземплярам Worker. Это не сработает, поскольку, как вы можете помнить из главы 16: реализация потока, которую предоставляет Rust - несколько производителей , один потребитель . Это означает, что мы не можем просто клонировать принимающую сторону потока, чтобы исправить этот код. Кроме этого, мы не хотим отправлять одно и то же сообщение нескольким потребителям, поэтому нам нужен единый список сообщений для множества обработчиков, чтобы каждое сообщение обрабатывалось лишь один раз. Кроме того, удаление задачи из очереди потока включает изменение receiver, поэтому потокам необходим безопасный способ делиться и изменять receiver, в противном случае мы можем получить условия гонки (как описано в главе 16). Вспомните умные указатели, которые обсуждались в главе 16: чтобы делиться владением между несколькими потоками и разрешать потокам изменять значение, нам нужно использовать вид Arc<Mutex<T>>. Вид Arc позволит нескольким \"работникам\" владеть получателем (receiver), а Mutex заверяет что только один \"работник\" сможет получить задание (job) от получателя за раз. Приложение 20-18 показывает изменения, которые мы должны сделать. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-18/src/lib.rs:here}} Приложение 20-18. Совместное использование приёмника в \"работниках\" с применением Arc и Mutex В ThreadPool::new мы помещаем принимающую сторону потока внутрь Arc и Mutex. Для каждого нового \"работника\" мы клонируем Arc, чтобы увеличить счётчик ссылок так, что \"работники\" могут разделять владение принимающей стороной потока. С этими изменениями код собирается! Мы подбираемся к цели! Реализация способа execute Давайте реализуем наконец способ execute у структуры ThreadPool. Мы также изменим вид Job со структуры на псевдоним вида для типаж-объекта, который будет содержать вид замыкания, принимаемый способом execute. Как описано в разделе \"Создание синонимов вида с помощью псевдонимов типа\" главы 19, псевдонимы видов позволяют делать длинные виды короче, облегчая их использование. Посмотрите на приложение 20-19. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-19/src/lib.rs:here}} Приложение 20-19: Создание псевдонима вида Job для указателя Box, содержащего каждое замыкание и затем отправляющее задание (job) в поток После создания нового экземпляра Job с замыканием, полученным в execute, мы посылаем его через отправляющий конец потока. На тот случай, если отправка не удастся, вызываем unwrap у send. Это может произойти, например, если мы остановим выполнение всех наших потоков, что означает, что принимающая сторона прекратила получать новые сообщения. На данный момент мы не можем остановить выполнение наших потоков: наши потоки будут функционировать до тех пор, пока существует пул. Причина, по которой мы используем unwrap, заключается в том, что, хотя мы знаем, что сбой не произойдёт, сборщик этого не знает. Но мы ещё не закончили! В \"работнике\" (worker) наше замыкание, переданное в thread::spawn все ещё ссылается только на принимающую сторону потока. Вместо этого нам нужно, чтобы замыкание работало в бесконечном цикле, запрашивая задание у принимающей части потока и выполняя задание, когда оно принято. Давайте внесём изменения, показанные в приложении 20-20 внутри Worker::new. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-20/src/lib.rs:here}} Приложение 20-20: Получение и выполнение заданий в потоке \"работника\" Здесь мы сначала вызываем lock у receiver, чтобы получить мьютекс, а затем вызываем unwrap, чтобы аварийно завершить работу при любых ошибках. Захват блокировки может завершиться неудачей, если мьютекс находится в отравленном состоянии (poisoned state), что может произойти, если какой-то другой поток завершился аварийно, удерживая блокировку, вместо снятия блокировки. В этой ситуации вызвать unwrap для аварийного завершения потока вполне оправдано. Не стесняйтесь заменить unwrap на expect с сообщением об ошибке, которое имеет для вас значение. Если мы получили блокировку мьютекса, мы вызываем recv, чтобы получить Job из потока. Последний вызов unwrap позволяет миновать любые ошибки, которые могут возникнуть, если поток, управляющий отправитель, прекратил функционировать, подобно тому, как способ send возвращает Err, если получатель не принимает сообщение. Вызов recv - блокирующий, поэтому пока задач нет, текущий поток будет ждать, пока задача не появится. Mutex<T> заверяет, что только один поток Worker за раз попытается запросить задачу. Наш пул потоков теперь находится в рабочем состоянии! Выполните cargo run и сделайте несколько запросов: $ cargo run Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers` --> src/lib.rs:7:5 |\n7 | workers: Vec<Worker>, | ^^^^^^^^^^^^^^^^^^^^ | = note: `#[warn(dead_code)]` on by default warning: field is never read: `id` --> src/lib.rs:48:5 |\n48 | id: usize, | ^^^^^^^^^ warning: field is never read: `thread` --> src/lib.rs:49:5 |\n49 | thread: thread::JoinHandle<()>, | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ warning: `hello` (lib) generated 3 warnings Finished dev [unoptimized + debuginfo] target(s) in 1.40s Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing. Успех! Теперь у нас есть пул потоков, который обрабатывает соединения не согласованно. Никогда не создаётся более четырёх потоков, поэтому наша система не будет перегружена, если сервер получит много запросов. Если мы отправим запрос ресурса /sleep , сервер сможет обслуживать другие запросы, обрабатывая их в другом потоке. Примечание: если вы запросите /sleep в нескольких окнах браузера одновременно, они могут загружаться по одному, с интервалами в 5 секунд. Некоторые веб-браузеры выполняют несколько экземпляров одного и того же запроса последовательно из-за кэширования. Такое ограничение не связано с работой нашего веб-сервера. После изучения цикла while let в главе 18 вы можете удивиться, почему мы не написали код рабочего потока (worker thread), как показано в приложении 20-22. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-21/src/lib.rs:here}} Приложение 20-22: Иная реализация Worker::new с использованием while let Этот код собирается и запускается, но не даёт желаемого поведения: медленный запрос всё равно приведёт к тому, что другие запросы будут ждать обработки. Причина здесь несколько тоньше: структура Mutex не имеет публичного способа unlock, так как владение блокировкой основано на времени жизни MutexGuard<T> внутри LockResult<MutexGuard<T>>, которое возвращает способ lock. Во время сборки анализатор заимствований может проследить за выполнением правила, согласно которому к ресурсу, охраняемому Mutex, нельзя получить доступ пока мы удерживаем блокировку. Однако в этой реализация мы также можем получить ситуацию, когда блокировка будет удерживаться дольше, чем предполагалось, если мы не будем внимательно учитывать время жизни MutexGuard<T>. Код в приложении 20-20, использующий let job = receiver.lock().unwrap().recv().unwrap(); работает, потому что при использовании let любые промежуточные значения, используемые в выражении справа от знака равенства, немедленно уничтожаются после завершения указания let. Однако while let (и if let и match) не удаляет временные значения до конца связанного раздела. Таким образом, в приложении 20-21 блокировка не снимается в течение всего времени вызова job(), что означает, что другие работники не могут получать задания.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Превращение нашего однопоточного сервера в многопоточный сервер » Улучшение пропускной способности с помощью пула потоков","id":"385","title":"Улучшение пропускной способности с помощью пула потоков"},"386":{"body":"Приложение 20-20 не согласованно отвечает на запросы с помощью использования пула потоков, как мы и хотели. Мы получаем некоторые предупреждения про workers, id и поля thread, которые мы не используем напрямую, что напоминает нам о том, что мы не освобождаем все ресурсы. Когда мы используем менее элегантный способ остановки основного потока клавишной сочетанием ctrl-c, все остальные потоки также немедленно останавливаются, даже если они находятся в середине обработки запроса. Далее, реализуем типаж Drop для вызова join у каждого потока в пуле, чтобы они могли завершить запросы, над которыми они работают, перед закрытием. Затем мы реализуем способ сообщить потокам, что они должны перестать принимать новые запросы и завершить работу. Чтобы увидеть этот код в действии, мы изменим наш сервер так, чтобы он принимал только два запроса, после чего корректно завершал работу пула потоков.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Мягкое завершение работы и очистка » Мягкое завершение работы и очистка","id":"386","title":"Мягкое завершение работы и очистка"},"387":{"body":"Давайте начнём с реализации Drop у нашего пула потоков. Когда пул удаляется, все наши потоки должны объединиться (join), чтобы убедиться, что они завершают свою работу. В приложении 20-22 показана первая попытка реализации Drop, код пока не будет работать. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-22/src/lib.rs:here}} Приложение 20-22: Присоединение (Joining) каждого потока, когда пул потоков выходит из области видимости Сначала мы пройдёмся по каждому worker из пула потоков. Для этого мы используем &mut с self, потому что нам нужно иметь возможность изменять worker. Для каждого обработчика мы выводим сообщение о том, что он завершает работу, а затем вызываем join у потока этого обработчика. Для случаев, когда вызов join не удался, мы используем unwrap, чтобы заставить Rust запаниковать и перейти в режим грубого завершения работы. Ошибка получаемая при сборки этого кода: {{#include ../listings/ch20-web-server/listing-20-22/output.txt}} Ошибка говорит нам, что мы не можем вызвать join, потому что у нас есть только изменяемое заимствование каждого worker, а join забирает во владение свой переменная. Чтобы решить эту проблему, нам нужно извлечь поток из экземпляра Worker, который владеет thread, чтобы join мог его использовать. Мы сделали это в приложении 17-15: теперь, когда Worker хранит в себе Option<thread::JoinHandle<()>>, мы можем воспользоваться способом take у Option, чтобы извлечь значение из варианта Some, тем самым оставляя на его месте None. Другими словами, в рабочем состоянии Worker будет использовать вариант Some содержащий thread, а когда мы захотим завершить Worker, мы заменим Some на None, чтобы у Worker не было потока для работы. Итак, мы хотим обновить объявление Worker следующим образом: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-04-update-worker-definition/src/lib.rs:here}} Теперь давайте опираться на сборщик, чтобы найти другие места, которые нужно изменить. Проверяя код, мы получаем две ошибки: {{#include ../listings/ch20-web-server/no-listing-04-update-worker-definition/output.txt}} Давайте обратимся ко второй ошибке, которая указывает на код в конце Worker::new; нам нужно обернуть значение thread в вариант Some при создании нового Worker. Внесите следующие изменения, чтобы исправить эту ошибку: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-05-fix-worker-new/src/lib.rs:here}} Первая ошибка находится в нашей реализации Drop. Ранее мы упоминали, что намеревались вызвать take для свойства Option, чтобы забрать thread из процесса worker. Следующие изменения делают это: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-06-fix-threadpool-drop/src/lib.rs:here}} Как уже говорилось в главе 17, способ take у вида Option забирает значение из варианта Some и оставляет вариант None в этом месте. Мы используем if let, чтобы деструктурировать Some и получить поток; затем вызываем join у потока. Если поток \"работника\" уже None, мы знаем, что этот \"работник\" уже очистил свой поток, поэтому в этом случае ничего не происходит.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Мягкое завершение работы и очистка » Реализация типажа Drop для ThreadPool","id":"387","title":"Реализация типажа Drop для ThreadPool"},"388":{"body":"Теперь, после всех внесённых нами изменений, код собирается без каких-либо предупреждений. Но плохая новость в том, что этот код всё ещё не работает так, как мы этого хотим. Причина заключается в логике замыканий, запускаемых потоками экземпляров Worker: в данный момент мы вызываем join, но это не приводит к завершению потоков, так как они находятся в бесконечном цикле, ожидая новую задачу. Если мы попытаемся удалить ThreadPool в текущей реализации drop, основной поток навсегда заблокируется в ожидании завершения первого потока из пула. Чтобы решить эту проблему, нам нужно будет изменить реализацию drop в ThreadPool, а затем внести изменения в цикл Worker . Во-первых, изменим реализацию drop ThreadPool таким образом, чтобы явно удалять sender перед тем, как начнём ожидать завершения потоков. В приложении 20-23 показаны изменения в ThreadPool для явного удаления sender . Мы используем ту же технику Option и take, что и с потоком, чтобы переместить sender из ThreadPool: Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-23/src/lib.rs:here}} Приложение 20-23. Явное удаление sender перед ожиданием завершения рабочих потоков Удаление sender закрывает поток, что указывает на то, что сообщения больше не будут отправляться. Когда это произойдёт, все вызовы recv, выполняемые рабочими процессами в бесконечном цикле, вернут ошибку. В приложении 20-24 мы меняем цикл Worker для корректного выхода из него в этом случае, что означает, что потоки завершатся, когда реализация drop ThreadPool вызовет для них join. Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-24/src/lib.rs:here}} Приложение 20-24: Явный выход из цикла, когда recv возвращает ошибку Чтобы увидеть этот код в действии, давайте изменим main, чтобы принимать только два запроса, прежде чем корректно завершить работу сервера как показано в приложении 20-25. Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/listing-20-25/src/main.rs:here}} Код 20-25. Выключение сервера после обслуживания двух запросов с помощью выхода из цикла Вы бы не хотели, чтобы существующий веб-сервер отключался после обслуживания только двух запросов. Этот код всего лишь отображает, что корректное завершение работы и освобождение ресурсов находятся в рабочем состоянии. Способ take определён в типаже Iterator и ограничивает повторение максимум первыми двумя элементами. ThreadPool выйдет из области видимости в конце main и будет запущена его реализация drop. Запустите сервер с cargo run и сделайте три запроса. Третий запрос должен выдать ошибку и в окне вызова вы должны увидеть вывод, подобный следующему: $ cargo run Compiling hello v0.1.0 (file:///projects/hello) Finished dev [unoptimized + debuginfo] target(s) in 1.0s Running `target/debug/hello`\nWorker 0 got a job; executing.\nShutting down.\nShutting down worker 0\nWorker 3 got a job; executing.\nWorker 1 disconnected; shutting down.\nWorker 2 disconnected; shutting down.\nWorker 3 disconnected; shutting down.\nWorker 0 disconnected; shutting down.\nShutting down worker 1\nShutting down worker 2\nShutting down worker 3 Вы возможно увидите другой порядок рабочих потоков и напечатанных сообщений. Мы можем увидеть, как этот код работает по сообщениям: \"работники\" номер 0 и 3 получили первые два запроса. Сервер прекратил принимать соединения после второго подключения, а реализация Drop для ThreadPool начинает выполняется ещё тогда, когда как работник 3 даже не приступил к выполнению своей работы. Удаление sender отключает все рабочие потоки от потока и просит их завершить работу. Каждый рабочий поток при отключении печатает сообщение, а затем пул потоков вызывает join, чтобы дождаться, пока каждый из рабочих потоков завершится. Обратите внимание на один важная особенность этого определенного запуска: ThreadPool удалил sender, и прежде чем какой-либо из работников получил ошибку, мы попытались присоединить (join) рабочий поток с номером 0. Рабочий поток 0 ещё не получил ошибку от recv, поэтому основной поток заблокировался, ожидания завершения потока работника 0. Тем временем, работник 3 получил задание, а затем каждый из рабочих потоков получил ошибку. Когда рабочий поток 0 завершился, основной поток ждал окончания завершения выполнения остальных рабочих потоков. В этот момент все они вышли из своих циклов и остановились. Примите поздравления! Теперь мы завершили проект; у нас есть основной веб-сервер, использующий пул потоков для не согласованных ответов. Мы можем выполнить корректное завершение работы сервера, очистив все потоки в пуле. Вот полный код для справки: Файл: src/main.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-07-final-code/src/main.rs}} Файл: src/lib.rs {{#rustdoc_include ../listings/ch20-web-server/no-listing-07-final-code/src/lib.rs}} Мы могли бы сделать ещё больше! Если вы хотите продолжить совершенствование этого проекта, вот несколько идей: Добавьте больше документации в ThreadPool и его публичные способы. Добавьте тесты для функционала, реализуемого библиотекой. Замените вызовы unwrap на более устойчивую обработку ошибок. Используйте ThreadPool для выполнения некоторых других задач, помимо обслуживания веб-запросов. На crates.io найдите крейт для работы с пулами потоков и на его основе реализуйте подобный веб-сервер. Затем сравните его API и надёжность с реализованным нами пулом потоков.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Мягкое завершение работы и очистка » Сигнализация потокам прекратить прослушивание получения задач","id":"388","title":"Сигнализация потокам прекратить прослушивание получения задач"},"389":{"body":"Отличная работа! Вы сделали это к концу книги! Мы хотим поблагодарить вас за то, что присоединились к нам в этом путешествии по языку Rust. Теперь вы готовы реализовать свои собственные проекты на Rust и помочь с проектами другим людям. Имейте в виду, что сообщество Rust разработчиков довольно гостеприимно, они с удовольствием постараются помочь вам с любыми трудностями, с которыми вы можете столкнуться в своём путешествии по Rust.","breadcrumbs":"Финальный проект: создание многопоточного веб-сервера » Мягкое завершение работы и очистка » Итоги","id":"389","title":"Итоги"},"39":{"body":"Далее нам нужно сгенерировать секретное число, которое пользователь попытается угадать. Секретное число должно быть каждый раз разным, чтобы в игру можно было играть несколько раз. Мы будем использовать случайное число в ряде от 1 до 100, чтобы игра не была слишком сложной. Rust пока не включает функциональность случайных чисел в свою стандартную библиотеку. Однако приказ Rust предоставляет [крейт rand] с подобной функциональностью.","breadcrumbs":"Программирование игры в загадки » Генерация секретного числа","id":"39","title":"Генерация секретного числа"},"390":{"body":"Следующие разделы содержат справочные материалы, которые могут оказаться полезными в вашем путешествии по Rust.","breadcrumbs":"Приложения » Дополнительная сведения","id":"390","title":"Дополнительная сведения"},"391":{"body":"Следующий список содержит ключевые слова, зарезервированные для текущего или будущего использования в языке Rust. Как таковые их нельзя использовать в качестве определителей (за исключением сырых определителей, которые мы обсудим в разделе «Сырые определители »). Идентификаторы — это имена функций, переменных, свойств, полей структур, модулей, крейтов, констант, макросов, статических значений, атрибутов, видов, свойств или времён жизни.","breadcrumbs":"Приложения » А — Ключевые слова » Приложение A: Ключевые слова","id":"391","title":"Приложение A: Ключевые слова"},"392":{"body":"Ниже приведён список используемых в настоящее время ключевых слов с их описанием. as — выполнить примитивное преобразование, уточнить определенную характеристику, которую содержит объект, или переименовать элемент в выражении use async — возврат Future вместо блокировки текущего потока await — остановка выполнения до готовности результата Future break — немедленный выход из цикла const — определение константного элемента или неизменяемого сырого указателя continue — досрочный переход к следующей повторения цикла crate — ссылка на корень пакета в пути к модулю dyn — изменяемая отсылка к типажу объекта else — иные ветви для конструкций управления потока if и if let enum — определение перечислений extern — связывание внешней функции или переменной false — логический ложный литерал fn — определение функции или вида указателя на функцию for — циклически перебирать элементы из повторителя, реализовывать признак или указывать время жизни с более высоким рейтингом. if — ветвление на основе результата условного выражения impl — реализация встроенной функциональности или функциональности типажа in — часть синтаксиса цикла for let — объявление (связывание) переменной loop — безусловный цикл match — сопоставление значения с шаблонами mod — определение модуля move — перекладывание владения на замыкание всеми захваченными элементами mut — обозначение изменчивости в ссылках, сырах указателей и привязках к шаблону pub — модификатор публичной доступность полей структур, разделов impl и модулей ref — привязка по ссылке return — возвращает результат из функции Self — псевдоним для определяемого или реализуемого вида self — объект текущего способа или модуля static — вездесущая переменная или время жизни, продолжающееся на протяжении всего выполнения программы struct — определение структуры super — родительский модуль текущего модуля trait — определение типажа true — логический истинный литерал type — определение псевдонима вида или связанного вида union - определить объединение ; является ключевым словом только при использовании в объявлении объединения unsafe — обозначение небезопасного кода, функций, типажей и их реализаций use — ввод имён в область видимости where — ограничение вида while — условный цикл, основанный на результате выражения","breadcrumbs":"Приложения » А — Ключевые слова » Используемые в настоящее время ключевые слова","id":"392","title":"Используемые в настоящее время ключевые слова"},"393":{"body":"Следующие ключевые слова ещё не имеют никакой функциональности, но зарезервированы Rust для возможного использования в будущем. abstract become box do final macro override priv try typeof unsized virtual yield","breadcrumbs":"Приложения » А — Ключевые слова » Ключевые слова, зарезервированные для будущего использования","id":"393","title":"Ключевые слова, зарезервированные для будущего использования"},"394":{"body":"Сырые определители — это синтаксис, позволяющий использовать ключевые слова там, где обычно они не могут быть. Для создания и использования сырого определителя к ключевому слову добавляется префикс r#. Например, ключевое слово match. Если вы попытаетесь собрать следующую функцию, использующую в качестве имени match: Файл: src/main.rs fn match(needle: &str, haystack: &str) -> bool { haystack.contains(needle)\n} вы получите ошибку: error: expected identifier, found keyword `match` --> src/main.rs:4:4 |\n4 | fn match(needle: &str, haystack: &str) -> bool { | ^^^^^ expected identifier, found keyword Ошибка говорит о том, что вы не можете использовать ключевое слово match в качестве определителя функции. Чтобы получить возможность использования слова match в качестве имени функции, нужно использовать синтаксис «сырых определителей», например так: Файл: src/main.rs fn r#match(needle: &str, haystack: &str) -> bool { haystack.contains(needle)\n} fn main() { assert!(r#match(\"foo\", \"foobar\"));\n} Этот код ссобирается без ошибок. Обратите внимание, что префикс r# в определении имени функции указан так же, как он указан в месте её вызова в main. Сырые определители позволяют вам использовать любое слово, которое вы выберете, в качестве определителя, даже если это слово окажется зарезервированным ключевым словом. Это даёт нам больше свободы в выборе имён определителей, а также позволяет нам встраиваться с программами, написанными на языке, где эти слова не являются ключевыми. Кроме того, необработанные определители позволяют вам использовать библиотеки, написанные в исполнения Rust, отличной от используемой в вашем крейте. Например, try не является ключевым словом в выпуске 2015 года, но является в выпуске 2018 года. Если вы зависите от библиотеки, написанной с использованием исполнения 2015 года и имеющей функцию try, вам потребуется использовать синтаксис сырого определителя, в данном случае r#try, для вызова этой функции из кода исполнения 2018 года. См. Приложение E для получения дополнительной сведений о изданиех Rust.","breadcrumbs":"Приложения » А — Ключевые слова » Сырые определители","id":"394","title":"Сырые определители"},"395":{"body":"Это дополнение содержит глоссарий синтаксиса Rust, включая операторы и другие обозначения, которые появляются сами по себе или в среде путей, обобщений, типажей, макросов, атрибутов, комментариев, кортежей и скобок.","breadcrumbs":"Приложения » B — Операторы и символы » Дополнение Б: Операторы и обозначения","id":"395","title":"Дополнение Б: Операторы и обозначения"},"396":{"body":"Таблица Б-1 содержит операторы языка Rust, пример появления оператора, короткое объяснение, возможность перегрузки оператора. Если оператор можно перегрузить, то показан типаж, с помощью которого его можно перегрузить. Таблица Б-1: Операторы Оператор Пример Объяснение Перегружаемость ! ident!(...), ident!{...}, ident![...] Вызов макроса ! !expr Побитовое или логическое отрицание Not != expr != expr Сравнение \"не равно\" PartialEq % expr % expr Остаток от деления Rem %= var %= expr Остаток от деления и присваивание RemAssign & &expr, &mut expr Заимствование & &type, &mut type, &'a type, &'a mut type Указывает что данный вид заимствуется & expr & expr Побитовое И BitAnd &= var &= expr Побитовое И и присваивание BitAndAssign && expr && expr Логическое И * expr * expr Арифметическое умножение Mul *= var *= expr Арифметическое умножение и присваивание MulAssign * *expr Разыменование ссылки Deref * *const type, *mut type Указывает, что данный вид является сырым указателем + trait + trait, 'a + trait Соединение ограничений вида + expr + expr Арифметическое сложение Add += var += expr Арифметическое сложение и присваивание AddAssign , expr, expr Разделитель переменных и элементов - - expr Арифметическое отрицание Neg - expr - expr Арифметическое вычитание Sub - var -= expr Арифметическое вычитание и присваивание SubAssign -> fn(...) -> type, &vert;...&vert; -> type ... . expr.ident Доступ к элементу .. .., expr.., ..expr, expr..expr Указывает на рядчисел, исключая правый PartialOrd ..= ..=expr, expr..=expr Указывает на рядчисел, включая правый PartialOrd .. ..expr Синтаксис обновления структуры .. variant(x, ..), struct_type { x, .. } Привязка «И все остальное» ... expr...expr (Устарело, используйте новый синтаксис ..=) Используется при определении инклюзивного ряда / expr / expr Арифметическое деление Div /= var /= expr Арифметическое деление и присваивание DivAssign : pat: type, ident: type Ограничения видов : ident: expr Объявление поля структуры : 'a: loop {...} Метка цикла ; expr; Признак конца указания и элемента ; [...; len] Часть синтаксиса массива фиксированного размера << expr << expr Битовый сдвиг влево Shl <<= var <<= expr Битовый сдвиг влево и присваивание ShlAssign < expr < expr Сравнение \"меньше чем\" PartialOrd <= expr <= expr Сравнение \"меньше или равно\" PartialOrd = var = expr, ident = type Присваивание/эквивалентность == expr == expr Сравнение \"равно\" PartialEq => pat => expr Часть синтаксиса конструкции match > expr > expr Сравнение \"больше чем\" PartialOrd >= expr >= expr Сравнение \"больше или равно\" PartialOrd >> expr >> expr Битовый сдвиг вправо Shr >>= var >>= expr Битовый сдвиг вправо и присваивание ShrAssign @ ident @ pat Pattern binding ^ expr ^ expr Побитовое исключающее ИЛИ BitXor ^= var ^= expr Побитовое исключающее ИЛИ и присваивание BitXorAssign &vert; pat &vert; pat Иные шаблоны &vert; expr &vert; expr Побитовое ИЛИ BitOr &vert;= var &vert;= expr Побитовое ИЛИ и присваивание BitOrAssign &vert;&vert; expr &vert;&vert; expr Короткое логическое ИЛИ ? expr? Возврат ошибки","breadcrumbs":"Приложения » B — Операторы и символы » Операторы","id":"396","title":"Операторы"},"397":{"body":"Следующий список содержит все символы, которые не работают как операторы; то есть они не ведут себя как вызов функции или способа. Таблица Б-2 показывает символы, которые появляются сами по себе и допустимы в различных местах. Таблица Б-2: Автономный синтаксис Обозначение Объяснение 'ident Именованное время жизни или метка цикла ...u8, ...i32, ...f64, ...usize, etc. Числовой литерал определённого вида \"...\" Строковый литерал r\"...\", r#\"...\"#, r##\"...\"##, etc. Необработанный строковый литерал, в котором не обрабатываются escape-символы b\"...\" Строковый литерал байтов; создаёт массив байтов вместо строки br\"...\", br#\"...\"#, br##\"...\"##, etc. Необработанный строковый байтовый литерал, сочетание необработанного и байтового литерала '...' Символьный литерал b'...' ASCII байтовый литерал &vert;...&vert; expr Замыкание ! Всегда пустой вид для расходящихся функций _ «Пренебрегаемое» связывание шаблонов; также используется для читабельности целочисленных литералов Таблица Б-3 показывает обозначения которые появляются в среде путей упорядочевания модулей Таблица Б-3. Синтаксис, связанный с путями Обозначение Объяснение ident::ident Путь к пространству имён ::path Путь относительно корня крейта (т. е. явный абсолютный путь) self::path Путь относительно текущего модуля (т. е. явный относительный путь). super::path Путь относительно родительского модуля текущего модуля type::ident, <type as trait>::ident Ассоциированные константы, функции и виды <type>::... Ассоциированный элемент для вида, который не может быть назван прямо (например <&T>::..., <[T]>::..., etc.) trait::method(...) Устранение неоднозначности вызова способа путём именования типажа, который определяет его type::method(...) Устранение неоднозначности путём вызова способа через имя вида, для которого он определён <type as trait>::method(...) Устранение неоднозначности вызова способа путём именования типажа и вида Таблица Б-4 показывает обозначения которые появляются в среде использования обобщённых видов свойств Таблица Б-4: Обобщения Обозначение Объяснение path<...> Определяет свойства для обобщённых свойств в виде (e.g., Vec<u8>) path::<...>, method::<...> Определяет свойства для обобщённых свойств, функций, или способов в выражении. Часто называют turbofish (например \"42\".parse::<i32>()) fn ident<...> ... Определение обобщённой функции struct ident<...> ... Определение обобщённой структуры enum ident<...> ... Объявление обобщённого перечисления impl<...> ... Определение обобщённой реализации for<...> type Высокоуровневое связывание времени жизни type<ident=type> Обобщённый вид где один или более ассоциированных видов имеют определённое присваивание (например Iterator<Item=T>) Таблица Б-5 показывает обозначения которые появляются в среде использования обобщённых видов свойств с ограничениями видов Таблица Б-5: Ограничения видов Обозначение Объяснение T: U Обобщённый свойство T ограничивается до видов которые реализуют типаж U T: 'a Обобщённый вид T должен существовать не меньше чем 'a (то есть вид не может иметь ссылки с временем жизни меньше чем 'a) T: 'static Обобщённый вид T не имеет заимствованных ссылок кроме имеющих время жизни 'static 'b: 'a Обобщённое время жизни 'b должно быть не меньше чем 'a T: ?Sized Позволяет обобщённым видам свойства иметь изменяемый размер 'a + trait, trait + trait Соединение ограничений видов Таблица Б-6 показывает обозначения, которые появляются в среде вызова или определения макросов и указания атрибутов элемента. Таблица Б-6: Макросы и атрибуты Обозначение Объяснение #[meta] Внешний атрибут #![meta] Внутренний атрибут $ident Подстановка в макросе $ident:kind Захват макроса $(…)… Повторение макроса ident!(...), ident!{...}, ident![...] Вызов макроса Таблица Б-7 показывает обозначения, которые создают комментарии. Таблица Б-7: Комментарии Обозначение Объяснение // Однострочный комментарий //! Внутренний однострочный комментарий документации /// Внешний однострочный комментарий документации /*...*/ Многострочный комментарий /*!...*/ Внутренний многострочный комментарий документации /**...*/ Внешний многострочный комментарий документации Таблица Б-8 показывает обозначения, которые появляются в среде использования кортежей. Таблица Б-8: Кортежи Обозначение Объяснение () Пустой кортеж, он же пустой вид. И литерал и вид. (expr) Выражение в скобках (expr,) Кортеж с одним элементом выражения (type,) Кортеж с одним элементом вида (expr, ...) Выражение кортежа (type, ...) Вид кортежа (type, ...) Выражение вызова функции; также используется для объявления структур-кортежей и вариантов-кортежей перечисления expr.0, expr.1, etc. Взятие элемента по порядковому указателю в кортеже Таблица Б-9 показывает среды, в которых используются фигурные скобки. Таблица Б-9: Фигурные скобки Среда Объяснение {...} Выражение раздела Type {...} struct литерал Таблица Б-10 показывает среды, в которых используются квадратные скобки. Таблица Б-10: Квадратные скобки Среда Объяснение [...] Литерал массива [expr; len] Литерал массива, содержащий len копий expr [type; len] Массив, содержащий len экземпляров вида type expr[expr] Взятие по порядковому указателю в собрания. Возможна перегрузка (Index, IndexMut) expr[..], expr[a..], expr[..b], expr[a..b] Взятие среза собрания по порядковому казателю, используется Range, RangeFrom, RangeTo, или RangeFull как \"порядковый указатель\"","breadcrumbs":"Приложения » B — Операторы и символы » Обозначения не-операторы","id":"397","title":"Обозначения не-операторы"},"398":{"body":"Во многих частях книги мы обсуждали атрибут derive, которые Вы могли применить к объявлению структуры или перечисления. Атрибут derive генерирует код по умолчанию для реализации типажа, который вы указали в derive. В этом дополнении, мы расскажем про все типажи, которые вы можете использовать в атрибуте derive. Каждая секция содержит: Действия и методы, добавляемые типажом Как представлена реализация типажа через derive Что реализация типажа рассказывает про вид Условия, в которых разрешено или запрещено реализовывать типаж Примеры ситуаций, которые требуют наличие типажа Если Вам понадобилось поведение отличное от поведения при реализации через derive, обратитесь к документации по встроенной библиотеке чтобы узнать как вручную реализовать типаж. Перечисленные здесь типажи являются единственными, определёнными встроенной библиотекой, которые могут быть реализованы в ваших видах с помощью derive. Другие типажи, определённые в встроенной библиотеке, не имеют ощутимого поведения по умолчанию, поэтому вам решать, как реализовать их для достижения ваших целей. Пример типажа, который нельзя реализовать через derive - Display, который обрабатывает форматирование для конечных пользователей. Вы всегда должны сами рассмотреть лучший способ для отображения вида конечному пользователю. Какие части вида должны быть разрешены для просмотра конечному пользователю? Какие части они найдут подходящими? Какой формат вывода для них будет самым подходящим? Сборщик Rust не знает ответы на эти вопросы, поэтому он не может подобрать подходящее стандартное поведение. Список видов, реализуемых через derive, в этом дополнении не является исчерпывающим: библиотеки могут реализовывать derive для их собственных типажей, составляя свои списки типажей, которые Вы можете использовать с помощью derive. Реализация derive включает в себя использование процедурных макросов, которые были рассмотрены в разделе \"Макросы\" главы 19.","breadcrumbs":"Приложения » C — Выводимые трейты » Дополнение В: Выводимые типажи","id":"398","title":"Дополнение В: Выводимые типажи"},"399":{"body":"Типаж Debug включает отладочное форматирование в форматируемых строках, которые вы можете указать с помощью :? внутри {} фигурных скобок. Типаж Debug позволяет Вам напечатать объекты вида с целью отладки, поэтому Вы и другие программисты, использующие Ваш вид, смогут проверить объект в определённой точке выполнения программы. Типаж Debug обязателен в некоторых случаях. Например, при использовании макроса assert_eq!. Этот макрос печатает значения входных переменных, если они не совпадают. Это позволяет программистам увидеть, почему эти объекты не равны.","breadcrumbs":"Приложения » C — Выводимые трейты » Debug для отладочного вывода","id":"399","title":"Debug для отладочного вывода"},"4":{"body":"Rust показал себя как продуктивный средство для совместной работы больших приказовразработчиков с разным уровнем знаний в области системного программирования. Низкоуровневый код подвержен различным трудноуловимым ошибкам, которые в большинстве других языков могут быть обнаружены только с помощью тщательного тестирования и проверки кода опытными разработчиками. В Rust сборщик играет роль привратника, отказываясь собирать код с этими неуловимыми ошибками, включая ошибки параллелизма. Работая вместе с сборщиком, приказ может сфокусироваться на работе над логикой программы, а не над поиском ошибок. Rust также привносит современные средства разработчика в мир системного программирования: Cargo, входящий в комплект менеджер зависимостей и средство сборки, делает добавление, сборку и управление зависимостями безболезненным и согласованным в рамках всей экосистемы Rust. Средство форматирования Rustfmt обеспечивает единый стиль кодирования для всех разработчиков. Rust Language Server обеспечивает встраивание с встроенной средой разработки (IDE) для автодополнения кода и встроенных сообщений об ошибках. Благодаря применению этих и других средств в экосистеме Rust разработчики способны продуктивно работать при написании кода системного уровня.","breadcrumbs":"Введение » Команды разработчиков","id":"4","title":"Команды разработчиков"},"40":{"body":"Помните, что пакет (crate) - это собрание файлов исходного кода Rust. Проект, создаваемый нами, представляет собой двоичный пакет (binary crate), который является исполняемым файлом. Пакет rand - это библиотечный пакет (library crate), содержащий код, который предназначен для использования в других программах и поэтому не может исполняться сам по себе. Координация работы внешних пакетов является тем местом, где Cargo на самом деле блистает. Чтобы начать писать код, использующий rand, необходимо изменить файл Cargo.toml , включив в него в качестве зависимости пакет rand. Итак, откройте этот файл и добавьте следующую строку внизу под заголовком секции [dependencies], созданным для вас Cargo. Обязательно укажите rand в точности так же, как здесь, с таким же номером исполнения, иначе примеры кода из этого урока могут не заработать. Имя файла: Cargo.toml {{#include ../listings/ch02-guessing-game-tutorial/listing-02-02/Cargo.toml:8:}} В файле Cargo.toml всё, что следует за заголовком, является частью этой секции, которая продолжается до тех пор, пока не начнётся следующая. В [dependencies] вы сообщаете Cargo, от каких внешних крейтов зависит ваш проект и какие исполнения этих крейтов вам нужны. В этом случае мы указываем крейт rand со спецификатором семантической исполнения 0.8.5. Cargo понимает семантическое версионирование (иногда называемое SemVer ), которое является стандартом для описания исполнений. Число 0.8.5 на самом деле является сокращением от ^0.8.5, что означает любую исполнение не ниже 0.8.5, но ниже 0.9.0. Cargo рассчитывает, что эти исполнения имеют общедоступное API, совместимое с исполнением 0.8.5, и вы получите последние исполнения исправлений, которые по-прежнему будут собираться с кодом из этой главы. Не обеспечивается, что исполнение 0.9.0 или выше будет иметь тот же API, что и в следующих примерах. Теперь, не меняя ничего в коде, давайте соберём проект, как показано в приложении 2-2. $ cargo build Updating crates.io index Downloaded rand v0.8.5 Downloaded libc v0.2.127 Downloaded getrandom v0.2.7 Downloaded cfg-if v1.0.0 Downloaded ppv-lite86 v0.2.16 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.3 Compiling libc v0.2.127 Compiling getrandom v0.2.7 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.16 Compiling rand_core v0.6.3 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 2.53s Приложение 2-2: результат выполнения cargo build после добавления крейта rand в качестве зависимости Вы можете увидеть другие номера исполнений (но все они будут совместимы с кодом благодаря SemVer), другие строки (в зависимости от операционной системы), а также строки могут быть расположены в другом порядке. Когда мы включаем внешнюю зависимость, Cargo берет последние исполнения всего, что нужно этой зависимости, из реестра (registry) , который является копией данных с Crates.io . Crates.io — это место, где участники экосистемы Rust размещают свои проекты с открытым исходным кодом для использования другими. После обновления реестра Cargo проверяет раздел [dependencies] и загружает все указанные в списке пакеты, которые ещё не были загружены. В нашем случае, хотя мы указали только rand в качестве зависимости, Cargo также захватил другие пакеты, от которых зависит работа rand. После загрузки пакетов Rust собирает их, а затем собирает проект с имеющимися зависимостями. Если сразу же запустить cargo build снова, не внося никаких изменений, то кроме строки Finished вы не получите никакого вывода. Cargo знает, что он уже загрузил и собрал зависимости, и вы не вносили никаких изменений в файл Cargo.toml . Cargo также знает, что вы ничего не изменили в своём коде, поэтому он не пересоберет и его. Если делать нечего, он просто завершает работу. Если вы откроете файл src/main.rs , внесёте тривиальное изменение, а затем сохраните его и снова соберёте, вы увидите только две строки вывода: $ cargo build Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs Эти строки показывают, что Cargo обновляет сборку только с вашим крошечным изменением в файле src/main.rs . Ваши зависимости не изменились, поэтому Cargo знает, что может повторно использовать то, что уже скачано и собрано для них. Обеспечение воспроизводимых сборок с помощью файла Cargo.lock В Cargo есть механизм, обеспечивающий возможность пересобрать всё тот же артефакт каждый раз, когда вы или кто-либо другой собирает ваш код. Пока вы не укажете обратное, Cargo будет использовать только те исполнения зависимостей, которые были заданы ранее. Например, допустим, что на следующей неделе выходит исполнение 0.8.6 пакета rand , и она содержит важное исправление ошибки, но также регрессию, которая может сломать ваш код. Чтобы справиться с этим, Rust создаёт файл Cargo.lock при первом запуске cargo build, поэтому теперь он есть в каталоге guessing_game . Когда вы создаёте проект в первый раз, Cargo определяет все исполнения зависимостей, которые соответствуют критериям, а затем записывает их в файл Cargo.lock . Когда вы будете собирать свой проект в будущем, Cargo увидит, что файл Cargo.lock существует, и будет использовать указанные там исполнения, а не выполнять всю работу по выяснению исполнений заново. Это позволяет самостоятельно создавать воспроизводимую сборку. Другими словами, ваш проект останется на 0.8.5 до тех пор, пока вы явно не обновите его благодаря файлу Cargo.lock . Поскольку файл Cargo.lock важен для воспроизводимых сборок, он часто хранится в системе управления исполнениями вместе с остальным кодом проекта. Обновление пакета для получения новой исполнения Если вы захотите обновить пакет, Cargo предоставляет приказ update, которая пренебрегает файл Cargo.lock и определяет последние исполнения, соответствующие вашим спецификациям из файла Cargo.toml . После этого Cargo запишет эти исполнения в файл Cargo.lock . Иначе по умолчанию Cargo будет искать только исполнения больше 0.8.5, но при этом меньше 0.9.0. Если пакет rand имеет две новые исполнения — 0.8.6 и 0.9.0 — то при запуске cargo update вы увидите следующее: $ cargo update Updating crates.io index Updating rand v0.8.5 -> v0.8.6 Cargo пренебрегает релиз 0.9.0. В этот момент также появится изменение в файле Cargo.lock , указывающее на то, что исполнение rand, которая теперь используется, равна 0.8.6. Чтобы использовать rand исполнения 0.9.0 или любой другой исполнения из серии 0.9. x , необходимо обновить файл Cargo.toml следующим образом: [dependencies]\nrand = \"0.9.0\" В следующий раз, при запуске cargo build, Cargo обновит реестр доступных пакетов и пересмотрит ваши требования к rand в соответствии с новой исполнением, которую вы указали. Можно много рассказать про Cargo и его экосистему которые мы обсудим в главе 14, сейчас это все что вам нужно знать. Cargo позволяет очень легко повторно использовать библиотеки, поэтому Rust разработчики имеют возможность писать меньшие проекты, которые составлены из многих пакетов.","breadcrumbs":"Программирование игры в загадки » Использование крейта для получения дополнительного функционала","id":"40","title":"Использование крейта для получения дополнительного функционала"},"400":{"body":"Типаж PartialEq позволяет Вам сравнить объекты одного вида на эквивалентность, и включает для них использование операторов == и !=. Использование PartialEq реализует способ eq. Когда PartialEq используют для структуры, два объекта равны если равны все поля объектов, и объекты не равны, если хотя бы одно поле отлично. Когда используется для перечислений, каждый вариант равен себе, и не равен другим вариантам. Типаж PartialEq обязателен в некоторых случаях. Например для макроса assert_eq!, где необходимо сравнивать два объекта одного вида на эквивалентность. Типаж Eq не имеет методов. Он сигнализирует что каждое значение аннотированного вида равно самому себе. Типаж Eq может быть применён только для видов реализующих типаж PartialEq, хотя не все виды, которые реализуют PartialEq могут реализовывать Eq. Примером являются числа с плавающей запятой: реализация чисел с плавающей запятой говорит, что два экземпляра со значениями не-число (NaN) не равны друг другу. Типаж Eqнеобходим в некоторых случаях. Например, для ключей в HashMap<K, V>. Поэтому HashMap<K, V> может сказать, что два ключа являются одним и тем же.","breadcrumbs":"Приложения » C — Выводимые трейты » PartialEq и Eq для сравнения равенства","id":"400","title":"PartialEq и Eq для сравнения равенства"},"401":{"body":"Типаж PartialOrd позволяет Вам сравнить объекты одного вида с помощью сортировки. Вид, реализующий PartialOrd может использоваться с операторами <, >, <=, и >=. Вы можете реализовать типаж PartialOrd только для видов, реализующих PartialEq. Использование PartialOrd реализует способ partial_cmp, который возвращает Option<Ordering> который является None когда значения не выстраивают порядок. Примером значения, которое не может быть упорядочено, не являются числом (NaN) значение с плавающей запятой. Вызов partial_cmp с любым числом с плавающей запятой и значением NaN вернёт None. Когда используется для структур, PartialOrd сравнивает два объекта путём сравнения значений каждого поля в порядке, в котором поля объявлены в структуре. Когда используется для перечислений, то варианты перечисления объявленные ранее будут меньше чем варианты объявленные позже. Например, типаж PartialOrd может потребоваться для метода gen_range из rand крейта который генерирует случайные значения в заданном ряде (который определён выражением ряда). Типаж Ord позволяет знать, для двух значений аннотированного вида всегда будет существовать валидный порядок. Типаж Ord реализовывает способ cmp, который возвращает Ordering а не Option<Ordering> потому что валидный порядок всегда будет существовать. Вы можете применить типаж Ord только для видов, реализовывающих типаж PartialOrd и Eq (Eq также требует PartialEq). При использовании на структурах или перечислениях, cmp имеет такое же поведение, как и partial_cmp вPartialOrd. Типаж Ord необходим в некоторых случаях. Например, сохранение значений в BTreeSet<T>, виде данных, который хранит сведения на основе порядка отсортированных данных.","breadcrumbs":"Приложения » C — Выводимые трейты » PartialOrd и Ord для сравнения порядка","id":"401","title":"PartialOrd и Ord для сравнения порядка"},"402":{"body":"Типаж Clone позволяет вам явно создать глубокую копию значения, а также процесс повторения может вызывать особый код и копировать данные с кучи. Более подробно про Clone смотрите в секции \"Способы взаимодействия переменных и данных: клонирование\" в разделе 4. Использование Clone реализует способ clone, который в случае реализации на всем виде, вызывает cloneдля каждой части данных вида. Это подразумевает, что все поля или значения в виде также должны реализовывать Clone для использования Clone. Типаж Clone необходим в некоторых случаях. Например, для вызова метода to_vec для среза. Срез не владеет данными, содержащимися в нем, но вектор значений, возвращённый из to_vec должен владеть этими объектами, поэтому to_vec вызывает clone для всех данных. Таким образом, вид хранящийся в срезе, должен реализовывать Clone. Типаж Copy позволяет повторять значения копируя только данные, которые хранятся на стеке, произвольный код не требуется. Смотрите секцию \"Стековые данные: Копирование\" в разделе 4 для большей сведений о Copy. Типаж Copy не содержит методов для предотвращения перегрузки этих методов программистами, иначе бы это нарушило соглашение, что никакой произвольный код не запускается. Таким образом все программисты могут предполагать, что копирование значений будет происходить быстро. Вы можете вывести Copy для любого вида все части которого реализуют Copy. Вид который реализует Copy должен также реализовывать Clone, потому что вид реализующий Copy имеет тривиальную реализацию Clone который выполняет ту же задачу, что и Copy. Типаж Copy нужен очень редко; виды, реализовывающие Copy имеют небольшую оптимизацию, то есть для него не нужно вызывать способ clone, который делает код более кратким. Все, что вы делаете с Copy можно также делать и с Clone, но код может быть медленнее и требовать вызов метода clone в некоторых местах.","breadcrumbs":"Приложения » C — Выводимые трейты » Clone и Copy для повторения значений","id":"402","title":"Clone и Copy для повторения значений"},"403":{"body":"Типаж Hash позволяет превратить значение произвольного размера в значение фиксированного размера с использованием хеш-функции. Использование Hash реализует способ hash. При реализации через derive, способ hash комбинирует результаты вызова hash на каждой части данных вида, то есть все поля или значения должны реализовывать Hash для использования Hash с помощью derive. Типаж Hash необходим в некоторых случаях. Например, для хранения ключей в HashMap<K, V>, для их более эффективного хранения.","breadcrumbs":"Приложения » C — Выводимые трейты » Hash для превращения значения в значение фиксированного размера","id":"403","title":"Hash для превращения значения в значение фиксированного размера"},"404":{"body":"Типаж Default позволяет создавать значение по умолчанию для вида. Использование Default реализует функцию default. Стандартная реализация метода default вызовет функцию default на каждой части данных вида, то есть для использования Default через derive, все поля и значения вида данных должны также реализовывать Default. Функция Default::defaultчасто используется в сочетания с синтаксисом обновления структуры, который мы обсуждали в секции \"Создание экземпляра структуры из экземпляра другой структуры с помощью синтаксиса обновления структуры\" главы 5. Вы можете настроить несколько полей для структуры, а для остальных полей установить значения с помощью ..Default::default(). Типаж Default необходим в некоторых случаях. Например, для метода unwrap_or_default у вида Option<T>. Если значение Option<T> будет None, способ unwrap_or_default вернёт результат вызова функции Default::default для вида T, хранящегося в Option<T>.","breadcrumbs":"Приложения » C — Выводимые трейты » Default для значений по умолчанию","id":"404","title":"Default для значений по умолчанию"},"405":{"body":"В этом дополнении мы расскажем про часто используемые средства разработки, предоставляемые Rust. Мы рассмотрим самостоятельное форматирование, быстрый путь исправления предупреждений, линтер, и встраивание с IDE.","breadcrumbs":"Приложения » D — Полезные средства разработки » Дополнение Г - Средства разработки","id":"405","title":"Дополнение Г - Средства разработки"},"406":{"body":"Средство rustfmt переформатирует ваш код в соответствии со стилем кода сообщества. Многие совместные проекты используют rustfmt, чтобы предотвратить споры о том, какой стиль использовать при написании Rust: все форматируют свой код с помощью этого средства. Для установки rustfmt, введите следующее: $ rustup component add rustfmt Этот приказ установит rustfmt и cargo-fmt, также как Rust даёт Вам одновременно rustc и cargo. Для форматирования проекта, использующего Cargo, введите следующее: $ cargo fmt Этот приказ отформатирует весь код на языке Rust в текущем крейте. Будет изменён только стиль кода, семантика останется прежней. Для большей сведений о rustfmt, смотрите документацию .","breadcrumbs":"Приложения » D — Полезные средства разработки » Самостоятельное форматирование с rustfmt","id":"406","title":"Самостоятельное форматирование с rustfmt"},"407":{"body":"Средство rustfix включён в установку Rust и может самостоятельно исправлять предупреждения сборщика с очевидным способом исправления проблемы, скорее всего, подходящим вам. Вероятно, вы уже видели предупреждения сборщика. Например, рассмотрим этот код: Файл: src/main.rs fn do_something() {} fn main() { for i in 0..100 { do_something(); }\n} Мы вызываем функцию do_something 100 раз, но никогда не используем переменную i в теле цикла for. Rust предупреждает нас об этом: $ cargo build Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i` --> src/main.rs:4:9 |\n4 | for i in 0..100 { | ^ help: consider using `_i` instead | = note: #[warn(unused_variables)] on by default Finished dev [unoptimized + debuginfo] target(s) in 0.50s Предупреждение предлагает нам использовать _i как имя переменной: нижнее подчёркивание в начале определителя предполагает, что мы его не используем. Мы можем самостоятельно применить это предположение с помощью rustfix, запустив приказ cargo fix: $ cargo fix Checking myprogram v0.1.0 (file:///projects/myprogram) Fixing src/main.rs (1 fix) Finished dev [unoptimized + debuginfo] target(s) in 0.59s Когда посмотрим в src/main.rs снова, мы увидим что cargo fix изменил наш код: Файл: src/main.rs fn do_something() {} fn main() { for _i in 0..100 { do_something(); }\n} Переменная цикла for теперь носит имя _i, и предупреждение больше не появляется. Также Вы можете использовать приказ cargo fix для перемещения вашего кода между различными изданиеми Rust. Издания будут рассмотрены в дополнении Д.","breadcrumbs":"Приложения » D — Полезные средства разработки » Исправление кода с rustfix","id":"407","title":"Исправление кода с rustfix"},"408":{"body":"Средство Clippy является собранием проверок (lints) для анализа Вашего кода, поэтому Вы можете найти простые ошибки и улучшить ваш Rust код. Для установки Clippy, введите следующее: $ rustup component add clippy Для запуска проверок Clippy’s для проекта Cargo, введите следующее: $ cargo clippy Например, скажем что Вы хотите написать программу, в которой будет использоваться приближенная математическая константа, такая как число Пи, как в следующей программе: Файл: src/main.rs fn main() { let x = 3.1415; let r = 8.0; println!(\"the area of the circle is {}\", x * r * r);\n} Запуск cargo clippy для этого проекта вызовет следующую ошибку: error: approximate value of `f{32, 64}::consts::PI` found --> src/main.rs:2:13 |\n2 | let x = 3.1415; | ^^^^^^ | = note: `#[deny(clippy::approx_constant)]` on by default = help: consider using the constant directly = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant Эта ошибка сообщает вам, что в Rust уже определена более точная константа PI, и что ваша программа будет более корректной, если вы вместо неё будете использовать эту константу. Затем вы должны изменить свой код, чтобы использовать константу PI. Следующий код не приводит к ошибкам или предупреждениям от Clippy: Файл: src/main.rs fn main() { let x = std::f64::consts::PI; let r = 8.0; println!(\"the area of the circle is {}\", x * r * r);\n} Для большей сведений о Clippy смотрите документацию .","breadcrumbs":"Приложения » D — Полезные средства разработки » Больше проверок с Clippy","id":"408","title":"Больше проверок с Clippy"},"409":{"body":"Чтобы облегчить встраивание с IDE, сообщество Rust советует использовать rust-analyzer . Этот средство представляет собой набор ориентированных на сборщик утилит, которые используют Language Server Protocol , который является спецификацией для взаимодействия IDE и языков программирования друг с другом. Разные клиенты могут использовать rust-analyzer, например подключаемый модуль анализатора Rust для Visual Studio Code . Посетите домашнюю страницу проекта rust-analyzer для получения указаний по установке, затем установите поддержку языкового сервера в именно среде IDE. Ваша IDE получит такие возможности, как автозаполнение, переход к определению и встроенные ошибки.","breadcrumbs":"Приложения » D — Полезные средства разработки » Встраивание с IDE с помощью rust-analyzer","id":"409","title":"Встраивание с IDE с помощью rust-analyzer"},"41":{"body":"Давайте начнём использовать rand, чтобы сгенерировать число для угадывания. Следующим шагом будет обновление src/main.rs , как показано в приложении 2-3. Файл: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-03/src/main.rs:all}} Приложение 2-3: Добавление кода который генерирует случайное число Сначала мы добавляем строку use rand::Rng. Типаж Rng определяет способы, реализующие генераторы случайных чисел, и этот типаж должен быть в области видимости, чтобы эти способы можно было использовать. В главе 10 мы рассмотрим типажи подробно. Затем мы добавляем две строки посередине. В первой строке мы вызываем функцию rand::thread_rng, дающую нам генератор случайных чисел, который мы собираемся использовать: тот самый, который является местным для текущего потока выполнения и запускается операционной системой. Затем мы вызываем его способ gen_range. Этот способ определяется Rng, который мы включили в область видимости с помощью оператора use rand::Rng. Способ gen_range принимает в качестве переменной выражение ряда и генерирует случайное число в этом ряде. Вид используемого выражения ряда принимает форму start..=end и включает нижнюю и верхнюю границы, поэтому, чтобы запросить число от 1 до 100, нам нужно указать 1..=100. Примечание: непросто сразу разобраться, какие типажи использовать, какие способы и функции вызывать из пакета, поэтому каждый пакет имеет документацию с указаниями по его использованию. Ещё одной замечательной особенностью Cargo является выполнение приказы cargo doc --open, которая местно собирает документацию, предоставляемую всеми вашими зависимостями, и открывает её в браузере. К примеру, если важна другая функциональность из пакета rand, запустите cargo doc --open и нажмите rand в боковой панели слева. Во второй новой строке мы увидим загаданное число. Во время разработки программы полезно иметь возможность её протестировать, но в финальной исполнения мы это удалим. Конечно, ведь это совсем не похоже на игру, если программа печатает ответ сразу после запуска! Попробуйте запустить программу несколько раз: $ cargo run Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 2.53s Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4 $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.02s Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5 Вы должны получить разные случайные числа, и все они должны быть числами в ряде от 1 до 100. Отличная работа!","breadcrumbs":"Программирование игры в загадки » Генерация случайного числа","id":"41","title":"Генерация случайного числа"},"410":{"body":"В главе 1, можно увидеть, что приказ cargo new добавляет некоторые мета-данные о издания языка в файл Cargo.toml . Данное приложение рассказывает, что они означают. Язык Rust и его сборщик имеют шестинедельный цикл выпуска, означающий, что пользователи постоянно получают новые функции. В других языках обычно выпускают большие обновления, но редко. Объединение Rust выпускает меньшие обновления, но более часто. Через некоторое время все эти небольшие изменения накапливаются. Между релизами обычно сложно оглянуться назад и сказать \"Ого, язык сильно изменился между исполнениями Rust 1.10 и Rust 1.31!\" Каждые два или три года, объединение Rust выпускает новую издание языка (Rust edition) . Каждая издание объединяет все новые особенности, которые попали в язык с новыми пакетами, с полной, обновлённой документацией и набором средств. Новые издания поставляются как часть шестинедельного процесса релизов. Для разных людей издания служат разным целям: Для активных пользователей новая издание приносит все инкрементальные изменения в удобный и понятный пакет. Для тех, кто языком не пользуется, новая реакция является сигналом, что некоторые важные улучшения, на которые возможно надо взглянуть ещё раз, попали в язык. Для тех кто разрабатывает на Rust, новая издание даёт некоторую точку отсчёта для проекта в целом. На момент написания доступны две издания Rust: Rust 2015 и Rust 2018. Данная книга написана с использованием идиом издания Rust 2018. Ключ edition в настроечном файле Cargo.toml отображает, какую издание сборщик должен использовать для вашего кода. Если ключа нет, то для обратной совместимости сборщик Rust использует издание 2015. Любой проект может выбрать издание отличную от издания по умолчанию, которая равна 2015. Издания могут содержать несовместимые изменения, включая новые ключевые слова, которые могут конфликтовать с определителями в коде. Однако, пока вы не переключитесь на новую издание, ваш код будет продолжать собираться даже после обновления используемой исполнения сборщика. Все исполнения сборщика Rust поддерживают любую издание, которая предшествовала выпуску текущей, и они могут линковать пакеты любой поддерживаемой издания. Изменения изданий действуют только на способ начального разбора сборщиком исходного кода. Поэтому, если вы используете 2015 издание, а одна из ваших зависимостей использует 2018, ваш проект будет собран и сможет пользоваться этой зависимостью. Обратная ситуация, когда ваш проект использует Rust 2018, а зависимость использует Rust 2015, работает таким же образом. Внесём ясность: большая часть возможностей будет доступна во всех изданиях. Разработчики, использующие любую издание Rust, будут продолжать получать улучшения по мере выпуска новых релизов. Однако в некоторых случаях, в основном, когда добавляются новые ключевые слова, некоторые новые возможности могут быть доступны только в последних изданиях. Нужно переключить издание, чтобы воспользоваться новыми возможностями. Для получения больше подробностей, есть полная книга Edition Guide про издания, в которой перечисляются различия между изданиями и объясняется, как самостоятельно обновить свой код на новую издание с помощью приказы cargo fix.","breadcrumbs":"Приложения » E — Издания » Приложение E - Издания языка","id":"410","title":"Приложение E - Издания языка"},"411":{"body":"Для ресурсов на языках, отличных от английского. Большинство из них все ещё в разработке; см. ярлык «Переводы» , чтобы помочь или сообщить нам о новом переводе! Português (BR) Português (PT) 简体中文 正體中文 Українська Español , alternate Italiano Русский 한국어 日本語 Français Polski Cebuano Tagalog Esperanto ελληνική Svenska Farsi Deutsch हिंदी ไทย Danske","breadcrumbs":"Приложения » F — Переводы книги » Приложение Е: Переводы книги","id":"411","title":"Приложение Е: Переводы книги"},"412":{"body":"Это дополнение рассказывает как создаётся Rust, и как это влияет на Вас как на разработчика.","breadcrumbs":"Приложения » G — Как создаётся Rust и «Nightly Rust» » Дополнение Ё - Как создаётся Rust и “Nightly Rust”","id":"412","title":"Дополнение Ё - Как создаётся Rust и “Nightly Rust”"},"413":{"body":"Как язык, Rust много заботиться о безотказности Вашего кода. Мы хотим чтобы Rust был прочным фундаментом, вашей опорой, и если бы все постоянно менялось, это было бы невозможно. В то же время, если мы не можем экспериментировать с различными возможностями, мы не можем обнаружить важные проблемы до релиза, когда мы не можем их изменить. Нашим решением проблемы является “безотказность без стагнации”, и наш руководящий принцип: Вы никогда не должны бояться перехода на новую безотказную исполнение Rust. Каждое обновление должно быть безболезненным, но также должно добавлять новые функции, меньше дефектов и более быструю скорость сборки.","breadcrumbs":"Приложения » G — Как создаётся Rust и «Nightly Rust» » Безотказность без стагнации","id":"413","title":"Безотказность без стагнации"},"414":{"body":"Разработка языка Rust работает по принципу расписания поездов . То есть, вся разработка совершается в ветке master Rust репозитория. Выпуски следуют модели последовательного выпуска продукта (software release train), которая была использована Cisco IOS и другими программными продуктами. Есть три потока выпуска Rust: Ночной (Nightly) Бета (Beta) Безотказный (Stable) Большинство Rust разработчиков используют безотказную исполнение, но те кто хотят попробовать экспериментальные новые функции, должны использовать Nightly или Beta. Приведём пример, как работает процесс разработки и выпуска новых исполнений. Давайте предположим, что объединение Rust работает над исполнением Rust 1.5. Его релиз состоялся в декабре 2015 года, но это даст реалистичность номера исполнения. Была добавлена новая функциональность в Rust: новые коммиты в ветку master. Каждую ночь выпускается новая ночная исполнение Rust. Каждый день является днём выпуска ночной исполнения и эти выпуски создаются нашей структурой самостоятельно . По мере того как идёт время, наши выпуски выглядят так: nightly: * - - * - - * Каждые шесть недель наступает время подготовки новой Beta исполнения! Ветка beta Rust репозитория ответвляется от ветки master, используемой исполнением Nightly. Теперь мы имеем два выпуска: nightly: * - - * - - * |\nbeta: * Многие пользователи Rust не используют активно бета-исполнение, но тестируют бета-исполнение в их системе CI для помощи Rust обнаружить проблемы обратной совместимости. В это время каждую ночь выпускается новая исполнение Nightly: nightly: * - - * - - * - - * - - * |\nbeta: * Предположим, что была найдена регрессия. Хорошо, что мы можем протестировать бета-исполнение перед тем как регрессия попала в безотказную исполнение! Исправление отправляется в ветку master, поэтому исполнение nightly исправлена и затем исправление также направляется в ветку beta, и происходит новый выпуск бета-исполнения: nightly: * - - * - - * - - * - - * - - * |\nbeta: * - - - - - - - - * Через шесть недель после выпуска бета-исполнения, наступает время для выпуска безотказной исполнения! Ветка stable создаётся из ветки beta: nightly: * - - * - - * - - * - - * - - * - * - * |\nbeta: * - - - - - - - - * |\nstable: * Ура! Rust 1.5 выпущена! Но мы также забыли про одну вещь: так как прошло шесть недель, мы должны выпустить бета-исполнение следующей исполнения Rust 1.6. Поэтому после ответвления ветки stable из ветки beta, следующая исполнение beta ответвляется снова от nightly: nightly: * - - * - - * - - * - - * - - * - * - * | |\nbeta: * - - - - - - - - * * |\nstable: * Это называется “модель поезда” (train model), потому что каждые шесть недель выпуск “покидает станцию”, но ему все ещё нужно пройти поток beta, чтобы попасть в безотказную исполнение. Rust выпускается каждые шесть недель, как часы. Если вы знаете дату одного выпуска Rust, вы знаете дату выпуска следующего: это шесть недель позднее. Хорошим особенностью выпуска исполнений каждые шесть недель является то, что следующий поезд прибывает скоро. Если какая-то функция не попадает в релиз, не надо волноваться: ещё один выпуск произойдёт очень скоро! Это помогает снизить давление в случае если функция возможно не отполирована к дате выпуска. Благодаря этому процессу, вы всегда можете посмотреть следующую исполнение Rust и убедиться, что на неё легко будет перейти: если бета-выпуск будет работать не так как ожидалось, вы можете сообщить об этом разработчикам и он будет исправлен перед выпуском безотказной исполнения! Поломки в бета-исполнения случаются относительно редко, но rustc все ещё является частью программного обеспечения, поэтому дефекты все ещё существуют.","breadcrumbs":"Приложения » G — Как создаётся Rust и «Nightly Rust» » Ту-ту! потоки выпуска и поездка на поезде","id":"414","title":"Ту-ту! потоки выпуска и поездка на поезде"},"415":{"body":"У этой модели выпуска есть ещё один плюс: ненадежные функции. Rust использует технику называемую “флаги функционала” (feature flags) для определения функций, которые были включены в выпуске. Если новая функция находится в активной разработке, она попадает в ветку master, и поэтому попадает в ночную исполнение, но с флагом функции (feature flag). Если как пользователь, вы хотите попробовать работу такой функции, находящейся в разработке, вы должны использовать ночную исполнение Rust и указать в вашем исходном коде определённый флаг. Если вы используете бета или безотказную исполнение Rust, Вы не можете использовать флаги функций. Этот ключевой момент позволяет использовать на практике новые возможности перед их отладкой. Это может использоваться желающими идти в ногу со временем, а другие могут использовать безотказную исполнение и быть уверенными что их код не сломается. Безотказность без стагнации. Эта книга содержит сведения только о безотказных возможностях, так как разрабатываемые возможности продолжают меняться в процессе и несомненно они будут отличаться в зависимости от того, когда эта книга написана и когда эти возможности будут включены в безотказные сборки. Вы можете найти сведения о возможностях ночной исполнения в интернете.","breadcrumbs":"Приложения » G — Как создаётся Rust и «Nightly Rust» » Ненадежные функции","id":"415","title":"Ненадежные функции"},"416":{"body":"Rustup делает лёгким изменение между различными потоками Rust, на вездесущем или местном для проекта уровне. По умолчанию устанавливается безотказная исполнение Rust. Для установки ночной исполнения выполните приказ: $ rustup toolchain install nightly Вы можете также увидеть все установленные средства разработчика (toolchains) (исполнения Rust и ассоциированные компоненты) с помощью rustup. Это пример вывода у одного из авторов Rust с компьютером на Windows: > rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc Как видите, включенный набор средств (toolchain) используется по умолчанию. Большинство пользователей Rust используют безотказные исполнения большую часть времени. Возможно, вы захотите использовать безотказную большую часть времени, но использовать каждую ночную исполнение в определенном проекте, потому что заботитесь о передовых возможностях. Для этого вы можете использовать приказ rustup override в каталоге этого проекта, чтобы установить ночной набор средств, должна использоваться приказ rustup, когда вы находитесь в этом каталоге: $ cd ~/projects/needs-nightly\n$ rustup override set nightly Теперь каждый раз, когда вы вызываете rustc или cargo внутри ~/projects/needs-nightly , rustup будет следить за тем, чтобы вы используете ночную исполнение Rust, а не безотказную по умолчанию. Это очень удобно, когда у вас есть множество Rust проектов!","breadcrumbs":"Приложения » G — Как создаётся Rust и «Nightly Rust» » Rustup и роль ночной исполнения Rust","id":"416","title":"Rustup и роль ночной исполнения Rust"},"417":{"body":"Итак, как вы узнаете об этих новых возможностях? Модель разработки Rust следует процессу запроса комментариев (RFC - Request For Comments) . Если хотите улучшить Rust, вы можете написать предложение, которое называется RFC. Любой может написать RFC для улучшения Rust, предложения рассматриваются и обсуждаются приказом Rust, которая состоит из множества тематических подгрупп. На веб-сайте Rust есть полный список приказов, который включает приказы для каждой области проекта: дизайн языка, реализация сборщика, инфраструктура, документация и многое другое. Соответствующая приказ читает предложение и комментарии, пишет некоторые собственные комментарии и в конечном итоге, приходит к согласию принять или отклонить эту возможность. Если новая возможность принята и кто-то может реализовать её, то задача открывается в репозитории Rust. Человек реализующий её, вполне может не быть тем, кто предложил эту возможность! Когда реализация готова, она попадает в master ветвь с флагом функции, как мы обсуждали в разделе \"Небезотказных функциях\" . Через некоторое время, разработчики Rust использующие ночные выпуски, смогут опробовать новую возможность, члены приказы обсудят её, как она работает в ночной исполнения и решат, должна ли она попасть в безотказную исполнение Rust или нет. Если принимается решение двигать её вперёд, ограничение функции с помощью флага убирается и функция теперь считается безотказной! Она едет в новую безотказную исполнение Rust.","breadcrumbs":"Приложения » G — Как создаётся Rust и «Nightly Rust» » Процесс RFC и приказы","id":"417","title":"Процесс RFC и приказы"},"42":{"body":"Теперь, когда у нас есть пользовательский ввод и случайное число, мы можем сравнить их. Этот шаг показан в приложении 2-4. Учтите, что этот код ещё не ссобирается, подробнее мы объясним дальше. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-04/src/main.rs:here}} Приложение 2-4: Обработка возможных возвращаемых значений при сравнении двух чисел Сначала добавим ещё один оператор use, который вводит вид с именем std::cmp::Ordering в область видимости из встроенной библиотеки. Вид Ordering является ещё одним перечислением и имеет варианты Less, Greater и Equal. Это три возможных исхода при сравнении двух величин. После чего ниже добавляем пять новых строк, использующих вид Ordering. Способ cmp сравнивает два значения и может вызываться для всего, что можно сравнить. Он принимает ссылку на все, что требуется сравнить: здесь сравнивается guess с secret_number. В результате возвращается вариант перечисления Ordering, которое мы ввели в область видимости с помощью оператора use. Для принятия решения о том, что делать дальше, мы используем выражение match , определяющее, какой вариант Ordering был возвращён из вызова cmp со значениями guess и secret_number. Выражение match состоит из веток (arms) . Ветка состоит из шаблона для сопоставления и кода, который будет запущен, если значение, переданное в match, соответствует шаблону этой ветки. Rust принимает значение, заданное match, и по очереди просматривает шаблон каждой ветки. Шаблоны и конструкция match — это мощные возможности Rust, позволяющие выразить множество ситуаций, с которыми может столкнуться ваш код, и обеспечить их обработку. Эти возможности будут подробно раскрыты в главе 6 и главе 18 соответственно. Давайте рассмотрим пример с выражением match, которое мы здесь используем. Скажем, пользователь угадал 50, а случайно сгенерированное секретное число на этот раз — 38. Когда код сравнивает 50 с 38, способ cmp вернёт Ordering::Greater, поскольку 50 больше, чем 38. Выражение match получит значение Ordering::Greater и начнёт проверять шаблон в каждой ветке. Он просмотрит шаблон первой ветки, Ordering::Less, и увидит, что значение Ordering::Greater не соответствует Ordering::Less, поэтому пропренебрегает код этой ветки и перейдёт к следующей. Шаблон следующей ветки — Ordering::Greater, который соответствует Ordering::Greater! Код этой ветки будет выполнен и напечатает Too big! на экран. Выражение match заканчивается после первого успешного совпадения, поэтому в этом сценарии оно не будет рассматривать последнюю ветку. Однако код в приложении 2-4 всё ещё не ссобирается. Давайте попробуем: {{#include ../listings/ch02-guessing-game-tutorial/listing-02-04/output.txt}} Суть ошибки заключается в наличии несовпадающих видов . У Rust строгая статическая система видов. Однако в нем также есть механизм вывода видов. Когда мы написали let mut guess = String::new(), Rust смог сделать вывод, что guess должна быть String и не заставил указывать вид. С другой стороны, secret_number — это числовой вид. Несколько видов чисел в Rust могут иметь значение от 1 до 100: i32, 32-битное число; u32, беззнаковое 32-битное число; i64, 64-битное число, и так далее. Если не указано иное, Rust по умолчанию использует i32, который будет видом secret_number, если вы не добавите сведения о виде где-то ещё, чтобы заставить Rust вывести другой числовой вид. Причина ошибки заключается в том, что Rust не может сравнить строку и числовой вид. В конечном итоге необходимо преобразовать String, считываемую программой в качестве входных данных, в существующий числовой вид, чтобы иметь возможность числового сравнения с загаданным числом. Для этого добавьте в тело функции main следующую строку: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/src/main.rs:here}} Вот эта строка: let guess: u32 = guess.trim().parse().expect(\"Please type a number!\"); Мы создаём переменную с именем guess. Но подождите, разве в программе уже нет переменной с этим именем guess? Так и есть, но Rust позволяет нам затенять предыдущее значение guess новым. Затенение позволяет нам повторно использовать имя переменной guess, чтобы избежать создания двух уникальных переменных, таких как guess_str и guess, например. Мы рассмотрим это более подробно в главе 3, а пока знайте, что эта функция часто используется, когда необходимо преобразовать значение из одного вида в другой. Мы связываем эту новую переменную с выражением guess.trim().parse(). Переменная guess в этом выражении относится к исходной переменной guess, которая содержала входные данные в виде строки. Способ trim на экземпляре String удалит любые пробельные символы в начале и конце строки для того, чтобы мы могли сопоставить строку с u32, который содержит только числовые данные. Пользователь должен нажать enter, чтобы выполнить read_line и ввести свою догадку, при этом в строку добавится символ новой строки. Например, если пользователь набирает 5 и нажимает enter, guess будет выглядеть так: 5\\n. Символ \\n означает \"новая строка\". (В Windows нажатие enter сопровождается возвратом каретки и новой строкой, \\r\\n). Способ trim убирает \\n или \\r\\n, оставляя только 5. Способ parse строк преобразует строку в другой вид. Здесь мы используем его для преобразования строки в число. Нам нужно сообщить Rust точный числовой вид, который мы хотим получить, используя let guess: u32. Двоеточие ( : ) после guess говорит Rust, что мы аннотируем вид переменной. В Rust есть несколько встроенных числовых видов; u32, показанный здесь, представляет собой 32-битное целое число без знака. Это хороший выбор по умолчанию для небольшого положительного числа. Вы узнаете о других видах чисел в главе 3. Кроме того, изложение u32 в этом примере программы и сравнение с secret_number означает, что Rust сделает вывод, что secret_number должен быть u32. Итак, теперь сравнение будет между двумя значениями одного типа! Способ parse будет работать только с символами, которые логически могут быть преобразованы в числа, и поэтому легко может вызвать ошибки. Если, например, строка содержит A👍%, преобразовать её в число невозможно. Так как способ parse может потерпеть неудачу, он возвращает вид Result — так же как и способ read_line (обсуждалось ранее в разделе «Обработка потенциальной ошибки с помощью вида Result»). Мы будем точно так же обрабатывать данный Result, вновь используя способ expect. Если parse вернёт вариант Result Err, так как не смог создать число из строки, вызов expect аварийно завершит игру и отобразит переданное ему сообщение. Если parse сможет успешно преобразовать строку в число, он вернёт вариант Result Ok, а expect вернёт число, полученное из значения Ok. Давайте запустим программу теперь: $ cargo run Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 0.43s Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess. 76\nYou guessed: 76\nToo big! Хорошо! Несмотря на то, что были добавлены пробелы в строке ввода, программа всё равно поняла, что пользователь имел в виду число 76. Запустите программу несколько раз, чтобы проверить разное поведение при различных видах ввода: задайте число правильно, задайте слишком большое число и задайте слишком маленькое число. Сейчас у нас работает большая часть игры, но пользователь может сделать только одну догадку. Давайте изменим это, добавив цикл!","breadcrumbs":"Программирование игры в загадки » Сравнение догадки с секретным числом","id":"42","title":"Сравнение догадки с секретным числом"},"43":{"body":"Ключевое слово loop создаёт бесконечный цикл. Мы добавляем цикл, чтобы дать пользователям больше шансов угадать число: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-04-looping/src/main.rs:here}} Как видите, мы переместили всё, начиная с подсказки ввода догадки, в цикл. Не забудьте добавить ещё по четыре пробела на отступы строк внутри цикла и запустите программу снова. Теперь программа будет бесконечно запрашивать ещё одну догадку, что фактически создаёт новую проблему. Похоже, пользователь не сможет выйти из игры! Пользователь может прервать выполнение программы с помощью сочетания клавиш ctrl+c. Но есть и другой способ спастись от этого ненасытного монстра, о котором говорилось при обсуждении parse в «Сравнение догадки с секретным числом» : если пользователь введёт нечисловой ответ, программа завершится аварийно. Мы можем воспользоваться этим, чтобы позволить пользователю выйти из игры, как показано здесь: $ cargo run Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 1.50s Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace Ввод quit приведёт к выходу из игры, но, как вы заметите, так же будет и при любом другом нечисловом вводе. Однако это, мягко говоря, не оптимально. Мы хотим, чтобы игра самостоятельно остановилась, когда будет угадано правильное число.","breadcrumbs":"Программирование игры в загадки » Возможность нескольких догадок с помощью циклов","id":"43","title":"Возможность нескольких догадок с помощью циклов"},"44":{"body":"Давайте запрограммируем игру на выход при выигрыше пользователя, добавив оператор break: Файл: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/no-listing-05-quitting/src/main.rs:here}} Добавление строки break после You win! заставляет программу выйти из цикла, когда пользователь правильно угадает секретное число. Выход из цикла также означает выход из программы, так как цикл является последней частью main.","breadcrumbs":"Программирование игры в загадки » Выход после правильной догадки","id":"44","title":"Выход после правильной догадки"},"45":{"body":"Чтобы улучшить поведение игры, вместо аварийного завершения программы, когда пользователь вводит не число, давайте заставим игру пренебрегать этот факт, позволяя пользователю продолжить угадывание. Для этого необходимо изменить строку, в которой guess преобразуется из String в u32, как показано в приложении 2-5. Файл: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-05/src/main.rs:here}} Приложение 2-5. Пренебрежение нечисловой догадки и запрос другой догадки вместо завершения программы Мы заменяем вызов expect на выражение match, чтобы перейти от аварийного завершения при ошибке к обработке ошибки. Помните, что parse возвращает вид Result, а Result — это перечисление, которое имеет варианты Ok и Err. Здесь мы используем выражение match, как и в случае с результатом Ordering способа cmp. Если parse успешно преобразует строку в число, он вернёт значение Ok, содержащее полученное число. Это значение Ok будет соответствовать шаблону первой ветки, а выражение match просто вернёт значение num, которое parse произвёл и поместил внутрь значения Ok. Это число окажется в нужной нам переменной guess, которую мы создали. Если способ parse не способен превратить строку в число, он вернёт значение Err, которое содержит более подробную сведения об ошибке. Значение Err не совпадает с шаблоном Ok(num) в первой ветке match, но совпадает с шаблоном Err(_) второй ветки. Подчёркивание _ является всеохватывающим выражением. В этой ветке мы говорим, что хотим обработать совпадение всех значений Err, независимо от того, какая сведения находится внутри. Поэтому программа выполнит код второй ветки, continue, который сообщает программе перейти к следующей повторения loop и запросить ещё одну догадку. В этом случае программа эффективно пренебрегает все ошибки, с которыми parse может столкнуться! Всё в программе теперь должно работать как положено. Давайте попробуем: $ cargo run Compiling guessing_game v0.1.0 (file:///projects/guessing_game) Finished dev [unoptimized + debuginfo] target(s) in 4.45s Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win! Потрясающе! С помощью одной маленькой последней правки мы закончим игру в угадывание. Напомним, что программа все ещё печатает секретное число. Это хорошо подходило для тестирования, но это портит игру. Давайте удалим println!, который выводит секретное число. В Приложении 2-6 показан окончательный вариант кода. Файл: src/main.rs {{#rustdoc_include ../listings/ch02-guessing-game-tutorial/listing-02-06/src/main.rs}} Приложение 2-6: полный код игры На данный момент вы успешно создали игру в загадки. Поздравляем!","breadcrumbs":"Программирование игры в загадки » Обработка недопустимого ввода","id":"45","title":"Обработка недопустимого ввода"},"46":{"body":"Этот проект — практический способ познакомить вас со многими новыми концепциями Rust: let, match, функции, использование внешних крейтов и многое другое. В следующих нескольких главах вы изучите эти концепции более подробно. Глава 3 охватывает понятия, которые есть в большинстве языков программирования, такие как переменные, виды данных и функции, и показывает, как использовать их в Rust. В главе 4 рассматривается владение — особенность, которая отличает Rust от других языков. В главе 5 обсуждаются структуры и синтаксис способов, а в главе 6 объясняется, как работают перечисления.","breadcrumbs":"Программирование игры в загадки » Заключение","id":"46","title":"Заключение"},"47":{"body":"В этой главе рассматриваются концепции, присутствующие почти в каждом языке программирования, и то, как они работают в Rust. В основе большинства языков программирования есть много общего. Все концепции, представленные в этой главе, не являются уникальными для Rust, но мы обсудим их в среде Rust и разъясним правила использования этих концепций. В частности вы изучите переменные, основные виды, функции, комментарии и поток управления. Эти фундаментальные понятия будут присутствовать в каждой программе на Rust, и их изучение на ранней стадии даст вам прочную основу для начала работы. Ключевые слова В языке Rust как и в других языках есть набор ключевых слов, зарезервированных только для использования в языке. Помните, что нельзя использовать эти слова в качестве имён переменных или функций. Большинство этих ключевых слов имеют особые назначения, и вы будете использовать их для выполнения различных задач в своих программах на Rust. Некоторые из них сейчас не имеют функционального назначения, но зарезервированы для функциональности, которая может быть добавлена в Rust в будущем. Список ключевых слов вы можете найти в Приложении А.","breadcrumbs":"Общие концепции программирования » Общие концепции программирования","id":"47","title":"Общие концепции программирования"},"48":{"body":"Как упоминалось в разделе \"Хранение значений с помощью переменных\" , по умолчанию переменные неизменяемы. Это один из многих стимулов Rust, позволяющий писать код с использованием преимущества безопасности и удобной состязательности (concurrency), предоставляемых Rust. Тем не менее, существует возможность сделать переменные изменяемыми. Давайте рассмотрим, как и почему Rust побуждает предпочесть неизменяемость и почему иногда можно отказаться от этого. Если переменная является неизменяемой, то после привязки значения к имени изменить его будет нельзя. Чтобы показать это, создайте новый проект под названием variables в каталоге projects с помощью приказы cargo new variables. Далее, в новом каталоге variables откройте src/main.rs и замените в нем код на ниже приведённый, который пока не будет собираться: Имя файла: src/main.rs fn main() {\nlet x = 5;\nprintln!(\"The value of x is: {}\", x);\nx = 6;\nprintln!(\"The value of x is: {}\", x);\n} Сохраните и запустите программу, используя cargo run. Будет получено сообщение об ошибке относительно неизменяемости, как показано в этом выводе: error[E0384]: cannot assign twice to immutable variable `x` --> src/main.rs:4:5 | 2 | let x = 5; | - first assignment to `x` 3 | println!(\"The value of x is: {}\", x); 4 | x = 6; | ^^^^^ cannot assign twice to immutable variable В этом примере показано, как сборщик помогает находить ошибки в ваших программах. Ошибки сборщика могут расстраивать, но в действительности они означают, что программа пока не делает правильно то, что вы ожидаете; это не значит , что вы плохой программист! Даже опытные Rustaceans иногда сталкиваются с ошибками сборщика. Вы получили сообщение об ошибке cannot assign twice to immutable variable x``, потому что попытались присвоить новое значение неизменяемой переменной x. Важно, чтобы при попытке изменить значение, объявленное неизменяемым, выдавались ошибки времени сборки, так как подобная ситуация может привести к сбоям. Если одна часть нашего кода функционирует исходя из уверенности в неизменяемости значения, а другая часть изменяет это значение, то велика вероятность , что первая часть не выполнит своего предназначения. Причину такой ошибки бывает трудно отследить, особенно если вторая часть кода изменяет значение лишь изредка . Сборщик Rust предоставляет заверение, что если объявить значение неизменяемым, то оно действительно не изменится, а значит, не нужно следить за этим самим. Таким образом, ваш код становится проще для понимания. Однако изменяемость может быть очень полезной и может сделать код более удобным для написания. Хотя переменные по умолчанию неизменяемы, их можно сделать изменяемыми, добавив mut перед именем переменной, как это было сделано в Главе 2 . Добавление mut также передаёт будущим читателям кода намерение, обозначая, что другие части кода будут изменять значение этой переменной. Например, изменим src/main.rs на следующий код: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/src/main.rs}} Запустив программу, мы получим результат: {{#include ../listings/ch03-common-programming-concepts/no-listing-02-adding-mut/output.txt}} Нам разрешено изменить значение, связанное с x, с 5 на 6 при помощи mut. В конечном счёте, решение об использовании изменяемости остаётся за вами и зависит от вашего мнения о наилучшем варианте в данной именно ситуации.","breadcrumbs":"Общие концепции программирования » Переменные и изменяемость » Переменные и изменяемость","id":"48","title":"Переменные и изменяемость"},"49":{"body":"Подобно неизменяемым переменным, константы — это значения, которые связаны с именем и не могут изменяться, но между константами и переменными есть несколько различий. Во-первых, нельзя использовать mut с константами. Константы не просто неизменяемы по умолчанию — они неизменяемы всегда. Для объявления констант используется ключевое слово const вместо let, а также вид значения должен быть указан в изложении. Мы рассмотрим виды и изложении видов в следующем разделе «Виды данных». , так что не беспокойтесь о подробностях прямо сейчас. Просто знайте, что вы всегда должны аннотировать вид. Константы можно объявлять в любой области видимости, включая вездесущую, благодаря этому они полезны для значений, которые нужны во многих частях кода. Последнее отличие в том, что константы могут быть заданы только константным выражением, но не результатом вычисленного во время выполнения значения. Вот пример объявления константы: const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3; Имя константы - THREE_HOURS_IN_SECONDS, а её значение устанавливается как результат умножения 60 (количество секунд в минуте) на 60 (количество минут в часе) на 3 (количество часов, которые нужно посчитать в этой программе). Соглашение Rust для именования констант требует использования всех заглавных букв с подчёркиванием между словами. Сборщик может вычислять ограниченный набор действий во время сборки, позволяющий записать это значение более понятным и простым для проверки способом, чем установка этой константы в значение 10 800. Дополнительную сведения о том, какие действия можно использовать при объявлении констант, см. в разделе Раздел справки Rust по вычислениям констант . Константы существуют в течение всего времени работы программы в пределах области, в которой они были объявлены. Это свойство делает константы полезными для значений в домене вашего приложения, о которых могут знать несколько частей программы, например, максимальное количество очков, которое может заработать любой игрок в игре, или скорость света. Обозначение жёстко закодированных значений, используемых в программе, как константы полезно для передачи смысла этого значения будущим сопровождающим кода. Это также позволяет иметь единственное место в коде, которое нужно будет изменить, если в будущем потребуется обновить значение.","breadcrumbs":"Общие концепции программирования » Переменные и изменяемость » Константы","id":"49","title":"Константы"},"5":{"body":"Rust полезен для студентов и тех, кто увлечен в изучении системных концепций. Используя Rust, многие люди узнали о таких темах, как разработка операционных систем. Сообщество радушно и с удовольствием ответит на вопросы начинающих. Благодаря усилиям — таким, как эта книга — приказы Rust хотят сделать концепции систем более доступными для большего числа людей, особенно для новичков в программировании.","breadcrumbs":"Введение » Студенты","id":"5","title":"Студенты"},"50":{"body":"Как было показано в уроке по игре в Угадайка в главе 2 , можно объявить новую переменную с тем же именем, как и у существующей переменной. Rustaceans говорят, что первая переменная затеняется второй, то есть вторая переменная - это то, что увидит сборщик, когда вы будете использовать имя переменной. По сути, вторая переменная затеняет первую, принимая любое использование имени переменной на себя до тех пор, пока либо она сама не станет тенью, либо не закончится область видимости. Мы можем затенять переменную, используя то же имя переменной и повторяя использование ключевого слова let следующим образом: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/src/main.rs}} Эта программа сначала привязывает x к значению 5. Затем она создаёт новую переменную x, повторяя let x =, беря исходное значение и добавляя 1, чтобы значение x стало равным 6. Затем во внутренней области видимости, созданной с помощью фигурных скобок, третий оператор let также затеняет x и создаёт новую переменную, умножая предыдущее значение на 2, чтобы дать x значение 12. Когда эта область заканчивается, внутреннее затенение заканчивается, и x возвращается к значению 6. Запустив эту программу, она выведет следующее: {{#include ../listings/ch03-common-programming-concepts/no-listing-03-shadowing/output.txt}} Затенение отличается от объявления переменной с помощью mut, так как мы получим ошибку сборки, если случайно попробуем переназначить значение без использования ключевого слова let. Используя let, можно выполнить несколько превращений над значением, при этом оставляя переменную неизменяемой, после того как все эти превращения завершены. Другой разницей между mut и затенением является то, что мы создаём совершенно новую переменную, когда снова используем слово let (ещё одну). Мы можем даже изменить вид значения, но снова использовать прежнее имя. К примеру, наша программа спрашивает пользователя, сколько пробелов он хочет разместить между некоторым текстом, запрашивая символы пробела, но мы на самом деле хотим сохранить данный ввод как число: {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-04-shadowing-can-change-types/src/main.rs:here}} Первая переменная spaces — является строковым видом, а вторая переменная spaces — числовым видом. Таким образом, затенение избавляет нас от необходимости придумывать разные имена, такие как spaces_str и spaces_num. Вместо этого мы можем повторно использовать более простое имя spaces. Однако, если мы попытаемся использовать для этого mut, как показано далее, то получим ошибку времени сборки: {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/src/main.rs:here}} Ошибка говорит, что не разрешается менять вид переменной: {{#include ../listings/ch03-common-programming-concepts/no-listing-05-mut-cant-change-types/output.txt}} Теперь, когда мы изучили, как работают переменные, давайте рассмотрим различные виды данных, которые они могут иметь.","breadcrumbs":"Общие концепции программирования » Переменные и изменяемость » Затенение (переменных)","id":"50","title":"Затенение (переменных)"},"51":{"body":"Каждое значение в Rust относится к определённому виду данных , который указывает на вид данных, что позволяет Rust знать, как работать с этими данными. Мы рассмотрим два подмножества видов данных: скалярные и составные. Не забывайте, что Rust является статически типизированным (statically typed) языком. Это означает, что он должен знать виды всех переменных во время сборки. Обычно сборщик может предположить, какой вид используется (вывести его), основываясь на значении и на том, как мы с ним работаем. В случаях, когда может быть выведено несколько видов, необходимо добавлять изложение вида вручную. Например, когда мы преобразовали String в число с помощью вызова parse в разделе «Сравнение предположения с загаданным номером» главы 2, мы должны добавить такую изложение: let guess: u32 = \"42\".parse().expect(\"Not a number!\"); Если мы не добавим изложение вида : u32, показанную в предыдущем коде, Rust отобразит следующую ошибку, которая означает, что сборщику нужно от нас больше сведений, чтобы узнать, какой вид мы хотим использовать: {{#include ../listings/ch03-common-programming-concepts/output-only-01-no-type-annotations/output.txt}} В будущем вы увидите различные изложении для разных видов данных.","breadcrumbs":"Общие концепции программирования » Виды Данных » Виды Данных","id":"51","title":"Виды Данных"},"52":{"body":"Скалярный вид представляет собой единичное значение. В Rust есть четыре основных скалярных вида: целочисленный, числа с плавающей точкой, логический и символы. Вы наверняка знакомы с этими видами по другим языкам программирования. Давайте разберёмся, как они работают в Rust. Целочисленные виды Целочисленный вид ( integer ) — это число без дробной части. В главе 2 мы использовали один целочисленный вид — вид u32. Такое объявление вида указывает, что значение, с которым оно связано, должно быть целым числом без знака (виды целых чисел со знаком начинаются с i вместо u), которое занимает 32 бита памяти. В Таблице 3-1 показаны встроенные целочисленные виды в Rust. Мы можем использовать любой из этих вариантов для объявления вида целочисленного значения. Таблица 3-1: целочисленные виды в Rust Длина Со знаком Без знака 8 бит i8 u8 16 бит i16 u16 32 бита i32 u32 64 бита i64 u64 128 бит i128 u128 архитектурно-зависимая isize usize Каждый вариант может быть как со знаком, так и без знака и имеет явный размер. Такая характеристика вида как знаковый и беззнаковый определяет возможность числа быть отрицательным. Другими словами, должно ли число иметь знак (знаковое) или оно всегда будет только положительным и, следовательно, может быть представлено без знака (беззнаковое). Это похоже на написание чисел на бумаге: когда знак имеет значение, число отображается со знаком плюс или со знаком минус; однако, когда можно с уверенностью предположить, что число положительное, оно отображается без знака. Числа со знаком хранятся с использованием дополнительного кода . Каждый вариант со знаком может хранить числа от -(2 n - 1 ) до 2 n - 1 - 1 включительно, где n — количество битов, которые использует этот вариант. Таким образом, i8 может хранить числа от -(2 7 ) до 2 7 - 1, что равно значениям от -128 до 127. Варианты без знака могут хранить числа от 0 до 2 n - 1, поэтому u8 может хранить числа от 0 до 2 8 - 1, что равно значениям от 0 до 255. Кроме того, виды isize и usize зависят от архитектуры компьютера, на котором выполняется программа, и обозначаются в таблице как \"arch\": 64 бита, если используется 64-битная архитектура, и 32 бита, если используется 32-битная архитектура. Вы можете записывать целочисленные литералы в любой из форм, показанных в таблице 3-2. Заметьте, что числовые литералы, имеющие несколько числовых видов, допускают использование суффикса вида, например 57u8, для обозначения вида. Числовые литералы также могут использовать _ в качестве визуального разделителя для облегчения чтения числа, например 1_000, который будет иметь такое же значение, как если бы было задано 1000. Таблица 3-2: Целочисленные литералы в Rust Числовой литерал Пример Десятичный 98_222 Шестнадцатеричный 0xff восьмеричный 0o77 Двоичный 0b1111_0000 Байт (только u8) b'A' Как же узнать, какой вид целого числа использовать? Если вы не уверены, значения по умолчанию в Rust, как правило, подходят для начала: целочисленные виды по умолчанию i32. Основной случай, в котором вы должны использовать isize или usize, — это упорядочевание какой-либо собрания. Целочисленное переполнение Допустим, имеется переменная вида u8, которая может хранить значения от 0 до 255. Если попытаться изменить переменную на значение вне этого ряда, например, 256, произойдёт целочисленное переполнение , что может привести к одному из двух вариантов поведения. Если выполняется сборка в режиме отладки, Rust включает проверку на целочисленное переполнение, приводящую вашу программу к панике во время выполнения, когда возникает такое поведение. Rust использует термин паника(panicking) , когда программа завершается с ошибкой. Мы обсудим панику более подробно в разделе \"Неустранимые ошибки с panic!\" в главе 9. . При сборки в режиме release с флагом --release, Rust не включает проверки на целочисленное переполнение, которое вызывает панику. Вместо этого, в случае переполнения, Rust выполняет обёртывание второго дополнения . Проще говоря, значения, превышающие максимальное значение, которое может хранить вид, \"оборачиваются\" к минимальному из значений, которые может хранить вид. В случае u8 значение 256 становится 0, значение 257 становится 1, и так далее. Программа не запаникует, но переменная будет иметь значение, которое, вероятно, не будет соответствовать вашим ожиданиям. Полагаться на поведение обёртывания целочисленного переполнения считается ошибкой. Для явной обработки возможности переполнения существует семейство способов, предоставляемых встроенной библиотекой для примитивных числовых видов: Обёртывание во всех режимах с помощью способов wrapping_*, таких как wrapping_add. Возврат значения None при переполнении с помощью способов checked_*. Возврат значения и логический индикатор, указывающий, произошло ли переполнение при использовании способов overflowing_*. Насыщение минимальным или максимальным значением с помощью способов saturating_*. Числа с плавающей запятой Также в Rust есть два примитивных вида для чисел с плавающей запятой, представляющих собой числа с десятичной точкой. Виды с плавающей точкой в Rust - это f32 и f64, размер которых составляет 32 бита и 64 бита соответственно. По умолчанию используется вид f64, поскольку на современных процессорах он работает примерно с той же скоростью, как и f32, но обладает большей точностью. Все виды с плавающей запятой являются знаковыми. Вот пример, отображающий числа с плавающей запятой в действии: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-06-floating-point/src/main.rs}} Числа с плавающей запятой представлены в соответствии со стандартом IEEE-754. Вид f32 является плавающей запятой одинарной точности, а f64 - двойной точности. Числовые действия Rust поддерживает основные математические действия, привычные для всех видов чисел: сложение, вычитание, умножение, деление и остаток. Целочисленное деление обрезает значение в направлении нуля до ближайшего целого числа. Следующий код показывает, как можно использовать каждую числовую действие в указания let: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-07-numeric-operations/src/main.rs}} Каждое выражение в этих указаниях использует математический оператор и вычисляется в одно значение, которое связывается с переменной. Приложении B содержит список всех операторов, которые предоставляет Rust. Логический вид данных Как и в большинстве других языков программирования, логический вид в Rust имеет два возможных значения: true и false. Значения логических видов имеют размер в один байт. Логический вид в Rust задаётся с помощью bool. Например: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-08-boolean/src/main.rs}} Основной способ использования логических значений - это использование условий, таких как выражение if. Мы рассмотрим, как выражения if работают в Rust в разделе \"Поток управления\" . Символьный вид данных Вид char в Rust является самым примитивным алфавитным видом языка. Вот несколько примеров объявления значений char: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-09-char/src/main.rs}} Заметьте, мы указываем литералы char с одинарными кавычками, в отличие от строковых литералов, для которых используются двойные кавычки. Вид char в Rust имеет размер четыре байта и представляет собой скалярное значение Unicode, а значит, может представлять собой не только ASCII. Акцентированные буквы, китайские, японские и корейские символы, эмодзи и пробелы нулевой ширины - все это допустимые значения вида char в Rust. Скалярные значения Unicode находятся в ряде от U+0000 до U+D7FF и от U+E000 до U+10FFFF включительно. Однако \"символ\" не является понятием в Unicode, поэтому ваше человеческое представление о том, что такое \"символ\", может не совпадать с тем, что такое char в Rust. Мы подробно обсудим эту тему в главе 8 \"Хранение текста в кодировке UTF-8 с помощью строк\".","breadcrumbs":"Общие концепции программирования » Виды Данных » Скалярные виды данных","id":"52","title":"Скалярные виды данных"},"53":{"body":"Составные виды могут группировать различные значения в один вид. В Rust есть два примитивных составных вида: кортежи и массивы. Кортежи Кортеж - это универсальный способ объединения нескольких значений с различными видами в один составной вид. Кортежи имеют фиксированную длину: после объявления они не могут увеличиваться или уменьшаться в размерах. Мы создаём кортеж, записывая список значений, разделённых запятыми, внутри круглых скобок. Каждая позиция в кортеже имеет вид, причём виды различных значений в кортеже не обязательно должны быть одинаковыми. В этом примере мы добавили необязательные изложении видов: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-10-tuples/src/main.rs}} Переменная tup связана со всем кортежем, поскольку кортеж является одним составным элементом. Чтобы получить отдельные значения из кортежа, можно использовать сопоставление с образцом для деструктуризации значения кортежа, например, так: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-11-destructuring-tuples/src/main.rs}} Эта программа сначала создаёт кортеж и связывает его с переменной tup. Затем с помощью шаблона let берётся tup и превращается в три отдельные переменные, x, y и z. Это называется деструктуризацией , поскольку разбивает единый кортеж на три части. Наконец, программа печатает значение y, которое равно 6.4. Мы также можем получить доступ к элементу кортежа напрямую, используя точку (.), за которой следует порядковый казательзначения, требуемого для доступа. Например: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-12-tuple-indexing/src/main.rs}} Эта программа создаёт кортеж x, а затем обращается к каждому элементу кортежа, используя соответствующие порядковые указатели. Как и в большинстве языков программирования, первый порядковый казательв кортеже равен 0. Кортеж, не имеющий значений, имеет особое имя единичный вид (unit) . Это значение и соответствующий ему вид записываются как () и представляет собой пустое значение или пустой возвращаемый вид. Выражения неявно возвращают значение единичного вида, если не возвращают никакого другого значения. Массивы Другим способом создания собрания из нескольких значений является массив array . В отличие от кортежа, каждый элемент массива должен иметь один и тот же вид. В отличие от массивов в некоторых других языках, массивы в Rust имеют фиксированную длину. Мы записываем значения в массиве в виде списка, разделённого запятыми, внутри квадратных скобок: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-13-arrays/src/main.rs}} Массивы удобно использовать, если данные необходимо разместить в стеке, а не в куче (мы подробнее обсудим стек и кучу в Главе 4 ) или если требуется, чтобы количество элементов всегда было фиксированным. Однако массив не так гибок, как вектор. Вектор - это подобный вид собрания, предоставляемый встроенной библиотекой, который может увеличиваться или уменьшаться в размере. Если вы не уверены, что лучше использовать - массив или вектор, то, скорее всего, вам следует использовать вектор. Более подробно векторы рассматриваются в Главе 8 . Однако массивы более полезны, когда вы знаете, что количество элементов не нужно будет изменять. Например, если бы вы использовали названия месяцев в программе, вы, вероятно, использовали бы массив, а не вектор, потому что вы знаете, что он всегда будет содержать 12 элементов: let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; Вид массива записывается следующим образом: в квадратных скобках обозначается вид элементов массива, а затем, через точку с запятой, количество элементов. Например: let a: [i32; 5] = [1, 2, 3, 4, 5]; Здесь i32 является видом каждого элемента массива. После точки с запятой указано число 5, показывающее, что массив содержит 5 элементов. Вы также можете объявить массив, содержащий одно и то же значение для каждого элемента, указав это значение вместо вида. Следом за этим так же следует точка с запятой, а затем — длина массива в квадратных скобках, как показано здесь: let a = [3; 5]; Массив в переменной a будет включать 5 элементов, значение которых будет равно 3. Данная запись подобна коду let a = [3, 3, 3, 3, 3];, но является более краткой. Доступ к элементам массива Массив — это единый фрагмент памяти известного фиксированного размера, который может быть размещён в стеке. Вы можете получить доступ к элементам массива с помощью упорядочевания, например: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-14-array-indexing/src/main.rs}} В этом примере переменная с именем first получит значение 1, потому что это значение находится по порядковому указателю [0] в массиве. Переменная с именем second получит значение 2 по порядковому указателю [1] в массиве. Некорректный доступ к элементу массива Давайте посмотрим, что произойдёт, если попытаться получить доступ к элементу массива, находящемуся за его пределами. Допустим, вы запускаете данный код, похожий на игру в угадывание из Главы 2, чтобы получить от пользователя порядковый казательмассива: Файл: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access/src/main.rs}} Этот код успешно собирается. Если запустить этот код с помощью cargo run и ввести 0, 1, 2, 3 или 4, программа напечатает соответствующее значение по данному порядковому указателю в массиве. Если вместо этого ввести число за пределами массива, например, 10, то программа выведет следующее: thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:19:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace Программа столкнулась с ошибкой во времени выполнения на этапе применения недопустимого значения в действия упорядочевания. Программа завершилась с сообщением об ошибке и не выполнила финальную указанию println!. При попытке доступа к элементу с помощью упорядочевания Rust проверяет, что указанный порядковый казательменьше длины массива. Если порядковый казательбольше или равен длине, Rust паникует. Эта проверка должна происходить во время выполнения, особенно в данном случае, потому что сборщик не может знать, какое значение введёт пользователь при последующем выполнении кода. Это пример принципов безопасности памяти Rust в действии. Во многих низкоуровневых языках такая проверка не выполняется, и когда вы указываете неправильный порядковый указатель, доступ к памяти может быть некорректным. Rust защищает вас от такого рода ошибок, немедленно закрываясь вместо того, чтобы разрешать доступ к памяти и продолжать работу. В главе 9 подробнее обсуждается обработка ошибок в Rust и то, как вы можете написать читаемый, безопасный код, который не вызывает панику и не разрешает некорректный доступ к памяти.","breadcrumbs":"Общие концепции программирования » Виды Данных » Составные виды данных","id":"53","title":"Составные виды данных"},"54":{"body":"Функции широко распространены в коде Rust. Вы уже познакомились с одной из самых важных функций в языке: функцией main, которая является точкой входа большинства программ. Вы также видели ключевое слово fn, позволяющее объявлять новые функции. Код Rust использует змеиный регистр (snake case) как основной стиль для имён функций и переменных, в котором все буквы строчные, а символ подчёркивания разделяет слова. Вот программа, содержащая пример определения функции: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-16-functions/src/main.rs}} Для определения функции в Rust необходимо указать fn, за которым следует имя функции и набор круглых скобок. Фигурные скобки указывают сборщику, где начинается и заканчивается тело функции. Мы можем вызвать любую функцию, которую мы определили ранее, введя её имя и набор скобок следом. Поскольку в программе определена another_function, её можно вызвать из функции main. Обратите внимание, что another_function определена после функции main в исходном коде; мы могли бы определить её и раньше. Rust не важно, где вы определяете свои функции, главное, чтобы они были определены где-то в той области видимости, которую может видеть вызывающий их код. Создадим новый двоичный проект с названием functions для дальнейшего изучения функций. Поместите пример another_function в файл src/main.rs и запустите его. Вы должны увидеть следующий вывод: {{#include ../listings/ch03-common-programming-concepts/no-listing-16-functions/output.txt}} Строки выполняются в том порядке, в котором они расположены в функции main. Сначала печатается сообщение \"Hello, world!\", а затем вызывается another_function, которая также печатает сообщение.","breadcrumbs":"Общие концепции программирования » Функции » Функции","id":"54","title":"Функции"},"55":{"body":"Мы можем определить функции, имеющие свойства , которые представляют собой особые переменные, являющиеся частью сигнатуры функции. Когда у функции есть свойства, необходимо предоставить ей определенные значения этих свойств. Технически определенные значения называются переменные , но в повседневном общении люди обычно используют слова свойство и переменная как взаимозаменяемые либо для переменных в определении функции, либо для определенных значений, передаваемых при вызове функции. В этой исполнения another_function мы добавляем свойство: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/src/main.rs}} Попробуйте запустить эту программу. Должны получить следующий результат: {{#include ../listings/ch03-common-programming-concepts/no-listing-17-functions-with-parameters/output.txt}} Объявление another_function содержит один свойство с именем x. Вид x задан как i32. Когда мы передаём 5 в another_function, макрос println! помещает 5 на место пары фигурных скобок, содержащих x в строке формата. В сигнатурах функций вы обязаны указывать вид каждого свойства. Это намеренное решение в дизайне Rust: требование аннотаций видов в определениях функций позволяет сборщику в дальнейшем избежать необходимости использовать их в других местах кода, чтобы определить, какой вид вы имеете в виду. Сборщик также может выдавать более полезные сообщения об ошибках, если он знает, какие виды ожидает функция. При определении нескольких свойств, разделяйте объявления свойств запятыми, как показано ниже: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/src/main.rs}} Этот пример создаёт функцию под именем print_labeled_measurement с двумя свойствами. Первый свойство называется value с видом i32. Второй называется unit_label и имеет вид char. Затем функция печатает текст, содержащий value и unit_label. Попробуем запустить этот код. Замените текущую программу проекта functions в файле src/main.rs на предыдущий пример и запустите его с помощью cargo run: {{#include ../listings/ch03-common-programming-concepts/no-listing-18-functions-with-multiple-parameters/output.txt}} Поскольку мы вызвали функцию с 5 в качестве значения для value и 'h' в качестве значения для unit_label, вывод программы содержит эти значения.","breadcrumbs":"Общие концепции программирования » Функции » Свойства функции","id":"55","title":"Свойства функции"},"56":{"body":"Тела функций состоят из ряда указаний, необязательно заканчивающихся выражением. До сих пор функции, которые мы рассматривали, не включали завершающее выражение, но вы видели выражение как часть указания. Поскольку Rust является языком, основанным на выражениях, это важное различие необходимо понимать. В других языках таких различий нет, поэтому давайте рассмотрим, что такое указания и выражения, и как их различия влияют на тела функций. Указания выполняют какое-либо действие и не возвращают значения. Выражения вычисляются до результирующего значения. Давайте рассмотрим несколько примеров. На самом деле мы уже использовали указания и выражения. Создание переменной и присвоение ей значения с помощью ключевого слова let является оператором. В Приложении 3-1, let y = 6; — это указание. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-01/src/main.rs}} Приложение 3-1: Объявление функции main, содержащей одну указанию Определения функций также являются указанием. Весь предыдущий пример сам по себе является указанием. Указания не возвращают значения. Следовательно вы не можете присвоить let указанию другой переменной, как это пытается сделать следующий код. Вы получите ошибку: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/src/main.rs}} Если вы запустите эту программу, то ошибка будет выглядеть так: {{#include ../listings/ch03-common-programming-concepts/no-listing-19-statements-vs-expressions/output.txt}} Указание let y = 6 не возвращает значение, поэтому не с чем связать переменную x. Это отличается от поведения в других языках, таких как C и Ruby, где присваивание возвращает присвоенное значение. В таких языках можно писать код x = y = 6 и обе переменные x и y будут иметь значение 6. Но в Rust не так. Выражения вычисляют значение и составляют большую часть остального кода, который вы напишете на Rust. Рассмотрим математическую действие, к примеру 5 + 6, которая является выражением, вычисляющим значение 11. Выражения могут быть частью указаний: в приложении 3-1 6 в указания let y = 6; является выражением, которое вычисляется в значение 6. Вызов функции — это выражение. Вызов макроса — это выражение. Новый разделобласти видимости, созданный с помощью фигурных скобок, представляет собой выражение, например: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-20-blocks-are-expressions/src/main.rs}} Это выражение: { let x = 3; x + 1\n} это блок, который в данном случае вычисляется в значение 4. Это значение связывается с y как часть указания let. Обратите внимание, что строка x + 1 не имеет точки с запятой в конце, что отличается от большинства строк, которые вы видели до сих пор. Выражения не содержат завершающих точек с запятой. Если вы добавите точку с запятой в конец выражения, вы превратите его в указанию, и тогда она не будет возвращать значение. Помните об этом, когда будете изучать возвращаемые значения функций и выражения.","breadcrumbs":"Общие концепции программирования » Функции » Указания и выражения","id":"56","title":"Указания и выражения"},"57":{"body":"Функции могут возвращать значения коду, который их вызывает. Мы не называем возвращаемые значения, но мы должны объявить их вид после стрелки ( -> ). В Rust возвращаемое значение функции является синонимом значения конечного выражения в разделе тела функции. Вы можете раньше выйти из функции и вернуть значение, используя ключевое слово return и указав значение, но большинство функций неявно возвращают последнее выражение. Вот пример такой функции: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/src/main.rs}} В коде функции five нет вызовов функций, макросов или даже указаний let — есть только одно число 5. Это является абсолютно корректной функцией в Rust. Заметьте, что возвращаемый вид у данной функции определён как -> i32. Попробуйте запустить этот код. Вывод будет таким: {{#include ../listings/ch03-common-programming-concepts/no-listing-21-function-return-values/output.txt}} Значение 5 в five является возвращаемым функцией значением, поэтому возвращаемый вид - i32. Рассмотрим пример более подробно. Здесь есть два важных момента: во-первых, строка let x = five(); показывает использование возвращаемого функцией значения для объявления переменной. Так как функция five возвращает 5, то эта строка эквивалентна следующей: let x = 5; Во-вторых, у функции five нет свойств и определён вид возвращаемого значения, но тело функции представляет собой одинокую 5 без точки с запятой, потому что это выражение, значение которого мы хотим вернуть. Рассмотрим другой пример: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-22-function-parameter-and-return/src/main.rs}} Запуск кода напечатает The value of x is: 6. Но если поставить точку с запятой в конце строки, содержащей x + 1, превратив её из выражения в указанию, мы получим ошибку: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/src/main.rs}} Сборка данного кода вызывает следующую ошибку: {{#include ../listings/ch03-common-programming-concepts/no-listing-23-statements-dont-return-values/output.txt}} Основное сообщение об ошибке, несовпадение видов, раскрывает ключевую проблему этого кода. Определение функции plus_one сообщает, что будет возвращено i32, но указания не вычисляются в значение, что и выражается единичным видом (). Следовательно, ничего не возвращается, что противоречит определению функции и приводит к ошибке. В этом выводе Rust выдаёт сообщение, которое, возможно, поможет исправить эту проблему: он предлагает удалить точку с запятой для устранения ошибки.","breadcrumbs":"Общие концепции программирования » Функции » Функции с возвращаемыми значениями","id":"57","title":"Функции с возвращаемыми значениями"},"58":{"body":"Все программисты стремятся сделать свой код простым для понимания, но иногда требуется дополнительное объяснение. В таких случаях программисты оставляют в исходном коде комментарии , которые сборщик пренебрегает, но люди, читающие исходный код, вероятно, сочтут их полезными. Пример простого комментария: // Hello, world. В Rust принят идиоматический стиль комментариев, который начинает комментарий с двух косых черт, и комментарий продолжается до конца строки. Для комментариев, выходящих за пределы одной строки, необходимо включить // в каждую строку, как показано ниже: // Итак, мы делаем что-то сложное, настолько длинное, что нам нужно\n// несколько строк комментариев, чтобы сделать это! Ух! Надеюсь, этот комментарий\n// объясняет, что происходит. Комментарии также можно размещать в конце строк, содержащих код: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-24-comments-end-of-line/src/main.rs}} Но чаще всего они используются в таком формате: комментарий располагается на отдельной строке над кодом, который он аннотирует: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-25-comments-above-line/src/main.rs}} В Rust есть ещё один вид комментариев - документационные комментарии, которые мы обсудим в разделе \"Публикация пакета на Crates.io\" главы 14.","breadcrumbs":"Общие концепции программирования » Комментарии » Комментарии","id":"58","title":"Комментарии"},"59":{"body":"Возможности запуска некоторого кода в зависимости от некоторого условия, и циклического выполнения некоторого кода, являются основными элементами в большинстве языков программирования. Наиболее распространёнными конструкциями, позволяющими управлять потоком выполнения кода Rust, являются выражения if и циклы.","breadcrumbs":"Общие концепции программирования » Управляющие конструкции » Управляющие конструкции","id":"59","title":"Управляющие конструкции"},"6":{"body":"Сотни больших и малых компаний используют Rust в промышленных условиях для решения различных задач, включая средства приказной строки, веб-сервисы, средства DevOps, встраиваемые устройства, анализ и транскодирование аудио и видео, криптовалюты, биоинформатику, поисковые системы, приложения Интернета вещей, машинное обучение и даже основные части веб-браузера Firefox.","breadcrumbs":"Введение » Компании","id":"6","title":"Компании"},"60":{"body":"Выражение if позволяет выполнять части кода в зависимости от условий. Вы задаёте условие, а затем указываете: \"Если это условие выполняется, выполните этот разделкода. Если условие не выполняется, не выполняйте этот разделкода\". Для изучения выражения if создайте новый проект под названием branches в каталоге projects . В файл src/main.rs поместите следующий код: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/src/main.rs}} Условие начинается с ключевого слова if, за которым следует условное выражение. В данном случае условное выражение проверяет, имеет ли переменная number значение меньше 5. Сразу после условного выражения внутри фигурных скобок мы помещаем разделкода, который будет выполняться, если результат равен true. Блоки кода, связанные с условными выражениями, иногда называют ветками , как и ветки в выражениях match, которые мы обсуждали в разделе \"Сравнение догадки с секретным числом\" главы 2. Это необязательно, но мы также можем использовать ключевое слово else, которое мы используем в данном примере, чтобы предоставить программе иной разделвыполнения кода, выполняющийся если результат вычисления будет ложным. Если не указать выражение else и условие будет ложным, программа просто пропустит разделif и перейдёт к следующему фрагменту кода. Попробуйте запустить этот код. Появится следующий результат: {{#include ../listings/ch03-common-programming-concepts/no-listing-26-if-true/output.txt}} Попробуйте изменить значение number на значение, которое делает условие false и посмотрите, что произойдёт: {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/src/main.rs:here}} Запустите программу снова и посмотрите на вывод: {{#include ../listings/ch03-common-programming-concepts/no-listing-27-if-false/output.txt}} Также стоит отметить, что условие в этом коде должно быть логического вида bool. Если условие не является bool, возникнет ошибка. Например, попробуйте запустить следующий код: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/src/main.rs}} На этот раз условие if вычисляется в значение 3, и Rust бросает ошибку: {{#include ../listings/ch03-common-programming-concepts/no-listing-28-if-condition-must-be-bool/output.txt}} Ошибка говорит, что Rust ожидал вид bool, но получил значение целочисленного вида. В отличии от других языков вроде Ruby и JavaScript, Rust не будет пытаться самостоятельно преобразовывать нелогические виды в логические. Необходимо явно и всегда использовать if с логическим видом в качестве условия. Если нужно, чтобы разделкода if запускался только, когда число не равно 0, то, например, мы можем изменить выражение if на следующее: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-29-if-not-equal-0/src/main.rs}} Будет напечатана следующая строка number was something other than zero. Обработка нескольких условий с помощью else if Можно использовать несколько условий, комбинируя if и else в выражении else if. Например: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/src/main.rs}} У этой программы есть четыре возможных пути выполнения. После её запуска вы должны увидеть следующий результат: {{#include ../listings/ch03-common-programming-concepts/no-listing-30-else-if/output.txt}} Во время выполнения этой программы по очереди проверяется каждое выражение if и выполняется первый блок, для которого условие true. Заметьте, что хотя 6 делится на 2, мы не видим ни вывода number is divisible by 2, ни текста number is not divisible by 4, 3, or 2 из раздела else. Так происходит потому, что Rust выполняет разделтолько для первого истинного условия, а обнаружив его, даже не проверяет остальные. Использование множества выражений else if приводит к загромождению кода, поэтому при наличии более чем одного выражения, возможно, стоит провести рефакторинг кода. В главе 6 описана мощная конструкция ветвления Rust для таких случаев, называемая match. Использование if в указания let Поскольку if является выражением, его можно использовать в правой части указания let для присвоения результата переменной, как в приложении 3-2. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-02/src/main.rs}} Приложение 3-2: Присвоение результата выражения if переменной Переменная number будет привязана к значению, которое является результатом выражения if. Запустим код и посмотрим, что происходит: {{#include ../listings/ch03-common-programming-concepts/listing-03-02/output.txt}} Вспомните, что разделы кода вычисляются последним выражением в них, а числа сами по себе также являются выражениями. В данном случае, значение всего выражения if зависит от того, какой разделвыполняется. При этом значения, которые могут быть результатами каждого из ветвей if, должны быть одного вида. В Приложении 3-2, результатами обеих ветвей if и else являются целочисленный вид i32. Если виды не совпадают, как в следующем примере, мы получим ошибку: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/src/main.rs}} При попытке сборки этого кода, мы получим ошибку. Ветви if и else представляют несовместимые виды значений, и Rust точно указывает, где искать проблему в программе: {{#include ../listings/ch03-common-programming-concepts/no-listing-31-arms-must-return-same-type/output.txt}} Выражение в разделе if вычисляется как целочисленное, а выражение в разделе else вычисляется как строка. Это не сработает, потому что переменные должны иметь один вид, а Rust должен знать во время сборки, какого вида переменная number. Зная вид number, сборщик может убедиться, что вид действителен везде, где мы используем number. Rust не смог бы этого сделать, если бы вид number определялся только во время выполнения. Сборщик усложнился бы и давал бы меньше заверений в отношении кода, если бы ему приходилось отслеживать несколько гипотетических видов для любой переменной.","breadcrumbs":"Общие концепции программирования » Управляющие конструкции » Выражения if","id":"60","title":"Выражения if"},"61":{"body":"Часто бывает полезно выполнить раздел кода более одного раза. Для этой задачи Rust предоставляет несколько конструкций цикла, которые позволяют выполнить разделкода до конца, а затем сразу же вернуться в начало. Для экспериментов с циклами давайте создадим новый проект под названием loops . В Rust есть три вида циклов: loop, while и for. Давайте попробуем каждый из них. Повторение выполнения кода с помощью loop Ключевое слово loop говорит Rust выполнять разделкода снова и снова до бесконечности или пока не будет явно приказано остановиться. В качестве примера, измените код файла src/main.rs в каталоге проекта loops на код ниже: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-loop/src/main.rs}} Когда запустим эту программу, увидим, как again! печатается снова и снова, пока не остановить программу вручную. Большинство окно вызоваов поддерживают сочетание клавиш ctrl-c для прерывания программы, которая застряла в непрерывном цикле. Попробуйте: $ cargo run Compiling loops v0.1.0 (file:///projects/loops) Finished dev [unoptimized + debuginfo] target(s) in 0.29s Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain! Символ ^C обозначает место, где было нажато ctrl-c . В зависимости от того, где находился код в цикле в момент получения сигнала прерывания, вы можете увидеть или не увидеть слово again!, напечатанное после ^C. К счастью, Rust также предоставляет способ выйти из цикла с помощью кода. Ключевое слово break нужно поместить в цикл, чтобы указать программе, когда следует прекратить выполнение цикла. Напоминаем, мы делали так в игре \"Угадайка\" в разделе \"Выход после правильной догадки\" Главы 2, чтобы выйти из программы, когда пользователь выиграл игру, угадав правильное число. Мы также использовали continue в игре \"Угадайка\", которое указывает программе в цикле пропустить весь оставшийся код в данной повторения цикла и перейти к следующей повторения. Возвращение значений из циклов Одно из применений loop - это повторение действия, которая может закончиться неудачей, например, проверка успешности выполнения потоком своего задания. Также может понадобиться передать из цикла результат этой действия в остальную часть кода. Для этого можно добавить возвращаемое значение после выражения break, которое используется для остановки цикла. Это значение будет возвращено из цикла, и его можно будет использовать, как показано здесь: {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-33-return-value-from-loop/src/main.rs}} Перед циклом мы объявляем переменную с именем counter и объявим её значением 0. Затем мы объявляем переменную с именем result для хранения значения, возвращаемого из цикла. На каждой повторения цикла мы добавляем 1 к переменной counter, а затем проверяем, равняется ли 10 переменная counter. Когда это происходит, мы используем ключевое слово break со значением counter * 2. После цикла мы ставим точку с запятой для завершения указания, присваивающей значение result. Наконец, мы выводим значение в result, равное в данном случае 20. Метки циклов для устранения неоднозначности между несколькими циклами Если у вас есть циклы внутри циклов, break и continue применяются к самому внутреннему циклу в этой цепочке. При желании вы можете создать метку цикла , которую вы затем сможете использовать с break или continue для указания, что эти ключевые слова применяются к помеченному циклу, а не к самому внутреннему циклу. Метки цикла должны начинаться с одинарной кавычки. Вот пример с двумя вложенными циклами: {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/src/main.rs}} Внешний цикл имеет метку 'counting_up, и он будет считать от 0 до 2. Внутренний цикл без метки ведёт обратный отсчёт от 10 до 9. Первый break, который не содержит метку, выйдет только из внутреннего цикла. Указание break 'counting_up; завершит внешний цикл. Этот код напечатает: {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-32-5-loop-labels/output.txt}} Циклы с условием while В программе часто требуется проверить состояние условия в цикле. Пока условие истинно, цикл выполняется. Когда условие перестаёт быть истинным, программа вызывает break, останавливая цикл. Такое поведение можно реализовать с помощью сочетания loop, if, else и break. При желании попробуйте сделать это в программе. Это настолько распространённый паттерн, что в Rust реализована встроенная языковая конструкция для него, называемая цикл while. В приложении 3-3 мы используем while, чтобы выполнить три цикла программы, производя каждый раз обратный отсчёт, а затем, после завершения цикла, печатаем сообщение и выходим. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-03/src/main.rs}} Приложение 3-3: Использование цикла while для выполнения кода, пока условие истинно Эта конструкция устраняет множество вложений, которые потребовались бы при использовании loop, if, else и break, и она более понятна. Пока условие вычисляется в true, код выполняется; в противном случае происходит выход из цикла. Цикл по элементам собрания с помощью for Для перебора элементов собрания, например, массива, можно использовать конструкцию while. Например, цикл в приложении 3-4 печатает каждый элемент массива a. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-04/src/main.rs}} Приложение 3-4: Перебор каждого элемента собрания с помощью цикла while Этот код выполняет перебор элементов массива. Он начинается с порядкового казателя 0, а затем циклически выполняется, пока не достигнет последнего порядкового казателя в массиве (то есть, когда index < 5 уже не является истиной). Выполнение этого кода напечатает каждый элемент массива: {{#include ../listings/ch03-common-programming-concepts/listing-03-04/output.txt}} Все пять значений массива появляются в окне вызова, как и ожидалось. Поскольку index в какой-то момент достигнет значения 5, цикл прекратит выполнение перед попыткой извлечь шестое значение из массива. Однако такой подход чреват ошибками; мы можем вызвать панику в программе, если значение порядкового казателя или условие проверки неверны. Например, если изменить определение массива a на четыре элемента, но забыть обновить условие на while index < 4, код вызовет панику. Также это медленно, поскольку сборщик добавляет код времени выполнения для обеспечения проверки нахождения порядкового казателя в границах массива на каждой повторения цикла. В качестве более краткой иного решения можно использовать цикл for и выполнять некоторый код для каждого элемента собрания. Цикл for может выглядеть как код в приложении 3-5. Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/listing-03-05/src/main.rs}} Приложение 3-5: Перебор каждого элемента собрания с помощью цикла for При выполнении этого кода мы увидим тот же результат, что и в приложении 3-4. Что важнее, теперь мы повысили безопасность кода и устранили вероятность ошибок, которые могут возникнуть в результате выхода за пределы массива или недостаточно далёкого перехода и пропуска некоторых элементов. При использовании цикла for не нужно помнить о внесении изменений в другой код, в случае изменения количества значений в массиве, как это было бы с способом, использованным в приложении 3-4. Безопасность и краткость циклов for делают их наиболее часто используемой конструкцией цикла в Rust. Даже в ситуациях необходимости выполнения некоторого кода определённое количество раз, как в примере обратного отсчёта, в котором использовался цикл while из Приложения 3-3, большинство Rustaceans использовали бы цикл for. Для этого можно использовать Range, предоставляемый встроенной библиотекой, который генерирует последовательность всех чисел, начиная с первого числа и заканчивая вторым числом, но не включая его (т.е. (1..4) эквивалентно [1, 2, 3] или в общем случае (start..end) эквивалентно [start, start+1, start+2, ... , end-2, end-1] - прим.переводчика). Вот как будет выглядеть обратный отсчёт с использованием цикла for и другого способа, о котором мы ещё не говорили, rev, для разворота ряда: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch03-common-programming-concepts/no-listing-34-for-range/src/main.rs}} Данный код выглядит лучше, не так ли?","breadcrumbs":"Общие концепции программирования » Управляющие конструкции » Повторное выполнение кода с помощью циклов","id":"61","title":"Повторное выполнение кода с помощью циклов"},"62":{"body":"Вы справились! Это была объёмная глава: вы узнали о переменных, скалярных и составных видах данных, функциях, комментариях, выражениях if и циклах! Для практики работы с концепциями, обсуждаемыми в этой главе, попробуйте создать программы для выполнения следующих действий: Преобразование температур между значениями по Фаренгейту к Цельсию. Генерирование n-го числа Фибоначчи. Распечатайте текст рождественской песни \"Двенадцать дней Рождества\", воспользовавшись повторами в песне. Когда вы будете готовы двигаться дальше, мы поговорим о концепции в Rust, которая не существует обычно в других языках программирования: владение.","breadcrumbs":"Общие концепции программирования » Управляющие конструкции » Итоги","id":"62","title":"Итоги"},"63":{"body":"Владение - это самая уникальная особенность Rust, которая имеет глубокие последствия для всего языка. Это позволяет Rust обеспечивать безопасность памяти без использования сборщика мусора, поэтому важно понимать, как работает владение. В этой главе мы поговорим о владении, а также о нескольких связанных с ним возможностях: заимствовании, срезах и о том, как Rust раскладывает данные в памяти.","breadcrumbs":"Понимание владения » Понимание Владения","id":"63","title":"Понимание Владения"},"64":{"body":"Владение — это набор правил, определяющих, как программа на языке Rust управляет памятью. Все программы так или иначе должны управлять тем, как они используют память компьютера во время работы. Некоторые языки имеют сборщик мусора, регулярно отслеживающий неиспользуемую память во время работы программы; в других языках программист должен явно выделять и освобождать память. В Rust используется третий подход: память управляется через систему владения с набором правил, которые проверяются сборщиком. При нарушении любого из правил программа не будет собрана. Ни одна из особенностей системы владения не замедлит работу вашей программы. Поскольку владение является новой концепцией для многих программистов, требуется некоторое время, чтобы привыкнуть к ней. Хорошая новость заключается в том, что чем больше у вас будет опыта с Rust и с правилами системы владения, тем легче вам будет естественным образом разрабатывать безопасный и эффективный код. Держитесь! Не сдавайтесь! Понимание концепции владения даст вам основу для понимания всех остальных особенностей, делающих Rust уникальным. В этой главе вы изучите владение на примерах, которые сфокусированы на наиболее часто используемой структуре данных: строках.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Что такое владение?","id":"64","title":"Что такое владение?"},"65":{"body":"Многие языки программирования не требуют, чтобы вы слишком часто думали о стеке и куче. Но в языках системного программирования, одним из которых является Rust, то, какое значение находится в стеке или в куче, влияет на поведение языка и на принятие вами определённых решений. Владение будет описано через призму стека и кучи позже в этой главе, а пока — краткое пояснение. И стек, и куча — это части памяти, доступные вашему коду для использования во время выполнения. Однако они структурированы по-разному. Стек хранит значения в порядке их получения, а удаляет — в обратном. Это называется «последним пришёл — первым ушёл» . Подумайте о стопке тарелок: когда вы добавляете тарелки, вы кладёте их сверху стопки — когда вам нужна тарелка, вы берёте одну так же сверху. Добавление или удаление тарелок посередине или снизу не сработает! Добавление данных называется помещением в стек , а удаление — извлечением из стека . Все данные, хранящиеся в стеке, должны иметь известный фиксированный размер. Данные, размер которых во время сборки неизвестен или может измениться, должны храниться в куче. Куча устроена менее организованно: когда вы кладёте данные в кучу, вы запрашиваете определённый объём пространства. Операционная система находит в куче свободный участок памяти достаточного размера, помечает его как используемый и возвращает указатель , являющийся адресом этого участка памяти. Этот процесс называется выделением памяти в куче и иногда сокращается до выделения памяти (помещение значений в стек не считается выделением). Поскольку указатель на участок памяти в куче имеет определённый фиксированный размер, его можно расположить в стеке, однако когда вам понадобятся актуальные данные, вам придётся проследовать по указателю. Представьте, что вы сидите в ресторане. Когда вы входите, вы называете количество человек в вашей группе, и персонал находит свободный стол, которого хватит на всех, и ведёт вас туда. Если кто-то из вашей группы опоздает, он может спросить, куда вас посадили, чтобы найти вас. Помещение в стек происходит более быстро, чем выделение памяти в куче, потому что операционная система не должна искать место для размещения сведений — это место всегда на верхушке стека. Для сравнения, выделение памяти в куче требует больше работы, потому что операционная система сначала должна найти участок памяти достаточного размера, а затем произвести некоторые действия для подготовки к следующему выделению памяти. Доступ к данным в куче медленнее, чем доступ к данным в стеке, потому что вам нужно следовать по адресу указателя, чтобы добраться туда. Современные процессоры работают быстрее, если они меньше прыгают по памяти. Продолжая подобие, рассмотрим официанта в ресторане, принимающего заказы со многих столов. Наиболее эффективно будет получить все заказы за одним столом, прежде чем переходить к следующему столу. Получение заказа со стола А, затем со стола В, затем снова одного с А, а затем снова одного с В было бы гораздо более медленным делом. Точно так же процессор может выполнять свою работу лучше, если он работает с данными, которые находятся близко к другим данным (как в стеке), а не далеко (как это может быть в куче). Когда ваш код вызывает функцию, значения, переданные в неё (потенциально включающие указатели на данные в куче), и местные переменные помещаются в стек. Когда функция завершается, эти значения извлекаются из стека. Отслеживание того, какие части кода используют какие данные, минимизация количества повторяющихся данных и очистка неиспользуемых данных в куче, чтобы не исчерпать пространство, — все эти проблемы решает владение. Как только вы поймёте, что такое владение, вам не нужно будет слишком часто думать о стеке и куче. Однако знание того, что основная цель владения — управление данными кучи, может помочь объяснить, почему оно работает именно так.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Стек и куча","id":"65","title":"Стек и куча"},"66":{"body":"Во-первых, давайте взглянем на правила владения. Помните об этих правилах, пока мы работаем с примерами, которые их отображают: У каждого значения в Rust есть владелец , У значения может быть только один владелец в один момент времени, Когда владелец покидает область видимости, значение удаляется.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Правила владения","id":"66","title":"Правила владения"},"67":{"body":"Теперь, когда мы прошли основной синтаксис Rust, мы не будем включать весь код fn main() { в примеры. Поэтому, если вы будете следовать этому курсу, убедитесь, что следующие примеры помещены в функцию main вручную. В результате наши примеры будут более лаконичными, что позволит нам сосредоточиться на существующих подробностях, а не на шаблонном коде. В качестве первого примера владения мы рассмотрим область видимости некоторых переменных. Область видимости — это рядвнутри программы, для которого допустим элемент. Возьмём следующую переменную: let s = \"hello\"; Переменная s относится к строковому литералу, где значение строки жёстко прописано в тексте нашей программы. Переменная действительна с момента её объявления до конца текущей области видимости . В приложении 4-1 показана программа с комментариями, указывающими, где допустима переменная s . {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-01/src/main.rs:here}} Приложение 4-1: переменная и область действия, в которой она допустима Другими словами, здесь есть два важных момента: Когда переменная s появляется в области видимости, она считается действительной, Она остаётся действительной до момента выхода за границы этой области. На этом этапе объяснения взаимосвязь между областями видимости и допустимостью переменных подобна той, что существует в других языках программирования. Теперь мы будем опираться на это понимание, введя вид String.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Область видимости переменной","id":"67","title":"Область видимости переменной"},"68":{"body":"Для отображения правил владения нам требуется более сложный вид данных чем те, что мы обсуждали в части \"Виды данных\" Главы 3. Виды, рассмотренные ранее, имеют определённый размер, а значит могут быть размещены на стеке и извлечены из него, когда их область видимости закончится, и могут быть быстро и тривиально скопированы для создания новой, независимой копии, если другой части кода нужно использовать то же самое значение в другой области видимости. Но мы хотим посмотреть на данные, хранящиеся в куче, и выяснить, как Rust узнаёт, когда нужно очистить эти данные, поэтому вид String — отличный пример. Мы сконцентрируемся на тех частях String, которые связаны с владением. Эти особенности также применимы к другим сложным видам данных, независимо от того, предоставлены они встроенной библиотекой или созданы вами. Более подробно мы обсудим String в главе 8 . Мы уже видели строковые литералы, где строковое значение жёстко прописано в нашей программе. Строковые литералы удобны, но они подходят не для каждой ситуации, где мы можем хотеть использовать текст. Одна из причин заключается в том, что они неизменны. Кроме того, не каждое строковое значение может быть известно во время написания кода: что, если мы захотим принять и сохранить пользовательский ввод? Для таких ситуаций в Rust есть ещё один строковый вид — String. Этот вид управляет данными, выделенными в куче, и поэтому может хранить объём текста, который во время сборки неизвестен. Также вы можете создать String из строкового литерала, используя функцию from, например: let s = String::from(\"hello\"); Оператор \"Двойное двоеточие\" :: позволяет использовать пространство имён данной именно функции from с видом String, а не какое-то иное имя, такое как string_from. Мы обсудим этот синтаксис более подробно в разделе «Синтаксис способа» . раздел Главы 5, и в ходе обсуждения пространств имён с модулями в «Пути для обращения к элементу в дереве модулей» в главе 7. Строка такого вида может быть изменяема: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-01-can-mutate-string/src/main.rs:here}} В чем же тут разница? Почему строку String можно изменить, а литералы — нельзя? Разница заключается в том, как эти два вида работают с памятью.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Вид данных String","id":"68","title":"Вид данных String"},"69":{"body":"В случае строкового литерала мы знаем его содержимое во время сборки, и оно жёстко прописано в итоговом исполняемом файле. Причина того, что строковые литералы более быстрые и эффективные, в их неизменяемости. К сожалению, нельзя поместить неопределённый кусок памяти в выполняемый файл для текста, размер которого неизвестен при сборки и может меняться во время выполнения программы. Чтобы поддерживать изменяемый, увеличивающийся текст вида String, необходимо выделять память в куче для всего содержимого, объем которого неизвестен во время сборки. Это означает, что: Память должна запрашиваться у операционной системы во время выполнения программы, Необходим способ возврата этой памяти операционной системе, когда мы закончили в программе работу со String. Первая часть выполняется нами: когда мы вызываем String::from, его реализация запрашивает необходимую память. Это работает довольно похоже во всех языках программирования. Однако вторая часть отличается. В языках со сборщиком мусора (GC) , память, которая больше не используется, отслеживается и очищается с его помощью — нам не нужно об этом думать. В большинстве языков без сборщика мусора мы обязаны сами определять, когда память больше не используется, и вызывать код для явного её освобождения, точно так же, как мы делали это для её запроса. Правильное выполнение этого процесса исторически было сложной проблемой программирования. Если мы забудем освободить память, она будет потеряна. Если мы сделаем это слишком рано, у нас будет недопустимая переменная. Сделать это дважды — тоже будет ошибкой. Нам нужно соединить ровно один allocate ровно с одним free. Rust выбирает другой путь: память самостоятельно возвращается, как только владеющая памятью переменная выходит из области видимости. Вот исполнение примера с областью видимости из приложения 4-1, в котором используется вид String вместо строкового литерала: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-02-string-scope/src/main.rs:here}} Существует естественный момент, когда мы можем вернуть память, необходимую нашему String, обратно распределителю — когда s выходит за пределы области видимости. Когда переменная выходит за пределы области видимости, Rust вызывает для нас особую функцию. Эта функция называется drop , и именно здесь автор String может поместить код для возврата памяти. Rust самостоятельно вызывает drop после закрывающей фигурной скобки. Примечание: в C++ этот паттерн освобождения ресурсов в конце времени жизни элемента иногда называется «Получение ресурса есть объявление» (англ. Resource Acquisition Is Initialization (RAII)) . Функция drop в Rust покажется вам знакомой, если вы использовали шаблоны RAII. Этот шаблон оказывает глубокое влияние на способ написания кода в Rust. Сейчас это может казаться простым, но в более сложных ситуациях поведение кода может быть неожиданным, например когда хочется иметь несколько переменных, использующих данные, выделенные в куче. Изучим несколько таких ситуаций. Взаимодействие переменных и данных с помощью перемещения Несколько переменных могут по-разному взаимодействовать с одними и теми же данными в Rust. Давайте рассмотрим пример использования целого числа в приложении 4-2. {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-02/src/main.rs:here}} Приложение 4-2. Присвоение целочисленного значения переменной x переменной y Мы можем догадаться, что делает этот код: «привязать значение 5 к x; затем сделать копию значения в x и привязать его к y». Теперь у нас есть две переменные: x и y, и обе равны 5. Это то, что происходит на самом деле, потому что целые числа — это простые значения с известным фиксированным размером, и эти два значения 5 помещаются в стек. Теперь рассмотрим исполнение с видом String: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-03-string-move/src/main.rs:here}} Это выглядит очень похоже, поэтому мы можем предположить, что происходит то же самое: вторая строка сделает копию значения в s1 и привяжет его к s2. Но это не совсем так. Взгляните на рисунок 4-1, чтобы увидеть, что происходит со String под капотом. String состоит из трёх частей, показанных слева: указатель на память, в которой хранится содержимое строки, длина и ёмкость. Эта группа данных хранится в стеке. Справа — память в куче, которая содержит содержимое. Рисунок 4-1: представление в памяти String, содержащей значение \"hello\", привязанное к s1 Длина — это объём памяти в байтах, который в настоящее время использует содержимое String. Ёмкость — это общий объём памяти в байтах, который String получил от распределителя. Разница между длиной и ёмкостью имеет значение, но не в этом среде, поэтому на данный момент можно пренебрегать ёмкость. Когда мы присваиваем s1 значению s2, данные String копируются, то есть мы копируем указатель, длину и ёмкость, которые находятся в стеке. Мы не копируем данные в куче, на которые указывает указатель. Другими словами, представление данных в памяти выглядит так, как показано на рис. 4-2. Рисунок 4-2: представление в памяти переменной s2, имеющей копию указателя, длины и ёмкости s1 Представление не похоже на рисунок 4-3, как выглядела бы память, если бы вместо этого Rust также скопировал данные кучи. Если бы Rust сделал это, действие s2 = s1 могла бы быть очень дорогой с точки зрения производительности во время выполнения, если бы данные в куче были большими. Рисунок 4-3: другой вариант того, что может сделать s2 = s1, если Rust также скопирует данные кучи Ранее мы сказали, что когда переменная выходит за пределы области видимости, Rust самостоятельно вызывает функцию drop и очищает память в куче для данной переменной. Но на рис. 4.2 оба указателя данных указывают на одно и то же место. Это проблема: когда переменные s2 и s1 выходят из области видимости, они обе будут пытаться освободить одну и ту же память в куче. Это известно как ошибка двойного освобождения (double free) и является одной из ошибок безопасности памяти, упоминаемых ранее. Освобождение памяти дважды может привести к повреждению памяти, что потенциально может привести к уязвимостям безопасности. Чтобы обеспечить безопасность памяти, после строки let s2 = s1; , Rust считает s1 более недействительным. Следовательно, Rust не нужно ничего освобождать, когда s1 выходит за пределы области видимости. Посмотрите, что происходит, когда вы пытаетесь использовать s1 после создания s2 ; это не сработает: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/src/main.rs:here}} Вы получите похожую ошибку, потому что Rust не позволяет вам использовать недействительную ссылку: {{#include ../listings/ch04-understanding-ownership/no-listing-04-cant-use-after-move/output.txt}} Если вы слышали термины поверхностное копирование и глубокое копирование при работе с другими языками, концепция копирования указателя, длины и ёмкости без копирования данных, вероятно, звучит как создание поверхностной копии. Но поскольку Rust также аннулирует первую переменную, вместо того, чтобы называть это поверхностным копированием, это называется перемещением . В этом примере мы бы сказали, что s1 был перемещён в s2. Итак, что на самом деле происходит, показано на рисунке 4-4. Рисунок 4-4: представление в памяти после того, как s1 был признан недействительным Это решает нашу проблему! Действительной остаётся только переменная s2. Когда она выходит из области видимости, то она одна будет освобождать память в куче. Такой выбор дизайна языка даёт дополнительное преимущество: Rust никогда не будет самостоятельно создавать «глубокие» копии ваших данных. Следовательно любое такое самостоятельное копирование можно считать недорогим с точки зрения производительности во время выполнения. Взаимодействие переменных и данных с помощью клонирования Если мы хотим глубоко скопировать данные кучи String, а не только данные стека, мы можем использовать общий способ, называемый clone. Мы обсудим синтаксис способов в главе 5, но поскольку способы являются общей чертой многих языков программирования, вы, вероятно, уже встречались с ними. Вот пример работы способа clone: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-05-clone/src/main.rs:here}} Это отлично работает и очевидно приводит к поведению, представленному на рисунке 4-3, где данные кучи были скопированы. Когда вы видите вызов clone, вы знаете о выполнении некоторого кода, который может быть дорогим. В то же время использование clone является визуальным индикатором того, что тут происходит что-то нестандартное. Стековые данные: копирование Это ещё одна особенность о которой мы ранее не говорили. Этот код, часть которого была показа ранее в приложении 4-2, использует целые числа. Он работает без ошибок: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-06-copy/src/main.rs:here}} Но этот код, кажется, противоречит тому, что мы только что узнали: у нас нет вызова clone, но x всё ещё действителен и не был перемещён в y. Причина в том, что такие виды, как целые числа, размер которых известен во время сборки, полностью хранятся в стеке, поэтому копии фактических значений создаются быстро. Это означает, что нет причин, по которым мы хотели бы предотвратить доступность x после того, как создадим переменную y. Другими словами, здесь нет разницы между глубоким и поверхностным копированием, поэтому вызов clone ничем не отличается от обычного поверхностного копирования, и мы можем его опустить. В Rust есть особая изложение, называемая типажом Copy, которую мы можем размещать на видах, хранящихся в стеке, как и целые числа (подробнее о видах мы поговорим в главе 10 ). Если вид реализует типаж Copy, переменные, которые его используют, не перемещаются, а тривиально копируются, что делает их действительными после присвоения другой переменной. Rust не позволит нам аннотировать вид с помощью Copy, если вид или любая из его частей реализует Drop. Если для вида нужно, чтобы произошло что-то особенное, когда значение выходит за пределы области видимости, и мы добавляем изложение Copy к этому виду, мы получим ошибку времени сборки. Чтобы узнать, как добавить изложение Copy к вашему виду для реализации типажа, смотрите раздел «Производные типажи» в приложении С. Но какие же виды реализуют трейт Copy? Можно проверить документацию любого вида для уверенности, но как правило любая группа простых скалярных значений может быть реализовывать Copy, и никакие виды, которые требуют выделения памяти в куче или являются некоторой формой ресурсов, не реализуют трейта Copy. Вот некоторые виды, которые реализуют Copy: Все целочисленные виды, такие как u32, Логический вид данных bool, возможные значения которого true и false, Все виды с плавающей запятой, такие как f64. Символьный вид char, Кортежи, но только если они содержат виды, которые также реализуют Copy. Например, (i32, i32) будет с Copy, но кортеж (i32, String) уже нет.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Память и способы её выделения","id":"69","title":"Память и способы её выделения"},"7":{"body":"Rust предназначен для людей, которые хотят развивать язык программирования Rust, сообщество, средства для разработчиков и библиотеки. Мы будем рады, если вы внесёте свой вклад в развитие языка Rust.","breadcrumbs":"Введение » Разработчики Open Source","id":"7","title":"Разработчики Open Source"},"70":{"body":"Механика передачи значения функции подобна тому, что происходит при присвоении значения переменной. Передача переменной в функцию приведёт к перемещению или копированию, как и присваивание. В приложении 4-3 есть пример с некоторыми изложениями, показывающими, где переменные входят в область видимости и выходят из неё. Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-03/src/main.rs}} Приложение 4-3. Функции с аннотированными владельцами и областью действия Если попытаться использовать s после вызова takes_ownership, Rust выдаст ошибку времени сборки. Такие статические проверки защищают от ошибок. Попробуйте добавить код в main, который использует переменную s и x, чтобы увидеть где их можно использовать и где правила владения предотвращают их использование.","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Владение и функции","id":"70","title":"Владение и функции"},"71":{"body":"Возвращаемые значения также могут передавать право владения. В приложении 4-4 показан пример функции, возвращающей некоторое значение, с такими же изложениями, как в приложении 4-3. Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-04/src/main.rs}} Приложение 4-4: передача права владения на возвращаемые значения Владение переменной каждый раз следует одному и тому же шаблону: присваивание значения другой переменной перемещает его. Когда переменная, содержащая данные в куче, выходит из области видимости, содержимое в куче будет очищено функцией drop, если только данные не были перемещены во владение другой переменной. Хотя это работает, получение права владения, а затем возвращение владения каждой функцией немного утомительно. Что, если мы хотим, чтобы функция использовала значение, но не становилась владельцем? Очень раздражает, что всё, что мы передаём, также должно быть передано обратно, если мы хотим использовать это снова, в дополнение к любым данным, полученным из тела функции, которые мы также можем захотеть вернуть. Rust позволяет нам возвращать несколько значений с помощью кортежа, как показано в приложении 4-5. Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-05/src/main.rs}} Приложение 4-5: возврат права владения на свойства Но это слишком высокопарно и многословно для концепции, которая должна быть общей. К счастью для нас, в Rust есть возможность использовать значение без передачи права владения, называемая ссылками .","breadcrumbs":"Понимание владения » Что такое \"владение\"? » Возвращение значений и область видимости","id":"71","title":"Возвращение значений и область видимости"},"72":{"body":"Проблема с кодом кортежа в приложении 4-5 заключается в том, что мы должны вернуть String из вызванной функции, чтобы использовать String после вызова calculate_length, потому что String была перемещена в calculate_length. Вместо этого мы можем предоставить ссылку на значение String. Ссылка похожа на указатель в том смысле, что это адрес, по которому мы можем проследовать, чтобы получить доступ к данным, хранящимся по этому адресу; эти данные принадлежат какой-то другой переменной. В отличие от указателя, ссылка обязательно указывает на допустимое значение определённого вида в течение всего срока существования этой ссылки. Вот как вы могли бы определить и использовать функцию calculate_length, имеющую ссылку на объект в качестве свойства, вместо того, чтобы брать на себя ответственность за значение: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:all}} Во-первых, обратите внимание, что весь код кортежа в объявлении переменной и возвращаемое значение функции исчезли. Во-вторых, обратите внимание, что мы передаём &s1 в calculate_length и в его определении используем &String, а не String. Эти знаки представляют собой ссылки , и они позволяют вам ссылаться на некоторое значение, не принимая владение над ним. Рисунок 4-5 изображает эту концепцию. Рисунок 4-5: диаграмма для &String s, указывающей на String s1 Примечание: противоположностью ссылки с использованием & является разыменование , выполняемое с помощью оператора разыменования *. Мы увидим некоторые варианты использования оператора разыменования в главе 8 и обсудим подробности разыменования в главе 15. Давайте подробнее рассмотрим механизм вызова функции: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-07-reference/src/main.rs:here}} &s1 позволяет нам создать ссылку, которая ссылается на значение s1, но не владеет им. Поскольку она не владеет им, значение, на которое она указывает, не будет удалено, когда ссылка перестанет использоваться. Сигнатура функции использует & для индикации того, что вид свойства s является ссылкой. Добавим объясняющие комментарии: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-08-reference-with-annotations/src/main.rs:here}} Область действия s такая же, как и область действия любого свойства функции, но значение, на которое указывает ссылка, не удаляется, когда s перестаёт использоваться, потому что s не является его владельцем. Когда функции имеют ссылки в качестве свойств вместо фактических значений, нам не нужно возвращать значения, чтобы вернуть право владения, потому что мы никогда не владели ими. Мы называем процесс создания ссылки заимствованием . Как и в существующей жизни, если человек чем-то владеет, вы можете это у него позаимствовать. Когда вы закончите, вы должны вернуть это законному владельцу. А что произойдёт, если попытаться изменить то, что было позаимствовано? Попробуйте код приложения 4-6 Спойлер: этот код не сработает! Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-06/src/main.rs}} Приложение 4-6: попытка модификации заимствованной переменной Вот ошибка: {{#include ../listings/ch04-understanding-ownership/listing-04-06/output.txt}} Как переменные неизменяемы по умолчанию, так и ссылки. Нам не разрешено изменять то, на что у нас есть ссылка.","breadcrumbs":"Понимание владения » Ссылки и заимствование » Ссылки и заимствование","id":"72","title":"Ссылки и заимствование"},"73":{"body":"Мы можем исправить код из приложения 4-6, чтобы позволить себе изменять заимствованное значение, с помощью нескольких небольших настроек, которые используют изменяемую ссылку : Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-09-fixes-listing-04-06/src/main.rs}} Сначала мы меняем s на mut. Затем мы создаём изменяемую ссылку с помощью &mut s, у которой вызываем change и обновляем сигнатуру функции, чтобы принять изменяемую ссылку с помощью some_string: &mut String. Это даёт понять, что change изменит значение, которое заимствует. Изменяемые ссылки имеют одно большое ограничение: если у вас есть изменяемая ссылка на значение, у вас не может быть других ссылок на это же значение. Код, который пытается создать две изменяемые ссылки на s, завершится ошибкой: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/src/main.rs:here}} Описание ошибки: {{#include ../listings/ch04-understanding-ownership/no-listing-10-multiple-mut-not-allowed/output.txt}} Эта ошибка говорит о том, что код недействителен, потому что мы не можем заимствовать s как изменяемые более одного раза в один момент. Первое изменяемое заимствование находится в r1 и должно длиться до тех пор, пока оно не будет использовано в println!, но между созданием этой изменяемой ссылки и её использованием мы попытались создать другую изменяемую ссылку в r2, которая заимствует те же данные, что и r1. Ограничение, предотвращающее одновременное использование нескольких изменяемых ссылок на одни и те же данные, допускает изменение, но очень управляющим образом. Это то, с чем борются новые Rustaceans, потому что большинство языков позволяют изменять значение в любой момент. Преимущество этого ограничения заключается в том, что Rust может предотвратить гонку данных во время сборки. Гонка данных похожа на состояние гонки и происходит, когда возникают следующие три сценария: Два или больше указателей используют одни и те же данные в одно и то же время, Минимум один указатель используется для записи данных, Отсутствуют механизмы для синхронизации доступа к данным. Гонки данных вызывают неопределённое поведение, и их может быть сложно диагностировать и исправить, когда вы пытаетесь отследить их во время выполнения. Rust предотвращает такую проблему, отказываясь собирать код с гонками данных! Как всегда, мы можем использовать фигурные скобки для создания новой области видимости, позволяющей использовать несколько изменяемых ссылок, но не одновременно : {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-11-muts-in-separate-scopes/src/main.rs:here}} Rust применяет подобное правило для комбинирования изменяемых и неизменяемых ссылок. Этот код приводит к ошибке: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/src/main.rs:here}} Ошибка: {{#include ../listings/ch04-understanding-ownership/no-listing-12-immutable-and-mutable-not-allowed/output.txt}} Вау! У нас также не может быть изменяемой ссылки, пока у нас есть неизменяемая ссылка на то же значение. Пользователи неизменяемой ссылки не ожидают, что значение внезапно изменится из-под них! Однако разрешены множественные неизменяемые ссылки, потому что никто, кто просто читает данные, не может повлиять на чтение данных кем-либо ещё. Обратите внимание, что область действия ссылки начинается с того места, где она была введена, и продолжается до последнего использования этой ссылки. Например, этот код будет собираться, потому что последнее использование неизменяемых ссылок println!, происходит до того, как вводится изменяемая ссылка: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-13-reference-scope-ends/src/main.rs:here}} Области неизменяемых ссылок r1 и r2 заканчиваются после println! где они использовались в последний раз, то есть до создания изменяемой ссылки r3. Эти области не перекрываются, поэтому этот код разрешён: сборщик может сказать, что ссылка больше не используется в точке перед концом области. Несмотря на то, что ошибки заимствования могут иногда вызывать разочарование, помните, что сборщик Rust заранее указывает на потенциальную ошибку (во время сборки, а не во время выполнения) и точно показывает, в чем проблема. Тогда вам не придётся выяснять, почему ваши данные оказались не такими, как вы ожидали.","breadcrumbs":"Понимание владения » Ссылки и заимствование » Изменяемые ссылки","id":"73","title":"Изменяемые ссылки"},"74":{"body":"В языках с указателями весьма легко ошибочно создать недействительную (висячую) (dangling) ссылку. Ссылку указывающую на участок памяти, который мог быть передан кому-то другому, путём освобождения некоторой памяти при сохранении указателя на эту память. Rust сборщик заверяет, что ссылки никогда не станут недействительными: если у вас есть ссылка на какие-то данные, сборщик обеспечит что эти данные не выйдут из области видимости прежде, чем из области видимости исчезнет ссылка. Давайте попробуем создать висячую ссылку, чтобы увидеть, как Rust предотвращает их появление с помощью ошибки во время сборки: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/src/main.rs}} Здесь ошибка: {{#include ../listings/ch04-understanding-ownership/no-listing-14-dangling-reference/output.txt}} Это сообщение об ошибке относится к особенности языка, которую мы ещё не рассмотрели: времени жизни. Мы подробно обсудим времена жизни в главе 10. Но если вы не обращаете внимания на части, касающиеся времени жизни, сообщение будет содержать ключ к тому, почему этот код является проблемой: this function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from Давайте подробнее рассмотрим, что именно происходит на каждом этапе нашего кода dangle: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-15-dangling-reference-annotated/src/main.rs:here}} Поскольку s создаётся внутри dangle, когда код dangle будет завершён, s будет освобождена. Но мы попытались вернуть ссылку на неё. Это означает, что эта ссылка будет указывать на недопустимую String. Это нехорошо! Rust не позволит нам сделать это. Решением будет вернуть непосредственно String: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-16-no-dangle/src/main.rs:here}} Это работает без проблем. Владение перемещено, и ничего не освобождено.","breadcrumbs":"Понимание владения » Ссылки и заимствование » Висячие ссылки","id":"74","title":"Висячие ссылки"},"75":{"body":"Давайте повторим все, что мы обсудили про ссылки: В любой момент времени у вас может быть одна (но не обе) изменяемая ссылка или любое количество неизменяемых ссылок. Все ссылки должны быть действительными. В следующей главе мы рассмотрим другой вид ссылок — срезы.","breadcrumbs":"Понимание владения » Ссылки и заимствование » Правила работы с ссылками","id":"75","title":"Правила работы с ссылками"},"76":{"body":"Срезы позволяют ссылаться на непрерывную последовательность элементов в собрания, а не на всю собрание. Срез является своего рода ссылкой, поэтому он не имеет права владения. Вот небольшая проблема программирования: напишите функцию, которая принимает строку слов, разделённых пробелами, и возвращает первое слово, которое она находит в этой строке. Если функция не находит пробела в строке, вся строка должна состоять из одного слова, поэтому должна быть возвращена вся строка. Давайте рассмотрим, как бы мы написали сигнатуру этой функции без использования срезов, чтобы понять проблему, которую решат срезы: fn first_word(s: &String) -> ? Функция first_word имеет &String в качестве свойства. Мы не хотим владения, так что всё в порядке. Но что мы должны вернуть? На самом деле у нас нет способа говорить о части строки. Однако мы могли бы вернуть порядковый казательконца слова, обозначенного пробелом. Давайте попробуем, как показано в Приложении 4-7. Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:here}} Приложение 4-7. Функция first_word, возвращающая значение порядкового казателя байта в свойство String Поскольку нам нужно просмотреть String поэлементно и проверить, является ли значение пробелом, мы преобразуем нашу String в массив байтов с помощью способа as_bytes. {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:as_bytes}} Далее, мы создаём повторитель по массиву байт используя способ iter: {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:iter}} Мы обсудим повторители более подробно в Главе 13 . На данный момент знайте, что iter — это способ, который возвращает каждый элемент в собрания, а enumerate оборачивает результат iter и вместо этого возвращает каждый элемент как часть кортежа. Первый элемент кортежа, возвращаемый из enumerate, является порядковым казателем, а второй элемент — ссылкой на элемент. Это немного удобнее, чем вычислять порядковый казательсамостоятельно. Поскольку способ enumerate возвращает кортеж, мы можем использовать шаблоны для деструктурирования этого кортежа. Мы подробнее обсудим шаблоны в Главе 6. . В цикле for мы указываем шаблон, имеющий i для порядкового казателя в кортеже и &item для одного байта в кортеже. Поскольку мы получаем ссылку на элемент из .iter().enumerate(), мы используем & в шаблоне. Внутри цикла for мы ищем байт, представляющий пробел, используя синтаксис байтового литерала. Если мы находим пробел, мы возвращаем позицию. В противном случае мы возвращаем длину строки с помощью s.len(). {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-07/src/main.rs:inside_for}} Теперь у нас есть способ узнать порядковый казательбайта указывающего на конец первого слова в строке, но есть проблема. Мы возвращаем сам usize, но это число имеет значение только в среде &String. Другими словами, поскольку это значение отдельное от String, то нет заверения, что оно все ещё будет действительным в будущем. Рассмотрим программу из приложения 4-8, которая использует функцию first_word приложения 4-7. Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-08/src/main.rs:here}} Приложение 4-8. Сохранение результата вызова функции first_word и последующего изменения содержимого String Данная программа собирается без ошибок и будет успешно работать, даже после того как мы воспользуемся переменной word после вызова s.clear(). Так как значение word совсем не связано с состоянием переменной s, то word сохраняет своё значение 5 без изменений. Мы бы могли воспользоваться значением 5 чтобы получить первое слово из переменной s, но это приведёт к ошибке, потому что содержимое s изменилось после того как мы сохранили 5 в переменной word (стало пустой строкой в вызове s.clear()). Необходимость беспокоиться о том, что порядковый казательв переменной word не синхронизируется с данными в переменной s является утомительной и подверженной ошибкам! Управление этими порядковыми указателями становится ещё более хрупким, если мы напишем функцию second_word. Её сигнатура могла бы выглядеть так: fn second_word(s: &String) -> (usize, usize) { Теперь мы отслеживаем начальный и конечный порядковый указатель, и у нас есть ещё больше значений, которые были рассчитаны на основе данных в определённом состоянии, но вообще не привязаны к этому состоянию. У нас есть три несвязанные переменные, которые необходимо синхронизировать. К счастью в Rust есть решение данной проблемы: строковые срезы.","breadcrumbs":"Понимание владения » Вид среза » Вид срезы","id":"76","title":"Вид срезы"},"77":{"body":"Строковый срез - это ссылка на часть строки String и он выглядит следующим образом: {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-17-slice/src/main.rs:here}} Вместо ссылки на всю String hello является ссылкой на часть String, указанную в дополнительном куске кода [0..5]. Мы создаём срезы, используя рядв квадратных скобках, указав [starting_index..ending_index], где starting_index — это первая позиция, аending_index конечный_порядковый казатель— это на единицу больше, чем последняя позиция в срезе. Внутри структура данных среза хранит начальную позицию и длину среза, что соответствует ending_index минус starting_index. Итак, в случае let world = &s[6..11];, world будет срезом, содержащим указатель на байт с порядковым казателем 6 s со значением длины 5. Рисунок 4-6 отображает это на диаграмме. Рисунок 4-6: Строковый срез ссылается на часть String С синтаксисом Rust .., если вы хотите начать с порядкового казателя 0, вы можете отбросить значение перед двумя точками. Другими словами, они равны: let s = String::from(\"hello\"); let slice = &s[0..2];\nlet slice = &s[..2]; Таким же образом, если ваш срез включает последний байт String, вы можете отбросить конечный номер. Это означает, что они равны: let s = String::from(\"hello\"); let len = s.len(); let slice = &s[3..len];\nlet slice = &s[3..]; Вы также можете отбросить оба значения, чтобы получить часть всей строки. Итак, они равны: let s = String::from(\"hello\"); let len = s.len(); let slice = &s[0..len];\nlet slice = &s[..]; Примечание. Порядковые указатели ряда срезов строк должны располагаться на допустимых границах символов UTF-8. Если вы попытаетесь создать фрагмент строки нарушая границы символа в котором больше одного байта, ваша программа завершится с ошибкой. В целях введения срезов строк мы предполагаем, что в этом разделе используется только ASCII; более подробное обсуждение обработки UTF-8 находится в разделе «Сохранение закодированного текста UTF-8 со строками» . раздел главы 8. Давайте используем полученную сведения и перепишем способ first_word так, чтобы он возвращал срез. Для обозначения вида \"срез строки\" существует запись &str: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-18-first-word-slice/src/main.rs:here}} Мы получаем порядковый казательконца слова так же, как в приложении 4.7, ища первое вхождение пробела. Когда мы находим пробел, мы возвращаем фрагмент строки, используя начало строки и порядковый казательпробела в качестве начального и конечного порядковых указателей. Теперь, когда мы вызываем first_word, мы возвращаем одно значение, привязанное к основным данным. Значение состоит из ссылки на начальную точку среза и количества элементов в срезе. Подобным образом можно переписать и второй способ second_word: fn second_word(s: &String) -> &str { Теперь у нас есть простой API, который гораздо сложнее испортить, потому что сборщик заверяет, что ссылки в String останутся действительными. Помните ошибку в программе в приложении 4-8, когда мы получили порядковый казательдо конца первого слова, но затем очистили строку, так что наш порядковый казательстал недействительным? Этот код был логически неправильным, но не показывал немедленных ошибок. Проблемы проявятся позже, если мы попытаемся использовать порядковый казательпервого слова с пустой строкой. Срезы делают эту ошибку невозможной и сообщают нам о проблеме с нашим кодом гораздо раньше. Так, использование исполнения способа first_word со срезом вернёт ошибку сборки: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/src/main.rs:here}} Ошибка сборки: {{#include ../listings/ch04-understanding-ownership/no-listing-19-slice-error/output.txt}} Напомним из правил заимствования, что если у нас есть неизменяемая ссылка на что-то, мы не можем также взять изменяемую ссылку. Поскольку для clear необходимо обрезать String, необходимо получить изменяемую ссылку. println! после вызова clear использует ссылку в word, поэтому неизменяемая ссылка в этот момент всё ещё должна быть активной. Rust запрещает одновременное существование изменяемой ссылки в формате clear и неизменяемой ссылки в word, и сборка завершается ошибкой. Rust не только упростил использование нашего API, но и устранил целый класс ошибок во время сборки! Строковые литералы - это срезы Напомним, что мы говорили о строковых литералах, хранящихся внутри двоичного файла. Теперь, когда мы знаем чем являются срезы, мы правильно понимаем что такое строковые литералы: let s = \"Hello, world!\"; Вид s здесь &str: это срез, указывающий на эту определенную точку двоичного файла. Вот почему строковые литералы неизменяемы; &str — неизменяемая ссылка. Строковые срезы как свойства Знание того, что вы можете брать срезы литералов и String значений, приводит нас к ещё одному улучшению first_word, и это его сигнатура: fn first_word(s: &String) -> &str { Более опытный пользователь Rustacean вместо этого написал бы сигнатуру, показанную в приложении 4.9, потому что это позволяет нам использовать одну и ту же функцию как для значений &String, так и для значений &str. {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:here}} Приложение 4-9: Улучшение функции first_word используя вид строкового среза для свойства s Если у нас есть фрагмент строки, мы можем передать его напрямую. Если у нас есть String, мы можем передать часть String или ссылку на String. Эта гибкость использует преимущества приведения deref , функции, которую мы рассмотрим в разделе «Неявное приведение Deref с функциями и способами». раздел главы 15. Определение функции для получения фрагмента строки вместо ссылки на String делает наш API более общим и полезным без потери какой-либо функциональности: Файл: src/main.rs {{#rustdoc_include ../listings/ch04-understanding-ownership/listing-04-09/src/main.rs:usage}}","breadcrumbs":"Понимание владения » Вид среза » Строковые срезы","id":"77","title":"Строковые срезы"},"78":{"body":"Срезы строк, как вы можете себе представить, отличительны для строк. Но есть и более общий вид среза. Рассмотрим этот массив: let a = [1, 2, 3, 4, 5]; Точно так же, как мы можем захотеть сослаться на часть строки, мы можем захотеть сослаться на часть массива. Мы бы сделали так: let a = [1, 2, 3, 4, 5]; let slice = &a[1..3]; assert_eq!(slice, &[2, 3]); Этот срез имеет вид &[i32]. Он работает так же, как и срезы строк, сохраняя ссылку на первый элемент и его длину. Вы будете использовать этот вид фрагмента для всех видов других собраний. Мы подробно обсудим эти собрания, когда будем говорить о векторах в главе 8.","breadcrumbs":"Понимание владения » Вид среза » Другие срезы","id":"78","title":"Другие срезы"},"79":{"body":"Концепции владения, заимствования и срезов обеспечивают безопасность памяти в программах на Rust во время сборки. Язык Rust даёт вам управление над использованием памяти так же, как и другие языки системного программирования, но то, что владелец данных самостоятельно очищает эти данные, когда владелец выходит за рамки, означает, что вам не нужно писать и отлаживать дополнительный код, чтобы получить этот управление. Владение влияет на множество других частей и концепций языка Rust. Мы будем говорить об этих концепциях на протяжении оставшихся частей книги. Давайте перейдём к Главе 5 и рассмотрим группировку частей данных в структуры struct.","breadcrumbs":"Понимание владения » Вид среза » Итоги","id":"79","title":"Итоги"},"8":{"body":"Rust предназначен для любителей скорости и безотказности в языке. Под скоростью мы подразумеваем как быстродействие программы на Rust, так и быстроту, с которой Rust позволяет писать программы. Проверки сборщика Rust обеспечивают безотказность за счёт функциональных дополнений и рефакторинга. Это выгодно отличается от хрупкого унаследованного кода в языках без таких проверок, который разработчики часто боятся изменять. Благодаря обеспечению абстракций с нулевой стоимостью, высокоуровневых возможностей, собираемых в низкоуровневый код такой же быстрый, как и написанный вручную, Rust стремится сделать безопасный код ещё и быстрым. Язык Rust надеется поддержать и многих других пользователей; перечисленные здесь - лишь самые значимые увлеченные лица. В целом, главная цель Rust - избавиться от соглашений, на которые программисты шли десятилетиями, обеспечив безопасность и производительность, скорость и эргономичность. Попробуйте Rust и убедитесь, подойдут ли вам его решения.","breadcrumbs":"Введение » Люди, ценящие скорость и безотказность","id":"8","title":"Люди, ценящие скорость и безотказность"},"80":{"body":"Структура (struct) — это пользовательский вид данных, позволяющий назвать и упаковать вместе несколько связанных значений, составляющих значимую логическую группу. Если вы знакомы с объектно-ориентированными языками, структура похожа на атрибуты данных объекта. В этой главе мы сравним и сопоставим кортежи со структурами, чтобы опираться на то, что вы уже знаете, и отобразим, когда структуры являются лучшим способом группировки данных. Мы отобразим, как определять структуры и создавать их экземпляры. Мы обсудим, как определить ассоциированные функции, особенно ассоциированные функции, называемые способами , для указания поведения, ассоциированного с видом структуры. Структуры и перечисления (обсуждаемые в главе 6) являются строительными разделами для создания новых видов в предметной области вашей программы. Они дают возможность в полной мере воспользоваться преимуществами проверки видов во время сборки Rust.","breadcrumbs":"Использование структур для объединения связанных данных » Использование структур для структурирования связанных данных","id":"80","title":"Использование структур для структурирования связанных данных"},"81":{"body":"Структуры похожи на кортежи, рассмотренные в разделе \"Кортежи\" , так как оба хранят несколько связанных значений. Как и кортежи, части структур могут быть разных видов. В отличие от кортежей, в структуре необходимо именовать каждую часть данных для понимания смысла значений. Добавление этих имён обеспечивает большую гибкость структур по сравнению с кортежами: не нужно полагаться на порядок данных для указания значений экземпляра или доступа к ним. Для определения структуры указывается ключевое слово struct и её название. Название должно описывать значение частей данных, сгруппированных вместе. Далее, в фигурных скобках для каждой новой части данных поочерёдно определяются имя части данных и её вид. Каждая пара имя: тип называется полем . Приложение 5-1 описывает структуру для хранения сведений об учётной записи пользователя: Имя файла: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-01/src/main.rs:here}} Приложение 5-1: Определение структуры User После определения структуры можно создавать её экземпляр , назначая определённое значение каждому полю с соответствующим видом данных. Чтобы создать экземпляр, мы указываем имя структуры, затем добавляем фигурные скобки и включаем в них пары ключ: значение (key: value), где ключами являются имена полей, а значениями являются данные, которые мы хотим сохранить в полях. Нет необходимости чётко следовать порядку объявления полей в описании структуры (но всё-таки желательно для удобства чтения). Другими словами, объявление структуры - это как шаблон нашего вида, в то время как экземпляр структуры использует этот шаблон, заполняя его определёнными данными, для создания значений нашего вида. Например, можно объявить пользователя как в приложении 5-2: Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-02/src/main.rs:here}} Приложение 5-2: Создание экземпляра структуры User Чтобы получить определенное значение из структуры, мы используем запись через точку. Например, чтобы получить доступ к адресу электронной почты этого пользователя, мы используем user1.email. Если экземпляр является изменяемым, мы можем поменять значение, используя точечную нотацию и присвоение к определенному полю. В Приложении 5-3 показано, как изменить значение в поле email изменяемого экземпляра User. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-03/src/main.rs:here}} Приложение 5-3: Изменение значения в поле email экземпляра User Стоит отметить, что весь экземпляр структуры должен быть изменяемым; Rust не позволяет помечать изменяемыми отдельные поля. Как и для любого другого выражения, мы можем использовать выражение создания структуры в качестве последнего выражения тела функции для неявного возврата нового экземпляра. На приложении 5-4 функция build_user возвращает экземпляр User с указанным адресом и именем. Поле active получает значение true, а поле sign_in_count получает значение 1. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-04/src/main.rs:here}} Приложение 5-4: Функция build_user, которая принимает email и имя пользователя и возвращает экземпляр User Имеет смысл называть свойства функции теми же именами, что и поля структуры, но необходимость повторять email и username для названий полей и переменных несколько утомительна. Если структура имеет много полей, повторение каждого имени станет ещё более раздражающим. К счастью, есть удобное сокращение!","breadcrumbs":"Использование структур для объединения связанных данных » Определение и создание экземпляров структур » Определение и объявление структур","id":"81","title":"Определение и объявление структур"},"82":{"body":"Так как имена входных свойств функции и полей структуры являются полностью равноценными в приложении 5-4, возможно использовать синтаксис сокращённой объявления поля , чтобы переписать build_user так, чтобы он работал точно также, но не содержал повторений для username и email, как в приложении 5-5. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-05/src/main.rs:here}} Приложение 5-5: функция build_user использует сокращённую объявление полей, потому что её входные свойства username и email имеют имена подобные именам полей структуры Здесь происходит создание нового экземпляра структуры User, которая имеет поле с именем email. Мы хотим установить поле структуры email значением входного свойства email функции build_user. Так как поле email и входной свойство функции email имеют одинаковое название, можно писать просто email вместо кода email: email.","breadcrumbs":"Использование структур для объединения связанных данных » Определение и создание экземпляров структур » Использование сокращённой объявления поля","id":"82","title":"Использование сокращённой объявления поля"},"83":{"body":"Часто бывает полезно создать новый экземпляр структуры, который включает большинство значений из другого экземпляра, но некоторые из них изменяет. Это можно сделать с помощью синтаксиса обновления структуры . Сначала в приложении 5-6 показано, как обычно создаётся новый экземпляр User в user2 без синтаксиса обновления. Мы задаём новое значение для email, но в остальном используем те же значения из user1, которые были заданы в приложении 5-2. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-06/src/main.rs:here}} Приложение 5-6: Создание нового экземпляра User с использованием некоторых значений из экземпляра user1 Используя синтаксис обновления структуры, можно получить тот же эффект, используя меньше кода как показано в приложении 5-7. Синтаксис .. указывает, что оставшиеся поля устанавливаются неявно и должны иметь значения из указанного экземпляра. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-07/src/main.rs:here}} Приложение 5-7: Использование синтаксиса обновления структуры для установки нового значения email для экземпляра User, но использование остальных значений из экземпляра user1 Код в приложении 5-7 также создаёт экземпляр в user2, который имеет другое значение для email, но с тем же значением для полей username, active и sign_in_count из user1. Оператор ..user1 должен стоять последним для указания на получение значений всех оставшихся полей из соответствующих полей в user1, но можно указать значения для любого количества полей в любом порядке, независимо от порядка полей в определении структуры. Стоит отметить, что синтаксис обновления структуры использует = как присваивание. Это связано с перемещением данных, как мы видели в разделе «Взаимодействие переменных и данных с помощью перемещения» . В этом примере мы больше не можем использовать user1 после создания user2, потому что String в поле username из user1 было перемещено в user2. Если бы мы задали user2 новые значения String для email и username, и таким образом, использовали только значения active и sign_in_count из user1, то user1 всё ещё был бы действительным после создания user2. Оба вида active и sign_in_count реализуют типаж Copy, поэтому они ведут себя так, как мы обсуждали в разделе «Стековые данные: копирование» .","breadcrumbs":"Использование структур для объединения связанных данных » Определение и создание экземпляров структур » Создание экземпляра структуры из экземпляра другой структуры с помощью синтаксиса обновления структуры","id":"83","title":"Создание экземпляра структуры из экземпляра другой структуры с помощью синтаксиса обновления структуры"},"84":{"body":"Rust также поддерживает структуры, похожие на кортежи, которые называются кортежные структуры . Кортежные структуры обладают дополнительным смыслом, который даёт имя структуры, но при этом не имеют имён, связанных с их полями. Скорее, они просто хранят виды полей. Кортежные структуры полезны, когда вы хотите дать имя всему кортежу и сделать кортеж отличным от других кортежей, и когда именование каждого поля, как в обычной структуре, было бы многословным или избыточным. Чтобы определить кортежную структуру, начните с ключевого слова struct и имени структуры, за которым следуют виды в кортеже. Например, здесь мы определяем и используем две кортежные структуры с именами Color и Point: Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-01-tuple-structs/src/main.rs}} Обратите внимание, что значения black и origin — это разные виды, потому что они являются экземплярами разных кортежных структур. Каждая определяемая вами структура имеет собственный вид, даже если поля внутри структуры могут иметь одинаковые виды. Например, функция, принимающая свойство вида Color, не может принимать Point в качестве переменной, даже если оба вида состоят из трёх значений i32. В остальном экземпляры кортежных структур похожи на кортежи в том смысле, что вы можете деструктурировать их на отдельные части и использовать ., за которой следует порядковый казательдля доступа к отдельному значению.","breadcrumbs":"Использование структур для объединения связанных данных » Определение и создание экземпляров структур » Кортежные структуры: структуры без именованных полей для создания разных видов","id":"84","title":"Кортежные структуры: структуры без именованных полей для создания разных видов"},"85":{"body":"Также можно определять структуры, не имеющие полей! Они называются единично-подобными структурами , поскольку ведут себя подобно (), единичному виду, о котором мы говорили в разделе \"Кортежи\" . Единично-подобные структуры могут быть полезны, когда требуется реализовать типаж для некоторого вида, но у вас нет данных, которые нужно хранить в самом виде. Мы обсудим типажи в главе 10. Вот пример объявления и создание экземпляра единичной структуры с именем AlwaysEqual: Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-04-unit-like-structs/src/main.rs}} Чтобы определить AlwaysEqual, мы используем ключевое слово struct, желаемое имя, а затем точку с запятой. Нет необходимости в фигурных или круглых скобках! Затем мы можем получить экземпляр AlwaysEqual в переменной subject подобным образом: используя имя, которое мы определили, без фигурных и круглых скобок. Представим, что в дальнейшем мы реализуем поведение для этого вида таким образом, что каждый экземпляр AlwaysEqual всегда будет равен каждому экземпляру любого другого вида, возможно, с целью получения ожидаемого результата для тестирования. Для реализации такого поведения нам не нужны никакие данные! В главе 10 вы увидите, как определять черты и реализовывать их для любого вида, включая единично-подобные структуры.","breadcrumbs":"Использование структур для объединения связанных данных » Определение и создание экземпляров структур » Единично-подобные структуры: структуры без полей","id":"85","title":"Единично-подобные структуры: структуры без полей"},"86":{"body":"В определении структуры User в приложении 5-1 мы использовали владеющий вид String вместо вида строковый срез &str. Это осознанный выбор, поскольку мы хотим, чтобы каждый экземпляр этой структуры владел всеми своими данными и чтобы эти данные были действительны до тех пор, пока действительна вся структура. Структуры также могут хранить ссылки на данные, принадлежащие кому-то другому, но для этого необходимо использовать возможность Rust время жизни , которую мы обсудим в главе 10. Время жизни заверяет, что данные, на которые ссылается структура, будут действительны до тех пор, пока существует структура. Допустим, если попытаться сохранить ссылку в структуре без указания времени жизни, как в следующем примере; это не сработает: Файл: src/main.rs struct User { active: bool, username: &str, email: &str, sign_in_count: u64,\n} fn main() { let user1 = User { active: true, username: \"someusername123\", email: \"someone@example.com\", sign_in_count: 1, };\n} Сборщик будет жаловаться на необходимость определения времени жизни ссылок: $ cargo run Compiling structs v0.1.0 (file:///projects/structs)\nerror[E0106]: missing lifetime specifier --> src/main.rs:3:15 |\n3 | username: &str, | ^ expected named lifetime parameter |\nhelp: consider introducing a named lifetime parameter |\n1 ~ struct User<'a> {\n2 | active: bool,\n3 ~ username: &'a str, | error[E0106]: missing lifetime specifier --> src/main.rs:4:12 |\n4 | email: &str, | ^ expected named lifetime parameter |\nhelp: consider introducing a named lifetime parameter |\n1 ~ struct User<'a> {\n2 | active: bool,\n3 | username: &str,\n4 ~ email: &'a str, | For more information about this error, try `rustc --explain E0106`.\nerror: could not compile `structs` due to 2 previous errors В главе 10 мы обсудим, как исправить эти ошибки, чтобы иметь возможность хранить ссылки в структурах, а пока мы исправим подобные ошибки, используя владеющие виды вроде String вместо ссылок &str.","breadcrumbs":"Использование структур для объединения связанных данных » Определение и создание экземпляров структур » Владение данными структуры","id":"86","title":"Владение данными структуры"},"87":{"body":"Чтобы понять, когда нам может понадобиться использование структур, давайте напишем программу, которая вычисляет площадь прямоугольника. Мы начнём с использования одиночных переменных, а затем будем улучшать программу до использования структур. Давайте создадим новый проект программы при помощи Cargo и назовём его rectangles . Наша программа будет получать на вход длину и ширину прямоугольника в пикселях и затем рассчитывать площадь прямоугольника. Приложение 5-8 показывает один из коротких вариантов кода, который позволит нам сделать именно то, что надо, в файле проекта src/main.rs . Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:all}} Приложение 5-8: вычисление площади прямоугольника, заданного отдельными переменными ширины и высоты Теперь запустим программу, используя cargo run: {{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/output.txt}} Этот код успешно вычисляет площадь прямоугольника, вызывая функцию area с каждым измерением, но мы можем улучшить его ясность и читабельность. Проблема данного способа очевидна из сигнатуры area: {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-08/src/main.rs:here}} Функция area должна вычислять площадь одного прямоугольника, но функция, которую мы написали, имеет два свойства, и нигде в нашей программе не ясно, что эти свойства взаимосвязаны. Было бы более читабельным и управляемым сгруппировать ширину и высоту вместе. В разделе «Кортежи» главы 3 мы уже обсуждали один из способов сделать это — использовать кортежи.","breadcrumbs":"Использование структур для объединения связанных данных » Пример программы, использующей структуры » Пример использования структур","id":"87","title":"Пример использования структур"},"88":{"body":"Приложение 5-9 — это другая исполнение программы, использующая кортежи. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-09/src/main.rs}} Приложение 5-9: определение ширины и высоты прямоугольника с помощью кортежа С одной стороны, эта программа лучше. Кортежи позволяют добавить немного структуры, и теперь мы передаём только один переменная. Но с другой стороны, эта исполнение менее понятна: кортежи не называют свои элементы, поэтому нам приходится упорядочивать части кортежа, что делает наше вычисление менее очевидным. Если мы перепутаем местами ширину с высотой при расчёте площади, то это не имеет значения. Но если мы хотим нарисовать прямоугольник на экране, то это уже будет важно! Мы должны помнить, что ширина width находится в кортеже с порядковым казателем 0, а высота height — с порядковым казателем 1. Если кто-то другой поработал бы с кодом, ему бы пришлось разобраться в этом и также помнить про порядок. Легко забыть и перепутать эти значения — и это вызовет ошибки, потому что данный код не передаёт наши намерения.","breadcrumbs":"Использование структур для объединения связанных данных » Пример программы, использующей структуры » Рефакторинг при помощи кортежей","id":"88","title":"Рефакторинг при помощи кортежей"},"89":{"body":"Мы используем структуры, чтобы добавить смысл данным при помощи назначения им осмысленных имён . Мы можем переделать используемый кортеж в структуру с единым именем для сущности и частными названиями её частей, как показано в приложении 5-10. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-10/src/main.rs}} Приложение 5-10: определение структуры Rectangle Здесь мы определили структуру и дали ей имя Rectangle. Внутри фигурных скобок определили поля как width и height, оба — вида u32. Затем в main создали определенный экземпляр Rectangle с шириной в 30 и высотой в 50 единиц. Наша функция area теперь определена с одним свойствоом, названным rectangle, чей вид является неизменяемым заимствованием структуры Rectangle. Как упоминалось в главе 4, необходимо заимствовать структуру, а не передавать её во владение. Таким образом функция main сохраняет rect1 в собственности и может использовать её дальше. По этой причине мы и используем & в сигнатуре и в месте вызова функции. Функция area получает доступ к полям width и height экземпляра Rectangle (обратите внимание, что доступ к полям заимствованного экземпляра структуры не приводит к перемещению значений полей, поэтому вы часто видите заимствования структур). Наша сигнатура функции для area теперь говорит именно то, что мы имеем в виду: вычислить площадь Rectangle, используя его поля width и height. Это означает, что ширина и высота связаны друг с другом, и даёт описательные имена значениям, а не использует значения порядкового казателя кортежа 0 и 1. Это торжество ясности.","breadcrumbs":"Использование структур для объединения связанных данных » Пример программы, использующей структуры » Рефакторинг при помощи структур: добавим больше смысла","id":"89","title":"Рефакторинг при помощи структур: добавим больше смысла"},"9":{"body":"В этой книге предполагается, что вы писали код на другом языке программирования, но не оговаривается, на каком именно. Мы постарались сделать материал доступным для широкого круга людей с разным уровнем подготовки в области программирования. Мы не будем тратить время на обсуждение сути понятия программирования или как его понимать. Если вы совсем новичок в программировании, советуем прочитать книгу, посвящённую введению в программирование.","breadcrumbs":"Введение » Для кого эта книга","id":"9","title":"Для кого эта книга"},"90":{"body":"Было бы полезно иметь возможность печатать экземпляр Rectangle во время отладки программы и видеть значения всех полей. Приложение 5-11 использует макрос println! , который мы уже использовали в предыдущих главах. Тем не менее, это не работает. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/src/main.rs}} Приложение 5-11: Попытка вывести значения экземпляра Rectangle При сборки этого кода мы получаем ошибку с сообщением: {{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:3}} Макрос println! умеет выполнять множество видов форматирования, и по умолчанию фигурные скобки в println! означают использование форматирование, известное как типаж Display. Его вывод предназначен для непосредственного использования конечным пользователем. Примитивные виды, изученные ранее, по умолчанию реализуют типаж Display, потому что есть только один способ отобразить число 1 или любой другой примитивный вид. Но для структур форматирование println! менее очевидно, потому что есть гораздо больше способов отображения: Вы хотите запятые или нет? Вы хотите печатать фигурные скобки? Должны ли отображаться все поля? Из-за этой неоднозначности Rust не пытается угадать, что нам нужно, а структуры не имеют встроенной реализации Display для использования в println! с заполнителем {}. Продолжив чтение текста ошибки, мы найдём полезное замечание: {{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-11/output.txt:9:10}} Давайте попробуем! Вызов макроса println! теперь будет выглядеть так println!(\"rect1 is {:?}\", rect1);. Ввод спецификатора :? внутри фигурных скобок говорит макросу println!, что мы хотим использовать другой формат вывода, известный как Debug. Типаж Debug позволяет печатать структуру способом, удобным для разработчиков, чтобы видеть значение во время отладки кода. Соберем код с этими изменениями. Упс! Мы всё ещё получаем ошибку: {{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:3}} Снова сборщик даёт нам полезное замечание: {{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-01-debug/output.txt:9:10}} Rust реализует функциональность для печати отладочной сведений, но не включает (не выводит) её по умолчанию . Мы должны явно включить эту функциональность для нашей структуры. Чтобы это сделать, добавляем внешний атрибут #[derive(Debug)] сразу перед определением структуры, как показано в приложении 5-12. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/src/main.rs}} Приложение 5-12: добавление атрибута для вывода типажа Debug и печати экземпляра Rectangle с отладочным форматированием Теперь при запуске программы мы не получим ошибок и увидим следующий вывод: {{#include ../listings/ch05-using-structs-to-structure-related-data/listing-05-12/output.txt}} Отлично! Это не самый красивый вывод, но он показывает значения всех полей экземпляра, которые определённо помогут при отладке. Когда у нас более крупные структуры, то полезно иметь более простой для чтения вывод; в таких случаях можно использовать код {:#?} вместо {:?} в строке макроса println!. В этом примере использование стиля {:#?} приведёт к такому выводу: {{#include ../listings/ch05-using-structs-to-structure-related-data/output-only-02-pretty-debug/output.txt}} Другой способ распечатать значение в формате Debug — использовать макрос dbg! , который становится владельцем выражения (в отличие от println!, принимающего ссылку), печатает номер файла и строки, где происходит вызов макроса dbg!, вместе с результирующим значением этого выражения и возвращает владение на значение. Примечание: при вызове макроса dbg! выполняется печать в стандартный поток ошибок (stderr), в отличие от println!, который использует стандартный поток вывода в окно вывода (stdout). Подробнее о stderr и stdout мы поговорим в разделе «Запись сообщений об ошибках в стандартный вывод ошибок вместо принятого вывода» главы 12 . Вот пример, когда нас важно значение, которое присваивается полю width, а также значение всей структуры в rect1: {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/src/main.rs}} Можем написать макрос dbg! вокруг выражения 30 * scale, потому что dbg! возвращает владение значения выражения. Поле width получит то же значение, как если бы у нас не было вызова dbg!. Мы не хотим, чтобы макрос dbg! становился владельцем rect1, поэтому используем ссылку на rect1 в следующем вызове. Вот как выглядит вывод этого примера: {{#include ../listings/ch05-using-structs-to-structure-related-data/no-listing-05-dbg-macro/output.txt}} Мы можем увидеть, что первый отладочный вывод поступил из строки 10 src/main.rs , там, где мы отлаживаем выражение 30 * scale, и его результирующее значение равно 60 (Debug форматирование, реализованное для целых чисел, заключается в печати только их значения). Вызов dbg! в строке 14 src/main.rs выводит значение &rect1, которое является структурой Rectangle. В этом выводе используется красивое форматирование Debug вида Rectangle. Макрос dbg! может быть очень полезен, когда вы пытаетесь понять, что делает ваш код! В дополнение к Debug, Rust предоставил нам ряд типажей, которые мы можем использовать с атрибутом derive для добавления полезного поведения к нашим пользовательским видам. Эти типажи и их поведение перечислены в приложении C . Мы расскажем, как реализовать эти трейты с пользовательским поведением, а также как создать свои собственные трейты в главе 10. Кроме того, есть много других атрибутов помимо derive; для получения дополнительной сведений смотрите раздел “Атрибуты” справочника Rust . Функция area является довольно отличительной: она считает только площадь прямоугольников. Было бы полезно привязать данное поведение как можно ближе к структуре Rectangle, потому что наш отличительный код не будет работать с любым другим видом. Давайте рассмотрим, как можно улучшить наш код превращая функцию area в способ area, определённый для вида Rectangle.","breadcrumbs":"Использование структур для объединения связанных данных » Пример программы, использующей структуры » Добавление полезной функциональности при помощи выводимых типажей","id":"90","title":"Добавление полезной функциональности при помощи выводимых типажей"},"91":{"body":"Способы похожи на функции: мы объявляем их с помощью ключевого слова fn и имени, они могут иметь свойства и возвращаемое значение, и они содержат код, запускающийся в случае вызова способа. В отличие от функций, способы определяются в среде структуры (или объекта перечисления или типажа, которые мы рассмотрим в главе 6) и главе 17 соответственно), а их первым свойствоом всегда является self, представляющий собой экземпляр структуры, с которой вызывается этот способ.","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Синтаксис способа","id":"91","title":"Синтаксис способа"},"92":{"body":"Давайте изменим функцию area так, чтобы она имела экземпляр Rectangle в качестве входного свойства и сделаем её способом area, определённым для структуры Rectangle, как показано в приложении 5-13: Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-13/src/main.rs}} Приложение 5-13: Определение способа area для структуры Rectangle Чтобы определить функцию в среде Rectangle, мы создаём разделimpl (implementation - реализация) для Rectangle. Всё в impl будет связано с видом Rectangle. Затем мы перемещаем функцию area внутрь фигурных скобок impl и меняем первый (и в данном случае единственный) свойство на self в сигнатуре и в теле. В main, где мы вызвали функцию area и передали rect1 в качестве переменной, теперь мы можем использовать синтаксис способа для вызова способа area нашего экземпляра Rectangle. Синтаксис способа идёт после экземпляра: мы добавляем точку, за которой следует имя способа, круглые скобки и любые переменные. В сигнатуре area мы используем &self вместо rectangle: &Rectangle. &self на самом деле является сокращением от self: &Self. Внутри раздела impl вид Self является псевдонимом вида, для которого реализован разделimpl. Способы обязаны иметь свойство с именем self вида Self, поэтому Rust позволяет вам сокращать его, используя только имя self на месте первого свойства. Обратите внимание, что нам по-прежнему нужно использовать & перед сокращением self, чтобы указать на то, что этот способ заимствует экземпляр Self, точно так же, как мы делали это в rectangle: &Rectangle. Как и любой другой свойство, способы могут брать во владение self, заимствовать неизменяемый self, как мы поступили в данном случае, или заимствовать изменяемый self. Мы выбрали &self здесь по той же причине, по которой использовали &Rectangle в исполнения кода с функцией: мы не хотим брать структуру во владение, мы просто хотим прочитать данные в структуре, а не писать в неё. Если бы мы хотели изменить экземпляр, на котором мы вызывали способ силами самого способа, то мы бы использовали &mut self в качестве первого свойства. Наличие способа, который берёт экземпляр во владение, используя только self в качестве первого свойства, является редким; эта техника обычно используется, когда способ превращает self во что-то ещё, и вы хотите запретить вызывающей стороне использовать исходный экземпляр после превращения. Основная причина использования способов вместо функций, помимо синтаксиса способа, где нет необходимости повторять вид self в сигнатуре каждого способа, заключается в организации кода. Мы поместили все, что мы можем сделать с экземпляром вида, в один impl вместо того, чтобы заставлять будущих пользователей нашего кода искать доступный функционал Rectangle в разных местах предоставляемой нами библиотеки. Обратите внимание, что мы можем дать способу то же имя, что и одному из полей структуры. Например, для Rectangle мы можем определить способ, также названный width: Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-06-method-field-interaction/src/main.rs:here}} Здесь мы определили, чтобы способ width возвращал значение true, если значение в поле width экземпляра больше 0, и значение false, если значение равно 0, но мы можем использовать поле в способе с тем же именем для любых целей. В main, когда мы ставим после rect1.width круглые скобки, Rust знает, что мы имеем в виду способ width. Когда мы не используем круглые скобки, Rust понимает, что мы имеем в виду поле width. Часто, но не всегда, когда мы создаём способы с тем же именем, что и у поля, мы хотим, чтобы он только возвращал значение одноимённого поля и больше ничего не делал. Подобные способы называются геттерами , и Rust не реализует их самостоятельно для полей структуры, как это делают некоторые другие языки. Геттеры полезны, поскольку вы можете сделать поле приватным, а способ публичным и, таким образом, включить доступ только для чтения к этому полю как часть общедоступного API вида. Мы обсудим, что такое публичность и приватность, и как обозначить поле или способ в качестве публичного или приватного в главе 7 .","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Определение способов","id":"92","title":"Определение способов"},"93":{"body":"В языках C и C++, используются два различных оператора для вызова способов: используется ., если вызывается способ непосредственно у экземпляра структуры и используется ->, если вызывается способ для указателя на объект. Другими словами, если object является указателем, то вызовы способа object->something() и (*object).something() являются подобными. Rust не имеет эквивалента оператора ->, наоборот, в Rust есть функциональность называемая самостоятельное обращение по ссылке и разыменование (automatic referencing and dereferencing). Вызов способов является одним из немногих мест в Rust, в котором есть такое поведение. Вот как это работает: когда вы вызываете способ object.something(), Rust самостоятельно добавляет &, &mut или *, таким образом, чтобы object соответствовал сигнатуре способа. Другими словами, это то же самое: # #[derive(Debug,Copy,Clone)]\n# struct Point {\n# x: f64,\n# y: f64,\n# }\n#\n# impl Point {\n# fn distance(&self, other: &Point) -> f64 {\n# let x_squared = f64::powi(other.x - self.x, 2);\n# let y_squared = f64::powi(other.y - self.y, 2);\n#\n# f64::sqrt(x_squared + y_squared)\n# }\n# }\n# let p1 = Point { x: 0.0, y: 0.0 };\n# let p2 = Point { x: 5.0, y: 6.5 };\np1.distance(&p2);\n(&p1).distance(&p2); Первый пример выглядит намного понятнее. Самостоятельный вывод ссылки работает потому, что способы имеют понятного получателя - вид self. Учитывая получателя и имя способа, Rust может точно определить, что в данном случае делает код: читает ли способ (&self), делает ли изменение (&mut self) или поглощает (self). Тот факт, что Rust делает заимствование неявным для принимающего способа, в значительной степени способствует тому, чтобы сделать владение эргономичным на практике.","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Где используется оператор ->?","id":"93","title":"Где используется оператор ->?"},"94":{"body":"Давайте попрактикуемся в использовании способов, реализовав второй способ в структуре Rectangle. На этот раз мы хотим, чтобы экземпляр Rectangle брал другой экземпляр Rectangle и возвращал true, если второй Rectangle может полностью поместиться внутри self (первый Rectangle); в противном случае он должен вернуть false. То есть, как только мы определим способ can_hold, мы хотим иметь возможность написать программу, показанную в Приложении 5-14. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-14/src/main.rs}} Приложение 5-14: Использование ещё не написанного способа can_hold Ожидаемый результат будет выглядеть следующим образом, т.к. оба размера в экземпляре rect2 меньше, чем размеры в экземпляре rect1, а rect3 шире, чем rect1: Can rect1 hold rect2? true\nCan rect1 hold rect3? false Мы знаем, что хотим определить способ, поэтому он будет находится в impl Rectangle разделе. Имя способа будет can_hold, и оно будет принимать неизменяемое заимствование на другой Rectangle в качестве свойства. Мы можем сказать, какой это будет вид свойства, посмотрев на код вызывающего способа: способ rect1.can_hold(&rect2) передаёт в него &rect2 , который является неизменяемым заимствованием экземпляра rect2 вида Rectangle. В этом есть смысл, потому что нам нужно только читать rect2 (а не писать, что означало бы, что нужно изменяемое заимствование), и мы хотим, чтобы main сохранил право собственности на экземпляр rect2, чтобы мы могли использовать его снова после вызов способа can_hold. Возвращаемое значение can_hold имеет булевый вид, а реализация проверяет, являются ли ширина и высота self больше, чем ширина и высота другого Rectangle соответственно. Давайте добавим новый способ can_hold в impl разделиз приложения 5-13, как показано в приложении 5-15. Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-15/src/main.rs:here}} Приложение 5-15: Реализация способа can_hold для Rectangle, принимающего другой экземпляр Rectangle в качестве свойства Когда мы запустим код с функцией main приложения 5-14, мы получим желаемый вывод. Способы могут принимать несколько свойств, которые мы добавляем в сигнатуру после первого свойства self, и эти свойства работают так же, как свойства в функциях.","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Способы с несколькими свойствами","id":"94","title":"Способы с несколькими свойствами"},"95":{"body":"Все функции, определённые в разделе impl, называются ассоциированными функциями , потому что они ассоциированы с видом, указанным после ключевого слова impl. Мы можем определить ассоциированные функции, которые не имеют self в качестве первого свойства (и, следовательно, не являются способами), потому что им не нужен экземпляр вида для работы. Мы уже использовали одну подобную функцию: функцию String::from, определённую для вида String. Ассоциированные функции, не являющиеся способами, часто используются для конструкторов, возвращающих новый экземпляр структуры. Их часто называют new, но new не является особым именем и не встроена в язык. Например, мы можем предоставить ассоциированную функцию с именем square, которая будет иметь один свойство размера и использовать его как ширину и высоту, что упростит создание квадратного Rectangle, вместо того, чтобы указывать одно и то же значение дважды: Файл: src/main.rs {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/no-listing-03-associated-functions/src/main.rs:here}} Ключевые слова Self в возвращаемом виде и в теле функции являются псевдонимами для вида, указанного после ключевого слова impl, которым в данном случае является Rectangle. Чтобы вызвать эту связанную функцию, используется синтаксис :: с именем структуры; например let sq = Rectangle::square(3);. Эта функция находится в пространстве имён структуры. Синтаксис :: используется как для связанных функций, так и для пространств имён, созданных модулями. Мы обсудим модули в главе 7 .","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Ассоциированные функции","id":"95","title":"Ассоциированные функции"},"96":{"body":"Каждая структура может иметь несколько impl. Например, Приложение 5-15 эквивалентен коду, показанному в приложении 5-16, в котором каждый способ находится в своём собственном разделе impl. {{#rustdoc_include ../listings/ch05-using-structs-to-structure-related-data/listing-05-16/src/main.rs:here}} Приложение 5-16: Переписанный Приложения 5-15 с использованием нескольких impl Здесь нет причин разделять способы на несколько impl, но это допустимый синтаксис. Мы увидим случай, когда несколько impl могут оказаться полезными, в Главе 10, рассматривающей обобщённые виды и свойства.","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Несколько разделов impl","id":"96","title":"Несколько разделов impl"},"97":{"body":"Структуры позволяют создавать собственные виды, которые имеют смысл в вашей предметной области. Используя структуры, вы храните ассоциированные друг с другом фрагменты данных и даёте название частям данных, чтобы ваш код был более понятным. Способы позволяют определить поведение, которое имеют экземпляры ваших структур, а ассоциированные функции позволяют привязать функциональность к вашей структуре, не обращаясь к её экземпляру. Но структуры — не единственный способ создавать собственные виды: давайте обратимся к перечислениям в Rust, чтобы добавить ещё один средство в свой арсенал.","breadcrumbs":"Использование структур для объединения связанных данных » Синтаксис способа » Итоги","id":"97","title":"Итоги"},"98":{"body":"В этой главе мы рассмотрим перечисления (enumerations) , также называемые enums . Перечисления позволяют определить вид путём перечисления его возможных вариантов . Сначала мы определим и используем перечисление, чтобы показать, как оно может объединить значения и данные. Далее мы рассмотрим особенно полезное перечисление под названием Option, которое выражает, что значение может быть либо чем-то, либо ничем. Затем мы рассмотрим, как сопоставление с образцом в выражении match позволяет легко запускать разный код для разных значений перечисления. Наконец, мы узнаем, насколько конструкция if let удобна и лаконична для обработки перечислений в вашем коде.","breadcrumbs":"Перечисления и сопоставление с образцом » Перечисления и сопоставление с образцом","id":"98","title":"Перечисления и сопоставление с образцом"},"99":{"body":"Там, где структуры дают вам возможность группировать связанные поля и данные, например Rectangle с его width и height, перечисления дают вам способ сказать, что значение является одним из возможных наборов значений. Например, мы можем захотеть сказать, что Rectangle — это одна из множества возможных фигур, в которую также входят Circle и Triangle. Для этого Rust позволяет нам закодировать эти возможности в виде перечисления. Давайте рассмотрим ситуацию, которую мы могли бы захотеть отразить в коде, и поймём, почему перечисления полезны и более уместны, чем структуры в этом случае. Допустим, нам нужно работать с IP-адресами. В настоящее время для обозначения IP-адресов используются два основных стандарта: четвёртая и шестая исполнения. Поскольку это единственно возможные варианты IP-адресов, с которыми может столкнуться наша программа, мы можем перечислить все возможные варианты, откуда перечисление и получило своё название. Любой IP-адрес может быть либо четвёртой, либо шестой исполнения, но не обеими одновременно. Эта особенность IP-адресов делает структуру данных enum подходящей, поскольку значение enum может представлять собой только один из его возможных вариантов. Адреса как четвёртой, так и шестой исполнения по своей сути все равно являются IP-адресами, поэтому их следует рассматривать как один и тот же вид, когда в коде обрабатываются задачи, относящиеся к любому виду IP-адресов. Можно выразить эту концепцию в коде, определив перечисление IpAddrKind и составив список возможных видов IP-адресов, V4 и V6. Вот варианты перечислений: {{#rustdoc_include ../listings/ch06-enums-and-pattern-matching/no-listing-01-defining-enums/src/main.rs:def}} IpAddrKind теперь является пользовательским видом данных, который мы можем использовать в другом месте нашего кода.","breadcrumbs":"Перечисления и сопоставление с образцом » Определение Enum » Определение перечисления","id":"99","title":"Определение перечисления"}},"length":418,"save":true},"fields":["title","body","breadcrumbs"],"index":{"body":{"root":{"0":{".":{".":{"1":{"0":{"0":{"df":1,"docs":{"407":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"2":{"0":{"df":1,"docs":{"364":{"tf":1.0}}},"df":0,"docs":{}},"5":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"0":{"0":{"df":1,"docs":{"261":{"tf":2.449489742783178}}},"2":{"df":1,"docs":{"41":{"tf":1.0}}},"df":5,"docs":{"172":{"tf":1.4142135623730951},"250":{"tf":1.4142135623730951},"261":{"tf":1.0},"27":{"tf":1.0},"93":{"tf":1.4142135623730951}}},"1":{".":{"0":{"df":3,"docs":{"255":{"tf":1.0},"256":{"tf":1.0},"26":{"tf":1.0}}},"df":0,"docs":{}},"9":{"df":1,"docs":{"256":{"tf":1.0}}},"df":0,"docs":{}},"2":{"7":{"df":2,"docs":{"252":{"tf":1.0},"261":{"tf":1.0}}},"9":{"df":1,"docs":{"61":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"df":1,"docs":{"27":{"tf":1.0}}},"3":{"df":1,"docs":{"27":{"tf":1.0}}},"df":0,"docs":{}},"4":{"2":{"df":1,"docs":{"377":{"tf":1.0}}},"3":{"df":1,"docs":{"42":{"tf":1.0}}},"df":0,"docs":{}},"5":{"0":{"df":1,"docs":{"407":{"tf":1.0}}},"9":{"df":1,"docs":{"407":{"tf":1.0}}},"df":0,"docs":{}},"6":{"8":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"8":{".":{"5":{"df":1,"docs":{"40":{"tf":2.6457513110645907}}},"6":{"df":1,"docs":{"40":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"8":{"df":1,"docs":{"262":{"tf":1.0}}},"df":0,"docs":{}},"9":{".":{"0":{"df":1,"docs":{"40":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"df":1,"docs":{"40":{"tf":1.0}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"0":{"df":1,"docs":{"337":{"tf":1.0}}},"df":0,"docs":{}},"1":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"154":{"tf":1.0},"196":{"tf":1.0},"214":{"tf":1.0},"234":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"113":{"tf":1.0},"196":{"tf":1.0},"208":{"tf":1.0},"252":{"tf":1.0},"309":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":8,"docs":{"154":{"tf":1.0},"213":{"tf":1.0},"234":{"tf":1.0},"267":{"tf":1.0},"291":{"tf":1.0},"327":{"tf":1.0},"376":{"tf":1.0},"56":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"33":{"tf":1.0}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"36":{"tf":1.0}}}},"df":0,"docs":{}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":6,"docs":{"100":{"tf":1.0},"130":{"tf":1.0},"167":{"tf":1.0},"346":{"tf":1.0},"67":{"tf":1.0},"81":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"o":{"df":1,"docs":{"33":{"tf":1.0}}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"33":{"tf":1.0}}}}},"df":0,"docs":{}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"37":{"tf":1.0}}}}}}}},"df":1,"docs":{"33":{"tf":1.0}}}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"35":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"34":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":24,"docs":{"100":{"tf":1.7320508075688772},"123":{"tf":1.0},"139":{"tf":1.0},"141":{"tf":1.0},"153":{"tf":1.4142135623730951},"176":{"tf":1.0},"196":{"tf":1.4142135623730951},"204":{"tf":1.0},"214":{"tf":1.0},"220":{"tf":1.0},"260":{"tf":1.0},"270":{"tf":1.0},"283":{"tf":1.4142135623730951},"292":{"tf":1.0},"293":{"tf":1.0},"32":{"tf":1.7320508075688772},"334":{"tf":1.0},"347":{"tf":1.4142135623730951},"385":{"tf":1.7320508075688772},"51":{"tf":1.0},"68":{"tf":1.0},"84":{"tf":1.0},"90":{"tf":1.4142135623730951},"99":{"tf":1.0}}},"2":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"8":{"df":1,"docs":{"40":{"tf":1.0}}},"9":{"df":1,"docs":{"122":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"215":{"tf":1.0},"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"252":{"tf":1.0},"309":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"167":{"tf":1.0},"215":{"tf":1.0},"292":{"tf":1.0},"377":{"tf":1.0},"60":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"100":{"tf":1.0},"130":{"tf":1.0},"235":{"tf":1.0},"268":{"tf":1.4142135623730951},"328":{"tf":1.0},"346":{"tf":1.0},"69":{"tf":1.0},"81":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":26,"docs":{"100":{"tf":1.0},"122":{"tf":1.4142135623730951},"125":{"tf":1.4142135623730951},"139":{"tf":1.0},"177":{"tf":1.0},"197":{"tf":1.4142135623730951},"205":{"tf":1.0},"223":{"tf":1.0},"224":{"tf":1.4142135623730951},"261":{"tf":1.7320508075688772},"33":{"tf":2.0},"336":{"tf":1.0},"34":{"tf":1.0},"35":{"tf":1.0},"356":{"tf":1.4142135623730951},"36":{"tf":1.4142135623730951},"361":{"tf":1.0},"37":{"tf":1.0},"385":{"tf":1.4142135623730951},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.4142135623730951},"45":{"tf":1.4142135623730951},"48":{"tf":1.4142135623730951},"69":{"tf":1.0},"90":{"tf":1.0}}},"3":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":6,"docs":{"114":{"tf":1.0},"196":{"tf":1.0},"235":{"tf":1.0},"268":{"tf":1.0},"293":{"tf":1.0},"329":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"216":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"114":{"tf":1.0},"313":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"196":{"tf":1.0},"253":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":4,"docs":{"155":{"tf":1.0},"293":{"tf":1.0},"61":{"tf":1.0},"70":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"41":{"tf":1.0}}}},"c":{"df":0,"docs":{},"h":{"0":{"7":{"df":1,"docs":{"122":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":9,"docs":{"102":{"tf":1.0},"131":{"tf":1.0},"167":{"tf":1.0},"235":{"tf":1.0},"268":{"tf":1.0},"329":{"tf":1.0},"346":{"tf":1.0},"379":{"tf":1.0},"81":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":17,"docs":{"100":{"tf":1.0},"146":{"tf":1.0},"177":{"tf":1.7320508075688772},"197":{"tf":1.4142135623730951},"205":{"tf":1.0},"224":{"tf":1.0},"261":{"tf":1.0},"337":{"tf":1.0},"356":{"tf":1.0},"385":{"tf":1.4142135623730951},"42":{"tf":1.0},"50":{"tf":1.4142135623730951},"56":{"tf":1.0},"60":{"tf":1.4142135623730951},"61":{"tf":2.0},"69":{"tf":1.0},"95":{"tf":1.0}}},"4":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"155":{"tf":1.0},"216":{"tf":1.0},"236":{"tf":1.0},"42":{"tf":1.0},"61":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"313":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":6,"docs":{"155":{"tf":1.0},"236":{"tf":1.0},"253":{"tf":1.0},"293":{"tf":1.0},"61":{"tf":1.0},"71":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"103":{"tf":1.0},"132":{"tf":1.0},"169":{"tf":1.0},"216":{"tf":1.0},"330":{"tf":1.0},"347":{"tf":1.0},"42":{"tf":1.0},"81":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":22,"docs":{"100":{"tf":1.0},"122":{"tf":1.0},"158":{"tf":1.0},"178":{"tf":1.0},"198":{"tf":1.4142135623730951},"206":{"tf":1.0},"224":{"tf":1.0},"261":{"tf":1.0},"337":{"tf":1.0},"360":{"tf":1.4142135623730951},"387":{"tf":1.4142135623730951},"43":{"tf":1.0},"50":{"tf":1.0},"67":{"tf":1.0},"69":{"tf":1.7320508075688772},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"73":{"tf":1.0},"76":{"tf":2.23606797749979},"77":{"tf":1.4142135623730951},"85":{"tf":1.0}}},"5":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"380":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"115":{"tf":1.0},"169":{"tf":1.0},"236":{"tf":1.0},"330":{"tf":1.0},"347":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"115":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"197":{"tf":1.0},"253":{"tf":1.0},"313":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":7,"docs":{"156":{"tf":1.0},"169":{"tf":1.0},"236":{"tf":1.0},"268":{"tf":1.0},"293":{"tf":1.0},"61":{"tf":1.0},"71":{"tf":1.0}},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"9":{"df":1,"docs":{"361":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"m":{"df":1,"docs":{"104":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"104":{"tf":1.0},"132":{"tf":1.0},"218":{"tf":1.0},"330":{"tf":1.0},"347":{"tf":1.0},"380":{"tf":1.0},"45":{"tf":1.0},"82":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"d":{"_":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"m":{"df":1,"docs":{"104":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":21,"docs":{"100":{"tf":1.0},"158":{"tf":1.0},"179":{"tf":1.0},"199":{"tf":1.0},"209":{"tf":1.0},"338":{"tf":1.0},"360":{"tf":1.0},"387":{"tf":1.0},"44":{"tf":1.0},"50":{"tf":1.4142135623730951},"69":{"tf":1.0},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":2.6457513110645907},"92":{"tf":1.0},"94":{"tf":1.4142135623730951},"96":{"tf":1.0}}},"6":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"132":{"tf":1.0},"197":{"tf":1.0},"72":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"197":{"tf":1.0},"313":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":7,"docs":{"170":{"tf":1.0},"236":{"tf":1.0},"270":{"tf":1.0},"294":{"tf":1.0},"45":{"tf":1.0},"72":{"tf":1.0},"73":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":9,"docs":{"107":{"tf":1.0},"132":{"tf":1.0},"159":{"tf":1.0},"218":{"tf":1.0},"253":{"tf":1.0},"331":{"tf":1.0},"347":{"tf":1.0},"381":{"tf":1.0},"83":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":14,"docs":{"100":{"tf":1.4142135623730951},"101":{"tf":1.0},"102":{"tf":1.0},"103":{"tf":1.0},"104":{"tf":2.0},"107":{"tf":1.0},"179":{"tf":1.0},"199":{"tf":1.4142135623730951},"268":{"tf":1.0},"360":{"tf":1.4142135623730951},"387":{"tf":1.0},"52":{"tf":1.0},"69":{"tf":1.0},"92":{"tf":1.0}}},"7":{"/":{"4":{"0":{"4":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"381":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"d":{"d":{"/":{"a":{"d":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"170":{"tf":1.0},"198":{"tf":1.0},"219":{"tf":1.0},"237":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"115":{"tf":1.0},"198":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"314":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"170":{"tf":1.0},"237":{"tf":1.0},"271":{"tf":1.0},"294":{"tf":1.0},"331":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"s":{"_":{"b":{"df":0,"docs":{},"y":{"df":0,"docs":{},"t":{"df":1,"docs":{"76":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":7,"docs":{"133":{"tf":1.0},"159":{"tf":1.0},"218":{"tf":1.0},"347":{"tf":1.0},"381":{"tf":1.0},"76":{"tf":1.0},"83":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"76":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"t":{"df":1,"docs":{"76":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":18,"docs":{"101":{"tf":1.4142135623730951},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.7320508075688772},"125":{"tf":1.4142135623730951},"178":{"tf":1.0},"199":{"tf":1.4142135623730951},"361":{"tf":1.0},"388":{"tf":1.4142135623730951},"52":{"tf":1.0},"72":{"tf":1.4142135623730951}}},"8":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"200":{"tf":1.0},"219":{"tf":1.0},"237":{"tf":1.0},"332":{"tf":1.0},"87":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"116":{"tf":1.0},"200":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":4,"docs":{"170":{"tf":1.0},"237":{"tf":1.0},"294":{"tf":1.0},"347":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"87":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"133":{"tf":1.0},"159":{"tf":1.0},"219":{"tf":1.0},"272":{"tf":1.0},"314":{"tf":1.0},"332":{"tf":1.0},"76":{"tf":1.0},"87":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"102":{"tf":1.0},"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.0},"140":{"tf":2.0},"145":{"tf":1.0},"146":{"tf":1.0},"147":{"tf":1.0},"148":{"tf":1.7320508075688772},"162":{"tf":1.0},"187":{"tf":1.0},"200":{"tf":1.4142135623730951},"361":{"tf":1.0},"52":{"tf":1.0},"72":{"tf":1.0}}},"9":{".":{"0":{"2":{".":{"2":{"0":{"2":{"3":{"df":1,"docs":{"0":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"272":{"tf":1.0},"295":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"117":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"200":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"172":{"tf":1.0},"237":{"tf":1.0},"295":{"tf":1.0},"348":{"tf":1.0},"88":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"134":{"tf":1.0},"159":{"tf":1.0},"219":{"tf":1.0},"272":{"tf":1.0},"314":{"tf":1.0},"332":{"tf":1.0},"382":{"tf":1.0},"77":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"77":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":11,"docs":{"103":{"tf":1.0},"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"159":{"tf":2.8284271247461903},"164":{"tf":1.4142135623730951},"187":{"tf":1.4142135623730951},"200":{"tf":1.4142135623730951},"361":{"tf":1.0},"52":{"tf":1.0},"73":{"tf":1.0}}},"b":{"1":{"1":{"1":{"1":{"_":{"0":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":32,"docs":{"100":{"tf":1.0},"140":{"tf":1.0},"148":{"tf":1.0},"154":{"tf":1.4142135623730951},"159":{"tf":1.7320508075688772},"196":{"tf":2.0},"209":{"tf":1.0},"238":{"tf":1.0},"250":{"tf":2.0},"252":{"tf":2.0},"261":{"tf":5.0990195135927845},"273":{"tf":1.0},"280":{"tf":1.0},"285":{"tf":1.0},"286":{"tf":1.0},"287":{"tf":2.8284271247461903},"299":{"tf":1.4142135623730951},"329":{"tf":1.4142135623730951},"338":{"tf":3.0},"340":{"tf":2.0},"357":{"tf":1.0},"370":{"tf":1.0},"385":{"tf":1.7320508075688772},"388":{"tf":2.8284271247461903},"52":{"tf":2.23606797749979},"53":{"tf":1.7320508075688772},"60":{"tf":1.0},"61":{"tf":1.7320508075688772},"77":{"tf":1.0},"88":{"tf":1.0},"89":{"tf":1.0},"92":{"tf":1.4142135623730951}},"o":{"7":{"7":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"x":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":1,"docs":{"52":{"tf":1.0}}}}}},"1":{".":{".":{"4":{"df":1,"docs":{"61":{"tf":1.0}}},"=":{"1":{"0":{"0":{"df":1,"docs":{"41":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"0":{".":{"1":{"df":1,"docs":{"258":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":2,"docs":{"189":{"tf":1.0},"388":{"tf":1.0}}},"1":{"0":{"df":1,"docs":{"410":{"tf":1.0}}},"df":1,"docs":{"379":{"tf":1.0}}},"3":{"1":{"df":1,"docs":{"410":{"tf":1.0}}},"df":0,"docs":{}},"4":{"0":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"5":{"0":{"df":1,"docs":{"43":{"tf":1.0}}},"df":1,"docs":{"414":{"tf":1.4142135623730951}}},"6":{"7":{".":{"1":{"df":1,"docs":{"0":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"414":{"tf":1.0}}},"df":0,"docs":{}},"0":{".":{"1":{"5":{"df":1,"docs":{"377":{"tf":1.0}}},"8":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"4":{"df":1,"docs":{"172":{"tf":1.0}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"159":{"tf":1.0},"204":{"tf":1.0},"219":{"tf":1.0},"314":{"tf":1.0},"332":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"117":{"tf":1.0},"204":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"159":{"tf":1.0},"296":{"tf":1.0},"314":{"tf":1.0},"348":{"tf":1.0},"89":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":7,"docs":{"135":{"tf":1.0},"172":{"tf":1.0},"219":{"tf":1.0},"238":{"tf":1.0},"273":{"tf":1.0},"332":{"tf":1.0},"384":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"0":{"0":{"df":1,"docs":{"347":{"tf":1.0}}},"df":1,"docs":{"52":{"tf":1.0}}},"df":12,"docs":{"132":{"tf":1.4142135623730951},"154":{"tf":1.0},"164":{"tf":2.6457513110645907},"167":{"tf":1.0},"200":{"tf":2.449489742783178},"227":{"tf":1.0},"283":{"tf":1.4142135623730951},"31":{"tf":1.0},"39":{"tf":1.0},"407":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0}}},"2":{"3":{"df":1,"docs":{"376":{"tf":1.0}}},"df":0,"docs":{}},"4":{"df":1,"docs":{"140":{"tf":1.0}}},"df":84,"docs":{"10":{"tf":1.0},"101":{"tf":1.0},"105":{"tf":1.4142135623730951},"117":{"tf":1.4142135623730951},"130":{"tf":1.0},"135":{"tf":1.4142135623730951},"139":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":2.0},"149":{"tf":1.0},"155":{"tf":1.0},"159":{"tf":1.7320508075688772},"16":{"tf":1.0},"167":{"tf":3.605551275463989},"169":{"tf":2.8284271247461903},"170":{"tf":3.1622776601683795},"172":{"tf":3.4641016151377544},"173":{"tf":1.0},"175":{"tf":1.7320508075688772},"176":{"tf":1.7320508075688772},"177":{"tf":2.23606797749979},"178":{"tf":1.0},"180":{"tf":1.7320508075688772},"182":{"tf":2.6457513110645907},"183":{"tf":2.6457513110645907},"184":{"tf":3.1622776601683795},"186":{"tf":3.4641016151377544},"188":{"tf":1.7320508075688772},"189":{"tf":2.449489742783178},"190":{"tf":2.0},"192":{"tf":1.0},"194":{"tf":1.0},"196":{"tf":1.0},"200":{"tf":1.0},"201":{"tf":1.0},"204":{"tf":2.0},"211":{"tf":1.0},"219":{"tf":1.4142135623730951},"220":{"tf":1.0},"223":{"tf":1.4142135623730951},"238":{"tf":1.4142135623730951},"244":{"tf":1.0},"261":{"tf":1.0},"262":{"tf":1.0},"268":{"tf":1.0},"273":{"tf":1.7320508075688772},"274":{"tf":1.4142135623730951},"279":{"tf":2.0},"284":{"tf":1.0},"286":{"tf":1.0},"296":{"tf":1.7320508075688772},"299":{"tf":2.23606797749979},"310":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.4142135623730951},"315":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.0},"332":{"tf":1.4142135623730951},"335":{"tf":1.7320508075688772},"341":{"tf":1.0},"348":{"tf":1.4142135623730951},"352":{"tf":1.0},"357":{"tf":1.0},"361":{"tf":1.0},"37":{"tf":1.0},"384":{"tf":1.4142135623730951},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"41":{"tf":1.0},"45":{"tf":1.4142135623730951},"49":{"tf":1.0},"53":{"tf":1.7320508075688772},"61":{"tf":1.4142135623730951},"69":{"tf":1.0},"73":{"tf":1.4142135623730951},"74":{"tf":1.0},"85":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951},"89":{"tf":1.4142135623730951},"90":{"tf":1.4142135623730951},"96":{"tf":1.0}}},"1":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{":":{"3":{"df":1,"docs":{"90":{"tf":1.0}}},"9":{":":{"1":{"0":{"df":1,"docs":{"90":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"205":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"118":{"tf":1.0},"205":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"172":{"tf":1.0},"349":{"tf":1.0},"90":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"316":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":9,"docs":{"138":{"tf":1.0},"159":{"tf":1.0},"220":{"tf":1.0},"238":{"tf":1.0},"274":{"tf":1.0},"297":{"tf":1.0},"322":{"tf":1.0},"335":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":44,"docs":{"10":{"tf":1.0},"118":{"tf":1.4142135623730951},"119":{"tf":1.7320508075688772},"121":{"tf":1.0},"124":{"tf":1.0},"138":{"tf":1.4142135623730951},"159":{"tf":1.4142135623730951},"16":{"tf":1.0},"172":{"tf":1.4142135623730951},"190":{"tf":1.0},"192":{"tf":1.0},"196":{"tf":3.4641016151377544},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"200":{"tf":2.8284271247461903},"201":{"tf":1.0},"204":{"tf":2.23606797749979},"205":{"tf":2.449489742783178},"206":{"tf":1.4142135623730951},"208":{"tf":2.0},"209":{"tf":2.449489742783178},"211":{"tf":1.0},"220":{"tf":1.4142135623730951},"223":{"tf":1.0},"238":{"tf":1.4142135623730951},"261":{"tf":1.0},"274":{"tf":1.4142135623730951},"297":{"tf":1.0},"316":{"tf":1.4142135623730951},"318":{"tf":1.0},"319":{"tf":1.4142135623730951},"320":{"tf":1.0},"321":{"tf":1.0},"322":{"tf":1.0},"335":{"tf":1.4142135623730951},"340":{"tf":1.0},"341":{"tf":1.0},"349":{"tf":1.4142135623730951},"362":{"tf":1.0},"385":{"tf":1.4142135623730951},"53":{"tf":1.0},"56":{"tf":1.0},"73":{"tf":1.0},"90":{"tf":1.4142135623730951}}},"2":{".":{".":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"247":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":1.0}}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"118":{"tf":1.0},"220":{"tf":1.0},"385":{"tf":1.0},"90":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"118":{"tf":1.0},"175":{"tf":1.0},"208":{"tf":1.0},"317":{"tf":1.0},"353":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":4,"docs":{"159":{"tf":1.0},"299":{"tf":1.0},"338":{"tf":1.0},"90":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"138":{"tf":1.0},"220":{"tf":1.0},"274":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"7":{".":{"0":{".":{"0":{".":{"1":{":":{"7":{"8":{"7":{"8":{"/":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":1,"docs":{"381":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":2,"docs":{"380":{"tf":1.0},"381":{"tf":1.0}}}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"378":{"tf":1.0}}}}}}},"df":5,"docs":{"376":{"tf":1.7320508075688772},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":2,"docs":{"100":{"tf":1.0},"162":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"52":{"tf":1.0}}},"8":{"df":1,"docs":{"52":{"tf":1.4142135623730951}}},"df":49,"docs":{"10":{"tf":1.4142135623730951},"107":{"tf":1.0},"115":{"tf":1.0},"118":{"tf":1.4142135623730951},"138":{"tf":1.7320508075688772},"140":{"tf":1.0},"159":{"tf":1.4142135623730951},"175":{"tf":1.4142135623730951},"177":{"tf":1.0},"198":{"tf":1.0},"208":{"tf":1.4142135623730951},"209":{"tf":2.0},"213":{"tf":1.7320508075688772},"214":{"tf":1.0},"215":{"tf":2.0},"216":{"tf":2.6457513110645907},"218":{"tf":3.0},"219":{"tf":3.7416573867739413},"220":{"tf":3.3166247903554},"221":{"tf":2.6457513110645907},"223":{"tf":2.6457513110645907},"224":{"tf":3.1622776601683795},"226":{"tf":2.0},"227":{"tf":3.605551275463989},"230":{"tf":1.4142135623730951},"232":{"tf":1.0},"239":{"tf":1.4142135623730951},"241":{"tf":1.4142135623730951},"243":{"tf":1.0},"244":{"tf":2.6457513110645907},"245":{"tf":1.7320508075688772},"247":{"tf":2.0},"259":{"tf":1.0},"262":{"tf":1.0},"274":{"tf":1.7320508075688772},"299":{"tf":1.7320508075688772},"317":{"tf":1.4142135623730951},"338":{"tf":1.7320508075688772},"341":{"tf":1.0},"353":{"tf":1.7320508075688772},"362":{"tf":1.4142135623730951},"364":{"tf":1.0},"37":{"tf":1.0},"380":{"tf":1.4142135623730951},"385":{"tf":2.23606797749979},"50":{"tf":1.0},"53":{"tf":1.4142135623730951},"73":{"tf":1.4142135623730951},"90":{"tf":1.7320508075688772}}},"3":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"209":{"tf":1.0},"299":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"119":{"tf":1.0},"353":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":5,"docs":{"176":{"tf":1.0},"221":{"tf":1.0},"240":{"tf":1.0},"318":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"299":{"tf":1.0},"338":{"tf":1.0},"92":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"138":{"tf":1.0},"164":{"tf":1.0},"274":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}}},"5":{"df":1,"docs":{"140":{"tf":1.0}}},"df":45,"docs":{"10":{"tf":1.0},"107":{"tf":1.0},"119":{"tf":2.0},"138":{"tf":1.4142135623730951},"157":{"tf":1.7320508075688772},"164":{"tf":1.4142135623730951},"176":{"tf":1.4142135623730951},"177":{"tf":1.0},"178":{"tf":1.0},"179":{"tf":1.0},"209":{"tf":1.7320508075688772},"211":{"tf":1.0},"213":{"tf":1.0},"218":{"tf":1.0},"219":{"tf":1.7320508075688772},"221":{"tf":1.4142135623730951},"224":{"tf":1.4142135623730951},"234":{"tf":2.0},"235":{"tf":2.8284271247461903},"236":{"tf":3.605551275463989},"237":{"tf":3.4641016151377544},"238":{"tf":2.449489742783178},"239":{"tf":1.7320508075688772},"240":{"tf":2.23606797749979},"241":{"tf":2.8284271247461903},"242":{"tf":1.7320508075688772},"244":{"tf":3.3166247903554},"245":{"tf":2.449489742783178},"246":{"tf":1.4142135623730951},"274":{"tf":1.4142135623730951},"291":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.4142135623730951},"307":{"tf":1.0},"318":{"tf":1.4142135623730951},"331":{"tf":1.0},"338":{"tf":1.7320508075688772},"353":{"tf":1.7320508075688772},"362":{"tf":1.0},"385":{"tf":1.7320508075688772},"53":{"tf":1.0},"73":{"tf":1.0},"76":{"tf":1.0},"92":{"tf":1.4142135623730951},"94":{"tf":1.0}}},"4":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"241":{"tf":1.0},"276":{"tf":1.0},"299":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"177":{"tf":1.0},"319":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"119":{"tf":1.0},"276":{"tf":1.0},"299":{"tf":1.0},"354":{"tf":1.0},"94":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"138":{"tf":1.0},"221":{"tf":1.0},"241":{"tf":1.0},"338":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"n":{"df":1,"docs":{"140":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"140":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"1":{"df":1,"docs":{"140":{"tf":1.0}}},"df":31,"docs":{"10":{"tf":1.0},"107":{"tf":1.0},"109":{"tf":1.0},"119":{"tf":1.4142135623730951},"121":{"tf":1.0},"138":{"tf":1.4142135623730951},"140":{"tf":1.0},"164":{"tf":1.0},"177":{"tf":1.4142135623730951},"196":{"tf":1.0},"221":{"tf":1.7320508075688772},"241":{"tf":1.7320508075688772},"252":{"tf":3.4641016151377544},"253":{"tf":4.58257569495584},"261":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":1.0},"299":{"tf":1.4142135623730951},"302":{"tf":1.0},"310":{"tf":1.0},"319":{"tf":1.4142135623730951},"338":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"362":{"tf":1.0},"385":{"tf":2.0},"40":{"tf":1.0},"53":{"tf":1.0},"58":{"tf":1.0},"74":{"tf":1.4142135623730951},"90":{"tf":1.0},"94":{"tf":1.7320508075688772}}},"5":{".":{"1":{"7":{"df":1,"docs":{"279":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"277":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"180":{"tf":1.0},"354":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"119":{"tf":1.0},"223":{"tf":1.0},"320":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"299":{"tf":1.0},"338":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"139":{"tf":1.0},"241":{"tf":1.0},"277":{"tf":1.0},"94":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"1":{"df":2,"docs":{"140":{"tf":1.0},"142":{"tf":1.0}}},"df":47,"docs":{"10":{"tf":1.0},"106":{"tf":1.0},"119":{"tf":1.4142135623730951},"120":{"tf":1.4142135623730951},"133":{"tf":1.0},"139":{"tf":1.7320508075688772},"180":{"tf":1.4142135623730951},"197":{"tf":1.0},"223":{"tf":1.4142135623730951},"241":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"268":{"tf":4.47213595499958},"270":{"tf":1.7320508075688772},"271":{"tf":2.6457513110645907},"272":{"tf":3.0},"273":{"tf":2.449489742783178},"274":{"tf":3.605551275463989},"276":{"tf":2.0},"277":{"tf":3.605551275463989},"279":{"tf":3.1622776601683795},"280":{"tf":2.23606797749979},"283":{"tf":4.0},"284":{"tf":2.6457513110645907},"286":{"tf":3.605551275463989},"287":{"tf":3.605551275463989},"293":{"tf":1.0},"298":{"tf":1.0},"299":{"tf":2.0},"300":{"tf":1.4142135623730951},"303":{"tf":1.0},"320":{"tf":1.4142135623730951},"338":{"tf":1.7320508075688772},"339":{"tf":1.0},"354":{"tf":1.4142135623730951},"357":{"tf":1.0},"359":{"tf":1.0},"360":{"tf":1.0},"362":{"tf":1.0},"364":{"tf":1.0},"385":{"tf":1.7320508075688772},"387":{"tf":1.0},"53":{"tf":1.0},"72":{"tf":1.0},"74":{"tf":1.0},"77":{"tf":1.0},"94":{"tf":1.4142135623730951},"96":{"tf":1.4142135623730951}}},"6":{".":{"1":{"0":{"df":1,"docs":{"297":{"tf":1.0}}},"1":{"df":1,"docs":{"297":{"tf":1.0}}},"df":0,"docs":{}},"4":{"df":1,"docs":{"293":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"182":{"tf":1.0},"223":{"tf":1.0},"277":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"242":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"120":{"tf":1.0},"223":{"tf":1.0},"321":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"182":{"tf":1.0},"338":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"139":{"tf":1.0},"277":{"tf":1.0},"355":{"tf":1.0},"96":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"df":1,"docs":{"338":{"tf":1.0}}},"4":{"df":1,"docs":{"140":{"tf":2.23606797749979}}},"5":{"df":1,"docs":{"140":{"tf":1.4142135623730951}}},"8":{"df":1,"docs":{"140":{"tf":1.0}}},"df":36,"docs":{"10":{"tf":1.0},"106":{"tf":1.0},"120":{"tf":1.7320508075688772},"139":{"tf":1.4142135623730951},"182":{"tf":1.7320508075688772},"183":{"tf":1.0},"223":{"tf":1.4142135623730951},"226":{"tf":1.0},"236":{"tf":1.0},"242":{"tf":1.4142135623730951},"245":{"tf":1.0},"277":{"tf":1.4142135623730951},"278":{"tf":1.0},"282":{"tf":1.0},"284":{"tf":1.0},"291":{"tf":1.7320508075688772},"292":{"tf":2.449489742783178},"293":{"tf":3.872983346207417},"294":{"tf":3.1622776601683795},"295":{"tf":2.23606797749979},"296":{"tf":2.449489742783178},"297":{"tf":1.4142135623730951},"299":{"tf":4.0},"302":{"tf":1.0},"321":{"tf":1.4142135623730951},"338":{"tf":1.4142135623730951},"339":{"tf":1.7320508075688772},"348":{"tf":1.0},"349":{"tf":1.0},"355":{"tf":1.4142135623730951},"364":{"tf":1.0},"385":{"tf":2.6457513110645907},"52":{"tf":1.0},"54":{"tf":1.4142135623730951},"74":{"tf":1.0},"96":{"tf":1.4142135623730951}}},"7":{".":{"1":{"7":{"df":1,"docs":{"321":{"tf":1.0}}},"df":0,"docs":{}},"3":{"df":1,"docs":{"313":{"tf":1.0}}},"4":{"df":1,"docs":{"313":{"tf":1.0}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"279":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"121":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"224":{"tf":1.0},"321":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"183":{"tf":1.0},"279":{"tf":1.0},"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"139":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"4":{"df":1,"docs":{"140":{"tf":1.0}}},"df":42,"docs":{"10":{"tf":1.0},"106":{"tf":1.0},"121":{"tf":1.4142135623730951},"125":{"tf":1.0},"134":{"tf":1.0},"139":{"tf":1.4142135623730951},"159":{"tf":1.0},"163":{"tf":1.0},"179":{"tf":1.0},"182":{"tf":1.0},"183":{"tf":1.4142135623730951},"184":{"tf":1.0},"193":{"tf":1.0},"211":{"tf":1.0},"220":{"tf":1.0},"224":{"tf":1.4142135623730951},"244":{"tf":1.4142135623730951},"266":{"tf":1.4142135623730951},"268":{"tf":1.0},"279":{"tf":1.4142135623730951},"309":{"tf":2.449489742783178},"313":{"tf":3.1622776601683795},"314":{"tf":3.7416573867739413},"315":{"tf":1.4142135623730951},"316":{"tf":1.7320508075688772},"317":{"tf":1.7320508075688772},"318":{"tf":2.0},"319":{"tf":2.23606797749979},"320":{"tf":2.0},"321":{"tf":3.1622776601683795},"322":{"tf":3.4641016151377544},"339":{"tf":1.0},"355":{"tf":1.4142135623730951},"359":{"tf":1.0},"362":{"tf":1.0},"364":{"tf":1.0},"365":{"tf":1.0},"385":{"tf":1.4142135623730951},"387":{"tf":1.4142135623730951},"55":{"tf":1.4142135623730951},"77":{"tf":1.0},"91":{"tf":1.0}}},"8":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"224":{"tf":1.0},"321":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"183":{"tf":1.0},"279":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":5,"docs":{"123":{"tf":1.0},"139":{"tf":1.0},"244":{"tf":1.0},"339":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"df":1,"docs":{"142":{"tf":1.0}}},"4":{"df":1,"docs":{"140":{"tf":1.0}}},"df":34,"docs":{"10":{"tf":1.0},"102":{"tf":1.0},"106":{"tf":1.0},"123":{"tf":1.4142135623730951},"139":{"tf":2.0},"140":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.0},"224":{"tf":1.4142135623730951},"244":{"tf":1.4142135623730951},"279":{"tf":1.4142135623730951},"280":{"tf":1.0},"284":{"tf":1.4142135623730951},"294":{"tf":1.0},"321":{"tf":1.4142135623730951},"327":{"tf":2.0},"328":{"tf":1.7320508075688772},"329":{"tf":2.23606797749979},"330":{"tf":2.6457513110645907},"331":{"tf":2.449489742783178},"332":{"tf":3.4641016151377544},"335":{"tf":1.7320508075688772},"338":{"tf":4.242640687119285},"339":{"tf":5.477225575051661},"340":{"tf":3.1622776601683795},"341":{"tf":1.7320508075688772},"355":{"tf":2.0},"365":{"tf":1.4142135623730951},"368":{"tf":1.0},"382":{"tf":1.0},"385":{"tf":1.7320508075688772},"42":{"tf":1.0},"55":{"tf":1.4142135623730951},"77":{"tf":1.0}}},"9":{",":{"2":{"3":{"4":{",":{"9":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"6":{"2":{"0":{",":{"3":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"140":{"tf":1.0},"224":{"tf":1.0},"280":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"123":{"tf":1.0},"322":{"tf":1.0}},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"3":{"df":1,"docs":{"245":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"224":{"tf":1.0},"244":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"184":{"tf":1.0},"355":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"140":{"tf":1.0},"280":{"tf":1.0},"339":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"6":{"0":{"df":1,"docs":{"306":{"tf":1.0}}},"7":{"df":1,"docs":{"306":{"tf":1.0}}},"df":0,"docs":{}},"7":{"2":{"df":1,"docs":{"194":{"tf":1.0}}},"df":0,"docs":{}},"9":{"4":{"df":1,"docs":{"308":{"tf":1.0}}},"9":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}},"df":40,"docs":{"10":{"tf":1.0},"123":{"tf":1.7320508075688772},"140":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":1.0},"224":{"tf":1.4142135623730951},"23":{"tf":1.0},"239":{"tf":1.0},"244":{"tf":1.4142135623730951},"245":{"tf":1.4142135623730951},"252":{"tf":1.0},"273":{"tf":1.0},"280":{"tf":1.4142135623730951},"281":{"tf":1.0},"302":{"tf":1.0},"304":{"tf":1.0},"313":{"tf":1.0},"322":{"tf":1.7320508075688772},"339":{"tf":1.4142135623730951},"346":{"tf":3.3166247903554},"347":{"tf":4.123105625617661},"348":{"tf":2.449489742783178},"349":{"tf":1.7320508075688772},"353":{"tf":2.8284271247461903},"354":{"tf":2.449489742783178},"355":{"tf":5.0990195135927845},"356":{"tf":1.7320508075688772},"357":{"tf":1.7320508075688772},"359":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.0},"364":{"tf":1.7320508075688772},"365":{"tf":1.0},"368":{"tf":2.0},"369":{"tf":1.4142135623730951},"370":{"tf":4.358898943540674},"385":{"tf":1.7320508075688772},"398":{"tf":1.0},"56":{"tf":1.4142135623730951},"77":{"tf":1.4142135623730951}}},":":{"1":{"df":1,"docs":{"290":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"_":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":88,"docs":{"0":{"tf":1.0},"10":{"tf":1.0},"100":{"tf":1.7320508075688772},"102":{"tf":1.7320508075688772},"104":{"tf":1.4142135623730951},"110":{"tf":1.0},"113":{"tf":2.23606797749979},"114":{"tf":1.4142135623730951},"130":{"tf":2.0},"140":{"tf":1.0},"148":{"tf":1.4142135623730951},"154":{"tf":2.0},"164":{"tf":2.6457513110645907},"167":{"tf":1.7320508075688772},"176":{"tf":1.0},"177":{"tf":1.0},"196":{"tf":2.0},"197":{"tf":1.0},"200":{"tf":1.7320508075688772},"201":{"tf":1.0},"203":{"tf":1.0},"213":{"tf":1.4142135623730951},"215":{"tf":1.0},"218":{"tf":1.0},"219":{"tf":2.0},"22":{"tf":1.4142135623730951},"222":{"tf":1.0},"227":{"tf":1.0},"234":{"tf":1.4142135623730951},"235":{"tf":2.449489742783178},"237":{"tf":1.0},"241":{"tf":1.7320508075688772},"250":{"tf":1.7320508075688772},"252":{"tf":2.8284271247461903},"26":{"tf":2.0},"261":{"tf":2.449489742783178},"262":{"tf":1.0},"267":{"tf":1.4142135623730951},"268":{"tf":2.6457513110645907},"280":{"tf":1.7320508075688772},"286":{"tf":1.7320508075688772},"287":{"tf":2.6457513110645907},"291":{"tf":2.0},"292":{"tf":2.449489742783178},"293":{"tf":1.0},"296":{"tf":1.4142135623730951},"299":{"tf":1.4142135623730951},"309":{"tf":1.4142135623730951},"31":{"tf":1.0},"32":{"tf":1.4142135623730951},"326":{"tf":1.0},"327":{"tf":1.7320508075688772},"328":{"tf":1.0},"33":{"tf":2.0},"330":{"tf":1.4142135623730951},"334":{"tf":1.0},"337":{"tf":2.0},"340":{"tf":1.0},"346":{"tf":1.7320508075688772},"356":{"tf":1.4142135623730951},"368":{"tf":1.0},"370":{"tf":1.4142135623730951},"374":{"tf":1.4142135623730951},"376":{"tf":1.4142135623730951},"377":{"tf":1.7320508075688772},"381":{"tf":1.0},"385":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"39":{"tf":1.0},"396":{"tf":1.4142135623730951},"407":{"tf":1.0},"41":{"tf":1.4142135623730951},"410":{"tf":1.0},"42":{"tf":1.0},"50":{"tf":1.0},"52":{"tf":3.0},"53":{"tf":2.0},"56":{"tf":2.23606797749979},"57":{"tf":1.0},"61":{"tf":1.7320508075688772},"67":{"tf":1.4142135623730951},"69":{"tf":1.7320508075688772},"78":{"tf":1.4142135623730951},"81":{"tf":1.7320508075688772},"86":{"tf":2.0},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":1.0}}},"2":{".":{"0":{"df":1,"docs":{"255":{"tf":1.4142135623730951}}},"5":{"3":{"df":2,"docs":{"40":{"tf":1.4142135623730951},"41":{"tf":1.0}}},"df":0,"docs":{}},"8":{"5":{"df":1,"docs":{"27":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"0":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"184":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"123":{"tf":1.0},"283":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"226":{"tf":1.0},"244":{"tf":1.0},"322":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"145":{"tf":1.0},"184":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"8":{"df":1,"docs":{"103":{"tf":1.0}}},"9":{"df":1,"docs":{"101":{"tf":1.0}}},"df":2,"docs":{"200":{"tf":1.4142135623730951},"379":{"tf":1.7320508075688772}}},"1":{"2":{"df":1,"docs":{"247":{"tf":1.0}}},"3":{"df":1,"docs":{"16":{"tf":1.0}}},"5":{"df":3,"docs":{"394":{"tf":1.4142135623730951},"410":{"tf":2.23606797749979},"414":{"tf":1.0}}},"8":{"df":2,"docs":{"394":{"tf":1.4142135623730951},"410":{"tf":2.0}}},"df":0,"docs":{}},"2":{"1":{"df":2,"docs":{"255":{"tf":1.0},"26":{"tf":1.0}}},"2":{"df":1,"docs":{"16":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":2,"docs":{"140":{"tf":2.0},"142":{"tf":1.4142135623730951}}},"df":28,"docs":{"10":{"tf":1.4142135623730951},"123":{"tf":1.4142135623730951},"145":{"tf":1.4142135623730951},"184":{"tf":1.4142135623730951},"189":{"tf":1.4142135623730951},"226":{"tf":1.4142135623730951},"244":{"tf":1.4142135623730951},"283":{"tf":1.4142135623730951},"305":{"tf":1.0},"322":{"tf":1.7320508075688772},"339":{"tf":1.4142135623730951},"343":{"tf":1.0},"355":{"tf":1.4142135623730951},"370":{"tf":1.4142135623730951},"374":{"tf":1.4142135623730951},"376":{"tf":1.7320508075688772},"377":{"tf":1.7320508075688772},"379":{"tf":1.7320508075688772},"380":{"tf":2.449489742783178},"381":{"tf":3.4641016151377544},"382":{"tf":2.23606797749979},"384":{"tf":2.23606797749979},"385":{"tf":6.557438524302},"386":{"tf":1.4142135623730951},"387":{"tf":2.0},"388":{"tf":3.0},"56":{"tf":1.0},"61":{"tf":1.0}}},"1":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"227":{"tf":1.0},"283":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"227":{"tf":1.0},"283":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"322":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"146":{"tf":1.0},"186":{"tf":1.0},"339":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":15,"docs":{"125":{"tf":2.0},"146":{"tf":1.4142135623730951},"186":{"tf":1.4142135623730951},"192":{"tf":1.0},"209":{"tf":1.0},"227":{"tf":1.4142135623730951},"245":{"tf":1.4142135623730951},"246":{"tf":1.0},"283":{"tf":1.4142135623730951},"322":{"tf":1.4142135623730951},"339":{"tf":1.7320508075688772},"355":{"tf":1.4142135623730951},"370":{"tf":1.0},"385":{"tf":1.0},"57":{"tf":1.4142135623730951}}},"2":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"227":{"tf":1.0},"245":{"tf":1.0},"283":{"tf":1.0},"387":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"227":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"147":{"tf":1.0},"186":{"tf":1.0},"339":{"tf":1.0},"356":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"4":{"df":1,"docs":{"140":{"tf":2.449489742783178}}},"df":13,"docs":{"125":{"tf":1.7320508075688772},"147":{"tf":1.4142135623730951},"186":{"tf":1.4142135623730951},"227":{"tf":1.7320508075688772},"245":{"tf":1.4142135623730951},"246":{"tf":1.0},"283":{"tf":1.7320508075688772},"339":{"tf":1.4142135623730951},"353":{"tf":1.0},"356":{"tf":1.4142135623730951},"385":{"tf":1.4142135623730951},"387":{"tf":1.4142135623730951},"57":{"tf":1.0}}},"3":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"186":{"tf":1.0},"227":{"tf":1.0},"283":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"227":{"tf":1.0},"283":{"tf":1.0},"388":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"357":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"148":{"tf":1.0},"186":{"tf":1.0},"339":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":10,"docs":{"148":{"tf":1.4142135623730951},"182":{"tf":1.0},"186":{"tf":1.7320508075688772},"227":{"tf":1.4142135623730951},"244":{"tf":2.0},"283":{"tf":1.7320508075688772},"339":{"tf":1.0},"357":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"57":{"tf":1.4142135623730951}}},"4":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"284":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"188":{"tf":1.0},"284":{"tf":1.0},"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"148":{"tf":1.0},"230":{"tf":1.0},"360":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"3":{".":{"3":{"df":1,"docs":{"262":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":12,"docs":{"140":{"tf":1.0},"148":{"tf":1.7320508075688772},"188":{"tf":1.0},"190":{"tf":1.0},"230":{"tf":1.0},"244":{"tf":1.4142135623730951},"284":{"tf":1.4142135623730951},"286":{"tf":1.0},"339":{"tf":1.4142135623730951},"360":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"58":{"tf":1.0}}},"5":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"286":{"tf":1.0},"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"148":{"tf":1.0},"189":{"tf":1.0},"360":{"tf":1.0},"388":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"5":{"df":3,"docs":{"100":{"tf":1.0},"338":{"tf":1.0},"52":{"tf":1.4142135623730951}}},"6":{"df":1,"docs":{"52":{"tf":1.4142135623730951}}},"7":{"df":1,"docs":{"52":{"tf":1.0}}},"df":9,"docs":{"103":{"tf":1.0},"148":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.7320508075688772},"286":{"tf":2.0},"339":{"tf":1.4142135623730951},"360":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"58":{"tf":1.0}}},"6":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"286":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"286":{"tf":1.0},"340":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"286":{"tf":1.4142135623730951},"287":{"tf":1.0},"340":{"tf":1.4142135623730951},"361":{"tf":2.0},"60":{"tf":1.4142135623730951}}},"7":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"340":{"tf":1.0},"364":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"287":{"tf":1.7320508075688772},"340":{"tf":1.4142135623730951},"364":{"tf":1.4142135623730951},"60":{"tf":1.4142135623730951}}},"8":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"368":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"287":{"tf":1.0},"340":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"df":2,"docs":{"175":{"tf":1.0},"176":{"tf":1.0}}},"df":4,"docs":{"287":{"tf":1.4142135623730951},"340":{"tf":1.4142135623730951},"368":{"tf":1.7320508075688772},"60":{"tf":1.4142135623730951}}},"9":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"287":{"tf":1.0},"341":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"287":{"tf":1.4142135623730951},"341":{"tf":1.4142135623730951},"369":{"tf":1.4142135623730951},"60":{"tf":1.0}}},"df":70,"docs":{"10":{"tf":2.23606797749979},"100":{"tf":2.0},"110":{"tf":1.0},"113":{"tf":1.4142135623730951},"122":{"tf":1.4142135623730951},"123":{"tf":1.0},"130":{"tf":1.7320508075688772},"132":{"tf":1.0},"140":{"tf":1.0},"141":{"tf":1.0},"148":{"tf":1.0},"154":{"tf":2.0},"155":{"tf":1.0},"158":{"tf":1.4142135623730951},"164":{"tf":1.0},"167":{"tf":2.0},"194":{"tf":1.4142135623730951},"196":{"tf":2.0},"198":{"tf":1.0},"205":{"tf":1.0},"215":{"tf":1.4142135623730951},"218":{"tf":1.0},"219":{"tf":1.4142135623730951},"235":{"tf":1.4142135623730951},"252":{"tf":2.0},"26":{"tf":1.7320508075688772},"261":{"tf":1.0},"268":{"tf":3.605551275463989},"286":{"tf":1.7320508075688772},"287":{"tf":1.0},"291":{"tf":1.4142135623730951},"292":{"tf":2.6457513110645907},"299":{"tf":1.0},"30":{"tf":1.4142135623730951},"309":{"tf":1.4142135623730951},"328":{"tf":1.7320508075688772},"33":{"tf":1.4142135623730951},"330":{"tf":1.4142135623730951},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"339":{"tf":1.7320508075688772},"340":{"tf":2.0},"346":{"tf":1.4142135623730951},"361":{"tf":1.0},"368":{"tf":2.0},"37":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"377":{"tf":1.4142135623730951},"381":{"tf":1.4142135623730951},"385":{"tf":1.7320508075688772},"388":{"tf":1.4142135623730951},"397":{"tf":1.4142135623730951},"40":{"tf":2.0},"408":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"45":{"tf":2.0},"48":{"tf":1.4142135623730951},"50":{"tf":1.4142135623730951},"51":{"tf":1.0},"52":{"tf":3.0},"53":{"tf":2.0},"60":{"tf":2.6457513110645907},"61":{"tf":2.23606797749979},"69":{"tf":2.23606797749979},"78":{"tf":1.7320508075688772},"81":{"tf":1.4142135623730951},"83":{"tf":1.0},"86":{"tf":1.7320508075688772},"93":{"tf":1.4142135623730951}}},"3":{".":{".":{"=":{"7":{"df":1,"docs":{"341":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"1":{"4":{"1":{"5":{"df":1,"docs":{"408":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"180":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"0":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"327":{"tf":1.7320508075688772},"370":{"tf":2.6457513110645907},"60":{"tf":1.4142135623730951},"89":{"tf":1.0},"90":{"tf":1.4142135623730951}}},"1":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"6":{":":{"1":{"2":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"370":{"tf":1.4142135623730951},"60":{"tf":1.4142135623730951}}},"2":{"df":5,"docs":{"339":{"tf":1.7320508075688772},"370":{"tf":1.7320508075688772},"42":{"tf":1.7320508075688772},"52":{"tf":2.23606797749979},"61":{"tf":1.7320508075688772}}},"3":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"370":{"tf":1.7320508075688772},"61":{"tf":1.0}}},"4":{"df":1,"docs":{"61":{"tf":1.0}}},"8":{"df":1,"docs":{"42":{"tf":1.7320508075688772}}},"df":65,"docs":{"10":{"tf":1.4142135623730951},"102":{"tf":2.0},"106":{"tf":2.0},"114":{"tf":2.0},"130":{"tf":1.4142135623730951},"131":{"tf":1.7320508075688772},"140":{"tf":1.0},"154":{"tf":1.7320508075688772},"155":{"tf":1.7320508075688772},"167":{"tf":1.7320508075688772},"169":{"tf":1.0},"171":{"tf":1.0},"194":{"tf":1.0},"196":{"tf":1.4142135623730951},"198":{"tf":1.0},"216":{"tf":1.4142135623730951},"219":{"tf":1.0},"224":{"tf":1.0},"235":{"tf":1.4142135623730951},"238":{"tf":1.4142135623730951},"250":{"tf":1.7320508075688772},"252":{"tf":1.0},"253":{"tf":2.449489742783178},"268":{"tf":3.0},"279":{"tf":1.7320508075688772},"287":{"tf":1.4142135623730951},"291":{"tf":1.4142135623730951},"292":{"tf":2.0},"293":{"tf":2.23606797749979},"30":{"tf":1.0},"313":{"tf":1.0},"324":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.7320508075688772},"330":{"tf":1.4142135623730951},"331":{"tf":1.7320508075688772},"337":{"tf":1.4142135623730951},"339":{"tf":1.0},"34":{"tf":1.4142135623730951},"346":{"tf":1.7320508075688772},"348":{"tf":1.4142135623730951},"356":{"tf":1.4142135623730951},"368":{"tf":2.0},"379":{"tf":1.4142135623730951},"385":{"tf":2.0},"388":{"tf":2.449489742783178},"397":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"46":{"tf":1.0},"48":{"tf":1.0},"49":{"tf":1.4142135623730951},"52":{"tf":2.0},"53":{"tf":3.0},"56":{"tf":2.0},"60":{"tf":2.23606797749979},"61":{"tf":3.605551275463989},"68":{"tf":1.0},"69":{"tf":1.7320508075688772},"70":{"tf":1.4142135623730951},"71":{"tf":1.0},"78":{"tf":1.7320508075688772},"81":{"tf":1.4142135623730951},"86":{"tf":1.7320508075688772},"87":{"tf":1.0}},"m":{"df":1,"docs":{"262":{"tf":1.0}}}},"4":{".":{"0":{"df":1,"docs":{"170":{"tf":1.0}}},"2":{"df":1,"docs":{"69":{"tf":1.0}}},"4":{"5":{"df":1,"docs":{"45":{"tf":1.0}}},"df":0,"docs":{}},"7":{"df":1,"docs":{"77":{"tf":1.0}}},"9":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"0":{"4":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"381":{"tf":2.0}}}}}}},"df":2,"docs":{"381":{"tf":2.0},"382":{"tf":1.0}}},"df":1,"docs":{"382":{"tf":1.0}}},"2":{"\"":{".":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"(":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"(":{"\"":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"51":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},":":{":":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"5":{"df":1,"docs":{"43":{"tf":1.4142135623730951}}},"8":{"df":1,"docs":{"385":{"tf":1.0}}},"9":{"9":{"7":{"9":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"4":{"0":{"6":{"8":{"6":{"df":0,"docs":{},"f":{"a":{"8":{"df":0,"docs":{},"e":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"385":{"tf":1.0}}},"df":74,"docs":{"10":{"tf":1.0},"100":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"107":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.0},"123":{"tf":1.0},"132":{"tf":1.7320508075688772},"136":{"tf":1.0},"137":{"tf":1.0},"140":{"tf":1.4142135623730951},"141":{"tf":1.0},"154":{"tf":1.4142135623730951},"155":{"tf":1.4142135623730951},"156":{"tf":1.4142135623730951},"158":{"tf":1.0},"159":{"tf":1.0},"169":{"tf":1.4142135623730951},"181":{"tf":1.0},"184":{"tf":1.0},"189":{"tf":1.7320508075688772},"196":{"tf":1.7320508075688772},"198":{"tf":2.23606797749979},"204":{"tf":1.0},"216":{"tf":1.4142135623730951},"217":{"tf":1.0},"236":{"tf":2.0},"253":{"tf":2.449489742783178},"265":{"tf":1.0},"266":{"tf":1.0},"268":{"tf":1.4142135623730951},"279":{"tf":1.0},"280":{"tf":1.0},"282":{"tf":1.0},"286":{"tf":1.4142135623730951},"291":{"tf":1.4142135623730951},"292":{"tf":2.0},"293":{"tf":1.7320508075688772},"313":{"tf":1.0},"330":{"tf":1.4142135623730951},"337":{"tf":1.4142135623730951},"339":{"tf":2.0},"340":{"tf":2.6457513110645907},"346":{"tf":1.0},"347":{"tf":1.7320508075688772},"35":{"tf":1.0},"362":{"tf":1.0},"380":{"tf":1.7320508075688772},"385":{"tf":1.4142135623730951},"394":{"tf":1.0},"397":{"tf":1.4142135623730951},"402":{"tf":1.4142135623730951},"407":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"46":{"tf":1.0},"48":{"tf":1.0},"53":{"tf":1.7320508075688772},"56":{"tf":1.0},"60":{"tf":1.0},"61":{"tf":2.23606797749979},"67":{"tf":1.4142135623730951},"69":{"tf":3.872983346207417},"70":{"tf":1.4142135623730951},"71":{"tf":2.6457513110645907},"72":{"tf":2.23606797749979},"73":{"tf":1.0},"76":{"tf":2.23606797749979},"77":{"tf":2.0},"78":{"tf":1.4142135623730951},"81":{"tf":1.4142135623730951},"82":{"tf":1.0},"86":{"tf":1.4142135623730951},"89":{"tf":1.0}}},"5":{".":{"0":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}},"0":{"df":8,"docs":{"103":{"tf":1.4142135623730951},"133":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.0},"148":{"tf":1.7320508075688772},"194":{"tf":1.0},"42":{"tf":1.7320508075688772},"89":{"tf":1.0}}},"7":{"df":0,"docs":{},"u":{"8":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}},"8":{"df":1,"docs":{"42":{"tf":1.0}}},"9":{"df":1,"docs":{"43":{"tf":1.7320508075688772}}},"\\":{"df":0,"docs":{},"n":{"df":1,"docs":{"42":{"tf":1.0}}}},"df":89,"docs":{"10":{"tf":1.0},"100":{"tf":1.0},"104":{"tf":2.0},"115":{"tf":2.0},"132":{"tf":1.4142135623730951},"154":{"tf":1.0},"156":{"tf":1.4142135623730951},"157":{"tf":1.4142135623730951},"169":{"tf":1.4142135623730951},"170":{"tf":1.0},"172":{"tf":1.7320508075688772},"173":{"tf":1.0},"180":{"tf":1.0},"182":{"tf":1.0},"194":{"tf":1.0},"196":{"tf":1.0},"197":{"tf":2.8284271247461903},"198":{"tf":2.23606797749979},"218":{"tf":1.4142135623730951},"224":{"tf":1.0},"236":{"tf":1.4142135623730951},"238":{"tf":1.0},"252":{"tf":1.0},"253":{"tf":1.7320508075688772},"267":{"tf":1.4142135623730951},"268":{"tf":1.4142135623730951},"270":{"tf":1.7320508075688772},"273":{"tf":1.4142135623730951},"279":{"tf":2.23606797749979},"284":{"tf":1.7320508075688772},"286":{"tf":1.4142135623730951},"287":{"tf":1.4142135623730951},"291":{"tf":1.4142135623730951},"292":{"tf":1.4142135623730951},"293":{"tf":1.4142135623730951},"313":{"tf":1.4142135623730951},"314":{"tf":1.0},"315":{"tf":1.0},"326":{"tf":1.0},"330":{"tf":2.23606797749979},"331":{"tf":1.7320508075688772},"332":{"tf":1.0},"335":{"tf":1.4142135623730951},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"34":{"tf":2.0},"340":{"tf":2.449489742783178},"341":{"tf":1.0},"347":{"tf":1.7320508075688772},"357":{"tf":1.0},"361":{"tf":1.0},"364":{"tf":1.0},"37":{"tf":1.4142135623730951},"380":{"tf":1.4142135623730951},"384":{"tf":2.0},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"404":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"45":{"tf":1.4142135623730951},"46":{"tf":1.0},"48":{"tf":1.7320508075688772},"50":{"tf":1.0},"53":{"tf":2.6457513110645907},"55":{"tf":1.7320508075688772},"56":{"tf":1.0},"57":{"tf":2.23606797749979},"60":{"tf":1.0},"61":{"tf":2.449489742783178},"68":{"tf":1.0},"69":{"tf":2.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.7320508075688772},"76":{"tf":1.7320508075688772},"77":{"tf":1.0},"78":{"tf":1.4142135623730951},"79":{"tf":1.0},"81":{"tf":2.8284271247461903},"82":{"tf":2.23606797749979},"83":{"tf":2.449489742783178},"86":{"tf":1.0},"87":{"tf":1.4142135623730951},"88":{"tf":1.4142135623730951},"89":{"tf":1.4142135623730951},"90":{"tf":2.0},"92":{"tf":1.4142135623730951},"94":{"tf":2.449489742783178},"96":{"tf":2.0}}},"6":{".":{"4":{"4":{"df":1,"docs":{"38":{"tf":1.0}}},"df":1,"docs":{"53":{"tf":1.0}}},"5":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}},"0":{"df":3,"docs":{"43":{"tf":1.4142135623730951},"49":{"tf":2.0},"90":{"tf":1.0}}},"1":{"df":1,"docs":{"45":{"tf":1.7320508075688772}}},"4":{"df":2,"docs":{"42":{"tf":1.0},"52":{"tf":2.0}},"}":{":":{":":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"5":{"7":{",":{"2":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":60,"docs":{"10":{"tf":1.0},"100":{"tf":2.449489742783178},"102":{"tf":2.0},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"107":{"tf":2.6457513110645907},"115":{"tf":1.7320508075688772},"132":{"tf":2.0},"133":{"tf":1.0},"134":{"tf":1.0},"154":{"tf":1.4142135623730951},"155":{"tf":1.0},"159":{"tf":2.8284271247461903},"166":{"tf":1.0},"170":{"tf":1.4142135623730951},"171":{"tf":1.0},"172":{"tf":1.0},"197":{"tf":1.4142135623730951},"218":{"tf":1.4142135623730951},"236":{"tf":1.4142135623730951},"244":{"tf":1.0},"253":{"tf":1.4142135623730951},"268":{"tf":1.7320508075688772},"270":{"tf":1.4142135623730951},"271":{"tf":1.7320508075688772},"292":{"tf":1.4142135623730951},"293":{"tf":1.0},"294":{"tf":1.4142135623730951},"299":{"tf":1.0},"313":{"tf":1.4142135623730951},"324":{"tf":1.0},"326":{"tf":1.4142135623730951},"327":{"tf":1.0},"331":{"tf":1.4142135623730951},"334":{"tf":1.0},"338":{"tf":1.7320508075688772},"340":{"tf":2.6457513110645907},"347":{"tf":1.4142135623730951},"36":{"tf":1.0},"361":{"tf":1.0},"364":{"tf":1.0},"368":{"tf":1.0},"38":{"tf":1.4142135623730951},"381":{"tf":1.4142135623730951},"397":{"tf":1.4142135623730951},"42":{"tf":1.0},"45":{"tf":1.4142135623730951},"46":{"tf":1.0},"48":{"tf":1.7320508075688772},"50":{"tf":1.4142135623730951},"56":{"tf":2.8284271247461903},"57":{"tf":1.0},"60":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"73":{"tf":1.0},"76":{"tf":1.0},"77":{"tf":1.7320508075688772},"80":{"tf":1.0},"83":{"tf":1.4142135623730951},"91":{"tf":1.0}}},"7":{"5":{"4":{"df":1,"docs":{"52":{"tf":1.0}}},"df":1,"docs":{"283":{"tf":1.4142135623730951}}},"6":{"df":1,"docs":{"42":{"tf":1.7320508075688772}}},"8":{"7":{"8":{"df":1,"docs":{"376":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":48,"docs":{"10":{"tf":1.0},"100":{"tf":1.0},"106":{"tf":2.0},"113":{"tf":2.6457513110645907},"114":{"tf":2.8284271247461903},"115":{"tf":3.4641016151377544},"116":{"tf":1.4142135623730951},"117":{"tf":2.0},"118":{"tf":2.449489742783178},"119":{"tf":3.3166247903554},"120":{"tf":2.23606797749979},"121":{"tf":1.7320508075688772},"123":{"tf":2.6457513110645907},"125":{"tf":2.449489742783178},"133":{"tf":1.7320508075688772},"154":{"tf":1.0},"159":{"tf":2.23606797749979},"170":{"tf":1.4142135623730951},"182":{"tf":1.0},"197":{"tf":1.4142135623730951},"198":{"tf":1.4142135623730951},"209":{"tf":2.0},"211":{"tf":1.0},"213":{"tf":1.0},"218":{"tf":1.4142135623730951},"237":{"tf":1.4142135623730951},"253":{"tf":1.0},"261":{"tf":1.4142135623730951},"271":{"tf":1.7320508075688772},"272":{"tf":1.0},"292":{"tf":1.4142135623730951},"294":{"tf":1.4142135623730951},"309":{"tf":1.0},"314":{"tf":1.4142135623730951},"319":{"tf":1.4142135623730951},"331":{"tf":1.4142135623730951},"338":{"tf":1.0},"347":{"tf":1.4142135623730951},"381":{"tf":1.4142135623730951},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"41":{"tf":1.0},"52":{"tf":1.4142135623730951},"68":{"tf":1.0},"76":{"tf":1.7320508075688772},"83":{"tf":1.7320508075688772},"92":{"tf":1.0},"95":{"tf":1.0}}},"8":{".":{"0":{"df":1,"docs":{"408":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"0":{"0":{"df":1,"docs":{"49":{"tf":1.0}}},"df":2,"docs":{"283":{"tf":1.0},"376":{"tf":1.4142135623730951}}},"3":{"df":1,"docs":{"41":{"tf":1.0}}},"df":53,"docs":{"10":{"tf":1.0},"116":{"tf":1.4142135623730951},"130":{"tf":2.23606797749979},"131":{"tf":1.4142135623730951},"132":{"tf":2.6457513110645907},"133":{"tf":3.1622776601683795},"134":{"tf":1.4142135623730951},"135":{"tf":1.4142135623730951},"136":{"tf":1.4142135623730951},"137":{"tf":1.7320508075688772},"138":{"tf":3.1622776601683795},"139":{"tf":3.1622776601683795},"140":{"tf":2.8284271247461903},"143":{"tf":1.0},"145":{"tf":1.4142135623730951},"146":{"tf":1.4142135623730951},"147":{"tf":1.4142135623730951},"148":{"tf":2.6457513110645907},"150":{"tf":1.0},"159":{"tf":1.4142135623730951},"166":{"tf":1.0},"170":{"tf":1.4142135623730951},"197":{"tf":1.7320508075688772},"200":{"tf":1.7320508075688772},"204":{"tf":1.0},"211":{"tf":1.0},"219":{"tf":1.7320508075688772},"237":{"tf":1.4142135623730951},"265":{"tf":1.4142135623730951},"272":{"tf":1.7320508075688772},"274":{"tf":1.0},"292":{"tf":1.4142135623730951},"294":{"tf":1.7320508075688772},"296":{"tf":1.4142135623730951},"312":{"tf":1.4142135623730951},"314":{"tf":1.4142135623730951},"332":{"tf":1.7320508075688772},"339":{"tf":1.7320508075688772},"34":{"tf":1.0},"347":{"tf":1.4142135623730951},"368":{"tf":1.0},"377":{"tf":1.0},"381":{"tf":1.4142135623730951},"382":{"tf":1.0},"397":{"tf":1.4142135623730951},"52":{"tf":2.0},"53":{"tf":1.0},"68":{"tf":1.0},"72":{"tf":1.0},"76":{"tf":1.4142135623730951},"77":{"tf":2.23606797749979},"78":{"tf":1.0},"87":{"tf":1.4142135623730951}}},"9":{"1":{"5":{",":{"7":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"8":{"_":{"2":{"2":{"2":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"9":{"df":2,"docs":{"154":{"tf":1.7320508075688772},"45":{"tf":1.4142135623730951}}},"df":42,"docs":{"10":{"tf":1.0},"117":{"tf":1.4142135623730951},"134":{"tf":1.4142135623730951},"154":{"tf":2.449489742783178},"155":{"tf":2.23606797749979},"156":{"tf":2.0},"157":{"tf":1.4142135623730951},"158":{"tf":1.0},"159":{"tf":5.196152422706632},"164":{"tf":1.4142135623730951},"166":{"tf":1.0},"171":{"tf":1.4142135623730951},"172":{"tf":1.4142135623730951},"189":{"tf":1.4142135623730951},"196":{"tf":1.0},"200":{"tf":2.0},"211":{"tf":1.0},"219":{"tf":2.6457513110645907},"220":{"tf":1.4142135623730951},"237":{"tf":1.4142135623730951},"272":{"tf":1.4142135623730951},"273":{"tf":1.7320508075688772},"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"294":{"tf":1.0},"295":{"tf":1.7320508075688772},"312":{"tf":1.0},"314":{"tf":1.4142135623730951},"315":{"tf":1.0},"321":{"tf":1.0},"332":{"tf":1.4142135623730951},"348":{"tf":1.4142135623730951},"36":{"tf":1.0},"382":{"tf":1.7320508075688772},"384":{"tf":1.4142135623730951},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"52":{"tf":1.0},"53":{"tf":1.0},"61":{"tf":1.0},"77":{"tf":1.0},"88":{"tf":1.4142135623730951}}},"_":{"df":9,"docs":{"106":{"tf":2.0},"107":{"tf":1.4142135623730951},"326":{"tf":1.7320508075688772},"330":{"tf":1.0},"339":{"tf":3.7416573867739413},"397":{"tf":1.0},"45":{"tf":1.0},"52":{"tf":1.0},"77":{"tf":1.0}},"i":{"df":1,"docs":{"407":{"tf":2.0}}},"s":{"df":1,"docs":{"339":{"tf":1.0}}},"x":{"df":1,"docs":{"339":{"tf":1.4142135623730951}}}},"a":{".":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"279":{"tf":1.0}}}}}},"df":0,"docs":{}},"[":{"1":{".":{".":{"3":{"df":1,"docs":{"78":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"332":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"1":{"tf":1.0}}}}}},"b":{"c":{"a":{"b":{"c":{"a":{"b":{"c":{"df":1,"docs":{"17":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"d":{"df":1,"docs":{"184":{"tf":1.0}},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"j":{"df":0,"docs":{},"k":{"df":0,"docs":{},"l":{"df":0,"docs":{},"m":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"q":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"v":{"df":0,"docs":{},"w":{"df":0,"docs":{},"x":{"df":0,"docs":{},"y":{"df":0,"docs":{},"z":{"0":{"1":{"2":{"3":{"4":{"5":{"df":1,"docs":{"254":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"347":{"tf":1.0}},"i":{"df":1,"docs":{"347":{"tf":2.23606797749979}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"153":{"tf":1.7320508075688772}}}},"v":{"df":1,"docs":{"58":{"tf":1.0}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"101":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":0,"docs":{},"t":{"df":3,"docs":{"247":{"tf":1.0},"248":{"tf":1.0},"393":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"c":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.7320508075688772}}}},"s":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"69":{"tf":1.0}}}}}}}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":3,"docs":{"81":{"tf":1.0},"83":{"tf":1.7320508075688772},"86":{"tf":2.0}}}},"u":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"198":{"tf":1.0}}}},"df":0,"docs":{}}}},"d":{"d":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":2,"docs":{"139":{"tf":1.0},"354":{"tf":1.0}}}}}}},",":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":1,"docs":{"309":{"tf":1.0}}}}}}}},"/":{"a":{"d":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"260":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"260":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"354":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"h":{"df":1,"docs":{"354":{"tf":1.0}}}}},"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":4,"docs":{"252":{"tf":2.8284271247461903},"260":{"tf":1.0},"261":{"tf":5.196152422706632},"364":{"tf":1.7320508075688772}},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":2.0}},"s":{":":{"1":{":":{"5":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"261":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"v":{"1":{"df":1,"docs":{"235":{"tf":1.0}}},"2":{"df":1,"docs":{"235":{"tf":1.0}}},"3":{"df":1,"docs":{"235":{"tf":1.4142135623730951}}},"4":{"df":1,"docs":{"235":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"318":{"tf":2.449489742783178},"319":{"tf":1.0},"322":{"tf":1.0}}}}},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":6,"docs":{"113":{"tf":1.0},"114":{"tf":3.4641016151377544},"115":{"tf":2.6457513110645907},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"121":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"(":{"2":{"df":1,"docs":{"198":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":5,"docs":{"194":{"tf":1.4142135623730951},"198":{"tf":1.7320508075688772},"205":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.0}}}}}},"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":12,"docs":{"139":{"tf":3.0},"150":{"tf":1.4142135623730951},"198":{"tf":1.4142135623730951},"205":{"tf":1.7320508075688772},"260":{"tf":2.23606797749979},"261":{"tf":2.6457513110645907},"309":{"tf":2.0},"347":{"tf":1.7320508075688772},"354":{"tf":4.123105625617661},"396":{"tf":1.0},"406":{"tf":1.0},"408":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":2.0}},"s":{":":{"2":{":":{"5":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"196":{"tf":2.449489742783178},"208":{"tf":1.0},"209":{"tf":2.0},"260":{"tf":2.8284271247461903},"261":{"tf":3.872983346207417}}}},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"100":{"tf":1.4142135623730951}}}}}}},"df":2,"docs":{"197":{"tf":1.4142135623730951},"48":{"tf":1.4142135623730951}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":1,"docs":{"227":{"tf":1.0}}}}},"v":{"a":{"df":0,"docs":{},"n":{"c":{"df":16,"docs":{"346":{"tf":1.7320508075688772},"347":{"tf":2.8284271247461903},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"353":{"tf":1.7320508075688772},"354":{"tf":1.4142135623730951},"355":{"tf":3.1622776601683795},"356":{"tf":2.0},"357":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":2.0},"365":{"tf":1.7320508075688772},"368":{"tf":1.0},"370":{"tf":2.6457513110645907}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.0}}}}}}}}},"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"61":{"tf":2.449489742783178}}}}},"df":1,"docs":{"327":{"tf":2.449489742783178}},"e":{"=":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.0}}}}},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":2,"docs":{"175":{"tf":1.0},"176":{"tf":2.8284271247461903}}}}}}},"l":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{},"v":{"df":1,"docs":{"377":{"tf":1.0}}}},"l":{"df":0,"docs":{},"o":{"c":{":":{":":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{":":{":":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{"<":{"df":0,"docs":{},"t":{",":{"a":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"69":{"tf":1.0}}},"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"73":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"i":{"df":2,"docs":{"176":{"tf":1.0},"283":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"w":{"a":{"df":0,"docs":{},"y":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":1,"docs":{"85":{"tf":2.0}}}}}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":1,"docs":{"150":{"tf":1.0}}}}},"n":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"y":{"df":0,"docs":{},"z":{"df":2,"docs":{"20":{"tf":1.0},"409":{"tf":2.0}}}}}},"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"211":{"tf":1.0}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"l":{":":{":":{"b":{"a":{"b":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"355":{"tf":3.4641016151377544}}}},"n":{"df":1,"docs":{"192":{"tf":1.0}},"o":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"74":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"51":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"72":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"n":{"c":{"df":2,"docs":{"107":{"tf":1.4142135623730951},"190":{"tf":1.0}}},"df":0,"docs":{}}}}},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":2,"docs":{"196":{"tf":1.7320508075688772},"197":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":2,"docs":{"54":{"tf":2.0},"55":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"140":{"tf":1.7320508075688772}}}}}}},"p":{"a":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"255":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"df":40,"docs":{"10":{"tf":1.0},"108":{"tf":1.4142135623730951},"114":{"tf":1.0},"115":{"tf":2.23606797749979},"121":{"tf":1.0},"134":{"tf":1.0},"138":{"tf":1.0},"144":{"tf":1.0},"148":{"tf":1.4142135623730951},"150":{"tf":1.0},"163":{"tf":1.0},"164":{"tf":1.4142135623730951},"19":{"tf":1.0},"196":{"tf":1.0},"209":{"tf":1.0},"210":{"tf":1.0},"211":{"tf":1.0},"221":{"tf":1.0},"240":{"tf":1.0},"252":{"tf":1.0},"253":{"tf":2.8284271247461903},"254":{"tf":2.0},"256":{"tf":1.0},"265":{"tf":1.0},"274":{"tf":1.0},"281":{"tf":1.0},"283":{"tf":1.4142135623730951},"290":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.7320508075688772},"316":{"tf":1.0},"345":{"tf":1.0},"353":{"tf":1.0},"359":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"385":{"tf":1.7320508075688772},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"77":{"tf":1.7320508075688772},"92":{"tf":1.0}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"x":{"df":1,"docs":{"198":{"tf":1.0}}}}},"df":0,"docs":{}},"t":{"df":1,"docs":{"117":{"tf":1.0}}}},"l":{"df":2,"docs":{"150":{"tf":1.4142135623730951},"34":{"tf":1.7320508075688772}},"i":{"c":{"df":5,"docs":{"110":{"tf":1.0},"212":{"tf":1.0},"260":{"tf":1.0},"347":{"tf":1.0},"376":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":2,"docs":{"321":{"tf":2.8284271247461903},"322":{"tf":2.8284271247461903}}},"x":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":1,"docs":{"408":{"tf":1.0}}}}}}}},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"53":{"tf":1.0}}}}}},"r":{"c":{"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"t":{"df":4,"docs":{"299":{"tf":2.23606797749979},"300":{"tf":1.4142135623730951},"302":{"tf":1.0},"305":{"tf":1.0}}}},"df":1,"docs":{"385":{"tf":2.0}},"h":{"df":1,"docs":{"52":{"tf":1.0}}}},"df":0,"docs":{},"e":{"a":{"df":5,"docs":{"408":{"tf":1.4142135623730951},"87":{"tf":1.7320508075688772},"89":{"tf":1.7320508075688772},"90":{"tf":1.7320508075688772},"92":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"g":{"df":6,"docs":{"213":{"tf":1.7320508075688772},"214":{"tf":1.4142135623730951},"218":{"tf":1.7320508075688772},"219":{"tf":1.7320508075688772},"244":{"tf":3.0},"364":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"214":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"[":{"0":{"df":1,"docs":{"215":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":3,"docs":{"219":{"tf":1.0},"229":{"tf":1.4142135623730951},"230":{"tf":1.4142135623730951}}}}}}}},"m":{"df":5,"docs":{"102":{"tf":1.0},"355":{"tf":1.0},"361":{"tf":1.0},"42":{"tf":1.0},"60":{"tf":1.4142135623730951}}},"r":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"53":{"tf":1.7320508075688772}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"t":{"df":1,"docs":{"253":{"tf":3.7416573867739413}},"h":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.0}}}}},"i":{"c":{"df":0,"docs":{},"l":{"df":1,"docs":{"177":{"tf":1.0}}}},"df":0,"docs":{}}}},"s":{"_":{"b":{"df":0,"docs":{},"y":{"df":0,"docs":{},"t":{"df":2,"docs":{"379":{"tf":1.0},"76":{"tf":1.0}}}}},"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"321":{"tf":1.7320508075688772}}}}}},"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"i":{"df":5,"docs":{"143":{"tf":1.0},"337":{"tf":1.0},"397":{"tf":1.0},"52":{"tf":1.0},"77":{"tf":1.0}}}}},"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":1,"docs":{"112":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"!":{"(":{"df":0,"docs":{},"r":{"#":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"h":{"(":{"\"":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":1,"docs":{"394":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":1,"docs":{"201":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"!":{"(":{"5":{"df":1,"docs":{"270":{"tf":1.0}}},"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"(":{"2":{"df":1,"docs":{"198":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"c":{"df":1,"docs":{"78":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":9,"docs":{"196":{"tf":1.0},"198":{"tf":2.8284271247461903},"199":{"tf":1.0},"201":{"tf":1.0},"252":{"tf":1.0},"273":{"tf":1.0},"316":{"tf":1.0},"399":{"tf":1.0},"400":{"tf":1.0}}}},"n":{"df":2,"docs":{"198":{"tf":2.0},"199":{"tf":1.0}}}},"df":7,"docs":{"197":{"tf":3.0},"198":{"tf":2.0},"199":{"tf":1.4142135623730951},"316":{"tf":1.0},"322":{"tf":1.0},"347":{"tf":1.4142135623730951},"385":{"tf":1.4142135623730951}}}}},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"48":{"tf":2.0}}}}},"o":{"c":{"df":0,"docs":{},"i":{"df":2,"docs":{"239":{"tf":1.0},"95":{"tf":1.0}}}},"df":0,"docs":{}}},"t":{".":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"y":{"df":0,"docs":{},"n":{"c":{"df":1,"docs":{"392":{"tf":1.0}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"299":{"tf":1.7320508075688772}}}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":2,"docs":{"366":{"tf":1.0},"369":{"tf":1.0}}}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"53":{"tf":1.0}}}}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":11,"docs":{"196":{"tf":2.449489742783178},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"199":{"tf":2.23606797749979},"200":{"tf":2.6457513110645907},"201":{"tf":1.0},"204":{"tf":1.7320508075688772},"205":{"tf":2.0},"206":{"tf":1.7320508075688772},"208":{"tf":1.4142135623730951},"209":{"tf":2.449489742783178}}}}}},"v":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"177":{"tf":1.0}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"309":{"tf":3.1622776601683795}},"e":{"d":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"309":{"tf":2.8284271247461903}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"392":{"tf":1.0}}}}},"df":0,"docs":{}},"x":{"df":0,"docs":{},"i":{"df":1,"docs":{"338":{"tf":1.4142135623730951}}}},"y":{"df":1,"docs":{"150":{"tf":1.0}}}},"b":{"'":{"a":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"3":{"5":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"a":{"9":{"a":{"1":{"5":{"6":{"df":0,"docs":{},"f":{"7":{"4":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},">":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"189":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"a":{"b":{"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":1.0}}},"y":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"355":{"tf":2.8284271247461903}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"c":{"df":0,"docs":{},"k":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"116":{"tf":1.7320508075688772}},"e":{":":{":":{"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"327":{"tf":1.0}}},"df":0,"docs":{}}}}}},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":3,"docs":{"154":{"tf":1.4142135623730951},"43":{"tf":1.0},"53":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"y":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"112":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"n":{"a":{"df":1,"docs":{"34":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"r":{"df":1,"docs":{"361":{"tf":1.4142135623730951}}}},"df":14,"docs":{"10":{"tf":1.0},"113":{"tf":1.7320508075688772},"142":{"tf":1.0},"183":{"tf":2.449489742783178},"189":{"tf":1.4142135623730951},"24":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"279":{"tf":3.0},"280":{"tf":1.0},"284":{"tf":1.7320508075688772},"286":{"tf":3.3166247903554},"338":{"tf":1.4142135623730951},"397":{"tf":2.0},"52":{"tf":1.0}},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"393":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"277":{"tf":1.0}}}}},"h":{"a":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"154":{"tf":1.0}}}}}}},"df":0,"docs":{}},"n":{"c":{"df":0,"docs":{},"h":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"c":{"df":0,"docs":{},"h":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":1,"docs":{"247":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"t":{"a":{"df":2,"docs":{"414":{"tf":3.7416573867739413},"416":{"tf":1.0}}},"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"299":{"tf":1.0}}}}}}}},"i":{"df":0,"docs":{},"g":{"df":3,"docs":{"42":{"tf":1.4142135623730951},"43":{"tf":1.0},"45":{"tf":1.0}}},"n":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":7,"docs":{"110":{"tf":1.0},"212":{"tf":1.0},"260":{"tf":1.0},"262":{"tf":1.0},"347":{"tf":1.0},"376":{"tf":1.0},"40":{"tf":1.0}}}}},"d":{"df":3,"docs":{"106":{"tf":1.0},"376":{"tf":2.0},"396":{"tf":1.0}}},"df":1,"docs":{"262":{"tf":1.0}}},"t":{"a":{"df":0,"docs":{},"n":{"d":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}}},"x":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}}}}}},"l":{"a":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"84":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"56":{"tf":1.0}}}},"df":0,"docs":{},"g":{"df":2,"docs":{"316":{"tf":1.7320508075688772},"322":{"tf":1.4142135623730951}}}},"u":{"df":0,"docs":{},"e":{"df":5,"docs":{"145":{"tf":1.0},"146":{"tf":1.7320508075688772},"148":{"tf":2.449489742783178},"234":{"tf":1.0},"338":{"tf":1.0}}}}},"o":{"d":{"df":0,"docs":{},"i":{"df":3,"docs":{"224":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}}}},"df":0,"docs":{},"g":{"df":1,"docs":{"227":{"tf":1.0}}},"o":{"df":0,"docs":{},"k":{".":{"c":{"df":0,"docs":{},"s":{".":{"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"u":{"df":1,"docs":{"0":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":1,"docs":{"0":{"tf":1.4142135623730951}}},"l":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":6,"docs":{"242":{"tf":1.0},"394":{"tf":1.7320508075688772},"52":{"tf":1.0},"60":{"tf":1.7320508075688772},"69":{"tf":1.0},"86":{"tf":1.7320508075688772}},"e":{"a":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":4,"docs":{"283":{"tf":2.0},"284":{"tf":1.4142135623730951},"286":{"tf":1.0},"287":{"tf":1.0}}}}}},"df":5,"docs":{"132":{"tf":1.0},"166":{"tf":1.0},"182":{"tf":1.0},"283":{"tf":2.6457513110645907},"74":{"tf":1.4142135623730951}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}}}},"s":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"236":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}},"u":{"df":0,"docs":{},"n":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"y":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"141":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}},"df":7,"docs":{"154":{"tf":1.0},"174":{"tf":1.0},"178":{"tf":1.0},"217":{"tf":1.0},"219":{"tf":1.0},"311":{"tf":1.0},"53":{"tf":1.0}}},"df":0,"docs":{}}},"x":{"<":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"313":{"tf":1.0}}}}}}}},"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":8,"docs":{"159":{"tf":2.23606797749979},"220":{"tf":1.7320508075688772},"313":{"tf":1.0},"314":{"tf":1.0},"317":{"tf":1.0},"321":{"tf":1.0},"360":{"tf":1.0},"362":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"271":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"320":{"tf":1.4142135623730951}}}}},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}}},"t":{"df":14,"docs":{"265":{"tf":1.0},"266":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"268":{"tf":3.0},"269":{"tf":1.4142135623730951},"271":{"tf":2.449489742783178},"272":{"tf":2.23606797749979},"276":{"tf":1.0},"277":{"tf":1.0},"279":{"tf":2.0},"282":{"tf":2.23606797749979},"288":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.0}},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"313":{"tf":1.0}}},"df":0,"docs":{}}}}}}}}}},"df":10,"docs":{"266":{"tf":2.0},"267":{"tf":2.8284271247461903},"268":{"tf":3.4641016151377544},"276":{"tf":1.0},"313":{"tf":1.0},"317":{"tf":1.4142135623730951},"320":{"tf":1.4142135623730951},"321":{"tf":1.0},"385":{"tf":1.0},"393":{"tf":1.0}}}},"r":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"h":{".":{"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"287":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":2,"docs":{"287":{"tf":5.0990195135927845},"60":{"tf":1.0}}}},"df":0,"docs":{}}},"df":3,"docs":{"377":{"tf":1.0},"397":{"tf":1.7320508075688772},"411":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"k":{"df":4,"docs":{"361":{"tf":1.4142135623730951},"392":{"tf":1.0},"44":{"tf":1.4142135623730951},"61":{"tf":3.1622776601683795}},"f":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"401":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"[":{"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":1.4142135623730951}}}},"df":2,"docs":{"154":{"tf":1.0},"247":{"tf":1.7320508075688772}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"377":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"g":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"197":{"tf":1.0},"199":{"tf":1.0},"200":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"197":{"tf":1.0},"199":{"tf":1.0},"200":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"198":{"tf":1.4142135623730951}}},"i":{"df":0,"docs":{},"l":{"d":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"_":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":2,"docs":{"81":{"tf":1.4142135623730951},"82":{"tf":1.7320508075688772}}}}},"df":16,"docs":{"15":{"tf":1.0},"154":{"tf":1.0},"208":{"tf":1.0},"219":{"tf":2.0},"221":{"tf":1.0},"244":{"tf":1.4142135623730951},"250":{"tf":2.23606797749979},"260":{"tf":1.4142135623730951},"261":{"tf":2.23606797749979},"27":{"tf":2.6457513110645907},"28":{"tf":1.4142135623730951},"29":{"tf":1.0},"370":{"tf":1.0},"385":{"tf":1.4142135623730951},"40":{"tf":2.449489742783178},"407":{"tf":1.0}},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"149":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"312":{"tf":1.4142135623730951},"313":{"tf":1.0},"314":{"tf":2.8284271247461903}}}}}}},"y":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":1,"docs":{"142":{"tf":1.4142135623730951}},"s":{"(":{"9":{"5":{".":{".":{"1":{"0":{"3":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"c":{"a":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"377":{"tf":1.0}}}},"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"61":{"tf":1.0}}}}},"df":0,"docs":{}},"l":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"72":{"tf":2.0}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"l":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"c":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":6,"docs":{"100":{"tf":1.4142135623730951},"158":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":2.0},"347":{"tf":1.0},"355":{"tf":1.0}}}},"n":{"'":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}},"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"df":2,"docs":{"197":{"tf":3.0},"94":{"tf":2.6457513110645907}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"t":{"df":6,"docs":{"101":{"tf":1.4142135623730951},"162":{"tf":1.0},"283":{"tf":1.4142135623730951},"362":{"tf":1.0},"50":{"tf":1.4142135623730951},"69":{"tf":1.4142135623730951}}}},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":7,"docs":{"112":{"tf":1.0},"209":{"tf":1.4142135623730951},"258":{"tf":1.4142135623730951},"260":{"tf":1.4142135623730951},"261":{"tf":2.449489742783178},"27":{"tf":1.0},"40":{"tf":3.0}}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":15,"docs":{"110":{"tf":2.0},"112":{"tf":1.0},"122":{"tf":2.23606797749979},"153":{"tf":1.0},"209":{"tf":1.4142135623730951},"250":{"tf":2.23606797749979},"255":{"tf":2.6457513110645907},"257":{"tf":1.0},"26":{"tf":2.449489742783178},"260":{"tf":2.0},"261":{"tf":2.6457513110645907},"32":{"tf":1.4142135623730951},"370":{"tf":1.7320508075688772},"40":{"tf":2.449489742783178},"410":{"tf":1.4142135623730951}}}}}}},"/":{"b":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":1,"docs":{"262":{"tf":1.0}}}}},"df":0,"docs":{}}}},"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":1,"docs":{"254":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"261":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":2,"docs":{"260":{"tf":1.0},"261":{"tf":2.23606797749979}}}}},"df":72,"docs":{"10":{"tf":1.4142135623730951},"109":{"tf":1.7320508075688772},"110":{"tf":3.4641016151377544},"113":{"tf":1.0},"12":{"tf":1.0},"122":{"tf":1.0},"154":{"tf":1.7320508075688772},"196":{"tf":3.0},"201":{"tf":1.0},"202":{"tf":2.8284271247461903},"203":{"tf":1.0},"204":{"tf":1.4142135623730951},"205":{"tf":2.23606797749979},"206":{"tf":2.23606797749979},"208":{"tf":2.23606797749979},"209":{"tf":2.6457513110645907},"212":{"tf":2.449489742783178},"221":{"tf":1.0},"227":{"tf":1.4142135623730951},"229":{"tf":1.0},"230":{"tf":1.4142135623730951},"24":{"tf":1.0},"248":{"tf":1.0},"249":{"tf":2.0},"25":{"tf":3.605551275463989},"250":{"tf":3.4641016151377544},"251":{"tf":1.0},"252":{"tf":2.449489742783178},"253":{"tf":1.4142135623730951},"254":{"tf":1.7320508075688772},"255":{"tf":1.7320508075688772},"256":{"tf":1.4142135623730951},"257":{"tf":1.0},"258":{"tf":2.23606797749979},"259":{"tf":1.4142135623730951},"26":{"tf":4.47213595499958},"260":{"tf":2.23606797749979},"261":{"tf":4.123105625617661},"262":{"tf":2.23606797749979},"263":{"tf":3.1622776601683795},"264":{"tf":1.0},"27":{"tf":5.5677643628300215},"28":{"tf":1.4142135623730951},"29":{"tf":2.23606797749979},"30":{"tf":1.0},"32":{"tf":2.8284271247461903},"370":{"tf":2.23606797749979},"376":{"tf":1.7320508075688772},"377":{"tf":1.0},"379":{"tf":1.0},"38":{"tf":1.4142135623730951},"380":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":2.449489742783178},"388":{"tf":1.4142135623730951},"4":{"tf":1.0},"40":{"tf":5.5677643628300215},"406":{"tf":2.0},"407":{"tf":2.23606797749979},"408":{"tf":1.7320508075688772},"41":{"tf":2.23606797749979},"410":{"tf":1.4142135623730951},"416":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"48":{"tf":1.4142135623730951},"53":{"tf":1.0},"55":{"tf":1.0},"61":{"tf":1.0},"86":{"tf":1.0},"87":{"tf":1.4142135623730951}}}}},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"226":{"tf":1.0}}}}}}}}},"df":3,"docs":{"335":{"tf":1.0},"340":{"tf":1.0},"54":{"tf":1.0}}}},"t":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"106":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"255":{"tf":1.0}}}}},"d":{"df":9,"docs":{"196":{"tf":1.0},"21":{"tf":2.0},"212":{"tf":1.0},"26":{"tf":1.0},"260":{"tf":1.0},"29":{"tf":1.0},"32":{"tf":1.0},"376":{"tf":1.0},"416":{"tf":1.0}}},"df":30,"docs":{"10":{"tf":1.0},"142":{"tf":1.0},"15":{"tf":2.23606797749979},"154":{"tf":1.4142135623730951},"159":{"tf":1.0},"16":{"tf":1.0},"172":{"tf":1.4142135623730951},"198":{"tf":1.0},"2":{"tf":1.0},"227":{"tf":1.0},"24":{"tf":1.4142135623730951},"247":{"tf":2.0},"265":{"tf":1.0},"276":{"tf":1.0},"277":{"tf":1.0},"279":{"tf":2.449489742783178},"280":{"tf":1.7320508075688772},"284":{"tf":1.7320508075688772},"337":{"tf":1.0},"346":{"tf":1.0},"347":{"tf":2.8284271247461903},"364":{"tf":1.4142135623730951},"367":{"tf":1.0},"376":{"tf":1.0},"386":{"tf":1.0},"56":{"tf":1.0},"61":{"tf":2.0},"69":{"tf":1.0},"90":{"tf":1.0},"93":{"tf":1.4142135623730951}},"e":{"b":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"411":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"303":{"tf":1.0}}}},"df":1,"docs":{"300":{"tf":1.0}}}}},"f":{"df":0,"docs":{},"g":{"(":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"208":{"tf":2.23606797749979},"209":{"tf":1.0}}}}}}},"df":2,"docs":{"208":{"tf":1.4142135623730951},"40":{"tf":1.4142135623730951}}}},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":4,"docs":{"196":{"tf":1.4142135623730951},"338":{"tf":1.0},"50":{"tf":1.7320508075688772},"73":{"tf":1.4142135623730951}},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"100":{"tf":1.0},"338":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"337":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":11,"docs":{"140":{"tf":1.4142135623730951},"141":{"tf":1.0},"142":{"tf":2.0},"159":{"tf":1.0},"167":{"tf":1.0},"169":{"tf":1.7320508075688772},"172":{"tf":1.4142135623730951},"337":{"tf":1.7320508075688772},"52":{"tf":2.449489742783178},"55":{"tf":1.0},"69":{"tf":1.0}}}},"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"k":{"df":3,"docs":{"27":{"tf":2.6457513110645907},"385":{"tf":1.4142135623730951},"407":{"tf":1.0}},"e":{"d":{"_":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"r":{"df":2,"docs":{"132":{"tf":1.0},"182":{"tf":1.0}}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"113":{"tf":1.0}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"287":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"255":{"tf":1.0}}}}}}},"i":{"df":1,"docs":{"414":{"tf":1.0}},"r":{"c":{"df":0,"docs":{},"l":{"df":2,"docs":{"408":{"tf":1.4142135623730951},"99":{"tf":1.0}}}},"df":0,"docs":{}},"s":{"c":{"df":0,"docs":{},"o":{"df":1,"docs":{"414":{"tf":1.0}}}},"df":0,"docs":{}}},"l":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"15":{"tf":1.0},"24":{"tf":1.0}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"178":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"77":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"i":{"df":1,"docs":{"1":{"tf":1.0}},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":2.8284271247461903}}},"y":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"#":{"a":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"’":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":10,"docs":{"178":{"tf":1.4142135623730951},"218":{"tf":2.0},"244":{"tf":2.0},"279":{"tf":1.0},"280":{"tf":1.0},"29":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":1.4142135623730951},"402":{"tf":4.0},"69":{"tf":2.449489742783178}}}},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":4,"docs":{"157":{"tf":1.0},"248":{"tf":1.0},"293":{"tf":1.0},"365":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"365":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"365":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"364":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"m":{"d":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"16":{"tf":1.0}}}}},"df":3,"docs":{"17":{"tf":1.0},"21":{"tf":1.0},"24":{"tf":1.4142135623730951}}},"df":0,"docs":{},"p":{"_":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"180":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":3,"docs":{"401":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"45":{"tf":1.0}}}},"o":{"d":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"158":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"339":{"tf":1.0},"379":{"tf":1.0},"409":{"tf":1.0}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":2.0}},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.0}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"r":{"c":{"df":1,"docs":{"139":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":4,"docs":{"139":{"tf":1.0},"269":{"tf":1.0},"274":{"tf":1.4142135623730951},"321":{"tf":1.0}}}}}},"df":0,"docs":{}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"176":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":1,"docs":{"102":{"tf":1.4142135623730951}}}}}}},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"103":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"r":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"103":{"tf":1.0}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{":":{":":{"a":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":4,"docs":{"102":{"tf":1.7320508075688772},"103":{"tf":1.7320508075688772},"104":{"tf":1.0},"107":{"tf":1.0}}}},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":5,"docs":{"213":{"tf":1.0},"214":{"tf":1.7320508075688772},"241":{"tf":1.4142135623730951},"242":{"tf":1.0},"245":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":13,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.0},"140":{"tf":2.0},"145":{"tf":1.0},"146":{"tf":1.0},"147":{"tf":1.0},"148":{"tf":1.7320508075688772}}}}}},"n":{"df":0,"docs":{},"o":{"df":2,"docs":{"139":{"tf":1.4142135623730951},"146":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"141":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"s":{"df":0,"docs":{},"v":{"df":1,"docs":{"338":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"g":{"b":{"df":1,"docs":{"338":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":3,"docs":{"327":{"tf":1.0},"338":{"tf":1.0},"84":{"tf":1.4142135623730951}}}}},"m":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"1":{"tf":1.0},"25":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"417":{"tf":1.0},"58":{"tf":1.4142135623730951}}}}},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"209":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":27,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.449489742783178},"140":{"tf":2.0},"141":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":1.7320508075688772},"209":{"tf":2.23606797749979},"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"51":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":2.0},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.605551275463989},"61":{"tf":3.0}}}}},"p":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"270":{"tf":1.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":16,"docs":{"256":{"tf":1.0},"261":{"tf":2.8284271247461903},"262":{"tf":1.0},"27":{"tf":1.4142135623730951},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.4142135623730951},"388":{"tf":1.0},"40":{"tf":3.0},"407":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0},"86":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"n":{"df":5,"docs":{"312":{"tf":1.7320508075688772},"313":{"tf":1.7320508075688772},"314":{"tf":1.0},"406":{"tf":1.0},"408":{"tf":1.0}}}},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.0}}}}}},"n":{"a":{"df":0,"docs":{},"n":{"df":1,"docs":{"247":{"tf":1.0}}}},"c":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"139":{"tf":1.0}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"56":{"tf":1.0},"60":{"tf":1.4142135623730951},"61":{"tf":2.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":11,"docs":{"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":1.7320508075688772},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.3166247903554},"61":{"tf":2.23606797749979}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"51":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":1,"docs":{"48":{"tf":1.0}},"e":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"y":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":8,"docs":{"291":{"tf":1.0},"292":{"tf":1.0},"293":{"tf":2.0},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.449489742783178}}}}}},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"292":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"293":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.4142135623730951}}}}},"df":4,"docs":{"268":{"tf":5.656854249492381},"279":{"tf":2.0},"284":{"tf":1.7320508075688772},"286":{"tf":2.449489742783178}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"224":{"tf":1.0}}}}}}}},":":{":":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"d":{"df":5,"docs":{"219":{"tf":2.449489742783178},"220":{"tf":1.7320508075688772},"221":{"tf":1.0},"243":{"tf":1.0},"244":{"tf":3.7416573867739413}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":2,"docs":{"218":{"tf":1.7320508075688772},"385":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"x":{"df":1,"docs":{"107":{"tf":1.0}}}},"df":0,"docs":{}}},"df":6,"docs":{"218":{"tf":4.242640687119285},"219":{"tf":2.0},"220":{"tf":1.4142135623730951},"221":{"tf":2.0},"227":{"tf":1.4142135623730951},"244":{"tf":2.23606797749979}}}}},"n":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":2,"docs":{"376":{"tf":2.23606797749979},"377":{"tf":1.0}}}},"df":0,"docs":{}}},"s":{"(":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"268":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"d":{"df":3,"docs":{"407":{"tf":1.0},"408":{"tf":1.0},"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"t":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}},"df":4,"docs":{"346":{"tf":1.4142135623730951},"392":{"tf":1.0},"396":{"tf":1.0},"49":{"tf":1.4142135623730951}},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}},"df":0,"docs":{}}}},"u":{"df":0,"docs":{},"m":{"df":2,"docs":{"239":{"tf":1.0},"294":{"tf":1.0}}}}},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":4,"docs":{"143":{"tf":1.0},"224":{"tf":1.4142135623730951},"227":{"tf":1.4142135623730951},"74":{"tf":1.0}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":16,"docs":{"138":{"tf":1.0},"216":{"tf":1.0},"217":{"tf":1.0},"223":{"tf":2.449489742783178},"224":{"tf":1.4142135623730951},"226":{"tf":1.0},"245":{"tf":1.0},"247":{"tf":1.0},"316":{"tf":1.7320508075688772},"317":{"tf":1.0},"318":{"tf":2.23606797749979},"319":{"tf":2.0},"320":{"tf":1.0},"321":{"tf":3.872983346207417},"322":{"tf":3.4641016151377544},"380":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":5,"docs":{"164":{"tf":1.0},"361":{"tf":2.449489742783178},"392":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.7320508075688772}}}}},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":2,"docs":{"375":{"tf":1.0},"377":{"tf":1.0}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"42":{"tf":1.0}}}}}}},"p":{"df":0,"docs":{},"i":{"df":5,"docs":{"146":{"tf":1.0},"147":{"tf":1.0},"402":{"tf":3.4641016151377544},"69":{"tf":3.3166247903554},"83":{"tf":1.0}}},"y":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{":":{":":{"c":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"c":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"i":{">":{">":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"154":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"c":{"_":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"s":{"_":{"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"154":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"m":{"df":0,"docs":{},"t":{"df":1,"docs":{"154":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{":":{":":{"<":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"[":{"df":0,"docs":{},"t":{"]":{">":{">":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"247":{"tf":1.0},"248":{"tf":1.0}}}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":5,"docs":{"107":{"tf":1.4142135623730951},"148":{"tf":1.0},"265":{"tf":1.0},"280":{"tf":1.0},"287":{"tf":3.1622776601683795}},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"9":{"df":1,"docs":{"353":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"299":{"tf":1.7320508075688772},"300":{"tf":1.0},"348":{"tf":2.0},"353":{"tf":2.449489742783178},"61":{"tf":2.0}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"61":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}}},"r":{"df":0,"docs":{},"s":{"df":1,"docs":{"176":{"tf":1.0}}}}}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"/":{"a":{"d":{"d":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"260":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"118":{"tf":1.4142135623730951},"119":{"tf":1.0},"126":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"g":{"a":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{":":{":":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":1,"docs":{"112":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":12,"docs":{"113":{"tf":1.7320508075688772},"114":{"tf":1.7320508075688772},"115":{"tf":1.0},"116":{"tf":1.0},"252":{"tf":1.0},"255":{"tf":1.0},"256":{"tf":1.0},"26":{"tf":1.0},"261":{"tf":1.0},"262":{"tf":1.0},"392":{"tf":1.0},"40":{"tf":1.7320508075688772}},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":18,"docs":{"122":{"tf":1.4142135623730951},"142":{"tf":1.0},"149":{"tf":1.0},"212":{"tf":1.0},"249":{"tf":1.7320508075688772},"251":{"tf":1.7320508075688772},"254":{"tf":2.0},"255":{"tf":1.4142135623730951},"256":{"tf":2.23606797749979},"258":{"tf":1.7320508075688772},"261":{"tf":1.4142135623730951},"262":{"tf":1.4142135623730951},"264":{"tf":1.4142135623730951},"370":{"tf":1.0},"374":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":2.0},"58":{"tf":1.0}}}}},"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"6":{":":{"7":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"261":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":11,"docs":{"110":{"tf":1.0},"157":{"tf":1.0},"196":{"tf":1.0},"212":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.0},"273":{"tf":1.0},"276":{"tf":1.0},"277":{"tf":1.0},"362":{"tf":1.0},"376":{"tf":1.0}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"f":{"df":2,"docs":{"378":{"tf":2.6457513110645907},"379":{"tf":2.0}}}}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"+":{"c":{"df":1,"docs":{"43":{"tf":1.0}}},"df":0,"docs":{}},"df":3,"docs":{"376":{"tf":1.0},"386":{"tf":1.0},"61":{"tf":1.4142135623730951}}}}},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":1,"docs":{"15":{"tf":1.0}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"331":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":4,"docs":{"118":{"tf":2.0},"199":{"tf":1.4142135623730951},"339":{"tf":1.0},"369":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"114":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"276":{"tf":2.6457513110645907},"277":{"tf":1.7320508075688772}}}}}}}}}},"df":0,"docs":{}}}}}}}},"y":{"c":{"df":0,"docs":{},"l":{"df":1,"docs":{"265":{"tf":1.0}}}},"df":0,"docs":{}}},"d":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"347":{"tf":1.7320508075688772}}}},"l":{"df":2,"docs":{"182":{"tf":1.0},"74":{"tf":2.6457513110645907}},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"74":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"k":{"df":1,"docs":{"411":{"tf":1.0}}}}},"t":{"a":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":10,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":2.23606797749979},"92":{"tf":1.0},"94":{"tf":1.4142135623730951},"96":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":5,"docs":{"84":{"tf":1.0},"85":{"tf":1.0},"90":{"tf":1.4142135623730951},"92":{"tf":1.0},"95":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"90":{"tf":1.7320508075688772}}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"255":{"tf":1.0},"277":{"tf":1.4142135623730951},"280":{"tf":1.0},"370":{"tf":1.0}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"y":{"df":1,"docs":{"227":{"tf":1.0}}}},"b":{"df":0,"docs":{},"g":{"df":1,"docs":{"90":{"tf":3.3166247903554}}}},"d":{"df":1,"docs":{"17":{"tf":1.0}}},"df":6,"docs":{"10":{"tf":1.0},"20":{"tf":1.0},"21":{"tf":1.0},"226":{"tf":1.0},"23":{"tf":1.0},"276":{"tf":1.0}},"e":{"a":{"d":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"300":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{":":{"3":{"df":1,"docs":{"90":{"tf":1.0}}},"9":{":":{"1":{"0":{"df":1,"docs":{"90":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"90":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},">":{"(":{"df":0,"docs":{},"t":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}},"df":5,"docs":{"154":{"tf":1.0},"198":{"tf":1.7320508075688772},"27":{"tf":1.0},"399":{"tf":2.0},"90":{"tf":2.6457513110645907}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":16,"docs":{"250":{"tf":1.0},"256":{"tf":1.0},"261":{"tf":2.23606797749979},"262":{"tf":1.0},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}}}}}}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}},"l":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"366":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{":":{":":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"404":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":11,"docs":{"177":{"tf":2.0},"239":{"tf":1.0},"261":{"tf":1.0},"335":{"tf":1.0},"340":{"tf":1.0},"354":{"tf":1.0},"385":{"tf":1.0},"404":{"tf":3.0},"407":{"tf":1.0},"408":{"tf":1.0},"416":{"tf":1.0}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":3,"docs":{"100":{"tf":1.7320508075688772},"385":{"tf":2.23606797749979},"99":{"tf":1.0}},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"26":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"361":{"tf":1.0},"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"l":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.0}}}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"116":{"tf":2.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"t":{"a":{"df":1,"docs":{"247":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"149":{"tf":1.0},"385":{"tf":1.0}}}},"df":0,"docs":{}},"y":{"(":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"y":{":":{":":{"a":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":4,"docs":{"255":{"tf":1.0},"26":{"tf":1.4142135623730951},"261":{"tf":1.0},"40":{"tf":2.0}},"e":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"y":{"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"6":{":":{"7":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{":":{":":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"274":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"=":{"df":0,"docs":{},"u":{"df":1,"docs":{"275":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":15,"docs":{"139":{"tf":1.0},"265":{"tf":1.4142135623730951},"268":{"tf":1.0},"269":{"tf":2.449489742783178},"272":{"tf":1.0},"273":{"tf":4.242640687119285},"274":{"tf":3.605551275463989},"275":{"tf":1.4142135623730951},"283":{"tf":1.0},"288":{"tf":1.0},"299":{"tf":1.0},"321":{"tf":1.0},"357":{"tf":1.4142135623730951},"396":{"tf":1.0},"77":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"c":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}}}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"=":{"df":0,"docs":{},"u":{"df":1,"docs":{"275":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":1,"docs":{"275":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"v":{"df":10,"docs":{"196":{"tf":1.0},"366":{"tf":1.4142135623730951},"367":{"tf":1.0},"369":{"tf":1.4142135623730951},"370":{"tf":1.7320508075688772},"371":{"tf":1.4142135623730951},"398":{"tf":3.4641016151377544},"403":{"tf":1.4142135623730951},"404":{"tf":1.0},"90":{"tf":1.4142135623730951}},"e":{"(":{"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{",":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"y":{",":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"93":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"90":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":1,"docs":{"370":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":2.449489742783178}}}}}}}}}}},"s":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{},"k":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"16":{"tf":1.0}}}}}},"t":{"df":1,"docs":{"377":{"tf":1.0}},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"277":{"tf":1.0}}}},"u":{"df":0,"docs":{},"r":{"df":2,"docs":{"338":{"tf":1.0},"53":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"411":{"tf":1.0}}}},"df":0,"docs":{}}}},"v":{"a":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"140":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":15,"docs":{"250":{"tf":2.6457513110645907},"256":{"tf":1.0},"261":{"tf":1.7320508075688772},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"16":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"6":{"tf":1.0}}}}}},"i":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"144":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"100":{"tf":1.0},"273":{"tf":1.0},"361":{"tf":1.0}}}}}},"j":{"df":0,"docs":{},"k":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"a":{"df":1,"docs":{"194":{"tf":1.0}}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"e":{"df":1,"docs":{"114":{"tf":1.0}}}},"r":{"df":1,"docs":{"24":{"tf":1.0}},"e":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}},"y":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"158":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}}},"s":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"388":{"tf":2.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"y":{">":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":1,"docs":{"178":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":12,"docs":{"138":{"tf":1.0},"176":{"tf":1.7320508075688772},"178":{"tf":1.7320508075688772},"180":{"tf":2.23606797749979},"192":{"tf":1.4142135623730951},"356":{"tf":3.4641016151377544},"357":{"tf":2.449489742783178},"364":{"tf":1.0},"398":{"tf":1.0},"43":{"tf":1.0},"53":{"tf":1.0},"90":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"t":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"93":{"tf":1.0}}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"172":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"v":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":1,"docs":{"361":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"s":{"df":1,"docs":{"60":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.0}}}},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"407":{"tf":2.23606797749979}}}}}}}},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"c":{"df":1,"docs":{"364":{"tf":2.449489742783178}}},"df":0,"docs":{}}}}},"c":{"df":9,"docs":{"0":{"tf":1.0},"19":{"tf":1.0},"196":{"tf":1.4142135623730951},"209":{"tf":1.0},"252":{"tf":2.0},"253":{"tf":1.4142135623730951},"261":{"tf":1.4142135623730951},"385":{"tf":1.0},"41":{"tf":1.4142135623730951}},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"255":{"tf":1.0},"377":{"tf":1.0}}}}}}}},"df":2,"docs":{"149":{"tf":1.0},"385":{"tf":1.0}},"g":{":":{":":{"b":{"a":{"b":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"355":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"355":{"tf":3.3166247903554}}},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"57":{"tf":1.4142135623730951}}}},"u":{"b":{"df":0,"docs":{},"l":{"df":2,"docs":{"277":{"tf":1.0},"69":{"tf":1.0}}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"n":{"df":1,"docs":{"388":{"tf":3.0}},"l":{"df":0,"docs":{},"o":{"a":{"d":{"df":3,"docs":{"261":{"tf":1.0},"262":{"tf":1.4142135623730951},"40":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"y":{"df":0,"docs":{},"l":{"df":1,"docs":{"247":{"tf":1.0}}}}},"r":{"a":{"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":4,"docs":{"317":{"tf":2.0},"320":{"tf":1.7320508075688772},"321":{"tf":1.4142135623730951},"322":{"tf":1.4142135623730951}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"322":{"tf":3.4641016151377544}}}}}}}},"w":{"df":3,"docs":{"312":{"tf":2.6457513110645907},"313":{"tf":3.1622776601683795},"314":{"tf":4.0}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":2,"docs":{"227":{"tf":1.0},"230":{"tf":1.0}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}}}},"o":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"293":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":15,"docs":{"265":{"tf":1.4142135623730951},"268":{"tf":1.0},"276":{"tf":4.69041575982343},"277":{"tf":4.898979485566356},"280":{"tf":1.0},"287":{"tf":1.0},"288":{"tf":1.0},"293":{"tf":1.7320508075688772},"299":{"tf":1.0},"376":{"tf":1.0},"386":{"tf":1.0},"387":{"tf":2.0},"388":{"tf":2.449489742783178},"69":{"tf":2.23606797749979},"71":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"362":{"tf":1.7320508075688772}}}},"u":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"314":{"tf":1.4142135623730951}}},"t":{"df":2,"docs":{"223":{"tf":1.4142135623730951},"226":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"e":{"df":1,"docs":{"86":{"tf":1.0}}},"r":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"296":{"tf":1.0}}}},"df":0,"docs":{}}},"y":{"df":0,"docs":{},"n":{"df":4,"docs":{"220":{"tf":1.0},"313":{"tf":1.0},"362":{"tf":1.0},"392":{"tf":1.0}}}}},"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"g":{"df":2,"docs":{"268":{"tf":1.0},"397":{"tf":1.0}}}},"0":{"1":{"0":{"6":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"337":{"tf":1.0}}},"y":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"292":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"t":{"_":{"a":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":6,"docs":{"114":{"tf":2.8284271247461903},"115":{"tf":2.8284271247461903},"117":{"tf":2.23606797749979},"118":{"tf":1.7320508075688772},"119":{"tf":1.0},"126":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":1,"docs":{"17":{"tf":1.7320508075688772}}}}},"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":3,"docs":{"255":{"tf":1.0},"26":{"tf":1.4142135623730951},"410":{"tf":1.7320508075688772}}}},"s":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"194":{"tf":1.0}}}}}}},"df":18,"docs":{"10":{"tf":1.0},"151":{"tf":1.4142135623730951},"155":{"tf":2.23606797749979},"157":{"tf":1.7320508075688772},"158":{"tf":1.0},"159":{"tf":3.0},"166":{"tf":1.0},"171":{"tf":2.23606797749979},"201":{"tf":2.449489742783178},"211":{"tf":1.0},"219":{"tf":1.0},"220":{"tf":1.0},"26":{"tf":1.0},"294":{"tf":1.7320508075688772},"360":{"tf":2.8284271247461903},"376":{"tf":1.0},"394":{"tf":1.0},"410":{"tf":1.0}},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"211":{"tf":1.0}}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"239":{"tf":1.0}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"107":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":4,"docs":{"81":{"tf":2.0},"82":{"tf":3.1622776601683795},"83":{"tf":2.0},"86":{"tf":2.0}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":2,"docs":{"255":{"tf":1.0},"361":{"tf":1.0}}}}}},"n":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}}},"d":{"df":4,"docs":{"277":{"tf":1.0},"335":{"tf":1.0},"58":{"tf":1.0},"61":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"77":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":1,"docs":{"377":{"tf":1.0}},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"150":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":3,"docs":{"219":{"tf":1.0},"229":{"tf":1.0},"230":{"tf":1.0}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.7320508075688772}}}},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"148":{"tf":3.0}}}}},"u":{"df":0,"docs":{},"m":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"100":{"tf":3.3166247903554},"101":{"tf":2.0},"102":{"tf":1.4142135623730951},"103":{"tf":1.7320508075688772},"104":{"tf":2.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"117":{"tf":1.0},"134":{"tf":1.0},"155":{"tf":1.0},"171":{"tf":1.4142135623730951},"173":{"tf":1.4142135623730951},"268":{"tf":1.4142135623730951},"321":{"tf":1.0},"36":{"tf":1.0},"392":{"tf":1.0},"397":{"tf":1.0},"98":{"tf":1.0},"99":{"tf":1.7320508075688772}},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"329":{"tf":1.0},"76":{"tf":1.7320508075688772},"98":{"tf":1.0}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"99":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"n":{"_":{"c":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"100":{"tf":1.0}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"100":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"v":{":":{":":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":3,"docs":{"214":{"tf":1.0},"241":{"tf":1.0},"244":{"tf":2.23606797749979}}}}},"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"227":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":1.0}},"e":{"=":{"1":{"df":1,"docs":{"227":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"17":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":1,"docs":{"227":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":2,"docs":{"43":{"tf":1.0},"53":{"tf":1.0}}}}}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"n":{"df":2,"docs":{"230":{"tf":1.7320508075688772},"231":{"tf":1.0}}}}}}}}},"q":{"df":2,"docs":{"400":{"tf":2.449489742783178},"401":{"tf":1.4142135623730951}},"u":{"a":{"df":0,"docs":{},"l":{"df":3,"docs":{"200":{"tf":1.7320508075688772},"42":{"tf":1.0},"60":{"tf":1.0}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"308":{"tf":1.0}}}},"df":0,"docs":{}},"l":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"289":{"tf":1.0}}}}},"df":0,"docs":{}},"r":{"(":{"_":{"df":1,"docs":{"45":{"tf":1.0}}},"df":3,"docs":{"155":{"tf":1.0},"159":{"tf":1.0},"171":{"tf":1.0}}},"df":18,"docs":{"155":{"tf":2.23606797749979},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":3.0},"160":{"tf":1.0},"162":{"tf":1.7320508075688772},"171":{"tf":1.0},"201":{"tf":2.0},"219":{"tf":2.8284271247461903},"220":{"tf":1.0},"227":{"tf":1.0},"244":{"tf":1.0},"294":{"tf":1.0},"36":{"tf":2.23606797749979},"361":{"tf":1.0},"385":{"tf":1.0},"42":{"tf":1.0},"45":{"tf":2.0}},"o":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"156":{"tf":1.7320508075688772},"157":{"tf":1.0}}},"df":0,"docs":{}}}}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"[":{"df":0,"docs":{},"e":{"0":{"1":{"0":{"6":{"df":1,"docs":{"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{"8":{"4":{"df":1,"docs":{"48":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"4":{"3":{"2":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":16,"docs":{"153":{"tf":1.4142135623730951},"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"157":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"159":{"tf":3.7416573867739413},"162":{"tf":1.0},"164":{"tf":1.4142135623730951},"220":{"tf":2.23606797749979},"230":{"tf":1.0},"255":{"tf":1.4142135623730951},"360":{"tf":1.0},"394":{"tf":1.0},"408":{"tf":1.0},"86":{"tf":1.7320508075688772}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"156":{"tf":1.0},"157":{"tf":1.0}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"156":{"tf":1.0}}},"df":0,"docs":{}}}}}}}},"s":{"c":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"397":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"ñ":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":1,"docs":{"15":{"tf":1.0}}}}}}},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"376":{"tf":2.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"c":{"df":1,"docs":{"397":{"tf":2.23606797749979}}},"df":0,"docs":{}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"340":{"tf":1.0}}}}},"x":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":2,"docs":{"212":{"tf":1.0},"252":{"tf":1.7320508075688772}},"e":{".":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"29":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}}}}},"df":0,"docs":{}}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"/":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"235":{"tf":1.7320508075688772}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"255":{"tf":1.0}}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"299":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"262":{"tf":1.0},"385":{"tf":5.0990195135927845},"388":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"h":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"105":{"tf":1.4142135623730951},"326":{"tf":1.0},"327":{"tf":1.0}}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}},"t":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"159":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"36":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":15,"docs":{"158":{"tf":2.6457513110645907},"161":{"tf":1.4142135623730951},"162":{"tf":2.0},"198":{"tf":1.0},"200":{"tf":1.7320508075688772},"217":{"tf":1.4142135623730951},"220":{"tf":1.4142135623730951},"227":{"tf":1.0},"36":{"tf":2.23606797749979},"370":{"tf":1.0},"385":{"tf":1.0},"394":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"45":{"tf":1.0},"86":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"206":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}}}}}}},"l":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"86":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"185":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"196":{"tf":1.7320508075688772}}}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"121":{"tf":1.0}}}}},"r":{".":{".":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"396":{"tf":1.0}}}}}}},"=":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"396":{"tf":1.0}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"396":{"tf":1.0}}}}}}},"0":{"df":1,"docs":{"397":{"tf":1.0}}},"1":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"396":{"tf":1.0}}},"df":0,"docs":{}}},"[":{".":{".":{"b":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{".":{".":{"b":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"397":{"tf":1.0}}}}}}},"df":2,"docs":{"396":{"tf":7.874007874011811},"397":{"tf":2.6457513110645907}},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":2,"docs":{"326":{"tf":1.7320508075688772},"330":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"56":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"56":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":3,"docs":{"261":{"tf":1.4142135623730951},"347":{"tf":3.1622776601683795},"392":{"tf":1.0}}}}},"r":{"a":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"125":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"f":{"0":{"2":{"5":{"3":{"1":{"5":{"9":{"1":{"9":{"7":{"df":0,"docs":{},"f":{"7":{"8":{"4":{"1":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{"2":{"df":2,"docs":{"172":{"tf":1.4142135623730951},"52":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"6":{"4":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"(":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"i":{"df":1,"docs":{"93":{"tf":1.0}}},"x":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}}},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"(":{"df":0,"docs":{},"x":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":6,"docs":{"172":{"tf":1.0},"173":{"tf":1.4142135623730951},"397":{"tf":1.0},"52":{"tf":1.7320508075688772},"69":{"tf":1.0},"93":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"162":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"196":{"tf":2.0},"198":{"tf":1.4142135623730951},"252":{"tf":1.0},"255":{"tf":1.0},"261":{"tf":2.23606797749979}},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"199":{"tf":1.4142135623730951}}}}}},"l":{"df":0,"docs":{},"s":{"df":11,"docs":{"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"227":{"tf":1.0},"242":{"tf":1.0},"340":{"tf":1.0},"392":{"tf":1.0},"52":{"tf":1.0},"60":{"tf":1.0},"69":{"tf":1.0},"92":{"tf":1.0},"94":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":1,"docs":{"411":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"223":{"tf":1.0}}}},"v":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"df":1,"docs":{"376":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"y":{"df":1,"docs":{"150":{"tf":1.0}}}},"df":4,"docs":{"10":{"tf":1.0},"237":{"tf":3.4641016151377544},"364":{"tf":2.0},"385":{"tf":3.1622776601683795}},"e":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":8,"docs":{"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":2.23606797749979},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.449489742783178}}}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":2,"docs":{"109":{"tf":1.0},"415":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":24,"docs":{"234":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"236":{"tf":2.23606797749979},"237":{"tf":2.23606797749979},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.7320508075688772},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.0},"346":{"tf":1.7320508075688772},"347":{"tf":2.449489742783178},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"353":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"355":{"tf":3.1622776601683795},"356":{"tf":1.0},"357":{"tf":1.0},"360":{"tf":1.4142135623730951},"364":{"tf":1.0},"368":{"tf":1.0},"370":{"tf":2.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":9,"docs":{"347":{"tf":1.0},"353":{"tf":1.0},"356":{"tf":1.7320508075688772},"360":{"tf":2.23606797749979},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":1.7320508075688772},"365":{"tf":1.7320508075688772},"370":{"tf":1.7320508075688772}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}}},"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"53":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"10":{"tf":1.4142135623730951}}}}},"t":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"377":{"tf":2.0}}}},"df":0,"docs":{}}},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}}},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"147":{"tf":1.0}}}},"df":0,"docs":{}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"147":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":5,"docs":{"255":{"tf":1.0},"273":{"tf":1.0},"370":{"tf":1.0},"385":{"tf":1.7320508075688772},"92":{"tf":1.0}}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"e":{":":{"/":{"/":{"/":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}},"df":1,"docs":{"261":{"tf":2.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":7,"docs":{"256":{"tf":1.7320508075688772},"38":{"tf":1.0},"40":{"tf":1.4142135623730951},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"p":{"a":{"c":{"df":0,"docs":{},"k":{"a":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"256":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":1,"docs":{"27":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":3,"docs":{"377":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0}}}}}}},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"61":{"tf":1.0}}}}}},"m":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"407":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"86":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"c":{"df":0,"docs":{},"r":{"df":1,"docs":{"156":{"tf":1.4142135623730951}},"e":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"\"":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"(":{"df":0,"docs":{},"|":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"157":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"\"":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"(":{"df":0,"docs":{},"|":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"157":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"159":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":3,"docs":{"155":{"tf":2.6457513110645907},"156":{"tf":2.0},"159":{"tf":3.0}}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":5,"docs":{"215":{"tf":1.0},"216":{"tf":1.4142135623730951},"217":{"tf":1.0},"218":{"tf":2.6457513110645907},"244":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":8,"docs":{"155":{"tf":1.0},"157":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"159":{"tf":1.0},"209":{"tf":1.0},"217":{"tf":1.0},"24":{"tf":1.0},"255":{"tf":1.4142135623730951}},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"382":{"tf":1.4142135623730951}},"e":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"212":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":6,"docs":{"196":{"tf":1.0},"205":{"tf":1.0},"242":{"tf":2.23606797749979},"245":{"tf":1.4142135623730951},"252":{"tf":1.0},"261":{"tf":2.23606797749979}}}}}},"n":{"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"388":{"tf":1.4142135623730951},"393":{"tf":1.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":17,"docs":{"250":{"tf":1.4142135623730951},"252":{"tf":1.0},"256":{"tf":1.0},"261":{"tf":3.1622776601683795},"262":{"tf":1.0},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.7320508075688772},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"/":{"9":{"9":{".":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"6":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"(":{"df":3,"docs":{"189":{"tf":1.0},"76":{"tf":1.0},"77":{"tf":1.0}}},"<":{"'":{"a":{">":{"(":{"df":1,"docs":{"189":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":3,"docs":{"189":{"tf":1.0},"76":{"tf":2.0},"77":{"tf":2.23606797749979}}},"df":0,"docs":{}}}}},"df":5,"docs":{"150":{"tf":1.0},"339":{"tf":1.0},"48":{"tf":1.0},"53":{"tf":1.0},"77":{"tf":1.0}}}}},"v":{"df":0,"docs":{},"e":{"df":1,"docs":{"57":{"tf":2.23606797749979}}}},"x":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"116":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":5,"docs":{"209":{"tf":1.0},"387":{"tf":1.4142135623730951},"407":{"tf":2.449489742783178},"410":{"tf":1.0},"73":{"tf":1.0}}}},"l":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"415":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":3.605551275463989}}},"o":{"a":{"df":0,"docs":{},"t":{"df":2,"docs":{"173":{"tf":1.4142135623730951},"52":{"tf":1.0}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"t":{"df":1,"docs":{"406":{"tf":1.4142135623730951}}}},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":41,"docs":{"115":{"tf":1.0},"139":{"tf":1.0},"157":{"tf":1.0},"169":{"tf":1.0},"172":{"tf":1.0},"173":{"tf":1.0},"175":{"tf":1.0},"178":{"tf":2.449489742783178},"189":{"tf":3.1622776601683795},"196":{"tf":1.0},"22":{"tf":1.0},"23":{"tf":1.0},"235":{"tf":1.4142135623730951},"237":{"tf":2.8284271247461903},"239":{"tf":1.0},"26":{"tf":1.0},"33":{"tf":1.0},"347":{"tf":1.4142135623730951},"354":{"tf":1.0},"360":{"tf":1.0},"362":{"tf":1.0},"364":{"tf":3.1622776601683795},"365":{"tf":1.0},"369":{"tf":1.0},"371":{"tf":1.7320508075688772},"372":{"tf":1.0},"385":{"tf":2.23606797749979},"392":{"tf":1.0},"394":{"tf":2.0},"396":{"tf":1.0},"397":{"tf":1.0},"407":{"tf":2.0},"408":{"tf":1.4142135623730951},"48":{"tf":1.0},"54":{"tf":1.4142135623730951},"67":{"tf":1.0},"76":{"tf":1.4142135623730951},"77":{"tf":1.4142135623730951},"86":{"tf":1.0},"91":{"tf":1.0},"93":{"tf":1.0}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"237":{"tf":2.23606797749979},"364":{"tf":1.0},"385":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"n":{"c":{"df":3,"docs":{"237":{"tf":3.1622776601683795},"364":{"tf":1.0},"385":{"tf":2.8284271247461903}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"o":{"<":{"'":{"a":{">":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"189":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":1,"docs":{"189":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}}},"df":0,"docs":{}},"b":{"a":{"df":0,"docs":{},"r":{"df":2,"docs":{"139":{"tf":1.0},"394":{"tf":1.0}}}},"df":0,"docs":{}},"df":3,"docs":{"331":{"tf":1.0},"370":{"tf":1.0},"45":{"tf":1.0}}},"r":{"c":{"df":1,"docs":{"293":{"tf":1.0}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"k":{"/":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"385":{"tf":1.0}}}}}}},"df":0,"docs":{}},"m":{"a":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"139":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"139":{"tf":2.449489742783178},"199":{"tf":1.4142135623730951},"370":{"tf":1.0},"380":{"tf":1.0}}}},"df":0,"docs":{}},"r":{"c":{"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"299":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"n":{"d":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"'":{"df":1,"docs":{"255":{"tf":1.0}}},"df":0,"docs":{}}}}}},"df":5,"docs":{"25":{"tf":1.0},"341":{"tf":1.0},"381":{"tf":1.0},"394":{"tf":1.4142135623730951},"408":{"tf":1.0}}},"df":0,"docs":{}}}},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"ç":{"a":{"df":0,"docs":{},"i":{"df":1,"docs":{"411":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":2,"docs":{"277":{"tf":1.0},"69":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"g":{"df":1,"docs":{"224":{"tf":1.0}}},"m":{"<":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"u":{"df":1,"docs":{"159":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":6,"docs":{"113":{"tf":2.23606797749979},"114":{"tf":1.4142135623730951},"115":{"tf":2.8284271247461903},"118":{"tf":1.0},"125":{"tf":2.8284271247461903},"126":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"114":{"tf":1.4142135623730951}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"s":{":":{":":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"159":{"tf":2.0},"216":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"380":{"tf":1.0}}},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"'":{"df":1,"docs":{"74":{"tf":1.0}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"364":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"205":{"tf":1.0},"234":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"236":{"tf":2.23606797749979},"237":{"tf":2.23606797749979},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.7320508075688772},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.0},"268":{"tf":1.0},"347":{"tf":1.4142135623730951},"361":{"tf":1.0},"366":{"tf":1.0},"369":{"tf":1.0},"54":{"tf":1.0},"55":{"tf":2.23606797749979},"57":{"tf":1.7320508075688772}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"54":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"54":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"95":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":1,"docs":{"255":{"tf":1.0}}},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"355":{"tf":1.0}}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"392":{"tf":1.4142135623730951}}}}}},"{":{"3":{"2":{"df":1,"docs":{"408":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"g":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"211":{"tf":1.0}}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"e":{"df":15,"docs":{"122":{"tf":1.4142135623730951},"255":{"tf":1.0},"32":{"tf":1.7320508075688772},"33":{"tf":2.0},"34":{"tf":1.0},"35":{"tf":1.0},"36":{"tf":1.4142135623730951},"361":{"tf":1.0},"37":{"tf":1.0},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.7320508075688772},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951}}},"m":{"a":{"df":1,"docs":{"308":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":1,"docs":{"112":{"tf":2.449489742783178}}}}},"df":0,"docs":{}}},"c":{"c":{"df":2,"docs":{"15":{"tf":1.0},"24":{"tf":1.0}}},"df":1,"docs":{"69":{"tf":1.0}}},"df":2,"docs":{"10":{"tf":1.0},"211":{"tf":1.0}},"e":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"o":{"/":{"2":{"0":{"1":{"0":{"0":{"1":{"0":{"1":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"401":{"tf":1.0},"41":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":25,"docs":{"155":{"tf":1.0},"166":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.4142135623730951},"261":{"tf":1.0},"268":{"tf":1.0},"362":{"tf":1.7320508075688772},"385":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"164":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"26":{"tf":2.0},"29":{"tf":1.4142135623730951}},"h":{"df":0,"docs":{},"u":{"b":{"df":2,"docs":{"11":{"tf":1.0},"254":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"26":{"tf":1.0}}}}}}}},"v":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"234":{"tf":2.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"o":{"b":{"df":2,"docs":{"111":{"tf":1.0},"124":{"tf":1.0}}},"df":0,"docs":{}}},"o":{"df":2,"docs":{"294":{"tf":1.0},"298":{"tf":1.0}}},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"15":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"200":{"tf":1.0},"42":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"338":{"tf":1.0}}},"t":{"df":1,"docs":{"199":{"tf":2.0}},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"199":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"199":{"tf":1.4142135623730951}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":2,"docs":{"155":{"tf":1.0},"157":{"tf":1.0}},"e":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":2,"docs":{"155":{"tf":1.4142135623730951},"156":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"p":{"df":4,"docs":{"10":{"tf":1.0},"211":{"tf":2.23606797749979},"212":{"tf":1.0},"262":{"tf":1.0}}}},"o":{"df":0,"docs":{},"w":{"df":12,"docs":{"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0}}}}},"u":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"340":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"(":{"\"":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"36":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"(":{")":{".":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":1,"docs":{"42":{"tf":1.0}},"e":{"(":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"(":{"\"":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"42":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"164":{"tf":2.0},"200":{"tf":1.4142135623730951},"219":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.0}}}}}},"df":19,"docs":{"122":{"tf":1.4142135623730951},"164":{"tf":4.123105625617661},"200":{"tf":3.4641016151377544},"255":{"tf":1.0},"32":{"tf":1.7320508075688772},"33":{"tf":2.0},"34":{"tf":2.23606797749979},"35":{"tf":2.23606797749979},"36":{"tf":1.4142135623730951},"361":{"tf":2.449489742783178},"37":{"tf":1.0},"38":{"tf":1.7320508075688772},"40":{"tf":1.0},"41":{"tf":2.6457513110645907},"42":{"tf":4.58257569495584},"43":{"tf":3.0},"44":{"tf":1.0},"45":{"tf":3.4641016151377544},"51":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":10,"docs":{"255":{"tf":1.7320508075688772},"256":{"tf":2.0},"258":{"tf":1.4142135623730951},"32":{"tf":1.7320508075688772},"38":{"tf":1.0},"40":{"tf":1.7320508075688772},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}},"e":{"@":{"1":{".":{"0":{".":{"1":{"df":1,"docs":{"258":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"i":{"d":{"df":1,"docs":{"410":{"tf":1.0}},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"115":{"tf":1.0}}}}}}},"df":3,"docs":{"312":{"tf":2.8284271247461903},"313":{"tf":1.0},"314":{"tf":1.7320508075688772}}}},"z":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":1,"docs":{"377":{"tf":1.0}}}}}},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"354":{"tf":1.0}},"l":{"df":3,"docs":{"220":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.0}},"e":{".":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"292":{"tf":1.4142135623730951}}}}}}},"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":4,"docs":{"377":{"tf":1.7320508075688772},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":5,"docs":{"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"159":{"tf":2.8284271247461903},"164":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":4,"docs":{"153":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"162":{"tf":1.0},"164":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"h":{"df":3,"docs":{"128":{"tf":1.0},"144":{"tf":1.7320508075688772},"403":{"tf":3.0}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"149":{"tf":1.7320508075688772}}}},"m":{"a":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"146":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"359":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"k":{"df":4,"docs":{"144":{"tf":1.4142135623730951},"166":{"tf":1.0},"400":{"tf":1.4142135623730951},"403":{"tf":1.0}}}},"df":11,"docs":{"10":{"tf":1.0},"119":{"tf":1.4142135623730951},"122":{"tf":1.0},"143":{"tf":1.0},"144":{"tf":1.0},"145":{"tf":1.4142135623730951},"146":{"tf":2.0},"147":{"tf":2.23606797749979},"148":{"tf":2.449489742783178},"149":{"tf":1.0},"150":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"309":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":2,"docs":{"357":{"tf":1.0},"385":{"tf":1.0}}}}}},"y":{"df":1,"docs":{"150":{"tf":1.4142135623730951}},"s":{"df":0,"docs":{},"t":{"a":{"c":{"df":0,"docs":{},"k":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"(":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"394":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"394":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":2,"docs":{"140":{"tf":1.0},"55":{"tf":1.0}},"e":{"a":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"378":{"tf":1.0},"379":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":4,"docs":{"314":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.7320508075688772},"99":{"tf":1.0}}}}}},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"\"":{"[":{"0":{"df":1,"docs":{"140":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"(":{"\"":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"274":{"tf":1.0}}}}}}},"df":0,"docs":{}},".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":2,"docs":{"380":{"tf":2.0},"381":{"tf":1.7320508075688772}}}}}},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"155":{"tf":1.0},"158":{"tf":1.4142135623730951}}}}}},"[":{"0":{".":{".":{"1":{"df":1,"docs":{"141":{"tf":1.0}}},"4":{"df":1,"docs":{"141":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"140":{"tf":1.0}}},"df":0,"docs":{}},"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":3,"docs":{"26":{"tf":2.449489742783178},"27":{"tf":2.23606797749979},"29":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":4.0}},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"370":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"370":{"tf":3.872983346207417}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"22":{"tf":1.0}}}},"df":1,"docs":{"21":{"tf":2.23606797749979}}},"df":0,"docs":{}}}}}},"df":26,"docs":{"10":{"tf":1.0},"12":{"tf":1.0},"139":{"tf":1.0},"140":{"tf":1.0},"141":{"tf":1.0},"148":{"tf":1.0},"172":{"tf":1.0},"199":{"tf":1.0},"25":{"tf":1.0},"26":{"tf":1.7320508075688772},"261":{"tf":1.0},"27":{"tf":2.23606797749979},"274":{"tf":2.8284271247461903},"30":{"tf":1.0},"32":{"tf":1.4142135623730951},"370":{"tf":2.0},"374":{"tf":1.4142135623730951},"376":{"tf":1.7320508075688772},"377":{"tf":1.0},"385":{"tf":1.7320508075688772},"388":{"tf":1.0},"54":{"tf":1.0},"58":{"tf":1.0},"67":{"tf":1.0},"69":{"tf":1.0},"77":{"tf":1.4142135623730951}},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":1,"docs":{"370":{"tf":3.1622776601683795}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"22":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"m":{"df":1,"docs":{"308":{"tf":1.0}}},"p":{"df":8,"docs":{"202":{"tf":1.4142135623730951},"26":{"tf":1.0},"262":{"tf":1.0},"268":{"tf":1.0},"293":{"tf":1.0},"407":{"tf":1.0},"408":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951}}}}},"i":{"df":5,"docs":{"291":{"tf":3.0},"292":{"tf":5.0990195135927845},"294":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0}}},"o":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}},"df":0,"docs":{},"l":{"a":{"df":1,"docs":{"140":{"tf":1.0}}},"d":{"df":1,"docs":{"94":{"tf":1.4142135623730951}}},"df":0,"docs":{},"m":{"df":1,"docs":{"247":{"tf":1.0}}}},"m":{"df":0,"docs":{},"e":{"/":{".":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"/":{"b":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"262":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"100":{"tf":1.0}},"p":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"255":{"tf":1.0}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":2,"docs":{"176":{"tf":1.0},"177":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"t":{"df":9,"docs":{"113":{"tf":2.0},"114":{"tf":1.4142135623730951},"115":{"tf":3.3166247903554},"118":{"tf":1.7320508075688772},"121":{"tf":1.0},"125":{"tf":2.6457513110645907},"126":{"tf":1.0},"377":{"tf":1.0},"378":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.7320508075688772}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}}}},"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"118":{"tf":1.0},"119":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"v":{"df":1,"docs":{"338":{"tf":1.0}}}},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"5":{"df":1,"docs":{"380":{"tf":1.0}}},"df":5,"docs":{"0":{"tf":1.0},"252":{"tf":2.6457513110645907},"380":{"tf":2.8284271247461903},"381":{"tf":3.0},"384":{"tf":1.0}}}},"t":{"df":0,"docs":{},"p":{"/":{"1":{".":{"1":{"df":3,"docs":{"377":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"/":{"/":{"1":{"2":{"7":{".":{"0":{".":{"0":{".":{"1":{":":{"7":{"8":{"7":{"8":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":1,"docs":{"384":{"tf":1.0}}}}}}}},"df":1,"docs":{"384":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"377":{"tf":1.0},"380":{"tf":1.0}}}}}}}}}},"df":10,"docs":{"15":{"tf":1.0},"163":{"tf":1.0},"374":{"tf":2.0},"375":{"tf":2.23606797749979},"376":{"tf":1.0},"377":{"tf":1.0},"378":{"tf":2.23606797749979},"379":{"tf":2.449489742783178},"380":{"tf":1.0},"381":{"tf":1.0}},"s":{":":{"/":{"/":{"c":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"m":{"df":1,"docs":{"254":{"tf":1.0}}}},"df":1,"docs":{"255":{"tf":1.0}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"d":{"df":0,"docs":{},"o":{"c":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"0":{"tf":1.4142135623730951},"255":{"tf":1.4142135623730951},"26":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"0":{"tf":1.0},"408":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"h":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"p":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"15":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"w":{"df":0,"docs":{},"w":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"16":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"l":{"df":0,"docs":{},"y":{"(":{"&":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"355":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"355":{"tf":2.449489742783178}}}},"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"194":{"tf":1.0}}}},"df":0,"docs":{}}},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"375":{"tf":1.0}}}}}}}}}}},"i":{"/":{"df":0,"docs":{},"o":{"df":1,"docs":{"211":{"tf":1.0}}}},"1":{"2":{"8":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"6":{"df":2,"docs":{"247":{"tf":1.0},"52":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"df":42,"docs":{"100":{"tf":1.0},"130":{"tf":2.0},"131":{"tf":1.0},"133":{"tf":1.0},"145":{"tf":1.0},"147":{"tf":1.0},"164":{"tf":2.23606797749979},"166":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"172":{"tf":1.4142135623730951},"173":{"tf":1.4142135623730951},"178":{"tf":1.4142135623730951},"185":{"tf":2.449489742783178},"189":{"tf":2.23606797749979},"190":{"tf":1.0},"247":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"268":{"tf":2.8284271247461903},"270":{"tf":1.7320508075688772},"273":{"tf":1.0},"286":{"tf":1.0},"287":{"tf":1.0},"299":{"tf":2.23606797749979},"309":{"tf":1.0},"331":{"tf":1.0},"338":{"tf":1.0},"346":{"tf":1.4142135623730951},"347":{"tf":2.0},"359":{"tf":1.0},"360":{"tf":2.449489742783178},"364":{"tf":2.23606797749979},"397":{"tf":1.0},"42":{"tf":1.4142135623730951},"52":{"tf":1.4142135623730951},"53":{"tf":1.4142135623730951},"55":{"tf":1.4142135623730951},"57":{"tf":1.7320508075688772},"60":{"tf":1.0},"69":{"tf":1.7320508075688772},"78":{"tf":1.0},"84":{"tf":1.0}}},"df":0,"docs":{}},"6":{"4":{"df":3,"docs":{"247":{"tf":1.4142135623730951},"42":{"tf":1.0},"52":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":2,"docs":{"101":{"tf":2.0},"52":{"tf":1.4142135623730951}}},"d":{"=":{"1":{"df":1,"docs":{"372":{"tf":1.0}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"341":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":8,"docs":{"20":{"tf":2.23606797749979},"341":{"tf":3.0},"359":{"tf":1.4142135623730951},"385":{"tf":3.0},"386":{"tf":1.0},"4":{"tf":1.0},"405":{"tf":1.0},"409":{"tf":2.23606797749979}},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":3,"docs":{"370":{"tf":2.8284271247461903},"396":{"tf":2.6457513110645907},"397":{"tf":2.8284271247461903}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"394":{"tf":1.4142135623730951}}}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":1,"docs":{"52":{"tf":1.0}}}}},"f":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":4,"docs":{"196":{"tf":1.0},"206":{"tf":3.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979}},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":3.1622776601683795}},"e":{"=":{"1":{"df":1,"docs":{"227":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"d":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"206":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"m":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"312":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":5,"docs":{"283":{"tf":1.4142135623730951},"300":{"tf":1.0},"346":{"tf":1.0},"48":{"tf":1.7320508075688772},"73":{"tf":1.4142135623730951}}}}},"p":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"t":{"df":2,"docs":{"180":{"tf":1.0},"237":{"tf":1.0}}}},"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":1,"docs":{"370":{"tf":2.23606797749979}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":29,"docs":{"100":{"tf":1.0},"159":{"tf":1.0},"172":{"tf":2.6457513110645907},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":3.0},"179":{"tf":2.8284271247461903},"180":{"tf":2.0},"189":{"tf":1.0},"190":{"tf":1.7320508075688772},"218":{"tf":1.0},"244":{"tf":1.4142135623730951},"308":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.0},"318":{"tf":1.0},"349":{"tf":1.0},"353":{"tf":1.0},"354":{"tf":1.0},"356":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"385":{"tf":1.4142135623730951},"392":{"tf":1.4142135623730951},"397":{"tf":1.0},"92":{"tf":2.449489742783178},"93":{"tf":1.0},"94":{"tf":1.4142135623730951},"95":{"tf":1.7320508075688772},"96":{"tf":2.449489742783178}},"e":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":4,"docs":{"239":{"tf":1.0},"299":{"tf":1.0},"302":{"tf":1.0},"92":{"tf":1.0}},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"180":{"tf":1.0}}}}}}}}},"i":{"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"362":{"tf":1.0}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":2,"docs":{"188":{"tf":2.449489742783178},"190":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}},"df":1,"docs":{"261":{"tf":1.4142135623730951}}}}}}},"n":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":92,"docs":{"101":{"tf":1.0},"105":{"tf":1.0},"114":{"tf":1.0},"115":{"tf":1.0},"118":{"tf":1.0},"122":{"tf":1.0},"132":{"tf":1.0},"140":{"tf":1.0},"141":{"tf":1.0},"153":{"tf":1.0},"154":{"tf":1.0},"155":{"tf":1.0},"158":{"tf":1.0},"159":{"tf":2.23606797749979},"164":{"tf":1.0},"169":{"tf":1.0},"170":{"tf":1.0},"182":{"tf":1.0},"184":{"tf":1.0},"186":{"tf":1.0},"187":{"tf":1.0},"196":{"tf":1.7320508075688772},"197":{"tf":1.7320508075688772},"198":{"tf":1.4142135623730951},"199":{"tf":1.4142135623730951},"200":{"tf":1.7320508075688772},"204":{"tf":1.4142135623730951},"205":{"tf":1.7320508075688772},"206":{"tf":1.7320508075688772},"209":{"tf":1.7320508075688772},"214":{"tf":1.4142135623730951},"215":{"tf":1.0},"216":{"tf":1.0},"219":{"tf":1.7320508075688772},"220":{"tf":1.0},"223":{"tf":1.4142135623730951},"224":{"tf":2.0},"227":{"tf":1.4142135623730951},"234":{"tf":1.0},"235":{"tf":1.0},"236":{"tf":1.4142135623730951},"237":{"tf":1.4142135623730951},"241":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.7320508075688772},"268":{"tf":1.0},"270":{"tf":1.0},"272":{"tf":1.0},"276":{"tf":1.0},"277":{"tf":1.4142135623730951},"279":{"tf":1.0},"280":{"tf":1.0},"283":{"tf":1.7320508075688772},"284":{"tf":1.0},"286":{"tf":1.0},"293":{"tf":1.4142135623730951},"295":{"tf":1.0},"299":{"tf":1.4142135623730951},"314":{"tf":1.0},"32":{"tf":1.4142135623730951},"329":{"tf":1.0},"330":{"tf":1.0},"332":{"tf":1.4142135623730951},"339":{"tf":1.0},"347":{"tf":1.4142135623730951},"355":{"tf":2.0},"356":{"tf":1.0},"36":{"tf":1.0},"365":{"tf":1.0},"370":{"tf":1.4142135623730951},"380":{"tf":1.0},"381":{"tf":1.0},"385":{"tf":2.23606797749979},"387":{"tf":1.4142135623730951},"40":{"tf":1.0},"42":{"tf":1.0},"48":{"tf":1.0},"50":{"tf":1.4142135623730951},"51":{"tf":1.0},"54":{"tf":1.0},"55":{"tf":1.4142135623730951},"56":{"tf":1.0},"57":{"tf":1.4142135623730951},"60":{"tf":2.449489742783178},"61":{"tf":1.0},"69":{"tf":1.0},"72":{"tf":1.0},"73":{"tf":1.4142135623730951},"74":{"tf":1.0},"77":{"tf":1.0},"87":{"tf":1.0},"90":{"tf":2.6457513110645907}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"376":{"tf":1.4142135623730951}}}}},"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":14,"docs":{"154":{"tf":1.4142135623730951},"217":{"tf":1.0},"219":{"tf":1.4142135623730951},"255":{"tf":1.0},"256":{"tf":1.0},"258":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0},"329":{"tf":1.4142135623730951},"371":{"tf":1.4142135623730951},"397":{"tf":1.0},"40":{"tf":1.4142135623730951},"53":{"tf":1.4142135623730951},"61":{"tf":1.7320508075688772}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"397":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":1,"docs":{"255":{"tf":1.0}},"r":{"df":0,"docs":{},"m":{"df":2,"docs":{"408":{"tf":1.0},"86":{"tf":1.0}}}}}},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"364":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"138":{"tf":1.0},"69":{"tf":1.0}}}}},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":6,"docs":{"370":{"tf":1.0},"38":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":2.0},"45":{"tf":2.0}}}}},"s":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"377":{"tf":1.0}}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":4,"docs":{"145":{"tf":1.0},"147":{"tf":1.0},"148":{"tf":1.0},"268":{"tf":1.0}}}}},"t":{"a":{"df":0,"docs":{},"l":{"df":4,"docs":{"15":{"tf":1.4142135623730951},"262":{"tf":2.8284271247461903},"263":{"tf":1.0},"416":{"tf":1.0}}}},"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"407":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":2,"docs":{"173":{"tf":1.4142135623730951},"52":{"tf":1.0}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"209":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"l":{"df":1,"docs":{"377":{"tf":1.0}}},"r":{"a":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"92":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"f":{"a":{"c":{"df":2,"docs":{"1":{"tf":1.0},"347":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"265":{"tf":1.0},"282":{"tf":1.0}}}}},"n":{"a":{"df":0,"docs":{},"l":{"_":{"a":{"d":{"d":{"df":1,"docs":{"208":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"209":{"tf":1.0}}}}},"o":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"239":{"tf":1.0},"242":{"tf":1.0}}}}},"df":0,"docs":{}},"r":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"u":{"c":{"df":2,"docs":{"197":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"d":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"43":{"tf":1.0}}}}}}},"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"234":{"tf":2.23606797749979}}}}}}}}}},"o":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"156":{"tf":1.0},"159":{"tf":2.449489742783178}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"156":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}}}}},"s":{"df":0,"docs":{},"t":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"(":{")":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"36":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":18,"docs":{"156":{"tf":1.0},"213":{"tf":1.0},"214":{"tf":1.4142135623730951},"215":{"tf":1.4142135623730951},"216":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":2.449489742783178},"220":{"tf":2.0},"221":{"tf":1.4142135623730951},"223":{"tf":2.0},"224":{"tf":2.8284271247461903},"226":{"tf":1.0},"227":{"tf":2.449489742783178},"230":{"tf":1.0},"245":{"tf":1.0},"33":{"tf":1.4142135623730951},"35":{"tf":1.4142135623730951},"414":{"tf":1.0}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"120":{"tf":1.0}}}}}}}}},"p":{"a":{"d":{"d":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"v":{"4":{"df":1,"docs":{"100":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":2,"docs":{"100":{"tf":2.449489742783178},"162":{"tf":1.0}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{":":{":":{"df":0,"docs":{},"v":{"4":{"df":1,"docs":{"100":{"tf":1.4142135623730951}}},"6":{"df":1,"docs":{"100":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":2,"docs":{"100":{"tf":2.449489742783178},"99":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":4,"docs":{"100":{"tf":2.449489742783178},"162":{"tf":2.23606797749979},"376":{"tf":1.0},"99":{"tf":2.8284271247461903}},"v":{"4":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"6":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":2,"docs":{"332":{"tf":1.4142135623730951},"335":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"150":{"tf":1.0}}}}},"s":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":1,"docs":{"227":{"tf":1.7320508075688772}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"52":{"tf":1.7320508075688772}}}}},"t":{"_":{"a":{"d":{"d":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":2,"docs":{"198":{"tf":1.0},"209":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":4,"docs":{"196":{"tf":1.7320508075688772},"201":{"tf":1.0},"206":{"tf":1.0},"261":{"tf":1.0}}}}}}},"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"411":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"1":{"df":1,"docs":{"178":{"tf":1.7320508075688772}}},"2":{"df":1,"docs":{"178":{"tf":2.23606797749979}}},"df":6,"docs":{"178":{"tf":2.449489742783178},"227":{"tf":1.4142135623730951},"239":{"tf":2.23606797749979},"353":{"tf":2.449489742783178},"371":{"tf":1.0},"76":{"tf":1.0}}},"r":{"(":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"76":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"<":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"=":{"df":0,"docs":{},"t":{"df":1,"docs":{"397":{"tf":1.0}}}},"df":1,"docs":{"244":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"353":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"df":12,"docs":{"146":{"tf":1.0},"179":{"tf":1.0},"238":{"tf":1.0},"239":{"tf":2.8284271247461903},"240":{"tf":1.7320508075688772},"241":{"tf":1.4142135623730951},"244":{"tf":2.0},"248":{"tf":1.0},"353":{"tf":3.4641016151377544},"364":{"tf":1.0},"388":{"tf":1.0},"76":{"tf":1.7320508075688772}}}}},"’":{"df":0,"docs":{},"m":{"df":1,"docs":{"216":{"tf":1.0}}}}},"j":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"53":{"tf":1.0}}}}},"df":0,"docs":{}}},"v":{"a":{"df":1,"docs":{"198":{"tf":1.0}},"s":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":2,"docs":{"24":{"tf":1.4142135623730951},"60":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"b":{"df":2,"docs":{"385":{"tf":4.58257569495584},"388":{"tf":1.4142135623730951}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"n":{"df":5,"docs":{"292":{"tf":2.6457513110645907},"299":{"tf":1.0},"386":{"tf":1.0},"387":{"tf":2.8284271247461903},"388":{"tf":2.0}},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"l":{"df":2,"docs":{"292":{"tf":2.0},"385":{"tf":2.449489742783178}},"e":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"s":{"df":1,"docs":{"24":{"tf":1.0}}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"53":{"tf":1.0}}}},"n":{"df":0,"docs":{},"e":{"df":1,"docs":{"53":{"tf":1.0}}}}}},"k":{"b":{"df":1,"docs":{"262":{"tf":1.0}}},"df":2,"docs":{"144":{"tf":1.0},"237":{"tf":1.0}},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":1,"docs":{"377":{"tf":1.0}}}},"y":{"df":2,"docs":{"26":{"tf":1.0},"81":{"tf":1.0}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":2,"docs":{"293":{"tf":1.0},"394":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"360":{"tf":3.0}}}}}}},"n":{"d":{"df":5,"docs":{"100":{"tf":2.0},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"253":{"tf":2.23606797749979},"43":{"tf":1.0}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"176":{"tf":1.0}}}}}},"l":{"a":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"314":{"tf":1.4142135623730951}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"61":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"61":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"u":{"b":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"#":{"df":0,"docs":{},"p":{"a":{"c":{"df":0,"docs":{},"k":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"255":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":2,"docs":{"255":{"tf":1.0},"26":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"/":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":1,"docs":{"0":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"16":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"u":{"/":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":1,"docs":{"0":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"g":{"df":5,"docs":{"2":{"tf":1.0},"26":{"tf":1.0},"377":{"tf":1.0},"4":{"tf":1.0},"409":{"tf":1.0}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{".":{"c":{"a":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"(":{"&":{"df":0,"docs":{},"s":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"197":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"197":{"tf":1.0}}}}},"df":0,"docs":{}}}},"_":{"c":{"a":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"197":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{">":{"(":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"169":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"_":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"169":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"169":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":2,"docs":{"167":{"tf":2.23606797749979},"169":{"tf":2.6457513110645907}}}}}}},"s":{"df":0,"docs":{},"t":{"_":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"159":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":2,"docs":{"159":{"tf":1.0},"339":{"tf":1.0}}}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"150":{"tf":1.0}}}}},"z":{"df":0,"docs":{},"i":{"df":1,"docs":{"238":{"tf":1.0}}}}},"df":1,"docs":{"139":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"f":{".":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"df":1,"docs":{"287":{"tf":5.656854249492381}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":1,"docs":{"198":{"tf":2.449489742783178}}}},"n":{"df":8,"docs":{"140":{"tf":1.0},"154":{"tf":1.0},"219":{"tf":1.0},"347":{"tf":1.4142135623730951},"396":{"tf":1.0},"397":{"tf":2.0},"53":{"tf":1.0},"77":{"tf":1.4142135623730951}},"g":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"380":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"s":{"df":2,"docs":{"200":{"tf":1.4142135623730951},"42":{"tf":1.0}}}},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"107":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"337":{"tf":1.0}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":2,"docs":{"190":{"tf":1.0},"250":{"tf":3.0}}}}}},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"209":{"tf":1.4142135623730951},"218":{"tf":2.449489742783178},"261":{"tf":1.0}}}},"c":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":5,"docs":{"113":{"tf":1.0},"196":{"tf":1.0},"261":{"tf":1.4142135623730951},"370":{"tf":1.4142135623730951},"385":{"tf":1.0}},"r":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":3,"docs":{"196":{"tf":1.0},"261":{"tf":1.0},"40":{"tf":1.0}}}}},"df":0,"docs":{}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":1,"docs":{"255":{"tf":2.8284271247461903}}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":5,"docs":{"166":{"tf":1.0},"185":{"tf":1.4142135623730951},"190":{"tf":1.4142135623730951},"191":{"tf":1.0},"86":{"tf":2.449489742783178}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"187":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"187":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":14,"docs":{"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":1.0},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"188":{"tf":1.0},"189":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":7,"docs":{"176":{"tf":1.0},"177":{"tf":2.0},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"187":{"tf":1.7320508075688772},"190":{"tf":1.4142135623730951},"192":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"223":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"192":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"283":{"tf":2.8284271247461903}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"e":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"(":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"245":{"tf":1.0}}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"58":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":7,"docs":{"1":{"tf":1.0},"159":{"tf":1.0},"224":{"tf":2.0},"227":{"tf":1.7320508075688772},"252":{"tf":1.0},"36":{"tf":1.0},"377":{"tf":1.4142135623730951}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"102":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"k":{"df":1,"docs":{"286":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"15":{"tf":1.0}}}}},"t":{"df":1,"docs":{"408":{"tf":1.0}}},"u":{"df":0,"docs":{},"x":{"df":8,"docs":{"12":{"tf":1.0},"15":{"tf":1.7320508075688772},"17":{"tf":1.0},"21":{"tf":1.0},"22":{"tf":1.0},"24":{"tf":1.7320508075688772},"255":{"tf":1.0},"27":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"p":{"df":1,"docs":{"268":{"tf":1.7320508075688772}}},"t":{"df":92,"docs":{"100":{"tf":2.6457513110645907},"101":{"tf":1.7320508075688772},"102":{"tf":1.0},"103":{"tf":1.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":1.7320508075688772},"123":{"tf":1.0},"125":{"tf":1.4142135623730951},"139":{"tf":1.4142135623730951},"146":{"tf":1.0},"150":{"tf":1.0},"153":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"162":{"tf":1.0},"164":{"tf":1.0},"167":{"tf":1.4142135623730951},"169":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":2.0},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"187":{"tf":1.7320508075688772},"190":{"tf":1.4142135623730951},"192":{"tf":1.0},"196":{"tf":1.4142135623730951},"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"199":{"tf":2.23606797749979},"200":{"tf":2.0},"201":{"tf":1.0},"206":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"220":{"tf":1.0},"224":{"tf":1.4142135623730951},"236":{"tf":3.605551275463989},"237":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":2.23606797749979},"263":{"tf":1.0},"268":{"tf":5.916079783099616},"279":{"tf":2.0},"283":{"tf":1.4142135623730951},"284":{"tf":1.7320508075688772},"286":{"tf":2.6457513110645907},"292":{"tf":1.0},"309":{"tf":2.449489742783178},"32":{"tf":1.7320508075688772},"334":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"347":{"tf":1.0},"353":{"tf":1.0},"356":{"tf":1.7320508075688772},"36":{"tf":1.0},"360":{"tf":2.23606797749979},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":1.7320508075688772},"365":{"tf":1.7320508075688772},"370":{"tf":1.7320508075688772},"385":{"tf":2.6457513110645907},"387":{"tf":2.0},"388":{"tf":1.4142135623730951},"416":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"44":{"tf":1.0},"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":1.7320508075688772},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.3166247903554},"61":{"tf":2.23606797749979},"68":{"tf":1.0},"69":{"tf":2.449489742783178},"72":{"tf":1.7320508075688772},"73":{"tf":2.8284271247461903},"74":{"tf":2.0},"77":{"tf":2.0},"84":{"tf":1.0},"85":{"tf":1.0},"90":{"tf":1.4142135623730951},"92":{"tf":1.0},"95":{"tf":1.0},"99":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"s":{"/":{"c":{"df":0,"docs":{},"h":{"0":{"2":{"df":14,"docs":{"122":{"tf":1.4142135623730951},"32":{"tf":1.7320508075688772},"33":{"tf":2.0},"34":{"tf":1.0},"35":{"tf":1.0},"36":{"tf":1.4142135623730951},"361":{"tf":1.0},"37":{"tf":1.0},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.7320508075688772},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951}}},"3":{"df":12,"docs":{"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"51":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":2.0},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.605551275463989},"61":{"tf":3.0}}},"4":{"df":10,"docs":{"67":{"tf":1.0},"68":{"tf":1.0},"69":{"tf":2.6457513110645907},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":2.23606797749979},"73":{"tf":2.6457513110645907},"74":{"tf":2.0},"76":{"tf":2.23606797749979},"77":{"tf":2.449489742783178}}},"5":{"df":13,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}}},"6":{"df":10,"docs":{"100":{"tf":3.0},"101":{"tf":1.7320508075688772},"102":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"268":{"tf":1.0},"99":{"tf":1.0}}},"7":{"df":12,"docs":{"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0}}},"8":{"df":14,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.449489742783178},"140":{"tf":2.0},"141":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":1.7320508075688772}}},"9":{"df":8,"docs":{"153":{"tf":1.4142135623730951},"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":2.8284271247461903},"162":{"tf":1.0},"164":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"1":{"0":{"df":19,"docs":{"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.0}}},"1":{"df":11,"docs":{"196":{"tf":2.449489742783178},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"199":{"tf":2.23606797749979},"200":{"tf":2.6457513110645907},"201":{"tf":1.0},"204":{"tf":1.7320508075688772},"205":{"tf":2.0},"206":{"tf":1.7320508075688772},"208":{"tf":1.4142135623730951},"209":{"tf":2.449489742783178}}},"2":{"df":14,"docs":{"213":{"tf":1.0},"214":{"tf":1.4142135623730951},"215":{"tf":1.4142135623730951},"216":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":2.449489742783178},"220":{"tf":2.0},"221":{"tf":1.4142135623730951},"223":{"tf":2.0},"224":{"tf":2.8284271247461903},"226":{"tf":1.0},"227":{"tf":2.449489742783178},"230":{"tf":1.0},"245":{"tf":1.0}}},"3":{"df":11,"docs":{"234":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"236":{"tf":2.23606797749979},"237":{"tf":2.23606797749979},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.7320508075688772},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.0}}},"4":{"df":4,"docs":{"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"260":{"tf":1.0},"261":{"tf":2.449489742783178}}},"5":{"df":15,"docs":{"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.4142135623730951},"271":{"tf":1.0},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.7320508075688772},"280":{"tf":1.4142135623730951},"283":{"tf":2.8284271247461903},"284":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":2.23606797749979}}},"6":{"df":8,"docs":{"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":2.23606797749979},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.449489742783178}}},"7":{"df":10,"docs":{"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":2.23606797749979},"316":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":2.0}}},"8":{"df":14,"docs":{"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.4142135623730951},"330":{"tf":1.7320508075688772},"331":{"tf":1.4142135623730951},"332":{"tf":2.23606797749979},"334":{"tf":1.0},"335":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":2.449489742783178},"339":{"tf":3.1622776601683795},"340":{"tf":1.7320508075688772},"341":{"tf":1.0}}},"9":{"df":16,"docs":{"346":{"tf":1.7320508075688772},"347":{"tf":2.8284271247461903},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"353":{"tf":1.7320508075688772},"354":{"tf":1.4142135623730951},"355":{"tf":3.1622776601683795},"356":{"tf":2.0},"357":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":2.0},"365":{"tf":1.7320508075688772},"368":{"tf":1.0},"370":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"2":{"0":{"df":10,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.4142135623730951},"381":{"tf":1.7320508075688772},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":4.47213595499958},"387":{"tf":2.449489742783178},"388":{"tf":2.23606797749979}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"t":{"df":0,"docs":{},"e":{"8":{"6":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"334":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"227":{"tf":1.0}}}}}}}}},"o":{"b":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"211":{"tf":1.0}}}},"df":0,"docs":{}},"c":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"331":{"tf":1.0}}}},"df":0,"docs":{},"k":{"df":2,"docs":{"299":{"tf":2.449489742783178},"385":{"tf":1.4142135623730951}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"d":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"df":1,"docs":{"299":{"tf":1.0}}}}}}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"254":{"tf":1.4142135623730951}}}}},"l":{"df":1,"docs":{"139":{"tf":1.0}}},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"186":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"189":{"tf":1.0}}}},"<":{"'":{"a":{"df":1,"docs":{"189":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":6,"docs":{"184":{"tf":2.449489742783178},"185":{"tf":1.0},"186":{"tf":3.0},"187":{"tf":1.7320508075688772},"189":{"tf":1.4142135623730951},"192":{"tf":1.0}}}}}}},"o":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"61":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"b":{"a":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":6,"docs":{"361":{"tf":1.4142135623730951},"392":{"tf":1.0},"396":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":3.3166247903554}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"43":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"s":{"df":2,"docs":{"110":{"tf":1.7320508075688772},"24":{"tf":1.4142135623730951}}},"u":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":1,"docs":{"102":{"tf":1.0}}}}},"df":0,"docs":{}}},"m":{".":{"c":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":1,"docs":{"100":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"c":{"df":1,"docs":{"377":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"377":{"tf":1.0}}}}}}}},"o":{"df":7,"docs":{"12":{"tf":1.0},"15":{"tf":1.7320508075688772},"17":{"tf":1.0},"21":{"tf":1.0},"22":{"tf":1.0},"24":{"tf":1.4142135623730951},"27":{"tf":1.0}}},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"90":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"90":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"368":{"tf":1.0}}}}}}}},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":3,"docs":{"366":{"tf":1.0},"368":{"tf":2.23606797749979},"372":{"tf":2.0}}}}}},"df":4,"docs":{"369":{"tf":1.0},"370":{"tf":2.0},"371":{"tf":1.0},"393":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":2,"docs":{"22":{"tf":1.4142135623730951},"24":{"tf":2.0}}}},"p":{"d":{"b":{"df":1,"docs":{"24":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"r":{"df":9,"docs":{"110":{"tf":1.4142135623730951},"112":{"tf":1.0},"218":{"tf":2.23606797749979},"22":{"tf":2.23606797749979},"24":{"tf":2.0},"26":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.0},"385":{"tf":1.0}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"220":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":60,"docs":{"110":{"tf":1.4142135623730951},"154":{"tf":1.0},"157":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":3.872983346207417},"172":{"tf":1.0},"173":{"tf":1.0},"184":{"tf":1.0},"186":{"tf":1.0},"188":{"tf":1.0},"214":{"tf":1.0},"216":{"tf":1.4142135623730951},"217":{"tf":1.7320508075688772},"218":{"tf":3.872983346207417},"219":{"tf":2.449489742783178},"22":{"tf":1.7320508075688772},"220":{"tf":2.449489742783178},"221":{"tf":1.0},"23":{"tf":2.23606797749979},"230":{"tf":1.0},"234":{"tf":1.0},"24":{"tf":2.0},"244":{"tf":1.0},"26":{"tf":1.0},"261":{"tf":1.0},"267":{"tf":1.0},"272":{"tf":1.0},"273":{"tf":1.0},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.0},"280":{"tf":1.4142135623730951},"286":{"tf":1.4142135623730951},"287":{"tf":1.0},"291":{"tf":2.0},"292":{"tf":3.1622776601683795},"314":{"tf":1.0},"322":{"tf":2.449489742783178},"33":{"tf":1.0},"355":{"tf":1.4142135623730951},"364":{"tf":1.4142135623730951},"377":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.4142135623730951},"394":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"408":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"44":{"tf":1.0},"48":{"tf":1.0},"53":{"tf":1.0},"54":{"tf":2.0},"56":{"tf":1.0},"67":{"tf":1.4142135623730951},"70":{"tf":1.0},"86":{"tf":1.0},"89":{"tf":1.4142135623730951},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951}}}},"k":{"df":0,"docs":{},"e":{"df":2,"docs":{"196":{"tf":1.0},"268":{"tf":1.0}}}},"n":{"a":{"df":0,"docs":{},"g":{"df":12,"docs":{"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.0}}}}}}}},"p":{"(":{"df":0,"docs":{},"|":{"(":{"&":{"c":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":6,"docs":{"128":{"tf":1.4142135623730951},"144":{"tf":1.4142135623730951},"241":{"tf":2.449489742783178},"364":{"tf":2.6457513110645907},"377":{"tf":1.0},"381":{"tf":1.0}}},"r":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"53":{"tf":1.0}}}},"df":0,"docs":{},"k":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":1,"docs":{"252":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"414":{"tf":2.0},"415":{"tf":1.0},"417":{"tf":1.0}}}}}},"t":{"c":{"df":0,"docs":{},"h":{"(":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"394":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"105":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"105":{"tf":1.0},"107":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":44,"docs":{"10":{"tf":1.0},"101":{"tf":1.0},"102":{"tf":3.7416573867739413},"103":{"tf":1.4142135623730951},"104":{"tf":2.6457513110645907},"105":{"tf":1.4142135623730951},"106":{"tf":1.4142135623730951},"107":{"tf":3.3166247903554},"108":{"tf":1.0},"132":{"tf":1.0},"134":{"tf":1.0},"155":{"tf":2.23606797749979},"156":{"tf":2.23606797749979},"157":{"tf":2.449489742783178},"158":{"tf":1.4142135623730951},"159":{"tf":3.3166247903554},"237":{"tf":1.0},"244":{"tf":1.0},"31":{"tf":1.0},"321":{"tf":1.0},"322":{"tf":1.7320508075688772},"324":{"tf":1.4142135623730951},"326":{"tf":3.1622776601683795},"327":{"tf":2.0},"330":{"tf":1.0},"332":{"tf":1.0},"335":{"tf":3.4641016151377544},"336":{"tf":1.4142135623730951},"338":{"tf":2.23606797749979},"339":{"tf":1.7320508075688772},"340":{"tf":2.6457513110645907},"342":{"tf":1.0},"361":{"tf":2.6457513110645907},"368":{"tf":1.7320508075688772},"384":{"tf":1.4142135623730951},"385":{"tf":1.0},"392":{"tf":1.0},"394":{"tf":2.23606797749979},"396":{"tf":1.0},"42":{"tf":2.8284271247461903},"45":{"tf":2.0},"46":{"tf":1.0},"60":{"tf":1.4142135623730951},"98":{"tf":1.0}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"224":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":17,"docs":{"100":{"tf":1.4142135623730951},"102":{"tf":1.0},"103":{"tf":1.0},"104":{"tf":2.0},"107":{"tf":1.0},"268":{"tf":1.0},"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.4142135623730951},"330":{"tf":1.7320508075688772},"331":{"tf":1.4142135623730951},"332":{"tf":2.23606797749979},"335":{"tf":1.0},"338":{"tf":2.23606797749979},"339":{"tf":3.1622776601683795},"340":{"tf":1.7320508075688772},"341":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":12,"docs":{"100":{"tf":2.6457513110645907},"101":{"tf":1.7320508075688772},"102":{"tf":1.0},"103":{"tf":1.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":1.7320508075688772},"334":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"99":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":1,"docs":{"1":{"tf":1.0}}}}},"df":0,"docs":{}}},"x":{"df":3,"docs":{"107":{"tf":2.0},"283":{"tf":1.7320508075688772},"377":{"tf":1.0}}},"y":{"b":{"df":1,"docs":{"362":{"tf":1.0}}},"df":0,"docs":{}}},"df":3,"docs":{"100":{"tf":1.0},"274":{"tf":1.4142135623730951},"299":{"tf":1.4142135623730951}},"e":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":3,"docs":{"196":{"tf":1.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979}}}}}},"df":0,"docs":{},"m":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":7,"docs":{"100":{"tf":2.23606797749979},"158":{"tf":1.4142135623730951},"268":{"tf":1.7320508075688772},"297":{"tf":1.0},"338":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"199":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"199":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"338":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":1,"docs":{"341":{"tf":1.0}}}}}}},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":2,"docs":{"268":{"tf":1.0},"338":{"tf":1.0}}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"268":{"tf":1.0},"338":{"tf":1.4142135623730951}}}}}},"w":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"338":{"tf":1.0}},"e":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":1,"docs":{"100":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":2.23606797749979}}}}}}},"t":{"a":{"d":{"a":{"df":0,"docs":{},"t":{"a":{"df":1,"docs":{"255":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":1,"docs":{"397":{"tf":1.4142135623730951}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"354":{"tf":2.23606797749979},"359":{"tf":1.4142135623730951},"360":{"tf":1.0}}}},"h":{"df":0,"docs":{},"o":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"176":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"36":{"tf":1.0}}}},"df":0,"docs":{}}},"df":5,"docs":{"100":{"tf":1.0},"239":{"tf":1.0},"378":{"tf":1.0},"397":{"tf":1.0},"92":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"177":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"1":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"190":{"tf":1.0}}}}},"3":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"190":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"i":{"d":{"df":1,"docs":{"347":{"tf":3.1622776601683795}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":3,"docs":{"354":{"tf":2.449489742783178},"359":{"tf":1.4142135623730951},"360":{"tf":1.0}}}}}}}},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{":":{":":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":1,"docs":{"221":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":8,"docs":{"212":{"tf":2.23606797749979},"213":{"tf":1.7320508075688772},"215":{"tf":1.0},"221":{"tf":1.4142135623730951},"222":{"tf":1.0},"225":{"tf":1.0},"227":{"tf":1.0},"229":{"tf":1.0}}}}}},"m":{"df":1,"docs":{"26":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"s":{"df":4,"docs":{"223":{"tf":1.0},"255":{"tf":1.0},"347":{"tf":1.0},"86":{"tf":1.4142135623730951}}}},"t":{"df":1,"docs":{"255":{"tf":2.23606797749979}}},"x":{"df":1,"docs":{"253":{"tf":2.23606797749979}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"172":{"tf":1.7320508075688772}}}}}},"k":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":2,"docs":{"21":{"tf":2.0},"260":{"tf":1.0}}}}},"df":0,"docs":{}},"m":{"df":1,"docs":{"17":{"tf":1.0}}},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"283":{"tf":1.0}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":3.1622776601683795}}}}}}}}}}},"d":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"126":{"tf":1.4142135623730951},"209":{"tf":1.0}}}},"df":7,"docs":{"112":{"tf":2.8284271247461903},"113":{"tf":1.0},"115":{"tf":1.4142135623730951},"125":{"tf":2.0},"126":{"tf":1.0},"209":{"tf":1.0},"392":{"tf":1.0}},"e":{"df":2,"docs":{"150":{"tf":1.0},"377":{"tf":1.0}},"l":{"df":1,"docs":{"414":{"tf":1.0}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"p":{"df":0,"docs":{},"h":{"df":1,"docs":{"224":{"tf":1.0}}}}}}}},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"53":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"e":{"df":9,"docs":{"177":{"tf":1.4142135623730951},"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"255":{"tf":1.0},"26":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":2.449489742783178},"297":{"tf":1.0},"86":{"tf":1.0}}}},"v":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"106":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":6,"docs":{"100":{"tf":1.0},"236":{"tf":2.23606797749979},"293":{"tf":3.3166247903554},"294":{"tf":1.0},"299":{"tf":1.0},"392":{"tf":1.0}}}},"z":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"a":{"/":{"5":{".":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"p":{"df":0,"docs":{},"s":{"c":{":":{":":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"294":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":2,"docs":{"294":{"tf":1.0},"297":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"g":{"df":2,"docs":{"200":{"tf":1.4142135623730951},"338":{"tf":1.0}}},"v":{"c":{"df":2,"docs":{"16":{"tf":1.0},"416":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":8,"docs":{"102":{"tf":1.0},"139":{"tf":1.0},"205":{"tf":1.0},"224":{"tf":1.0},"294":{"tf":1.0},"336":{"tf":1.0},"55":{"tf":1.4142135623730951},"73":{"tf":1.4142135623730951}}}}}}},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"48":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"48":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"a":{"b":{"df":0,"docs":{},"l":{"df":4,"docs":{"185":{"tf":1.0},"265":{"tf":1.0},"282":{"tf":1.0},"73":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"283":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"283":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"t":{"df":1,"docs":{"68":{"tf":1.0}}}},"df":25,"docs":{"131":{"tf":1.0},"148":{"tf":1.0},"185":{"tf":1.0},"189":{"tf":1.0},"244":{"tf":1.0},"247":{"tf":1.0},"275":{"tf":1.7320508075688772},"283":{"tf":1.4142135623730951},"320":{"tf":1.0},"34":{"tf":2.0},"346":{"tf":1.4142135623730951},"347":{"tf":1.0},"348":{"tf":1.0},"35":{"tf":1.4142135623730951},"368":{"tf":1.0},"387":{"tf":1.0},"392":{"tf":1.0},"396":{"tf":2.0},"42":{"tf":1.0},"48":{"tf":1.7320508075688772},"49":{"tf":1.0},"50":{"tf":2.23606797749979},"73":{"tf":2.449489742783178},"92":{"tf":1.0},"93":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"299":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":6,"docs":{"284":{"tf":1.4142135623730951},"299":{"tf":4.242640687119285},"300":{"tf":2.449489742783178},"303":{"tf":1.4142135623730951},"305":{"tf":1.0},"385":{"tf":1.0}}}},"df":2,"docs":{"299":{"tf":1.0},"385":{"tf":2.23606797749979}},"g":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"d":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}},"df":2,"docs":{"299":{"tf":1.7320508075688772},"300":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"u":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"299":{"tf":1.0}}}},"df":0,"docs":{}}}},"y":{"_":{"c":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"252":{"tf":2.449489742783178}},"e":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{":":{":":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"253":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"253":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"272":{"tf":1.0}}}}}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"274":{"tf":2.449489742783178}}}}},"t":{"df":4,"docs":{"269":{"tf":1.0},"272":{"tf":2.23606797749979},"273":{"tf":1.7320508075688772},"274":{"tf":1.4142135623730951}}}},"df":2,"docs":{"272":{"tf":2.0},"273":{"tf":1.0}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"407":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}}}},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"196":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"196":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":10,"docs":{"199":{"tf":1.0},"227":{"tf":1.0},"24":{"tf":1.0},"255":{"tf":2.0},"26":{"tf":1.0},"273":{"tf":1.0},"274":{"tf":1.0},"367":{"tf":1.0},"370":{"tf":3.1622776601683795},"86":{"tf":2.0}}}},"n":{"df":2,"docs":{"400":{"tf":1.0},"401":{"tf":1.4142135623730951}}},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":1,"docs":{"377":{"tf":1.0}}}}}},"df":6,"docs":{"340":{"tf":2.0},"378":{"tf":1.0},"385":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"52":{"tf":2.0},"62":{"tf":1.0}},"e":{"df":0,"docs":{},"g":{"df":1,"docs":{"396":{"tf":1.0}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"361":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":3,"docs":{"343":{"tf":1.0},"361":{"tf":2.0},"385":{"tf":1.7320508075688772}}}}},"w":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"32":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"32":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"32":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"339":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"df":30,"docs":{"110":{"tf":1.7320508075688772},"113":{"tf":1.0},"138":{"tf":1.0},"145":{"tf":1.0},"164":{"tf":2.0},"176":{"tf":1.0},"177":{"tf":1.4142135623730951},"178":{"tf":1.0},"180":{"tf":1.0},"196":{"tf":1.4142135623730951},"200":{"tf":1.4142135623730951},"212":{"tf":1.7320508075688772},"218":{"tf":2.0},"219":{"tf":2.0},"26":{"tf":2.449489742783178},"260":{"tf":1.4142135623730951},"261":{"tf":1.0},"27":{"tf":1.0},"272":{"tf":1.4142135623730951},"283":{"tf":1.4142135623730951},"299":{"tf":1.4142135623730951},"317":{"tf":1.4142135623730951},"32":{"tf":1.7320508075688772},"34":{"tf":2.0},"370":{"tf":1.7320508075688772},"376":{"tf":1.4142135623730951},"385":{"tf":3.1622776601683795},"410":{"tf":1.0},"48":{"tf":1.0},"95":{"tf":1.4142135623730951}},"s":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"l":{"df":5,"docs":{"175":{"tf":1.4142135623730951},"176":{"tf":2.0},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":6,"docs":{"343":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"357":{"tf":2.0},"358":{"tf":1.4142135623730951},"359":{"tf":2.8284271247461903},"360":{"tf":1.0}}}}}},"x":{"df":0,"docs":{},"t":{"(":{"&":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":1,"docs":{"355":{"tf":1.0}}}}},"df":0,"docs":{}},"df":6,"docs":{"159":{"tf":1.7320508075688772},"239":{"tf":3.0},"240":{"tf":2.0},"244":{"tf":2.23606797749979},"353":{"tf":2.0},"381":{"tf":1.0}}}}},"h":{"df":0,"docs":{},"i":{"df":1,"docs":{"159":{"tf":1.0}}}},"i":{"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"a":{"df":1,"docs":{"1":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":4,"docs":{"10":{"tf":1.0},"412":{"tf":1.0},"414":{"tf":3.4641016151377544},"416":{"tf":2.23606797749979}}}}}}},"l":{"df":2,"docs":{"268":{"tf":2.449489742783178},"286":{"tf":1.7320508075688772}}}},"o":{"_":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}},"b":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"i":{"df":3,"docs":{"216":{"tf":1.0},"227":{"tf":1.0},"230":{"tf":1.0}}}},"df":0,"docs":{}}},"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"287":{"tf":3.7416573867739413}}}},"df":0,"docs":{},"n":{"df":1,"docs":{"105":{"tf":1.4142135623730951}},"e":{"df":28,"docs":{"101":{"tf":2.8284271247461903},"104":{"tf":2.23606797749979},"105":{"tf":1.4142135623730951},"107":{"tf":1.0},"132":{"tf":1.7320508075688772},"146":{"tf":1.0},"159":{"tf":2.0},"163":{"tf":1.0},"171":{"tf":1.4142135623730951},"173":{"tf":1.4142135623730951},"234":{"tf":1.0},"237":{"tf":1.7320508075688772},"239":{"tf":1.0},"244":{"tf":1.0},"287":{"tf":2.23606797749979},"320":{"tf":1.4142135623730951},"321":{"tf":1.0},"326":{"tf":1.7320508075688772},"328":{"tf":1.4142135623730951},"332":{"tf":1.7320508075688772},"335":{"tf":1.4142135623730951},"339":{"tf":1.0},"361":{"tf":1.0},"377":{"tf":1.0},"387":{"tf":2.0},"401":{"tf":1.4142135623730951},"404":{"tf":1.0},"52":{"tf":1.0}}}},"t":{"df":0,"docs":{},"e":{"df":7,"docs":{"154":{"tf":1.0},"261":{"tf":1.0},"385":{"tf":1.0},"407":{"tf":1.0},"408":{"tf":1.0},"43":{"tf":1.0},"53":{"tf":1.0}}},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"156":{"tf":1.0},"158":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"178":{"tf":2.449489742783178}}},"y":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"1":{"df":1,"docs":{"178":{"tf":1.0}}},"df":1,"docs":{"178":{"tf":1.0}}}}}}},"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"178":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"188":{"tf":1.7320508075688772}}},"m":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}},"w":{"df":1,"docs":{"15":{"tf":1.0}}}},"s":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":5,"docs":{"101":{"tf":5.196152422706632},"105":{"tf":1.0},"182":{"tf":1.4142135623730951},"268":{"tf":1.0},"346":{"tf":1.0}}}},"m":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"237":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}},"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"167":{"tf":1.0}}}}}}},"df":12,"docs":{"255":{"tf":1.0},"291":{"tf":3.0},"292":{"tf":5.0990195135927845},"339":{"tf":1.0},"340":{"tf":1.0},"38":{"tf":1.0},"41":{"tf":2.0},"42":{"tf":1.7320508075688772},"43":{"tf":1.7320508075688772},"45":{"tf":1.4142135623730951},"51":{"tf":1.0},"60":{"tf":3.1622776601683795}}}}},"df":4,"docs":{"299":{"tf":1.4142135623730951},"340":{"tf":1.4142135623730951},"346":{"tf":1.4142135623730951},"45":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}}}}}}},"o":{"(":{"1":{"df":1,"docs":{"140":{"tf":1.0}}},"df":0,"docs":{}},"b":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{")":{".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"93":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"93":{"tf":1.0}}}}}}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"365":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":3,"docs":{"144":{"tf":1.0},"266":{"tf":1.0},"93":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":1,"docs":{"26":{"tf":1.0}}}}}}},"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"k":{"(":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"327":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":1,"docs":{"45":{"tf":1.0}}}}},"t":{"df":2,"docs":{"155":{"tf":1.0},"171":{"tf":1.0}}}},"\\":{"df":0,"docs":{},"r":{"\\":{"df":0,"docs":{},"n":{"\\":{"df":0,"docs":{},"r":{"\\":{"df":0,"docs":{},"n":{"df":1,"docs":{"379":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":1.0}}}}},"df":19,"docs":{"155":{"tf":2.449489742783178},"158":{"tf":1.4142135623730951},"159":{"tf":3.1622776601683795},"162":{"tf":1.0},"171":{"tf":1.0},"196":{"tf":1.7320508075688772},"198":{"tf":1.4142135623730951},"201":{"tf":1.0},"219":{"tf":1.7320508075688772},"220":{"tf":2.0},"227":{"tf":1.0},"252":{"tf":1.4142135623730951},"261":{"tf":2.6457513110645907},"294":{"tf":1.0},"327":{"tf":1.0},"36":{"tf":2.23606797749979},"379":{"tf":1.0},"42":{"tf":1.4142135623730951},"45":{"tf":2.0}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"154":{"tf":1.0}}}}},"n":{"c":{"df":1,"docs":{"385":{"tf":1.0}}},"df":5,"docs":{"179":{"tf":1.0},"187":{"tf":1.0},"261":{"tf":1.7320508075688772},"334":{"tf":1.0},"336":{"tf":1.0}},"e":{"_":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"205":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"226":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":10,"docs":{"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":2.23606797749979},"316":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":2.0}}}}}}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":5,"docs":{"157":{"tf":1.0},"252":{"tf":1.4142135623730951},"385":{"tf":1.0},"41":{"tf":1.4142135623730951},"7":{"tf":1.0}}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":1,"docs":{"354":{"tf":1.0}}}},"t":{"df":1,"docs":{"250":{"tf":3.0}},"i":{"df":0,"docs":{},"m":{"df":2,"docs":{"250":{"tf":1.0},"262":{"tf":1.0}}},"o":{"df":0,"docs":{},"n":{"<":{"&":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"<":{"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":1,"docs":{"321":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"146":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":1,"docs":{"132":{"tf":1.0}}},"v":{"df":1,"docs":{"146":{"tf":1.0}}}},"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"<":{"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":1,"docs":{"321":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"df":2,"docs":{"101":{"tf":1.0},"159":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"3":{"2":{"df":4,"docs":{"101":{"tf":1.4142135623730951},"104":{"tf":1.4142135623730951},"146":{"tf":1.0},"326":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":1,"docs":{"101":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"401":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"r":{"c":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"287":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":2,"docs":{"239":{"tf":1.0},"353":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"237":{"tf":1.0}}}}},"t":{"df":14,"docs":{"101":{"tf":4.123105625617661},"104":{"tf":2.0},"105":{"tf":1.0},"108":{"tf":1.0},"159":{"tf":1.7320508075688772},"166":{"tf":1.0},"171":{"tf":2.23606797749979},"173":{"tf":2.23606797749979},"234":{"tf":2.0},"237":{"tf":1.4142135623730951},"287":{"tf":1.0},"317":{"tf":1.4142135623730951},"361":{"tf":1.0},"404":{"tf":1.7320508075688772}},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{":":{":":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"387":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"u":{"8":{"df":1,"docs":{"107":{"tf":1.0}}},"df":0,"docs":{}},"v":{"df":0,"docs":{},"e":{"c":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"237":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"f":{"6":{"4":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"(":{"5":{".":{"0":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"3":{"2":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"(":{"5":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":18,"docs":{"100":{"tf":1.0},"101":{"tf":3.3166247903554},"146":{"tf":1.0},"155":{"tf":1.0},"159":{"tf":3.0},"163":{"tf":1.0},"165":{"tf":1.0},"237":{"tf":1.7320508075688772},"24":{"tf":1.0},"314":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.4142135623730951},"322":{"tf":1.0},"353":{"tf":1.0},"381":{"tf":1.0},"387":{"tf":1.7320508075688772},"388":{"tf":1.0},"98":{"tf":1.0}}}}}}},"r":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"148":{"tf":1.4142135623730951}}}}}}}}},"d":{"df":1,"docs":{"401":{"tf":2.23606797749979}},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"401":{"tf":1.0},"42":{"tf":2.0},"45":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"42":{"tf":2.23606797749979}}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"42":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"84":{"tf":1.0}}}}}},"p":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":2,"docs":{"176":{"tf":1.0},"357":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"s":{"df":2,"docs":{"158":{"tf":1.4142135623730951},"377":{"tf":1.0}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"214":{"tf":1.4142135623730951}}}}}},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":1.7320508075688772}}}}}}}},"t":{"df":9,"docs":{"154":{"tf":1.0},"164":{"tf":1.0},"196":{"tf":1.0},"205":{"tf":1.0},"217":{"tf":1.0},"219":{"tf":1.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979},"53":{"tf":1.0}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":2.0}}}}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":3.4641016151377544}}}}}}}}}}},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"203":{"tf":1.0},"229":{"tf":2.0},"230":{"tf":2.23606797749979}}}}}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"204":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":3,"docs":{"204":{"tf":1.7320508075688772},"230":{"tf":1.0},"354":{"tf":1.4142135623730951}}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"146":{"tf":1.0}},"f":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}}}}}}},"h":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"o":{"a":{"d":{"df":1,"docs":{"354":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"d":{"df":2,"docs":{"393":{"tf":1.0},"416":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}}}}}}},"w":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":7,"docs":{"67":{"tf":1.0},"69":{"tf":1.0},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"76":{"tf":2.23606797749979},"77":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"o":{"df":6,"docs":{"68":{"tf":1.0},"69":{"tf":2.449489742783178},"72":{"tf":1.7320508075688772},"73":{"tf":2.6457513110645907},"74":{"tf":2.0},"77":{"tf":2.0}}}}},"df":1,"docs":{"293":{"tf":1.0}}}}}}}}}}},"p":{"1":{")":{".":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"p":{"2":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},".":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"p":{"2":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":2,"docs":{"172":{"tf":1.4142135623730951},"93":{"tf":1.0}}},"2":{"df":2,"docs":{"172":{"tf":1.7320508075688772},"93":{"tf":1.0}}},"3":{".":{"df":0,"docs":{},"i":{"df":1,"docs":{"172":{"tf":1.0}}},"x":{"df":1,"docs":{"172":{"tf":1.0}}}},"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"a":{"c":{"df":0,"docs":{},"k":{"a":{"df":0,"docs":{},"g":{"df":7,"docs":{"110":{"tf":1.0},"255":{"tf":2.449489742783178},"256":{"tf":1.0},"26":{"tf":1.4142135623730951},"260":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"180":{"tf":2.0}}}},"df":0,"docs":{}}},"n":{"c":{"a":{"df":0,"docs":{},"k":{"df":1,"docs":{"370":{"tf":3.1622776601683795}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"p":{"a":{"df":0,"docs":{},"n":{"c":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"7":{":":{"9":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"c":{"!":{"(":{"\"":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":1,"docs":{"157":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"153":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"153":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":23,"docs":{"151":{"tf":1.4142135623730951},"152":{"tf":1.7320508075688772},"153":{"tf":3.0},"154":{"tf":2.8284271247461903},"155":{"tf":1.4142135623730951},"156":{"tf":1.4142135623730951},"158":{"tf":2.23606797749979},"159":{"tf":1.7320508075688772},"160":{"tf":2.23606797749979},"161":{"tf":1.0},"163":{"tf":2.0},"164":{"tf":1.4142135623730951},"165":{"tf":1.4142135623730951},"196":{"tf":1.7320508075688772},"197":{"tf":1.0},"200":{"tf":2.0},"219":{"tf":3.0},"220":{"tf":1.0},"252":{"tf":1.0},"283":{"tf":1.0},"361":{"tf":1.7320508075688772},"370":{"tf":1.0},"52":{"tf":1.0}},"k":{"df":6,"docs":{"154":{"tf":1.0},"158":{"tf":1.4142135623730951},"196":{"tf":1.0},"43":{"tf":1.0},"52":{"tf":1.0},"53":{"tf":1.0}}}},"df":0,"docs":{}}},"r":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":5,"docs":{"155":{"tf":1.0},"339":{"tf":1.0},"354":{"tf":1.0},"57":{"tf":1.0},"86":{"tf":2.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"55":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"178":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"55":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"113":{"tf":1.0},"287":{"tf":3.1622776601683795}}}}},"s":{"df":8,"docs":{"162":{"tf":1.0},"229":{"tf":1.0},"230":{"tf":1.0},"370":{"tf":1.0},"42":{"tf":2.23606797749979},"43":{"tf":1.0},"45":{"tf":2.23606797749979},"51":{"tf":1.0}},"e":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":1,"docs":{"218":{"tf":4.47213595499958}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"43":{"tf":1.0}}}}}}}}}}}},"t":{"df":1,"docs":{"188":{"tf":1.4142135623730951}},"i":{"a":{"df":0,"docs":{},"l":{"_":{"c":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":1,"docs":{"401":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":4,"docs":{"198":{"tf":1.4142135623730951},"396":{"tf":1.4142135623730951},"400":{"tf":2.6457513110645907},"401":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"r":{"d":{"df":4,"docs":{"169":{"tf":1.4142135623730951},"180":{"tf":1.0},"396":{"tf":2.449489742783178},"401":{"tf":3.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"s":{"df":3,"docs":{"196":{"tf":1.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979}}}},"t":{"df":1,"docs":{"396":{"tf":2.23606797749979}},"h":{"df":6,"docs":{"111":{"tf":1.0},"17":{"tf":1.7320508075688772},"262":{"tf":1.4142135623730951},"263":{"tf":1.0},"370":{"tf":1.0},"397":{"tf":1.7320508075688772}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"103":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":27,"docs":{"100":{"tf":3.0},"101":{"tf":1.7320508075688772},"102":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"268":{"tf":1.0},"326":{"tf":1.7320508075688772},"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.4142135623730951},"330":{"tf":2.23606797749979},"331":{"tf":1.4142135623730951},"332":{"tf":2.23606797749979},"334":{"tf":1.0},"335":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":2.449489742783178},"339":{"tf":3.1622776601683795},"340":{"tf":1.7320508075688772},"341":{"tf":1.0},"357":{"tf":1.0},"396":{"tf":1.0},"99":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"336":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"c":{"df":1,"docs":{"416":{"tf":1.7320508075688772}}},"d":{"b":{"df":1,"docs":{"24":{"tf":1.0}}},"df":0,"docs":{}},"df":3,"docs":{"211":{"tf":1.0},"261":{"tf":2.23606797749979},"338":{"tf":2.23606797749979}},"e":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":4,"docs":{"317":{"tf":1.0},"320":{"tf":2.6457513110645907},"321":{"tf":1.7320508075688772},"322":{"tf":2.0}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"322":{"tf":3.1622776601683795}}}}}}}}}}}}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":1,"docs":{"102":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":2,"docs":{"176":{"tf":1.0},"359":{"tf":1.7320508075688772}}}}},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"f":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}},"h":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":1,"docs":{"379":{"tf":1.0}}}}},"df":0,"docs":{}}},"i":{"df":2,"docs":{"1":{"tf":1.0},"408":{"tf":1.4142135623730951}},"g":{"df":1,"docs":{"150":{"tf":1.0}}},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}}}}},"l":{"a":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"df":2,"docs":{"167":{"tf":1.0},"314":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"=":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"354":{"tf":1.0}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":6,"docs":{"255":{"tf":1.0},"38":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":2.23606797749979},"45":{"tf":2.0}}}},"df":0,"docs":{}},"u":{"df":1,"docs":{"261":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"104":{"tf":1.7320508075688772},"105":{"tf":1.0},"57":{"tf":1.0}},"e":{"(":{"df":0,"docs":{},"f":{"df":1,"docs":{"104":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"216":{"tf":1.7320508075688772},"227":{"tf":1.4142135623730951},"230":{"tf":1.0}}}}}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"356":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"f":{"3":{"2":{"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":2,"docs":{"170":{"tf":2.449489742783178},"172":{"tf":2.449489742783178}}}},"df":8,"docs":{"170":{"tf":2.0},"172":{"tf":2.6457513110645907},"338":{"tf":2.23606797749979},"339":{"tf":1.4142135623730951},"354":{"tf":2.8284271247461903},"356":{"tf":2.449489742783178},"84":{"tf":1.4142135623730951},"93":{"tf":2.23606797749979}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"346":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":15,"docs":{"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.7320508075688772},"280":{"tf":1.4142135623730951},"283":{"tf":2.449489742783178},"284":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":2.23606797749979}}}}}},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"283":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"270":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"l":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}},"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"p":{"df":2,"docs":{"134":{"tf":1.0},"328":{"tf":2.0}}},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"376":{"tf":1.0}},"u":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"ê":{"df":1,"docs":{"411":{"tf":1.4142135623730951}}}}}}}},"s":{"df":0,"docs":{},"t":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"321":{"tf":1.0}}}}}},"df":0,"docs":{}},":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"316":{"tf":1.0},"317":{"tf":1.0},"322":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"df":9,"docs":{"316":{"tf":1.7320508075688772},"317":{"tf":3.3166247903554},"318":{"tf":1.4142135623730951},"319":{"tf":1.0},"320":{"tf":3.1622776601683795},"321":{"tf":3.1622776601683795},"322":{"tf":4.58257569495584},"372":{"tf":1.0},"378":{"tf":1.0}}}},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":6,"docs":{"14":{"tf":1.0},"16":{"tf":1.0},"17":{"tf":1.0},"21":{"tf":1.0},"227":{"tf":1.0},"24":{"tf":1.4142135623730951}}}}}}}}}},"p":{"df":0,"docs":{},"v":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}},"r":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":3,"docs":{"124":{"tf":1.0},"145":{"tf":1.0},"155":{"tf":1.0}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"s":{"df":2,"docs":{"0":{"tf":1.0},"2":{"tf":1.0}}}},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":1,"docs":{"90":{"tf":1.0}}}}},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":1,"docs":{"86":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"y":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"253":{"tf":2.23606797749979}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"l":{"a":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"d":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"55":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"n":{"!":{"(":{"\"":{"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":2,"docs":{"26":{"tf":1.0},"367":{"tf":1.4142135623730951}}}}}}},"j":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"1":{"df":1,"docs":{"90":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"h":{"df":2,"docs":{"408":{"tf":1.4142135623730951},"48":{"tf":1.7320508075688772}}}},"x":{"df":1,"docs":{"37":{"tf":1.0}}},"{":{"b":{"df":1,"docs":{"142":{"tf":1.0}}},"c":{"df":1,"docs":{"142":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":29,"docs":{"103":{"tf":1.0},"139":{"tf":1.0},"172":{"tf":1.0},"186":{"tf":1.7320508075688772},"204":{"tf":1.7320508075688772},"216":{"tf":1.0},"22":{"tf":1.0},"223":{"tf":1.0},"228":{"tf":1.4142135623730951},"23":{"tf":2.0},"230":{"tf":1.0},"236":{"tf":1.4142135623730951},"276":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":1.0},"293":{"tf":1.0},"33":{"tf":1.0},"335":{"tf":1.4142135623730951},"366":{"tf":1.0},"367":{"tf":1.0},"37":{"tf":1.4142135623730951},"370":{"tf":1.0},"379":{"tf":1.0},"45":{"tf":1.0},"53":{"tf":1.0},"55":{"tf":1.0},"73":{"tf":1.7320508075688772},"77":{"tf":1.0},"90":{"tf":3.1622776601683795}}}}}},"v":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"208":{"tf":1.0}}}},"df":1,"docs":{"393":{"tf":1.0}}}},"o":{"b":{"a":{"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"176":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"209":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"229":{"tf":1.0},"230":{"tf":1.0}}}}}},"c":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"371":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"df":3,"docs":{"369":{"tf":1.4142135623730951},"370":{"tf":1.7320508075688772},"372":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"371":{"tf":1.0}},"e":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":2,"docs":{"366":{"tf":1.0},"369":{"tf":1.0}}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"(":{"1":{"df":1,"docs":{"220":{"tf":1.0}}},"df":0,"docs":{}},"df":1,"docs":{"219":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"219":{"tf":1.0}}}}}},"d":{"df":0,"docs":{},"u":{"c":{"df":1,"docs":{"294":{"tf":1.0}},"t":{"df":1,"docs":{"223":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}}}}}}}},"i":{"df":0,"docs":{},"l":{"df":2,"docs":{"153":{"tf":1.0},"250":{"tf":1.4142135623730951}},"e":{".":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":1,"docs":{"250":{"tf":1.4142135623730951}}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":2,"docs":{"153":{"tf":1.0},"250":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"m":{"df":13,"docs":{"2":{"tf":1.0},"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"51":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":2.0},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.605551275463989},"61":{"tf":3.0}},"m":{"df":1,"docs":{"194":{"tf":1.0}}}}},"df":0,"docs":{}}},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":14,"docs":{"213":{"tf":1.0},"214":{"tf":1.0},"215":{"tf":1.4142135623730951},"216":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":2.449489742783178},"220":{"tf":1.7320508075688772},"221":{"tf":1.4142135623730951},"223":{"tf":1.7320508075688772},"224":{"tf":2.0},"226":{"tf":1.0},"227":{"tf":2.449489742783178},"230":{"tf":1.0},"245":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":2,"docs":{"220":{"tf":1.0},"224":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"214":{"tf":1.0},"223":{"tf":1.0},"224":{"tf":1.4142135623730951}}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"df":1,"docs":{"110":{"tf":1.0}}},"df":0,"docs":{}}}},"df":10,"docs":{"110":{"tf":2.0},"158":{"tf":1.0},"196":{"tf":1.0},"21":{"tf":2.0},"212":{"tf":1.0},"26":{"tf":1.0},"32":{"tf":1.0},"376":{"tf":1.0},"48":{"tf":1.0},"60":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"22":{"tf":1.0}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":11,"docs":{"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.7320508075688772},"125":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"e":{"df":1,"docs":{"416":{"tf":1.4142135623730951}}},"o":{"df":2,"docs":{"123":{"tf":1.0},"125":{"tf":1.4142135623730951}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"112":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"159":{"tf":1.0}}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":2,"docs":{"375":{"tf":1.4142135623730951},"409":{"tf":1.0}}}}},"df":1,"docs":{"15":{"tf":1.0}}}}}},"s":{"df":1,"docs":{"227":{"tf":1.4142135623730951}}},"t":{"df":1,"docs":{"411":{"tf":1.0}},"r":{"df":1,"docs":{"347":{"tf":1.7320508075688772}}}},"u":{"b":{"df":23,"docs":{"111":{"tf":1.0},"112":{"tf":2.23606797749979},"114":{"tf":2.0},"115":{"tf":3.3166247903554},"117":{"tf":2.8284271247461903},"121":{"tf":2.8284271247461903},"126":{"tf":1.0},"127":{"tf":1.0},"175":{"tf":1.0},"178":{"tf":2.23606797749979},"208":{"tf":1.0},"221":{"tf":1.0},"237":{"tf":1.0},"239":{"tf":1.0},"253":{"tf":2.8284271247461903},"309":{"tf":1.7320508075688772},"318":{"tf":1.0},"347":{"tf":1.0},"369":{"tf":1.0},"371":{"tf":1.0},"372":{"tf":1.0},"385":{"tf":1.7320508075688772},"392":{"tf":1.0}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":6,"docs":{"255":{"tf":1.7320508075688772},"256":{"tf":1.4142135623730951},"257":{"tf":1.0},"317":{"tf":1.0},"321":{"tf":2.23606797749979},"322":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"327":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"h":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"139":{"tf":2.23606797749979},"318":{"tf":1.0}}}}}},"df":5,"docs":{"131":{"tf":1.4142135623730951},"134":{"tf":1.0},"139":{"tf":2.0},"224":{"tf":1.0},"283":{"tf":1.0}}}}},"y":{"df":1,"docs":{"24":{"tf":1.0}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"24":{"tf":1.4142135623730951}}}}}}}},"q":{"df":0,"docs":{},"l":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":2.0}}}}}}}},"df":0,"docs":{}}},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"103":{"tf":1.7320508075688772},"107":{"tf":1.0}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":9,"docs":{"215":{"tf":1.0},"217":{"tf":1.0},"218":{"tf":2.6457513110645907},"223":{"tf":1.4142135623730951},"224":{"tf":1.4142135623730951},"227":{"tf":2.23606797749979},"244":{"tf":1.4142135623730951},"245":{"tf":1.0},"247":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"100":{"tf":1.0},"43":{"tf":1.4142135623730951}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"44":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":2.8284271247461903}}}}}},"r":{"#":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"h":{"(":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"394":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"394":{"tf":1.0}}}}}},".":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"237":{"tf":1.0}}}}},"df":0,"docs":{}}}},"1":{"df":1,"docs":{"73":{"tf":1.7320508075688772}}},"2":{"df":1,"docs":{"73":{"tf":1.4142135623730951}}},"3":{"df":1,"docs":{"73":{"tf":1.0}}},"\\":{"df":0,"docs":{},"n":{"df":2,"docs":{"378":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951}}}},"a":{"c":{"df":0,"docs":{},"e":{"df":1,"docs":{"280":{"tf":1.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"i":{"df":1,"docs":{"69":{"tf":1.4142135623730951}}}},"l":{"df":0,"docs":{},"p":{"df":0,"docs":{},"h":{"df":1,"docs":{"308":{"tf":1.0}}}}},"n":{"d":{":":{":":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"41":{"tf":1.4142135623730951}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"122":{"tf":1.0},"41":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"_":{"c":{"df":0,"docs":{},"h":{"a":{"c":{"df":0,"docs":{},"h":{"a":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"df":7,"docs":{"110":{"tf":1.0},"122":{"tf":2.6457513110645907},"261":{"tf":4.58257569495584},"39":{"tf":1.0},"40":{"tf":4.123105625617661},"401":{"tf":1.0},"41":{"tf":1.7320508075688772}}},"df":0,"docs":{},"g":{"df":4,"docs":{"337":{"tf":1.0},"341":{"tf":1.0},"397":{"tf":1.0},"61":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"61":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"164":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"397":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"397":{"tf":1.0}}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"337":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"o":{"df":1,"docs":{"397":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"p":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"1":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"w":{"df":1,"docs":{"346":{"tf":1.0}}}},"b":{"df":1,"docs":{"24":{"tf":1.0}}},"c":{":":{":":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"(":{"&":{"a":{"df":1,"docs":{"279":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":3,"docs":{"279":{"tf":2.6457513110645907},"280":{"tf":1.0},"287":{"tf":1.0}}}}}}},"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"d":{"df":1,"docs":{"287":{"tf":2.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"280":{"tf":1.0},"287":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"w":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"287":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"<":{"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":1,"docs":{"362":{"tf":1.0}}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"279":{"tf":2.23606797749979},"280":{"tf":1.7320508075688772},"286":{"tf":3.0}}}}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"302":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"299":{"tf":1.0}}}}}}},"n":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"287":{"tf":3.1622776601683795}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"284":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}}},"t":{"df":14,"docs":{"265":{"tf":1.0},"278":{"tf":2.449489742783178},"279":{"tf":2.23606797749979},"280":{"tf":2.8284271247461903},"282":{"tf":2.23606797749979},"284":{"tf":2.6457513110645907},"285":{"tf":1.0},"286":{"tf":1.0},"287":{"tf":3.872983346207417},"288":{"tf":1.0},"299":{"tf":3.0},"300":{"tf":2.0},"302":{"tf":2.0},"303":{"tf":1.0}}}},"df":1,"docs":{"268":{"tf":1.0}}},"df":9,"docs":{"182":{"tf":2.6457513110645907},"183":{"tf":2.23606797749979},"211":{"tf":1.0},"226":{"tf":1.0},"237":{"tf":1.0},"378":{"tf":1.0},"394":{"tf":1.4142135623730951},"397":{"tf":1.7320508075688772},"408":{"tf":2.449489742783178}},"e":{"a":{"d":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":3,"docs":{"35":{"tf":1.7320508075688772},"36":{"tf":1.7320508075688772},"42":{"tf":1.4142135623730951}},"e":{"(":{"&":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"35":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":3.0}}}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"159":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":4,"docs":{"177":{"tf":1.4142135623730951},"217":{"tf":1.0},"36":{"tf":1.0},"385":{"tf":1.7320508075688772}},"m":{"df":2,"docs":{"26":{"tf":1.0},"262":{"tf":1.0}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"379":{"tf":1.0}}}}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":3,"docs":{"294":{"tf":1.0},"355":{"tf":1.0},"385":{"tf":2.449489742783178}},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"(":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"(":{")":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"v":{"(":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"151":{"tf":1.0}}}}}},"t":{"1":{".":{"c":{"a":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"(":{"&":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"2":{"df":1,"docs":{"94":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"92":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":4,"docs":{"89":{"tf":1.0},"90":{"tf":2.23606797749979},"92":{"tf":1.0},"94":{"tf":2.0}}},"2":{"df":1,"docs":{"94":{"tf":2.449489742783178}}},"3":{"df":1,"docs":{"94":{"tf":1.4142135623730951}}},"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":9,"docs":{"197":{"tf":2.6457513110645907},"237":{"tf":1.0},"87":{"tf":1.0},"89":{"tf":2.6457513110645907},"90":{"tf":2.6457513110645907},"92":{"tf":3.7416573867739413},"94":{"tf":3.3166247903554},"95":{"tf":1.4142135623730951},"99":{"tf":1.4142135623730951}},"e":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"(":{"3":{"df":1,"docs":{"95":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"v":{"df":4,"docs":{"294":{"tf":2.23606797749979},"296":{"tf":1.0},"385":{"tf":1.4142135623730951},"388":{"tf":1.7320508075688772}}}},"d":{"df":2,"docs":{"234":{"tf":1.0},"338":{"tf":1.0}}},"df":1,"docs":{"121":{"tf":1.0}},"f":{"<":{"df":0,"docs":{},"t":{"df":2,"docs":{"265":{"tf":1.0},"283":{"tf":1.7320508075688772}}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"287":{"tf":2.0}},"l":{"<":{"df":0,"docs":{},"r":{"c":{"<":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"286":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":12,"docs":{"265":{"tf":1.0},"280":{"tf":1.0},"281":{"tf":1.4142135623730951},"282":{"tf":3.7416573867739413},"283":{"tf":4.242640687119285},"284":{"tf":3.1622776601683795},"285":{"tf":1.0},"286":{"tf":1.4142135623730951},"287":{"tf":1.0},"288":{"tf":1.0},"300":{"tf":1.4142135623730951},"303":{"tf":1.4142135623730951}}},"v":{"df":0,"docs":{},"e":{"c":{"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"283":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"<":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"287":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":1,"docs":{"392":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":10,"docs":{"112":{"tf":1.7320508075688772},"182":{"tf":1.0},"185":{"tf":1.7320508075688772},"187":{"tf":1.0},"193":{"tf":1.0},"265":{"tf":1.4142135623730951},"350":{"tf":1.0},"72":{"tf":1.0},"73":{"tf":1.0},"74":{"tf":1.0}},"e":{"df":0,"docs":{},"n":{"c":{"df":2,"docs":{"293":{"tf":1.0},"93":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"270":{"tf":1.0},"74":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"74":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"72":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"72":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"df":3,"docs":{"265":{"tf":1.0},"283":{"tf":1.7320508075688772},"284":{"tf":1.0}}}},"df":0,"docs":{}}}},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"332":{"tf":1.4142135623730951}}}}},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":2,"docs":{"255":{"tf":1.0},"40":{"tf":1.0}}}}}}}},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"322":{"tf":1.0}}}},"df":0,"docs":{}}},"l":{"a":{"df":0,"docs":{},"t":{"df":13,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":6,"docs":{"154":{"tf":1.0},"250":{"tf":2.8284271247461903},"262":{"tf":1.0},"28":{"tf":1.7320508075688772},"414":{"tf":1.0},"52":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.0}}},"v":{"df":2,"docs":{"227":{"tf":1.4142135623730951},"309":{"tf":2.0}}}}},"p":{"df":0,"docs":{},"l":{"a":{"c":{"df":1,"docs":{"143":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"159":{"tf":1.0}}}},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"255":{"tf":1.0}}}}}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}}}}},"o":{"d":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"3":{"df":1,"docs":{"244":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"3":{"df":1,"docs":{"244":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":2,"docs":{"381":{"tf":1.4142135623730951},"384":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"320":{"tf":3.1622776601683795},"321":{"tf":1.7320508075688772},"322":{"tf":2.8284271247461903}}}}}}}}},"df":4,"docs":{"375":{"tf":1.0},"377":{"tf":1.4142135623730951},"378":{"tf":1.0},"417":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"376":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"c":{"df":1,"docs":{"69":{"tf":1.0}}},"df":0,"docs":{}}}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"255":{"tf":1.0}}},"df":0,"docs":{},"s":{"df":2,"docs":{"375":{"tf":1.0},"379":{"tf":1.4142135623730951}}}}}},"t":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"121":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"121":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"113":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"159":{"tf":1.0},"377":{"tf":1.0}}}}},"t":{"df":13,"docs":{"151":{"tf":1.4142135623730951},"155":{"tf":1.4142135623730951},"157":{"tf":1.7320508075688772},"158":{"tf":1.0},"159":{"tf":2.0},"166":{"tf":1.0},"171":{"tf":1.0},"201":{"tf":2.449489742783178},"219":{"tf":1.0},"220":{"tf":1.0},"294":{"tf":1.7320508075688772},"360":{"tf":2.449489742783178},"376":{"tf":1.0}},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"385":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":31,"docs":{"119":{"tf":2.0},"120":{"tf":1.4142135623730951},"154":{"tf":1.0},"155":{"tf":3.3166247903554},"158":{"tf":1.4142135623730951},"159":{"tf":4.795831523312719},"160":{"tf":2.0},"162":{"tf":2.23606797749979},"163":{"tf":1.4142135623730951},"165":{"tf":2.0},"171":{"tf":1.7320508075688772},"186":{"tf":2.8284271247461903},"187":{"tf":1.4142135623730951},"196":{"tf":1.4142135623730951},"201":{"tf":1.4142135623730951},"219":{"tf":3.1622776601683795},"220":{"tf":2.0},"227":{"tf":1.7320508075688772},"245":{"tf":1.4142135623730951},"252":{"tf":1.4142135623730951},"261":{"tf":2.23606797749979},"299":{"tf":1.0},"36":{"tf":3.1622776601683795},"360":{"tf":1.7320508075688772},"370":{"tf":1.0},"377":{"tf":1.4142135623730951},"381":{"tf":1.0},"385":{"tf":1.4142135623730951},"42":{"tf":2.23606797749979},"45":{"tf":1.4142135623730951},"61":{"tf":1.7320508075688772}}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"57":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":9,"docs":{"159":{"tf":2.23606797749979},"179":{"tf":1.4142135623730951},"361":{"tf":1.0},"365":{"tf":1.7320508075688772},"392":{"tf":1.0},"57":{"tf":2.23606797749979},"60":{"tf":1.4142135623730951},"61":{"tf":1.0},"74":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"179":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"v":{"df":1,"docs":{"61":{"tf":1.0}}}},"f":{"c":{"df":1,"docs":{"417":{"tf":2.0}}},"df":0,"docs":{}},"g":{"b":{"df":1,"docs":{"338":{"tf":1.0}}},"df":1,"docs":{"262":{"tf":1.7320508075688772}}},"h":{"df":1,"docs":{"354":{"tf":3.1622776601683795}},"s":{"=":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"354":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"i":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"308":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":2,"docs":{"198":{"tf":2.449489742783178},"354":{"tf":1.0}}}}},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"211":{"tf":1.0}}}},"p":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":2,"docs":{"211":{"tf":1.4142135623730951},"262":{"tf":2.8284271247461903}}}}}}}},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"122":{"tf":1.0},"41":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"371":{"tf":1.4142135623730951}},"e":{"(":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"371":{"tf":1.0}}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"371":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"s":{"df":2,"docs":{"22":{"tf":1.0},"24":{"tf":1.0}}},"u":{"b":{"df":0,"docs":{},"i":{"df":3,"docs":{"24":{"tf":1.4142135623730951},"56":{"tf":1.0},"60":{"tf":1.0}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":3,"docs":{"176":{"tf":1.0},"257":{"tf":1.0},"357":{"tf":1.4142135623730951}}}},"n":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"224":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"224":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":37,"docs":{"154":{"tf":1.7320508075688772},"196":{"tf":1.0},"202":{"tf":1.0},"206":{"tf":1.0},"209":{"tf":1.4142135623730951},"212":{"tf":1.4142135623730951},"218":{"tf":1.4142135623730951},"220":{"tf":4.242640687119285},"221":{"tf":2.23606797749979},"224":{"tf":2.0},"227":{"tf":2.23606797749979},"229":{"tf":1.0},"230":{"tf":1.4142135623730951},"252":{"tf":1.0},"261":{"tf":3.3166247903554},"27":{"tf":2.8284271247461903},"313":{"tf":1.7320508075688772},"314":{"tf":1.7320508075688772},"32":{"tf":1.4142135623730951},"370":{"tf":1.0},"376":{"tf":1.7320508075688772},"377":{"tf":1.4142135623730951},"38":{"tf":1.7320508075688772},"380":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":2.0},"388":{"tf":1.7320508075688772},"41":{"tf":2.0},"42":{"tf":1.4142135623730951},"43":{"tf":1.7320508075688772},"45":{"tf":1.4142135623730951},"48":{"tf":1.0},"53":{"tf":1.4142135623730951},"55":{"tf":1.0},"61":{"tf":1.4142135623730951},"86":{"tf":1.0},"87":{"tf":1.0}}},"s":{"df":0,"docs":{},"t":{"_":{"b":{"a":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":2,"docs":{"154":{"tf":1.7320508075688772},"219":{"tf":1.0}},"e":{"=":{"1":{"df":3,"docs":{"154":{"tf":1.0},"43":{"tf":1.0},"53":{"tf":1.0}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"a":{"c":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"n":{"df":9,"docs":{"110":{"tf":1.0},"137":{"tf":1.0},"17":{"tf":1.0},"27":{"tf":1.0},"48":{"tf":1.0},"50":{"tf":1.0},"61":{"tf":1.0},"73":{"tf":1.0},"77":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"c":{"df":11,"docs":{"110":{"tf":1.4142135623730951},"17":{"tf":1.4142135623730951},"22":{"tf":1.4142135623730951},"23":{"tf":1.0},"24":{"tf":1.7320508075688772},"29":{"tf":1.0},"30":{"tf":1.0},"406":{"tf":1.0},"414":{"tf":1.0},"416":{"tf":1.0},"86":{"tf":1.0}}},"d":{"df":0,"docs":{},"o":{"c":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":217,"docs":{"100":{"tf":3.0},"101":{"tf":1.4142135623730951},"102":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"105":{"tf":1.0},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.0},"115":{"tf":1.4142135623730951},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.4142135623730951},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"122":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0},"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":1.7320508075688772},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.449489742783178},"140":{"tf":1.7320508075688772},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":1.7320508075688772},"153":{"tf":1.0},"154":{"tf":1.0},"155":{"tf":1.4142135623730951},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":1.7320508075688772},"162":{"tf":1.0},"164":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.4142135623730951},"170":{"tf":1.7320508075688772},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.0},"183":{"tf":1.4142135623730951},"184":{"tf":1.4142135623730951},"186":{"tf":1.7320508075688772},"187":{"tf":1.4142135623730951},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.0},"196":{"tf":1.7320508075688772},"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"199":{"tf":1.7320508075688772},"200":{"tf":2.0},"201":{"tf":1.0},"204":{"tf":1.0},"205":{"tf":1.0},"206":{"tf":1.0},"208":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"213":{"tf":1.0},"215":{"tf":1.0},"216":{"tf":1.4142135623730951},"218":{"tf":1.7320508075688772},"219":{"tf":1.7320508075688772},"220":{"tf":1.7320508075688772},"221":{"tf":1.4142135623730951},"223":{"tf":1.4142135623730951},"224":{"tf":2.0},"226":{"tf":1.0},"227":{"tf":2.0},"230":{"tf":1.0},"234":{"tf":1.0},"235":{"tf":1.4142135623730951},"236":{"tf":1.7320508075688772},"237":{"tf":1.7320508075688772},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.4142135623730951},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.4142135623730951},"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"261":{"tf":1.7320508075688772},"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.4142135623730951},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.0},"277":{"tf":1.4142135623730951},"279":{"tf":1.4142135623730951},"280":{"tf":1.0},"283":{"tf":2.23606797749979},"284":{"tf":1.0},"286":{"tf":1.4142135623730951},"287":{"tf":2.23606797749979},"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":1.7320508075688772},"294":{"tf":1.7320508075688772},"295":{"tf":1.0},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.0},"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":2.0},"316":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"32":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":2.0},"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.0},"33":{"tf":2.0},"330":{"tf":1.4142135623730951},"331":{"tf":1.4142135623730951},"332":{"tf":1.7320508075688772},"334":{"tf":1.0},"335":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":2.449489742783178},"339":{"tf":3.0},"34":{"tf":1.0},"340":{"tf":1.7320508075688772},"341":{"tf":1.0},"346":{"tf":1.7320508075688772},"347":{"tf":2.449489742783178},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"35":{"tf":1.0},"353":{"tf":1.7320508075688772},"354":{"tf":1.4142135623730951},"355":{"tf":2.449489742783178},"356":{"tf":1.7320508075688772},"357":{"tf":1.0},"36":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.23606797749979},"362":{"tf":2.0},"364":{"tf":2.0},"365":{"tf":1.4142135623730951},"368":{"tf":1.0},"37":{"tf":1.0},"370":{"tf":2.23606797749979},"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.4142135623730951},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":3.872983346207417},"387":{"tf":2.0},"388":{"tf":2.23606797749979},"41":{"tf":1.0},"42":{"tf":1.4142135623730951},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951},"48":{"tf":1.0},"50":{"tf":1.7320508075688772},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.0},"55":{"tf":1.4142135623730951},"56":{"tf":1.7320508075688772},"57":{"tf":1.7320508075688772},"58":{"tf":1.4142135623730951},"60":{"tf":2.6457513110645907},"61":{"tf":2.8284271247461903},"67":{"tf":1.0},"68":{"tf":1.0},"69":{"tf":2.449489742783178},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":2.0},"73":{"tf":2.23606797749979},"74":{"tf":1.7320508075688772},"76":{"tf":2.23606797749979},"77":{"tf":2.23606797749979},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.4142135623730951},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":1.7320508075688772},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0},"99":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":1,"docs":{"252":{"tf":1.0}}},"df":0,"docs":{}}},"df":262,"docs":{"0":{"tf":2.449489742783178},"1":{"tf":3.4641016151377544},"10":{"tf":4.58257569495584},"101":{"tf":3.1622776601683795},"102":{"tf":1.0},"104":{"tf":1.0},"105":{"tf":2.0},"106":{"tf":2.23606797749979},"107":{"tf":1.0},"108":{"tf":1.4142135623730951},"109":{"tf":1.0},"110":{"tf":1.7320508075688772},"114":{"tf":2.23606797749979},"115":{"tf":1.0},"119":{"tf":1.7320508075688772},"12":{"tf":1.7320508075688772},"122":{"tf":1.4142135623730951},"126":{"tf":1.7320508075688772},"127":{"tf":1.0},"13":{"tf":3.0},"130":{"tf":2.23606797749979},"131":{"tf":1.0},"132":{"tf":1.0},"134":{"tf":1.7320508075688772},"136":{"tf":1.4142135623730951},"137":{"tf":1.7320508075688772},"139":{"tf":1.0},"140":{"tf":3.4641016151377544},"141":{"tf":1.4142135623730951},"143":{"tf":1.4142135623730951},"15":{"tf":2.0},"151":{"tf":2.0},"152":{"tf":1.4142135623730951},"153":{"tf":1.4142135623730951},"154":{"tf":2.6457513110645907},"159":{"tf":1.7320508075688772},"16":{"tf":1.0},"163":{"tf":1.0},"164":{"tf":1.0},"165":{"tf":1.4142135623730951},"166":{"tf":1.0},"169":{"tf":1.7320508075688772},"17":{"tf":2.0},"172":{"tf":1.0},"173":{"tf":2.0},"174":{"tf":1.0},"176":{"tf":1.0},"178":{"tf":1.0},"18":{"tf":1.4142135623730951},"180":{"tf":1.4142135623730951},"181":{"tf":1.4142135623730951},"182":{"tf":2.0},"183":{"tf":2.0},"184":{"tf":1.0},"185":{"tf":1.0},"186":{"tf":2.6457513110645907},"187":{"tf":1.4142135623730951},"189":{"tf":2.6457513110645907},"19":{"tf":1.0},"190":{"tf":1.0},"193":{"tf":1.4142135623730951},"194":{"tf":2.449489742783178},"195":{"tf":1.4142135623730951},"196":{"tf":2.23606797749979},"198":{"tf":1.4142135623730951},"2":{"tf":2.449489742783178},"20":{"tf":2.449489742783178},"204":{"tf":1.0},"207":{"tf":1.0},"208":{"tf":2.6457513110645907},"209":{"tf":2.0},"21":{"tf":1.0},"210":{"tf":1.4142135623730951},"211":{"tf":1.7320508075688772},"213":{"tf":1.0},"214":{"tf":1.4142135623730951},"217":{"tf":1.0},"218":{"tf":2.0},"22":{"tf":2.0},"220":{"tf":1.0},"223":{"tf":1.7320508075688772},"224":{"tf":1.0},"226":{"tf":1.7320508075688772},"227":{"tf":2.6457513110645907},"23":{"tf":3.1622776601683795},"231":{"tf":1.4142135623730951},"232":{"tf":2.0},"233":{"tf":1.0},"235":{"tf":1.0},"238":{"tf":1.0},"24":{"tf":2.449489742783178},"246":{"tf":1.0},"247":{"tf":2.23606797749979},"248":{"tf":1.7320508075688772},"25":{"tf":2.449489742783178},"250":{"tf":1.4142135623730951},"251":{"tf":1.0},"252":{"tf":1.7320508075688772},"255":{"tf":1.4142135623730951},"256":{"tf":1.0},"26":{"tf":1.4142135623730951},"262":{"tf":1.7320508075688772},"264":{"tf":1.4142135623730951},"265":{"tf":2.23606797749979},"268":{"tf":3.3166247903554},"269":{"tf":1.0},"272":{"tf":1.0},"273":{"tf":1.7320508075688772},"274":{"tf":2.8284271247461903},"275":{"tf":1.7320508075688772},"276":{"tf":2.449489742783178},"277":{"tf":2.449489742783178},"278":{"tf":1.0},"279":{"tf":1.0},"28":{"tf":1.0},"281":{"tf":1.4142135623730951},"282":{"tf":2.449489742783178},"283":{"tf":1.4142135623730951},"285":{"tf":2.0},"286":{"tf":2.0},"287":{"tf":1.0},"288":{"tf":1.4142135623730951},"289":{"tf":2.6457513110645907},"29":{"tf":1.0},"290":{"tf":1.4142135623730951},"291":{"tf":1.0},"293":{"tf":3.0},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"298":{"tf":1.0},"299":{"tf":1.7320508075688772},"3":{"tf":1.4142135623730951},"30":{"tf":2.23606797749979},"300":{"tf":1.7320508075688772},"301":{"tf":1.0},"302":{"tf":1.4142135623730951},"304":{"tf":1.4142135623730951},"305":{"tf":2.0},"306":{"tf":2.23606797749979},"307":{"tf":1.4142135623730951},"308":{"tf":1.0},"309":{"tf":1.0},"31":{"tf":1.4142135623730951},"310":{"tf":1.7320508075688772},"311":{"tf":1.7320508075688772},"312":{"tf":1.0},"313":{"tf":1.4142135623730951},"314":{"tf":1.4142135623730951},"315":{"tf":1.4142135623730951},"316":{"tf":1.4142135623730951},"320":{"tf":1.0},"322":{"tf":2.449489742783178},"323":{"tf":2.23606797749979},"324":{"tf":1.0},"325":{"tf":1.0},"33":{"tf":1.0},"330":{"tf":1.7320508075688772},"332":{"tf":2.23606797749979},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"339":{"tf":2.23606797749979},"34":{"tf":1.7320508075688772},"340":{"tf":1.0},"342":{"tf":1.7320508075688772},"343":{"tf":2.23606797749979},"344":{"tf":3.4641016151377544},"345":{"tf":2.0},"346":{"tf":1.4142135623730951},"347":{"tf":4.358898943540674},"348":{"tf":2.23606797749979},"349":{"tf":1.0},"35":{"tf":1.0},"350":{"tf":1.4142135623730951},"352":{"tf":1.0},"354":{"tf":1.0},"355":{"tf":3.4641016151377544},"357":{"tf":1.0},"358":{"tf":1.0},"36":{"tf":1.0},"360":{"tf":1.0},"361":{"tf":2.23606797749979},"362":{"tf":2.449489742783178},"365":{"tf":1.0},"366":{"tf":1.0},"367":{"tf":1.4142135623730951},"368":{"tf":3.0},"369":{"tf":1.0},"370":{"tf":4.123105625617661},"372":{"tf":1.0},"373":{"tf":1.0},"374":{"tf":1.7320508075688772},"376":{"tf":1.0},"382":{"tf":1.0},"385":{"tf":1.7320508075688772},"387":{"tf":1.0},"389":{"tf":2.0},"39":{"tf":1.4142135623730951},"390":{"tf":1.0},"391":{"tf":1.0},"393":{"tf":1.0},"394":{"tf":1.4142135623730951},"395":{"tf":1.0},"396":{"tf":1.0},"398":{"tf":1.0},"4":{"tf":2.449489742783178},"40":{"tf":2.23606797749979},"405":{"tf":1.0},"406":{"tf":1.7320508075688772},"407":{"tf":1.7320508075688772},"408":{"tf":1.4142135623730951},"409":{"tf":2.449489742783178},"410":{"tf":4.0},"412":{"tf":1.7320508075688772},"413":{"tf":1.7320508075688772},"414":{"tf":4.0},"415":{"tf":1.7320508075688772},"416":{"tf":2.8284271247461903},"417":{"tf":3.0},"42":{"tf":3.605551275463989},"46":{"tf":1.7320508075688772},"47":{"tf":2.6457513110645907},"48":{"tf":2.0},"49":{"tf":1.4142135623730951},"5":{"tf":1.7320508075688772},"51":{"tf":2.0},"52":{"tf":4.58257569495584},"53":{"tf":2.6457513110645907},"54":{"tf":2.0},"55":{"tf":1.0},"56":{"tf":1.7320508075688772},"57":{"tf":1.7320508075688772},"58":{"tf":1.4142135623730951},"59":{"tf":1.0},"6":{"tf":1.0},"60":{"tf":2.8284271247461903},"61":{"tf":2.449489742783178},"62":{"tf":1.0},"63":{"tf":1.7320508075688772},"64":{"tf":2.0},"65":{"tf":1.0},"66":{"tf":1.0},"67":{"tf":1.0},"68":{"tf":1.4142135623730951},"69":{"tf":4.123105625617661},"7":{"tf":1.7320508075688772},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"73":{"tf":2.0},"74":{"tf":1.7320508075688772},"76":{"tf":1.0},"77":{"tf":1.7320508075688772},"79":{"tf":1.7320508075688772},"8":{"tf":2.8284271247461903},"80":{"tf":1.0},"81":{"tf":1.0},"84":{"tf":1.0},"86":{"tf":1.0},"90":{"tf":2.0},"92":{"tf":2.0},"93":{"tf":2.449489742783178},"97":{"tf":1.0},"99":{"tf":1.0}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"x":{"df":1,"docs":{"407":{"tf":1.7320508075688772}}}},"m":{"df":0,"docs":{},"t":{"df":3,"docs":{"23":{"tf":1.4142135623730951},"4":{"tf":1.0},"406":{"tf":2.6457513110645907}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"132":{"tf":1.0},"288":{"tf":1.0},"304":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"u":{"df":0,"docs":{},"p":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"262":{"tf":1.0}}}},"df":10,"docs":{"0":{"tf":1.4142135623730951},"13":{"tf":1.4142135623730951},"15":{"tf":1.4142135623730951},"16":{"tf":1.0},"18":{"tf":2.0},"19":{"tf":1.0},"30":{"tf":1.0},"406":{"tf":1.0},"408":{"tf":1.0},"416":{"tf":3.0}}}}}}},"v":{":":{"9":{"9":{".":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"x":{"df":2,"docs":{"294":{"tf":1.4142135623730951},"296":{"tf":1.0}}}},"s":{".":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"76":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":2,"docs":{"76":{"tf":1.0},"77":{"tf":1.4142135623730951}}}}}},"1":{"df":4,"docs":{"139":{"tf":2.23606797749979},"362":{"tf":1.4142135623730951},"69":{"tf":3.605551275463989},"72":{"tf":2.0}}},"2":{"df":3,"docs":{"139":{"tf":3.3166247903554},"362":{"tf":1.4142135623730951},"69":{"tf":3.1622776601683795}}},"3":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"[":{".":{".":{"2":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"0":{".":{".":{"2":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{".":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":1,"docs":{"77":{"tf":1.0}}},"6":{".":{".":{"1":{"1":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":3,"docs":{"223":{"tf":1.0},"284":{"tf":1.0},"299":{"tf":1.0}}}},"l":{"a":{"d":{"df":1,"docs":{"117":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":1,"docs":{"150":{"tf":1.0}}},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"150":{"tf":1.0}}}}},"m":{"df":0,"docs":{},"e":{"df":1,"docs":{"60":{"tf":1.4142135623730951}}},"p":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"215":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"c":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":1,"docs":{"90":{"tf":1.4142135623730951}}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"322":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"73":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":2,"docs":{"146":{"tf":1.7320508075688772},"148":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"348":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":2,"docs":{"313":{"tf":2.8284271247461903},"314":{"tf":3.0}}}}}}},"d":{"df":0,"docs":{},"k":{"df":1,"docs":{"16":{"tf":1.0}}}},"df":16,"docs":{"138":{"tf":1.0},"139":{"tf":2.6457513110645907},"141":{"tf":1.7320508075688772},"180":{"tf":1.0},"191":{"tf":1.0},"247":{"tf":1.4142135623730951},"339":{"tf":2.0},"67":{"tf":2.0},"68":{"tf":1.0},"69":{"tf":1.0},"70":{"tf":1.4142135623730951},"72":{"tf":2.23606797749979},"73":{"tf":2.0},"74":{"tf":1.4142135623730951},"76":{"tf":2.0},"77":{"tf":2.8284271247461903}},"e":{"a":{"df":0,"docs":{},"r":{"c":{"df":0,"docs":{},"h":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":3,"docs":{"226":{"tf":2.0},"227":{"tf":2.6457513110645907},"245":{"tf":1.0}}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":9,"docs":{"211":{"tf":1.0},"222":{"tf":1.0},"223":{"tf":3.0},"224":{"tf":3.3166247903554},"226":{"tf":1.4142135623730951},"227":{"tf":2.0},"243":{"tf":1.0},"245":{"tf":2.0},"247":{"tf":1.4142135623730951}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"212":{"tf":1.0}}}}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"l":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":2.23606797749979}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"t":{"_":{"a":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"t":{"df":1,"docs":{"113":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"c":{"df":3,"docs":{"27":{"tf":2.0},"377":{"tf":2.0},"40":{"tf":1.0}},"o":{"df":0,"docs":{},"n":{"d":{"_":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"(":{"df":2,"docs":{"76":{"tf":1.0},"77":{"tf":1.0}}},"df":2,"docs":{"76":{"tf":1.0},"77":{"tf":1.0}}},"df":0,"docs":{}}}}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"y":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"253":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}},"df":2,"docs":{"339":{"tf":2.0},"53":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"42":{"tf":2.449489742783178}}},"df":0,"docs":{}}}}},"df":4,"docs":{"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":2,"docs":{"255":{"tf":1.4142135623730951},"26":{"tf":1.0}}},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"df":2,"docs":{"312":{"tf":1.4142135623730951},"314":{"tf":2.6457513110645907}}}}},"df":1,"docs":{"15":{"tf":1.0}}}},"df":0,"docs":{}},"f":{".":{"0":{"df":2,"docs":{"273":{"tf":1.0},"357":{"tf":1.4142135623730951}}},"df":0,"docs":{},"i":{"df":1,"docs":{"93":{"tf":1.0}}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"234":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"t":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"320":{"tf":1.0}},"e":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"320":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"x":{"df":1,"docs":{"93":{"tf":1.0}}}},":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"354":{"tf":1.0}}}}}}}},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"397":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":30,"docs":{"100":{"tf":1.4142135623730951},"114":{"tf":1.0},"123":{"tf":1.0},"139":{"tf":1.4142135623730951},"164":{"tf":1.0},"172":{"tf":1.0},"18":{"tf":1.0},"180":{"tf":1.0},"189":{"tf":2.0},"190":{"tf":2.23606797749979},"234":{"tf":1.0},"237":{"tf":1.0},"239":{"tf":1.0},"273":{"tf":1.4142135623730951},"276":{"tf":1.0},"283":{"tf":2.0},"318":{"tf":1.0},"320":{"tf":2.23606797749979},"321":{"tf":1.7320508075688772},"322":{"tf":1.7320508075688772},"354":{"tf":1.7320508075688772},"355":{"tf":2.0},"356":{"tf":1.0},"387":{"tf":1.0},"392":{"tf":1.4142135623730951},"91":{"tf":1.0},"92":{"tf":4.358898943540674},"93":{"tf":2.0},"94":{"tf":1.7320508075688772},"95":{"tf":1.4142135623730951}}}},"m":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"257":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"370":{"tf":1.0}}}}}}}},"df":1,"docs":{"370":{"tf":1.0}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}}}},"n":{"d":{"df":13,"docs":{"283":{"tf":2.8284271247461903},"289":{"tf":1.0},"294":{"tf":1.4142135623730951},"295":{"tf":1.0},"299":{"tf":1.0},"300":{"tf":1.0},"301":{"tf":1.4142135623730951},"302":{"tf":3.1622776601683795},"303":{"tf":1.7320508075688772},"304":{"tf":2.0},"349":{"tf":2.23606797749979},"360":{"tf":1.0},"385":{"tf":2.8284271247461903}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":2.6457513110645907}}}},"i":{"df":1,"docs":{"299":{"tf":1.0}}}},"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":2.23606797749979}}}},"df":0,"docs":{}}}}}},"df":1,"docs":{"299":{"tf":1.0}}}},"p":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}},"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"v":{"df":1,"docs":{"113":{"tf":1.7320508075688772}},"e":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"113":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":10,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.4142135623730951},"381":{"tf":1.7320508075688772},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":3.605551275463989},"387":{"tf":1.4142135623730951},"388":{"tf":1.7320508075688772}}}}}},"n":{"df":0,"docs":{},"o":{"df":3,"docs":{"385":{"tf":2.6457513110645907},"387":{"tf":2.0},"388":{"tf":1.4142135623730951}}}}},"df":3,"docs":{"255":{"tf":1.0},"4":{"tf":1.0},"409":{"tf":1.0}}}},"i":{"c":{"df":2,"docs":{"149":{"tf":1.0},"385":{"tf":1.0}}},"df":0,"docs":{}}}},"t":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"283":{"tf":2.0}}}}},"df":0,"docs":{}}},"df":2,"docs":{"339":{"tf":1.0},"416":{"tf":1.0}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"339":{"tf":2.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"209":{"tf":2.0}}}}}},"h":{"a":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"50":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"50":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"50":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":1,"docs":{"209":{"tf":1.7320508075688772}}}}},"df":1,"docs":{"15":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"247":{"tf":1.0}}}},"df":0,"docs":{}}}}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.7320508075688772}}}}}}},"df":1,"docs":{"234":{"tf":1.0}}}}},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}},"o":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"242":{"tf":1.7320508075688772}}}}}},"df":1,"docs":{"242":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"s":{"df":1,"docs":{"242":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"s":{"df":1,"docs":{"242":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":3,"docs":{"195":{"tf":1.0},"200":{"tf":3.4641016151377544},"201":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"w":{"df":2,"docs":{"204":{"tf":2.0},"24":{"tf":1.0}}}},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"388":{"tf":3.0}}}}},"i":{"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"113":{"tf":1.0}}}},"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"354":{"tf":1.0}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":3,"docs":{"81":{"tf":1.0},"83":{"tf":1.7320508075688772},"86":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"l":{"a":{"df":1,"docs":{"306":{"tf":1.0}}},"df":0,"docs":{}}}},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":3,"docs":{"205":{"tf":1.0},"209":{"tf":1.0},"294":{"tf":1.0}}}}},"p":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"149":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"r":{"df":1,"docs":{"247":{"tf":1.0}}},"t":{"df":0,"docs":{},"e":{"df":1,"docs":{"377":{"tf":1.0}}}},"z":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":5,"docs":{"313":{"tf":1.0},"362":{"tf":2.8284271247461903},"365":{"tf":1.0},"385":{"tf":2.8284271247461903},"397":{"tf":1.0}}}}},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":2,"docs":{"384":{"tf":2.0},"385":{"tf":2.0}}}}},"i":{"c":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"77":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"w":{"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":2.0}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":3,"docs":{"137":{"tf":1.0},"77":{"tf":2.8284271247461903},"78":{"tf":1.0}}}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":2,"docs":{"43":{"tf":1.0},"45":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"197":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"t":{"df":15,"docs":{"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.4142135623730951},"271":{"tf":1.0},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.7320508075688772},"280":{"tf":1.4142135623730951},"283":{"tf":2.8284271247461903},"284":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":2.23606797749979}}}}},"df":0,"docs":{}},"n":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":1,"docs":{"54":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":6,"docs":{"100":{"tf":1.4142135623730951},"180":{"tf":1.0},"255":{"tf":1.0},"261":{"tf":1.4142135623730951},"262":{"tf":1.0},"370":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"r":{"df":2,"docs":{"255":{"tf":1.0},"414":{"tf":1.0}}}},"df":0,"docs":{}}}},"m":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"132":{"tf":1.0}}}}},"4":{"df":1,"docs":{"340":{"tf":1.0}}},"5":{".":{"0":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":5,"docs":{"104":{"tf":1.7320508075688772},"173":{"tf":1.0},"335":{"tf":1.7320508075688772},"339":{"tf":1.0},"340":{"tf":1.4142135623730951}}},"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"r":{"df":1,"docs":{"324":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"f":{"6":{"4":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"3":{"2":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":3,"docs":{"104":{"tf":1.0},"326":{"tf":1.7320508075688772},"340":{"tf":1.0}}},"m":{"a":{"df":0,"docs":{},"x":{"df":1,"docs":{"107":{"tf":1.0}}}},"df":0,"docs":{}},"n":{"df":1,"docs":{"340":{"tf":1.0}},"o":{"d":{"df":1,"docs":{"287":{"tf":1.0}}},"df":0,"docs":{}}},"t":{"df":2,"docs":{"101":{"tf":1.7320508075688772},"171":{"tf":1.0}}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"328":{"tf":1.0}}}}},"df":0,"docs":{}},"x":{"df":3,"docs":{"237":{"tf":1.0},"332":{"tf":2.449489742783178},"340":{"tf":1.4142135623730951}}}},"_":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"369":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}}},"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"369":{"tf":1.0}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"101":{"tf":1.0}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"332":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}}}},"b":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"i":{"df":2,"docs":{"227":{"tf":1.0},"230":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"@":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"86":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"29":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"t":{"df":0,"docs":{},"h":{"df":3,"docs":{"263":{"tf":1.4142135623730951},"60":{"tf":1.0},"93":{"tf":1.0}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"1":{"2":{"3":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"r":{"df":0,"docs":{},"t":{"_":{"b":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"y":{"df":1,"docs":{"237":{"tf":3.3166247903554}}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"237":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"117":{"tf":1.0}}},"r":{"c":{"df":1,"docs":{"7":{"tf":1.0}}},"df":0,"docs":{}}}},"p":{"a":{"c":{"df":0,"docs":{},"e":{"df":1,"docs":{"50":{"tf":1.7320508075688772}},"s":{"_":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":1,"docs":{"50":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"50":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"n":{"df":1,"docs":{"370":{"tf":1.0}}},"w":{"df":0,"docs":{},"n":{"<":{"df":0,"docs":{},"f":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}},"df":3,"docs":{"291":{"tf":2.449489742783178},"292":{"tf":4.242640687119285},"385":{"tf":2.0}}}}},"d":{"df":0,"docs":{},"x":{"df":1,"docs":{"255":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"86":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"_":{"a":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":2.8284271247461903}}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"w":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"p":{"a":{"c":{"df":1,"docs":{"148":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"312":{"tf":1.0}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"q":{"df":1,"docs":{"95":{"tf":1.0}},"l":{"!":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"372":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"372":{"tf":1.0}}}}}}}},"df":1,"docs":{"372":{"tf":2.0}}},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"95":{"tf":1.0}}}},"df":0,"docs":{}}},"r":{"c":{"/":{"b":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":1,"docs":{"110":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"125":{"tf":1.4142135623730951}},"e":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"125":{"tf":2.6457513110645907},"126":{"tf":1.0}}}},"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"125":{"tf":1.0},"126":{"tf":1.0}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"126":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"126":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"g":{"a":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":2.0}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.4142135623730951}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":62,"docs":{"110":{"tf":1.7320508075688772},"112":{"tf":1.0},"113":{"tf":1.7320508075688772},"114":{"tf":1.0},"115":{"tf":2.0},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.4142135623730951},"119":{"tf":1.4142135623730951},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.4142135623730951},"125":{"tf":1.7320508075688772},"126":{"tf":1.0},"175":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":1.0},"180":{"tf":1.0},"189":{"tf":1.0},"196":{"tf":2.449489742783178},"197":{"tf":2.0},"198":{"tf":1.0},"199":{"tf":1.0},"200":{"tf":1.4142135623730951},"204":{"tf":1.0},"205":{"tf":1.0},"206":{"tf":1.0},"208":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"218":{"tf":1.0},"221":{"tf":2.6457513110645907},"222":{"tf":1.0},"223":{"tf":2.0},"224":{"tf":2.0},"226":{"tf":1.0},"227":{"tf":2.23606797749979},"239":{"tf":1.0},"240":{"tf":1.0},"242":{"tf":1.0},"244":{"tf":2.0},"245":{"tf":1.4142135623730951},"252":{"tf":2.449489742783178},"253":{"tf":1.4142135623730951},"261":{"tf":1.4142135623730951},"283":{"tf":2.0},"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":1.4142135623730951},"353":{"tf":1.0},"354":{"tf":1.0},"368":{"tf":1.0},"369":{"tf":1.0},"370":{"tf":1.4142135623730951},"385":{"tf":3.605551275463989},"387":{"tf":2.0},"388":{"tf":1.7320508075688772}},"s":{":":{"4":{"8":{":":{"5":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"9":{":":{"5":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"7":{":":{"5":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":133,"docs":{"110":{"tf":2.0},"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"115":{"tf":1.0},"119":{"tf":1.0},"123":{"tf":1.4142135623730951},"125":{"tf":1.0},"153":{"tf":1.4142135623730951},"154":{"tf":1.4142135623730951},"155":{"tf":1.4142135623730951},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":2.23606797749979},"167":{"tf":1.7320508075688772},"169":{"tf":1.4142135623730951},"170":{"tf":1.7320508075688772},"172":{"tf":1.7320508075688772},"173":{"tf":1.0},"184":{"tf":1.4142135623730951},"186":{"tf":1.7320508075688772},"187":{"tf":1.4142135623730951},"188":{"tf":1.0},"209":{"tf":2.0},"213":{"tf":1.0},"215":{"tf":1.0},"216":{"tf":1.4142135623730951},"218":{"tf":2.0},"219":{"tf":1.7320508075688772},"220":{"tf":2.0},"221":{"tf":2.6457513110645907},"222":{"tf":1.0},"223":{"tf":1.0},"230":{"tf":1.0},"234":{"tf":1.0},"235":{"tf":1.4142135623730951},"236":{"tf":1.7320508075688772},"237":{"tf":1.7320508075688772},"241":{"tf":1.4142135623730951},"244":{"tf":1.7320508075688772},"253":{"tf":1.4142135623730951},"26":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0},"267":{"tf":1.0},"268":{"tf":1.7320508075688772},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.4142135623730951},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.0},"277":{"tf":1.4142135623730951},"279":{"tf":1.4142135623730951},"280":{"tf":1.0},"284":{"tf":1.0},"286":{"tf":1.4142135623730951},"287":{"tf":2.23606797749979},"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":1.7320508075688772},"294":{"tf":1.7320508075688772},"295":{"tf":1.0},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.0},"314":{"tf":1.7320508075688772},"316":{"tf":1.0},"32":{"tf":1.7320508075688772},"322":{"tf":1.4142135623730951},"327":{"tf":1.0},"33":{"tf":1.4142135623730951},"331":{"tf":1.0},"335":{"tf":1.0},"338":{"tf":2.0},"339":{"tf":2.0},"340":{"tf":1.0},"347":{"tf":1.0},"348":{"tf":1.4142135623730951},"354":{"tf":1.0},"355":{"tf":2.449489742783178},"356":{"tf":1.7320508075688772},"357":{"tf":1.0},"364":{"tf":1.0},"370":{"tf":1.4142135623730951},"376":{"tf":1.4142135623730951},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.4142135623730951},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":2.23606797749979},"388":{"tf":1.4142135623730951},"394":{"tf":1.4142135623730951},"40":{"tf":1.4142135623730951},"407":{"tf":2.0},"408":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951},"48":{"tf":2.0},"50":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":1.7320508075688772},"56":{"tf":1.7320508075688772},"57":{"tf":1.7320508075688772},"58":{"tf":1.4142135623730951},"60":{"tf":2.6457513110645907},"61":{"tf":2.449489742783178},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"73":{"tf":1.4142135623730951},"74":{"tf":1.4142135623730951},"76":{"tf":1.4142135623730951},"77":{"tf":1.7320508075688772},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"86":{"tf":1.0},"87":{"tf":1.4142135623730951},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":2.0},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0}},"s":{":":{"1":{"9":{":":{"1":{"9":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"2":{"8":{":":{"4":{"7":{"df":1,"docs":{"43":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"1":{"3":{"df":1,"docs":{"408":{"tf":1.0}}},"df":0,"docs":{}},"5":{"df":1,"docs":{"153":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{":":{"1":{"5":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"4":{":":{"1":{"2":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"4":{"9":{"df":1,"docs":{"158":{"tf":1.0}}},"df":1,"docs":{"394":{"tf":1.0}}},"5":{"df":2,"docs":{"154":{"tf":1.4142135623730951},"48":{"tf":1.0}}},"9":{"df":1,"docs":{"407":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"5":{":":{"1":{"0":{"df":1,"docs":{"158":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":9,"docs":{"110":{"tf":1.4142135623730951},"112":{"tf":1.0},"125":{"tf":1.0},"208":{"tf":1.0},"209":{"tf":2.0},"26":{"tf":2.0},"260":{"tf":1.0},"261":{"tf":1.4142135623730951},"380":{"tf":1.0}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"f":{"df":1,"docs":{"15":{"tf":1.0}}}},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":2,"docs":{"414":{"tf":2.23606797749979},"416":{"tf":1.0}}}},"c":{"df":0,"docs":{},"k":{".":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"328":{"tf":1.0}}}}}},"df":1,"docs":{"154":{"tf":1.0}}}},"df":0,"docs":{},"n":{"d":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"230":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"r":{"c":{"df":0,"docs":{},"h":{"df":2,"docs":{"0":{"tf":1.0},"2":{"tf":1.0}}}},"df":0,"docs":{},"t":{"+":{"1":{"df":1,"docs":{"61":{"tf":1.0}}},"2":{"df":1,"docs":{"61":{"tf":1.0}}},"df":0,"docs":{}},".":{".":{"=":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"41":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"61":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"61":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{".":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"77":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"77":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"t":{"df":0,"docs":{},"e":{"df":7,"docs":{"103":{"tf":2.0},"317":{"tf":2.8284271247461903},"318":{"tf":1.0},"320":{"tf":3.1622776601683795},"321":{"tf":4.358898943540674},"322":{"tf":2.449489742783178},"385":{"tf":1.0}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"56":{"tf":1.4142135623730951},"57":{"tf":1.4142135623730951}}}}}}},"i":{"c":{"df":8,"docs":{"191":{"tf":3.0},"219":{"tf":1.4142135623730951},"348":{"tf":1.7320508075688772},"360":{"tf":1.0},"385":{"tf":2.449489742783178},"392":{"tf":1.0},"397":{"tf":1.4142135623730951},"51":{"tf":1.0}}},"df":0,"docs":{}},"u":{"df":1,"docs":{"379":{"tf":1.0}},"s":{":":{":":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"364":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"382":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}},"d":{":":{":":{"c":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{":":{":":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.0}}}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"169":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"124":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"p":{"df":2,"docs":{"122":{"tf":1.0},"145":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"v":{":":{":":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":3,"docs":{"213":{"tf":1.7320508075688772},"214":{"tf":1.4142135623730951},"244":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"o":{"df":1,"docs":{"214":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":2,"docs":{"213":{"tf":1.4142135623730951},"227":{"tf":1.0}}}},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"220":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"f":{"6":{"4":{":":{":":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"216":{"tf":1.0}},"m":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"119":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"120":{"tf":1.0}}}},"s":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":3,"docs":{"155":{"tf":1.0},"157":{"tf":1.0},"171":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"o":{":":{":":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"377":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":5,"docs":{"155":{"tf":1.0},"159":{"tf":1.0},"171":{"tf":1.0},"360":{"tf":1.7320508075688772},"377":{"tf":1.0}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"157":{"tf":1.0}}},"df":0,"docs":{}}}}}}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"216":{"tf":1.0}}}}},"t":{"df":1,"docs":{"360":{"tf":1.0}}}},"df":2,"docs":{"119":{"tf":1.0},"120":{"tf":1.0}}}}}}}},"s":{"df":0,"docs":{},"t":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"35":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"123":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":4,"docs":{"123":{"tf":1.7320508075688772},"33":{"tf":1.0},"35":{"tf":1.4142135623730951},"360":{"tf":2.23606797749979}}}},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"301":{"tf":1.0}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{":":{":":{"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"277":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"376":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"354":{"tf":1.0}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"159":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"c":{":":{":":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"299":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{":":{":":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":3,"docs":{"122":{"tf":1.7320508075688772},"123":{"tf":1.4142135623730951},"33":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":3,"docs":{"211":{"tf":1.0},"228":{"tf":1.0},"90":{"tf":1.4142135623730951}}}}},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"35":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"211":{"tf":1.0},"228":{"tf":1.0},"90":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":1,"docs":{"234":{"tf":1.0}}}}},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":14,"docs":{"137":{"tf":1.7320508075688772},"139":{"tf":2.0},"141":{"tf":1.0},"143":{"tf":1.0},"189":{"tf":3.7416573867739413},"191":{"tf":1.0},"219":{"tf":1.0},"274":{"tf":2.0},"318":{"tf":1.0},"348":{"tf":1.0},"362":{"tf":3.605551275463989},"394":{"tf":2.449489742783178},"77":{"tf":2.449489742783178},"86":{"tf":3.0}},"e":{"a":{"df":0,"docs":{},"m":{"df":3,"docs":{"376":{"tf":1.0},"377":{"tf":1.4142135623730951},"379":{"tf":1.0}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"68":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"1":{"df":1,"docs":{"186":{"tf":2.23606797749979}}},"2":{"df":1,"docs":{"186":{"tf":2.23606797749979}}},":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":2,"docs":{"68":{"tf":1.0},"77":{"tf":1.7320508075688772}}}}}}}},"df":0,"docs":{}},"df":3,"docs":{"138":{"tf":1.7320508075688772},"69":{"tf":1.0},"95":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"218":{"tf":1.0},"34":{"tf":1.4142135623730951},"42":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"68":{"tf":1.0}}}}}}},"df":53,"docs":{"100":{"tf":2.23606797749979},"101":{"tf":1.0},"128":{"tf":1.4142135623730951},"135":{"tf":1.0},"136":{"tf":2.0},"137":{"tf":2.449489742783178},"138":{"tf":2.8284271247461903},"139":{"tf":4.242640687119285},"140":{"tf":2.0},"143":{"tf":1.4142135623730951},"145":{"tf":1.0},"147":{"tf":1.0},"159":{"tf":2.449489742783178},"166":{"tf":1.0},"175":{"tf":1.0},"178":{"tf":1.0},"180":{"tf":1.0},"184":{"tf":1.0},"186":{"tf":1.7320508075688772},"188":{"tf":1.0},"194":{"tf":1.0},"201":{"tf":1.4142135623730951},"214":{"tf":1.4142135623730951},"218":{"tf":2.0},"227":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"237":{"tf":1.4142135623730951},"244":{"tf":2.6457513110645907},"247":{"tf":1.0},"265":{"tf":1.4142135623730951},"274":{"tf":2.6457513110645907},"283":{"tf":1.0},"314":{"tf":1.7320508075688772},"317":{"tf":1.0},"318":{"tf":1.0},"34":{"tf":2.23606797749979},"359":{"tf":1.0},"370":{"tf":1.0},"377":{"tf":1.0},"42":{"tf":2.0},"45":{"tf":1.0},"51":{"tf":1.0},"67":{"tf":1.0},"68":{"tf":2.8284271247461903},"69":{"tf":4.0},"72":{"tf":2.8284271247461903},"73":{"tf":1.0},"74":{"tf":1.4142135623730951},"76":{"tf":3.0},"77":{"tf":3.872983346207417},"83":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951},"95":{"tf":1.0}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"370":{"tf":1.7320508075688772}}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"139":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"280":{"tf":1.0},"287":{"tf":2.6457513110645907}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"287":{"tf":2.23606797749979}}}}},"u":{"c":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"370":{"tf":1.0}}}}}},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"396":{"tf":1.0}}}}}},"df":25,"docs":{"100":{"tf":2.23606797749979},"135":{"tf":1.0},"273":{"tf":1.0},"338":{"tf":1.0},"350":{"tf":1.0},"370":{"tf":1.7320508075688772},"392":{"tf":1.0},"397":{"tf":1.4142135623730951},"79":{"tf":1.0},"80":{"tf":1.0},"81":{"tf":2.23606797749979},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.4142135623730951},"85":{"tf":1.4142135623730951},"86":{"tf":2.23606797749979},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"93":{"tf":1.0},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"84":{"tf":1.0},"85":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"r":{"df":13,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}}}}}},"df":0,"docs":{}}},"u":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":2,"docs":{"16":{"tf":1.4142135623730951},"409":{"tf":1.0}}}}},"df":0,"docs":{}}},"u":{"b":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"85":{"tf":1.0}}}},"df":0,"docs":{}}}},"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"158":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"m":{":":{":":{"<":{"df":0,"docs":{},"i":{"6":{"4":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"240":{"tf":2.23606797749979}},"m":{"a":{"df":0,"docs":{},"r":{"df":5,"docs":{"175":{"tf":1.7320508075688772},"176":{"tf":1.4142135623730951},"177":{"tf":2.8284271247461903},"178":{"tf":2.0},"310":{"tf":1.7320508075688772}},"i":{"df":6,"docs":{"175":{"tf":2.0},"176":{"tf":2.8284271247461903},"177":{"tf":2.8284271247461903},"178":{"tf":3.3166247903554},"179":{"tf":1.7320508075688772},"310":{"tf":1.7320508075688772}},"z":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"175":{"tf":1.0}}}}}}},"df":0,"docs":{}},"_":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":2.449489742783178}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"y":{">":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"1":{"df":1,"docs":{"178":{"tf":1.0}}},"df":1,"docs":{"178":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"117":{"tf":1.0}}}}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"118":{"tf":1.0}}}}}},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"397":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":5,"docs":{"114":{"tf":1.0},"116":{"tf":2.6457513110645907},"197":{"tf":1.0},"208":{"tf":1.0},"392":{"tf":1.0}},"t":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":1.0}}}}},"df":0,"docs":{}}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"411":{"tf":1.0}}},"df":0,"docs":{}}}}}},"y":{"df":0,"docs":{},"m":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}},"n":{":":{":":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":1,"docs":{"370":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"c":{"df":6,"docs":{"289":{"tf":1.0},"300":{"tf":1.0},"301":{"tf":1.4142135623730951},"303":{"tf":3.1622776601683795},"304":{"tf":2.0},"349":{"tf":2.23606797749979}}},"df":1,"docs":{"370":{"tf":2.6457513110645907}}}}},"t":{">":{"(":{"df":0,"docs":{},"f":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"]":{">":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"144":{"tf":1.0}}}},"c":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"g":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"286":{"tf":1.7320508075688772}}}},"k":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"113":{"tf":1.0}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"113":{"tf":1.0}}}},"df":0,"docs":{}}},"df":4,"docs":{"293":{"tf":1.0},"320":{"tf":1.0},"387":{"tf":1.7320508075688772},"388":{"tf":1.4142135623730951}},"s":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":1,"docs":{"70":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}}}},"p":{"df":0,"docs":{},"e":{"df":1,"docs":{"226":{"tf":1.0}}}},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"(":{"df":16,"docs":{"250":{"tf":1.4142135623730951},"256":{"tf":1.0},"261":{"tf":2.23606797749979},"262":{"tf":1.0},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}},"/":{"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"/":{"a":{"d":{"d":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"s":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"261":{"tf":1.4142135623730951}}}}},"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":5,"docs":{"38":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":1,"docs":{"27":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":4,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0}}}}}}},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"61":{"tf":1.0}}}}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":1,"docs":{"214":{"tf":1.0}}}}}}}}}}},"df":2,"docs":{"27":{"tf":1.0},"28":{"tf":1.0}}}}},"df":0,"docs":{}},"o":{"c":{"df":1,"docs":{"252":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"28":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}},"\\":{"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"\\":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"27":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":4,"docs":{"260":{"tf":2.6457513110645907},"261":{"tf":1.0},"262":{"tf":1.0},"273":{"tf":1.0}}}}}}},"c":{"df":0,"docs":{},"p":{"df":4,"docs":{"374":{"tf":1.4142135623730951},"375":{"tf":2.23606797749979},"376":{"tf":2.23606797749979},"377":{"tf":1.0}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"376":{"tf":1.7320508075688772}}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"m":{"df":2,"docs":{"376":{"tf":1.4142135623730951},"377":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"d":{"d":{"df":3,"docs":{"222":{"tf":1.4142135623730951},"223":{"tf":1.0},"226":{"tf":1.0}}},"df":0,"docs":{}},"df":25,"docs":{"101":{"tf":3.605551275463989},"104":{"tf":1.0},"155":{"tf":1.7320508075688772},"159":{"tf":1.0},"169":{"tf":3.1622776601683795},"170":{"tf":2.449489742783178},"171":{"tf":2.449489742783178},"172":{"tf":2.449489742783178},"178":{"tf":2.449489742783178},"180":{"tf":1.4142135623730951},"192":{"tf":1.4142135623730951},"227":{"tf":1.0},"234":{"tf":1.0},"237":{"tf":2.449489742783178},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"275":{"tf":2.8284271247461903},"303":{"tf":1.7320508075688772},"346":{"tf":1.4142135623730951},"347":{"tf":1.0},"361":{"tf":1.4142135623730951},"362":{"tf":2.449489742783178},"385":{"tf":2.6457513110645907},"397":{"tf":3.0},"404":{"tf":1.0}},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":1,"docs":{"227":{"tf":1.0}}}},"m":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{".":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"(":{"1":{"df":1,"docs":{"368":{"tf":1.0}}},"2":{"df":1,"docs":{"368":{"tf":1.0}}},"3":{"df":1,"docs":{"368":{"tf":1.0}}},"df":0,"docs":{}},"df":1,"docs":{"368":{"tf":1.0}}}}}}},"df":1,"docs":{"368":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"159":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"197":{"tf":1.0},"205":{"tf":1.0},"206":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"206":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"197":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"124":{"tf":1.0},"195":{"tf":1.0},"196":{"tf":4.242640687119285},"197":{"tf":2.0},"198":{"tf":1.0},"200":{"tf":1.0},"201":{"tf":1.0},"202":{"tf":2.6457513110645907},"203":{"tf":2.0},"204":{"tf":1.4142135623730951},"205":{"tf":2.23606797749979},"206":{"tf":2.449489742783178},"208":{"tf":2.6457513110645907},"209":{"tf":5.0},"215":{"tf":1.0},"223":{"tf":1.0},"247":{"tf":1.4142135623730951},"252":{"tf":2.6457513110645907},"261":{"tf":4.69041575982343},"385":{"tf":1.0}},"s":{"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":2.0}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":2.8284271247461903}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":8,"docs":{"196":{"tf":2.0},"197":{"tf":1.7320508075688772},"198":{"tf":1.4142135623730951},"200":{"tf":1.7320508075688772},"204":{"tf":1.4142135623730951},"205":{"tf":1.4142135623730951},"208":{"tf":1.4142135623730951},"209":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"o":{"df":8,"docs":{"196":{"tf":1.4142135623730951},"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"199":{"tf":2.23606797749979},"200":{"tf":2.0},"201":{"tf":1.0},"206":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"205":{"tf":1.0}}}}}},"df":4,"docs":{"204":{"tf":1.0},"205":{"tf":1.4142135623730951},"206":{"tf":1.0},"209":{"tf":1.0}}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"201":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"196":{"tf":1.0}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"_":{"a":{"d":{"d":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":1,"docs":{"261":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"148":{"tf":1.0},"159":{"tf":2.23606797749979},"318":{"tf":1.0}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"df":3,"docs":{"312":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}}}},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{":":{":":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"385":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":3,"docs":{"291":{"tf":1.0},"296":{"tf":1.0},"297":{"tf":1.0}}}}}},"p":{"a":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"(":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":1,"docs":{"293":{"tf":1.0}}}}}},"df":6,"docs":{"291":{"tf":1.0},"292":{"tf":1.7320508075688772},"293":{"tf":2.0},"294":{"tf":1.0},"299":{"tf":1.0},"385":{"tf":3.605551275463989}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":15,"docs":{"154":{"tf":1.0},"158":{"tf":1.4142135623730951},"203":{"tf":1.0},"219":{"tf":1.0},"284":{"tf":1.0},"291":{"tf":3.0},"292":{"tf":5.0990195135927845},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":1.0},"385":{"tf":2.0},"386":{"tf":1.0},"387":{"tf":2.0},"43":{"tf":1.0},"53":{"tf":1.0}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"385":{"tf":2.6457513110645907}}}}}},"df":0,"docs":{}},"df":3,"docs":{"385":{"tf":6.4031242374328485},"387":{"tf":1.4142135623730951},"388":{"tf":3.3166247903554}}}}}},"s":{"=":{"1":{"df":1,"docs":{"203":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"49":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"360":{"tf":2.0}}}}}},"i":{"c":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"v":{"1":{".":{"2":{"df":1,"docs":{"15":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"o":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":2.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":4,"docs":{"138":{"tf":2.0},"180":{"tf":1.0},"356":{"tf":1.7320508075688772},"364":{"tf":1.4142135623730951}}}}},"v":{"df":0,"docs":{},"e":{"c":{"df":1,"docs":{"402":{"tf":1.7320508075688772}}},"df":0,"docs":{}}}},"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":1.7320508075688772}}}}},"df":0,"docs":{},"e":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"254":{"tf":1.0}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"m":{"df":5,"docs":{"366":{"tf":1.0},"369":{"tf":2.6457513110645907},"370":{"tf":3.1622776601683795},"371":{"tf":2.0},"372":{"tf":2.0}}}},"df":0,"docs":{}}}}}}}},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"26":{"tf":1.0}}},"’":{"df":1,"docs":{"26":{"tf":1.0}}}},"n":{"df":0,"docs":{},"i":{"df":1,"docs":{"101":{"tf":1.0}}}},"o":{"df":0,"docs":{},"l":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"416":{"tf":2.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"180":{"tf":1.7320508075688772},"364":{"tf":1.0}}}}}},"r":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"414":{"tf":1.4142135623730951}}},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"179":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},">":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"(":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"355":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"i":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":34,"docs":{"166":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"174":{"tf":1.0},"175":{"tf":1.4142135623730951},"176":{"tf":1.7320508075688772},"177":{"tf":2.23606797749979},"178":{"tf":3.0},"179":{"tf":2.6457513110645907},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.4142135623730951},"239":{"tf":1.0},"244":{"tf":1.0},"266":{"tf":1.0},"299":{"tf":1.0},"302":{"tf":1.0},"311":{"tf":1.0},"349":{"tf":1.0},"354":{"tf":1.0},"362":{"tf":2.0},"365":{"tf":1.0},"392":{"tf":1.0},"396":{"tf":1.7320508075688772},"397":{"tf":1.7320508075688772}}}},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"375":{"tf":1.0}}}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"375":{"tf":1.0}}}}}}}}},"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":1,"docs":{"99":{"tf":1.0}}}}}},"df":3,"docs":{"393":{"tf":1.0},"394":{"tf":1.4142135623730951},"86":{"tf":1.0}},"m":{"df":1,"docs":{"42":{"tf":1.4142135623730951}}}},"u":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":13,"docs":{"197":{"tf":1.7320508075688772},"242":{"tf":1.4142135623730951},"245":{"tf":1.0},"340":{"tf":1.0},"392":{"tf":1.0},"52":{"tf":1.0},"60":{"tf":1.4142135623730951},"61":{"tf":1.0},"69":{"tf":1.0},"81":{"tf":1.0},"86":{"tf":1.0},"92":{"tf":1.0},"94":{"tf":1.4142135623730951}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"226":{"tf":1.0}}}}},"y":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"v":{"df":1,"docs":{"294":{"tf":2.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"53":{"tf":1.7320508075688772}},"l":{"df":3,"docs":{"273":{"tf":1.0},"53":{"tf":1.0},"84":{"tf":1.0}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.4142135623730951}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"338":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"r":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"397":{"tf":1.0}}}}}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"1":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":11,"docs":{"122":{"tf":1.4142135623730951},"33":{"tf":2.0},"34":{"tf":1.0},"35":{"tf":1.0},"36":{"tf":1.0},"361":{"tf":1.0},"37":{"tf":1.0},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.4142135623730951},"45":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"o":{"df":5,"docs":{"32":{"tf":1.7320508075688772},"36":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"44":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":5,"docs":{"175":{"tf":1.4142135623730951},"176":{"tf":2.6457513110645907},"177":{"tf":1.7320508075688772},"178":{"tf":1.4142135623730951},"179":{"tf":1.7320508075688772}}}}},"i":{"c":{"df":0,"docs":{},"e":{"df":1,"docs":{"48":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"o":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":2,"docs":{"261":{"tf":1.7320508075688772},"336":{"tf":1.0}}}},"x":{".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"295":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":1,"docs":{"294":{"tf":2.23606797749979}}},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"179":{"tf":1.0},"361":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"=":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"397":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":34,"docs":{"155":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":2.0},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.0},"239":{"tf":1.7320508075688772},"273":{"tf":1.4142135623730951},"314":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"355":{"tf":1.0},"360":{"tf":1.0},"361":{"tf":1.4142135623730951},"392":{"tf":1.0},"396":{"tf":3.3166247903554},"397":{"tf":3.1622776601683795},"42":{"tf":1.0},"43":{"tf":1.0},"51":{"tf":1.4142135623730951},"74":{"tf":1.0}},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"370":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"f":{"df":1,"docs":{"393":{"tf":1.0}}}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"50":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"361":{"tf":1.0},"50":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"u":{"+":{"0":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"1":{"0":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":1,"docs":{"52":{"tf":1.0}}}}}}},"df":0,"docs":{}},"d":{"7":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":1,"docs":{"52":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"1":{"2":{"8":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"6":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"df":14,"docs":{"163":{"tf":1.0},"164":{"tf":1.0},"235":{"tf":2.0},"353":{"tf":1.4142135623730951},"359":{"tf":1.4142135623730951},"361":{"tf":1.7320508075688772},"364":{"tf":1.0},"42":{"tf":2.6457513110645907},"45":{"tf":1.0},"49":{"tf":1.0},"51":{"tf":1.4142135623730951},"52":{"tf":1.4142135623730951},"69":{"tf":1.0},"89":{"tf":1.0}}},"df":0,"docs":{}},"6":{"4":{"df":2,"docs":{"52":{"tf":1.0},"86":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":6,"docs":{"100":{"tf":1.0},"106":{"tf":1.0},"140":{"tf":1.0},"379":{"tf":1.0},"397":{"tf":1.0},"52":{"tf":2.23606797749979}}},"b":{"df":1,"docs":{"154":{"tf":1.0}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":1,"docs":{"15":{"tf":1.0}}}}}}},"df":6,"docs":{"170":{"tf":1.7320508075688772},"178":{"tf":1.7320508075688772},"227":{"tf":1.0},"275":{"tf":2.23606797749979},"397":{"tf":1.4142135623730951},"52":{"tf":1.0}},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"154":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"s":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"106":{"tf":1.4142135623730951}}}}},"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"d":{"df":10,"docs":{"67":{"tf":1.0},"68":{"tf":1.0},"69":{"tf":2.6457513110645907},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":2.23606797749979},"73":{"tf":2.6457513110645907},"74":{"tf":2.0},"76":{"tf":2.23606797749979},"77":{"tf":2.449489742783178}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"o":{"df":1,"docs":{"258":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"d":{"df":5,"docs":{"140":{"tf":1.7320508075688772},"142":{"tf":1.0},"214":{"tf":1.4142135623730951},"227":{"tf":1.4142135623730951},"52":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"18":{"tf":1.0}}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"345":{"tf":1.0},"350":{"tf":1.7320508075688772},"392":{"tf":1.0}}}},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"106":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"l":{"a":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"55":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":4,"docs":{"370":{"tf":1.0},"385":{"tf":1.0},"53":{"tf":1.0},"85":{"tf":1.0}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}}}}},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"123":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":15,"docs":{"250":{"tf":1.0},"256":{"tf":1.0},"261":{"tf":2.23606797749979},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}}}}}},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"151":{"tf":1.0}}}}}}},"df":0,"docs":{},"l":{"df":1,"docs":{"187":{"tf":1.4142135623730951}}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"v":{"df":1,"docs":{"261":{"tf":1.0}}}}}}}},"s":{"a":{"df":0,"docs":{},"f":{"df":11,"docs":{"252":{"tf":1.0},"281":{"tf":1.4142135623730951},"344":{"tf":1.4142135623730951},"345":{"tf":3.1622776601683795},"346":{"tf":1.7320508075688772},"347":{"tf":4.0},"348":{"tf":1.0},"349":{"tf":2.6457513110645907},"350":{"tf":1.0},"351":{"tf":2.0},"392":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"393":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"s":{"df":2,"docs":{"261":{"tf":1.0},"407":{"tf":1.0}}}},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"404":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"df":5,"docs":{"157":{"tf":1.4142135623730951},"219":{"tf":2.0},"220":{"tf":1.7320508075688772},"234":{"tf":2.6457513110645907},"237":{"tf":3.0}},"e":{"(":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"237":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"f":{">":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"237":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":1,"docs":{"146":{"tf":1.0}}}}},"df":18,"docs":{"158":{"tf":3.1622776601683795},"161":{"tf":1.7320508075688772},"162":{"tf":1.7320508075688772},"219":{"tf":1.0},"220":{"tf":1.0},"227":{"tf":1.0},"294":{"tf":1.0},"299":{"tf":1.4142135623730951},"321":{"tf":1.0},"361":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"376":{"tf":1.4142135623730951},"377":{"tf":1.0},"379":{"tf":1.0},"381":{"tf":1.7320508075688772},"385":{"tf":2.449489742783178},"387":{"tf":1.0},"388":{"tf":1.0}}}},"df":0,"docs":{}}},"y":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"258":{"tf":1.0}}}}},"df":0,"docs":{}}},"p":{"d":{"a":{"df":0,"docs":{},"t":{"df":8,"docs":{"18":{"tf":1.0},"255":{"tf":1.0},"256":{"tf":1.0},"258":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0},"387":{"tf":1.4142135623730951},"40":{"tf":2.449489742783178}},"e":{"_":{"a":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"309":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"d":{"df":2,"docs":{"287":{"tf":1.7320508075688772},"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"o":{"a":{"d":{"df":2,"docs":{"255":{"tf":1.0},"256":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"c":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"169":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"i":{"df":2,"docs":{"378":{"tf":2.449489742783178},"384":{"tf":1.7320508075688772}}},"l":{"df":1,"docs":{"378":{"tf":1.7320508075688772}}}},"s":{",":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{";":{"df":0,"docs":{},"q":{"=":{"0":{".":{"5":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":56,"docs":{"101":{"tf":1.4142135623730951},"109":{"tf":1.0},"111":{"tf":1.0},"112":{"tf":2.0},"117":{"tf":1.7320508075688772},"118":{"tf":3.4641016151377544},"119":{"tf":3.1622776601683795},"120":{"tf":1.4142135623730951},"121":{"tf":3.1622776601683795},"122":{"tf":2.0},"123":{"tf":3.0},"124":{"tf":1.4142135623730951},"126":{"tf":1.4142135623730951},"127":{"tf":1.0},"145":{"tf":1.0},"157":{"tf":1.4142135623730951},"197":{"tf":1.0},"208":{"tf":1.0},"209":{"tf":1.7320508075688772},"213":{"tf":1.4142135623730951},"216":{"tf":1.0},"219":{"tf":1.0},"220":{"tf":1.0},"221":{"tf":1.4142135623730951},"224":{"tf":1.4142135623730951},"253":{"tf":3.4641016151377544},"261":{"tf":2.23606797749979},"273":{"tf":1.0},"279":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.0},"327":{"tf":1.0},"33":{"tf":1.0},"339":{"tf":1.0},"35":{"tf":1.4142135623730951},"369":{"tf":1.0},"380":{"tf":1.0},"392":{"tf":1.4142135623730951},"407":{"tf":1.0},"408":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"69":{"tf":1.4142135623730951},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"1":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"81":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":2,"docs":{"83":{"tf":3.1622776601683795},"86":{"tf":1.0}}},"2":{"df":1,"docs":{"83":{"tf":2.449489742783178}}},"<":{"'":{"a":{"df":1,"docs":{"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.0}}}}}}}}},"df":5,"docs":{"377":{"tf":1.4142135623730951},"81":{"tf":2.449489742783178},"82":{"tf":1.0},"83":{"tf":1.7320508075688772},"86":{"tf":1.7320508075688772}},"n":{"a":{"df":0,"docs":{},"m":{"df":5,"docs":{"159":{"tf":2.23606797749979},"81":{"tf":1.0},"82":{"tf":1.4142135623730951},"83":{"tf":1.7320508075688772},"86":{"tf":2.23606797749979}},"e":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"159":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"%":{"\\":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"21":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}}},"i":{"df":0,"docs":{},"z":{"df":6,"docs":{"154":{"tf":1.0},"362":{"tf":1.0},"385":{"tf":2.23606797749979},"397":{"tf":1.0},"52":{"tf":1.7320508075688772},"76":{"tf":1.7320508075688772}}}},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":2,"docs":{"103":{"tf":1.4142135623730951},"107":{"tf":1.0}},"e":{":":{":":{"a":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"f":{"df":11,"docs":{"136":{"tf":1.4142135623730951},"137":{"tf":1.7320508075688772},"138":{"tf":1.0},"140":{"tf":2.23606797749979},"143":{"tf":1.0},"150":{"tf":1.0},"265":{"tf":1.0},"34":{"tf":1.0},"377":{"tf":1.0},"52":{"tf":1.0},"77":{"tf":1.7320508075688772}}},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"253":{"tf":2.23606797749979}}}}}},"v":{"0":{".":{"1":{".":{"0":{"df":15,"docs":{"256":{"tf":2.0},"261":{"tf":2.6457513110645907},"27":{"tf":1.7320508075688772},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0},"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"2":{".":{"1":{"2":{"7":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"6":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"7":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{".":{"1":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"6":{".":{"3":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"8":{".":{"5":{"df":2,"docs":{"261":{"tf":1.4142135623730951},"40":{"tf":1.7320508075688772}}},"6":{"df":1,"docs":{"40":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"1":{".":{"0":{".":{"0":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{".":{"0":{".":{"0":{"df":1,"docs":{"262":{"tf":2.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"238":{"tf":1.4142135623730951},"239":{"tf":1.7320508075688772},"240":{"tf":1.0}}}}}}},"df":2,"docs":{"238":{"tf":1.0},"239":{"tf":1.0}}},"4":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"v":{"4":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":2,"docs":{"100":{"tf":1.4142135623730951},"99":{"tf":1.0}}},"6":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"v":{"6":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":2,"docs":{"100":{"tf":1.7320508075688772},"99":{"tf":1.0}}},"[":{"1":{"0":{"0":{"df":1,"docs":{"132":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"295":{"tf":1.7320508075688772},"361":{"tf":1.0}},"i":{"d":{"df":1,"docs":{"181":{"tf":1.0}}},"df":0,"docs":{}},"u":{"df":20,"docs":{"158":{"tf":1.0},"164":{"tf":3.605551275463989},"200":{"tf":2.449489742783178},"204":{"tf":1.4142135623730951},"219":{"tf":1.0},"237":{"tf":2.6457513110645907},"283":{"tf":1.7320508075688772},"284":{"tf":2.8284271247461903},"287":{"tf":2.449489742783178},"326":{"tf":1.0},"329":{"tf":1.4142135623730951},"339":{"tf":1.0},"347":{"tf":1.0},"408":{"tf":1.0},"48":{"tf":1.7320508075688772},"55":{"tf":1.7320508075688772},"57":{"tf":1.0},"61":{"tf":1.0},"74":{"tf":1.4142135623730951},"81":{"tf":1.0}},"e":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"c":{"df":1,"docs":{"102":{"tf":1.0}},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"(":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"(":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{":":{":":{"a":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"57":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"57":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"r":{"df":2,"docs":{"227":{"tf":1.0},"396":{"tf":3.3166247903554}},"i":{"a":{"b":{"df":0,"docs":{},"l":{"df":6,"docs":{"103":{"tf":1.0},"293":{"tf":1.0},"407":{"tf":1.0},"43":{"tf":1.0},"48":{"tf":2.449489742783178},"53":{"tf":1.0}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"396":{"tf":1.0}}}},"df":1,"docs":{"100":{"tf":1.0}}}}},"df":0,"docs":{}}}},"c":{"df":1,"docs":{"26":{"tf":1.0}},"s":{"=":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"26":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":9,"docs":{"130":{"tf":1.4142135623730951},"144":{"tf":1.7320508075688772},"148":{"tf":1.0},"166":{"tf":1.0},"235":{"tf":1.0},"293":{"tf":4.358898943540674},"368":{"tf":1.0},"400":{"tf":1.4142135623730951},"403":{"tf":1.0}},"e":{"c":{"!":{"[":{"1":{"df":1,"docs":{"368":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":4,"docs":{"130":{"tf":1.0},"235":{"tf":1.0},"368":{"tf":1.0},"385":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"<":{"_":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{},"i":{"3":{"2":{"df":3,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"309":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"r":{"c":{"<":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"287":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"283":{"tf":1.0},"357":{"tf":1.0}}}}},"t":{"df":14,"docs":{"129":{"tf":1.0},"130":{"tf":1.7320508075688772},"132":{"tf":1.0},"134":{"tf":1.0},"138":{"tf":1.4142135623730951},"139":{"tf":1.0},"166":{"tf":1.0},"176":{"tf":1.7320508075688772},"238":{"tf":1.0},"265":{"tf":1.0},"268":{"tf":1.0},"287":{"tf":1.0},"313":{"tf":1.0},"357":{"tf":2.8284271247461903}}},"u":{"3":{"2":{"df":1,"docs":{"368":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":2,"docs":{"140":{"tf":1.0},"397":{"tf":1.0}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":1,"docs":{"385":{"tf":1.0}}}}}}},"df":5,"docs":{"130":{"tf":1.0},"235":{"tf":1.0},"283":{"tf":1.0},"367":{"tf":1.0},"368":{"tf":2.8284271247461903}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"128":{"tf":1.0},"129":{"tf":1.0}}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"112":{"tf":2.0}}}}},"r":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":2,"docs":{"154":{"tf":1.0},"360":{"tf":1.0}}}}},"df":1,"docs":{"258":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"256":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":7,"docs":{"17":{"tf":1.0},"25":{"tf":1.0},"255":{"tf":1.0},"257":{"tf":1.4142135623730951},"26":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}}}}}},"t":{";":{"&":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"396":{"tf":1.4142135623730951}}}}}}},".":{".":{".":{"&":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":2,"docs":{"396":{"tf":1.0},"397":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"396":{"tf":2.449489742783178}}}}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"393":{"tf":1.0}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}},"u":{"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"16":{"tf":1.4142135623730951},"409":{"tf":1.0}}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"308":{"tf":1.0}}},"df":0,"docs":{}}}}}},"s":{"df":1,"docs":{"56":{"tf":1.4142135623730951}}}},"w":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"(":{"d":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"d":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"261":{"tf":1.0}}}}}}}},"v":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"407":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":4,"docs":{"255":{"tf":1.0},"261":{"tf":1.7320508075688772},"385":{"tf":2.23606797749979},"407":{"tf":1.0}}}},"v":{"df":0,"docs":{},"e":{"df":1,"docs":{"355":{"tf":1.0}}}}},"df":1,"docs":{"194":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"k":{"<":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"287":{"tf":2.449489742783178}}},"df":0,"docs":{}}},"t":{"df":3,"docs":{"280":{"tf":1.0},"287":{"tf":3.0},"288":{"tf":1.0}}}},"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"280":{"tf":1.4142135623730951},"287":{"tf":2.23606797749979}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"287":{"tf":2.8284271247461903}}}},"b":{"df":10,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.4142135623730951},"381":{"tf":1.7320508075688772},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":4.47213595499958},"387":{"tf":2.449489742783178},"388":{"tf":2.23606797749979}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"y":{"df":1,"docs":{"308":{"tf":1.0}}}}}}},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":7,"docs":{"237":{"tf":1.0},"314":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.7320508075688772},"90":{"tf":1.4142135623730951},"92":{"tf":2.23606797749979},"99":{"tf":1.0}}}}},"df":0,"docs":{},"l":{"d":{"c":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"339":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"n":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":9,"docs":{"12":{"tf":1.0},"16":{"tf":1.7320508075688772},"17":{"tf":1.0},"21":{"tf":1.4142135623730951},"22":{"tf":1.0},"24":{"tf":2.449489742783178},"27":{"tf":1.7320508075688772},"416":{"tf":2.0},"42":{"tf":1.0}}}}},"df":3,"docs":{"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.0}}},"t":{"df":0,"docs":{},"h":{"_":{"c":{"a":{"df":0,"docs":{},"p":{"a":{"c":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":2,"docs":{"273":{"tf":1.0},"36":{"tf":1.0}}}}}}},"z":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"148":{"tf":1.0}}}}},"df":0,"docs":{}},"r":{"d":{"df":2,"docs":{"76":{"tf":2.23606797749979},"77":{"tf":1.7320508075688772}}},"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":2,"docs":{"385":{"tf":2.449489742783178},"387":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":4,"docs":{"385":{"tf":6.324555320336759},"386":{"tf":1.0},"387":{"tf":3.7416573867739413},"388":{"tf":3.605551275463989}}}},"s":{"df":0,"docs":{},"p":{"a":{"c":{"df":4,"docs":{"109":{"tf":1.0},"259":{"tf":1.0},"260":{"tf":2.23606797749979},"261":{"tf":2.23606797749979}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"l":{"d":{"df":13,"docs":{"10":{"tf":1.0},"12":{"tf":1.0},"139":{"tf":1.0},"148":{"tf":1.0},"25":{"tf":1.0},"26":{"tf":2.0},"261":{"tf":1.0},"27":{"tf":2.23606797749979},"30":{"tf":1.0},"32":{"tf":1.4142135623730951},"54":{"tf":1.0},"58":{"tf":1.0},"77":{"tf":1.7320508075688772}}},"df":0,"docs":{}}}},"r":{"a":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"357":{"tf":3.3166247903554}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"a":{"d":{"d":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"_":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"379":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":13,"docs":{"100":{"tf":1.0},"196":{"tf":2.449489742783178},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"199":{"tf":2.23606797749979},"200":{"tf":2.6457513110645907},"201":{"tf":1.0},"204":{"tf":1.7320508075688772},"205":{"tf":2.0},"206":{"tf":1.7320508075688772},"208":{"tf":1.4142135623730951},"209":{"tf":2.449489742783178},"360":{"tf":1.7320508075688772}}}}}}},"x":{".":{"df":0,"docs":{},"y":{".":{"df":0,"docs":{},"z":{"df":1,"docs":{"17":{"tf":1.0}}}},"df":0,"docs":{}}},"1":{"df":1,"docs":{"172":{"tf":1.7320508075688772}}},"2":{"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"8":{"6":{"_":{"6":{"4":{"df":1,"docs":{"416":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"368":{"tf":1.4142135623730951}}}}}}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":0,"docs":{}}}}},"c":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"15":{"tf":1.0}}}},"df":0,"docs":{}}},"df":42,"docs":{"104":{"tf":1.4142135623730951},"170":{"tf":3.0},"172":{"tf":3.1622776601683795},"182":{"tf":2.23606797749979},"183":{"tf":2.23606797749979},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.4142135623730951},"235":{"tf":3.0},"237":{"tf":1.0},"270":{"tf":1.7320508075688772},"271":{"tf":1.4142135623730951},"324":{"tf":1.0},"326":{"tf":1.4142135623730951},"329":{"tf":1.4142135623730951},"330":{"tf":3.0},"331":{"tf":2.0},"332":{"tf":2.0},"334":{"tf":1.0},"335":{"tf":3.4641016151377544},"336":{"tf":1.4142135623730951},"337":{"tf":1.0},"338":{"tf":4.242640687119285},"339":{"tf":1.7320508075688772},"340":{"tf":2.449489742783178},"354":{"tf":1.0},"356":{"tf":1.4142135623730951},"368":{"tf":1.7320508075688772},"37":{"tf":1.7320508075688772},"377":{"tf":1.0},"396":{"tf":1.0},"40":{"tf":1.0},"408":{"tf":2.23606797749979},"48":{"tf":3.872983346207417},"50":{"tf":2.6457513110645907},"53":{"tf":1.4142135623730951},"55":{"tf":1.7320508075688772},"56":{"tf":2.449489742783178},"57":{"tf":2.0},"69":{"tf":2.449489742783178},"70":{"tf":1.0},"93":{"tf":1.7320508075688772}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"211":{"tf":1.0}}}}}}}}}}},"y":{".":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"273":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"1":{"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"2":{"df":1,"docs":{"172":{"tf":1.7320508075688772}}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"93":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"258":{"tf":2.449489742783178}}}}},"df":23,"docs":{"170":{"tf":2.8284271247461903},"172":{"tf":2.23606797749979},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"189":{"tf":1.7320508075688772},"270":{"tf":2.449489742783178},"271":{"tf":1.4142135623730951},"273":{"tf":1.0},"329":{"tf":1.0},"330":{"tf":1.4142135623730951},"331":{"tf":1.4142135623730951},"335":{"tf":3.3166247903554},"338":{"tf":4.242640687119285},"339":{"tf":2.0},"340":{"tf":4.0},"354":{"tf":1.0},"356":{"tf":1.4142135623730951},"37":{"tf":2.0},"53":{"tf":1.4142135623730951},"56":{"tf":2.449489742783178},"69":{"tf":2.23606797749979},"93":{"tf":1.7320508075688772}},"e":{"df":1,"docs":{"340":{"tf":1.0}},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":3,"docs":{"145":{"tf":1.0},"146":{"tf":1.0},"148":{"tf":2.0}}}}}}},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"393":{"tf":1.0}}},"df":0,"docs":{}}}},"y":{"df":0,"docs":{},"y":{"df":0,"docs":{},"i":{"df":1,"docs":{"17":{"tf":1.0}}}}}},"z":{"df":3,"docs":{"330":{"tf":1.4142135623730951},"339":{"tf":1.4142135623730951},"53":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":3,"docs":{"247":{"tf":1.4142135623730951},"248":{"tf":1.0},"60":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"p":{"(":{"&":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"[":{"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"247":{"tf":1.0}}}}}}},"breadcrumbs":{"root":{"0":{".":{".":{"1":{"0":{"0":{"df":1,"docs":{"407":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"2":{"0":{"df":1,"docs":{"364":{"tf":1.0}}},"df":0,"docs":{}},"5":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"0":{"0":{"df":1,"docs":{"261":{"tf":2.449489742783178}}},"2":{"df":1,"docs":{"41":{"tf":1.0}}},"df":5,"docs":{"172":{"tf":1.4142135623730951},"250":{"tf":1.4142135623730951},"261":{"tf":1.0},"27":{"tf":1.0},"93":{"tf":1.4142135623730951}}},"1":{".":{"0":{"df":3,"docs":{"255":{"tf":1.0},"256":{"tf":1.0},"26":{"tf":1.0}}},"df":0,"docs":{}},"9":{"df":1,"docs":{"256":{"tf":1.0}}},"df":0,"docs":{}},"2":{"7":{"df":2,"docs":{"252":{"tf":1.0},"261":{"tf":1.0}}},"9":{"df":1,"docs":{"61":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"df":1,"docs":{"27":{"tf":1.0}}},"3":{"df":1,"docs":{"27":{"tf":1.0}}},"df":0,"docs":{}},"4":{"2":{"df":1,"docs":{"377":{"tf":1.0}}},"3":{"df":1,"docs":{"42":{"tf":1.0}}},"df":0,"docs":{}},"5":{"0":{"df":1,"docs":{"407":{"tf":1.0}}},"9":{"df":1,"docs":{"407":{"tf":1.0}}},"df":0,"docs":{}},"6":{"8":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"8":{".":{"5":{"df":1,"docs":{"40":{"tf":2.6457513110645907}}},"6":{"df":1,"docs":{"40":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"8":{"df":1,"docs":{"262":{"tf":1.0}}},"df":0,"docs":{}},"9":{".":{"0":{"df":1,"docs":{"40":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"df":1,"docs":{"40":{"tf":1.0}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"0":{"df":1,"docs":{"337":{"tf":1.0}}},"df":0,"docs":{}},"1":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"154":{"tf":1.0},"196":{"tf":1.0},"214":{"tf":1.0},"234":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"113":{"tf":1.0},"196":{"tf":1.0},"208":{"tf":1.0},"252":{"tf":1.0},"309":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":8,"docs":{"154":{"tf":1.0},"213":{"tf":1.0},"234":{"tf":1.0},"267":{"tf":1.0},"291":{"tf":1.0},"327":{"tf":1.0},"376":{"tf":1.0},"56":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"33":{"tf":1.0}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"36":{"tf":1.0}}}},"df":0,"docs":{}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":6,"docs":{"100":{"tf":1.0},"130":{"tf":1.0},"167":{"tf":1.0},"346":{"tf":1.0},"67":{"tf":1.0},"81":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"o":{"df":1,"docs":{"33":{"tf":1.0}}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"33":{"tf":1.0}}}}},"df":0,"docs":{}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"37":{"tf":1.0}}}}}}}},"df":1,"docs":{"33":{"tf":1.0}}}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"35":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"34":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":24,"docs":{"100":{"tf":1.7320508075688772},"123":{"tf":1.0},"139":{"tf":1.0},"141":{"tf":1.0},"153":{"tf":1.4142135623730951},"176":{"tf":1.0},"196":{"tf":1.4142135623730951},"204":{"tf":1.0},"214":{"tf":1.0},"220":{"tf":1.0},"260":{"tf":1.0},"270":{"tf":1.0},"283":{"tf":1.4142135623730951},"292":{"tf":1.0},"293":{"tf":1.0},"32":{"tf":1.7320508075688772},"334":{"tf":1.0},"347":{"tf":1.4142135623730951},"385":{"tf":1.7320508075688772},"51":{"tf":1.0},"68":{"tf":1.0},"84":{"tf":1.0},"90":{"tf":1.4142135623730951},"99":{"tf":1.0}}},"2":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"8":{"df":1,"docs":{"40":{"tf":1.0}}},"9":{"df":1,"docs":{"122":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"215":{"tf":1.0},"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"252":{"tf":1.0},"309":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"167":{"tf":1.0},"215":{"tf":1.0},"292":{"tf":1.0},"377":{"tf":1.0},"60":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"100":{"tf":1.0},"130":{"tf":1.0},"235":{"tf":1.0},"268":{"tf":1.4142135623730951},"328":{"tf":1.0},"346":{"tf":1.0},"69":{"tf":1.0},"81":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":26,"docs":{"100":{"tf":1.0},"122":{"tf":1.4142135623730951},"125":{"tf":1.4142135623730951},"139":{"tf":1.0},"177":{"tf":1.0},"197":{"tf":1.4142135623730951},"205":{"tf":1.0},"223":{"tf":1.0},"224":{"tf":1.4142135623730951},"261":{"tf":1.7320508075688772},"33":{"tf":2.0},"336":{"tf":1.0},"34":{"tf":1.0},"35":{"tf":1.0},"356":{"tf":1.4142135623730951},"36":{"tf":1.4142135623730951},"361":{"tf":1.0},"37":{"tf":1.0},"385":{"tf":1.4142135623730951},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.4142135623730951},"45":{"tf":1.4142135623730951},"48":{"tf":1.4142135623730951},"69":{"tf":1.0},"90":{"tf":1.0}}},"3":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":6,"docs":{"114":{"tf":1.0},"196":{"tf":1.0},"235":{"tf":1.0},"268":{"tf":1.0},"293":{"tf":1.0},"329":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"216":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"114":{"tf":1.0},"313":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"196":{"tf":1.0},"253":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":4,"docs":{"155":{"tf":1.0},"293":{"tf":1.0},"61":{"tf":1.0},"70":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"41":{"tf":1.0}}}},"c":{"df":0,"docs":{},"h":{"0":{"7":{"df":1,"docs":{"122":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":9,"docs":{"102":{"tf":1.0},"131":{"tf":1.0},"167":{"tf":1.0},"235":{"tf":1.0},"268":{"tf":1.0},"329":{"tf":1.0},"346":{"tf":1.0},"379":{"tf":1.0},"81":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":17,"docs":{"100":{"tf":1.0},"146":{"tf":1.0},"177":{"tf":1.7320508075688772},"197":{"tf":1.4142135623730951},"205":{"tf":1.0},"224":{"tf":1.0},"261":{"tf":1.0},"337":{"tf":1.0},"356":{"tf":1.0},"385":{"tf":1.4142135623730951},"42":{"tf":1.0},"50":{"tf":1.4142135623730951},"56":{"tf":1.0},"60":{"tf":1.4142135623730951},"61":{"tf":2.0},"69":{"tf":1.0},"95":{"tf":1.0}}},"4":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"155":{"tf":1.0},"216":{"tf":1.0},"236":{"tf":1.0},"42":{"tf":1.0},"61":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"313":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":6,"docs":{"155":{"tf":1.0},"236":{"tf":1.0},"253":{"tf":1.0},"293":{"tf":1.0},"61":{"tf":1.0},"71":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"103":{"tf":1.0},"132":{"tf":1.0},"169":{"tf":1.0},"216":{"tf":1.0},"330":{"tf":1.0},"347":{"tf":1.0},"42":{"tf":1.0},"81":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":22,"docs":{"100":{"tf":1.0},"122":{"tf":1.0},"158":{"tf":1.0},"178":{"tf":1.0},"198":{"tf":1.4142135623730951},"206":{"tf":1.0},"224":{"tf":1.0},"261":{"tf":1.0},"337":{"tf":1.0},"360":{"tf":1.4142135623730951},"387":{"tf":1.4142135623730951},"43":{"tf":1.0},"50":{"tf":1.0},"67":{"tf":1.0},"69":{"tf":1.7320508075688772},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"73":{"tf":1.0},"76":{"tf":2.23606797749979},"77":{"tf":1.4142135623730951},"85":{"tf":1.0}}},"5":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"380":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"115":{"tf":1.0},"169":{"tf":1.0},"236":{"tf":1.0},"330":{"tf":1.0},"347":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"115":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"197":{"tf":1.0},"253":{"tf":1.0},"313":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":7,"docs":{"156":{"tf":1.0},"169":{"tf":1.0},"236":{"tf":1.0},"268":{"tf":1.0},"293":{"tf":1.0},"61":{"tf":1.0},"71":{"tf":1.0}},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"9":{"df":1,"docs":{"361":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"m":{"df":1,"docs":{"104":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"104":{"tf":1.0},"132":{"tf":1.0},"218":{"tf":1.0},"330":{"tf":1.0},"347":{"tf":1.0},"380":{"tf":1.0},"45":{"tf":1.0},"82":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"d":{"_":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"m":{"df":1,"docs":{"104":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":21,"docs":{"100":{"tf":1.0},"158":{"tf":1.0},"179":{"tf":1.0},"199":{"tf":1.0},"209":{"tf":1.0},"338":{"tf":1.0},"360":{"tf":1.0},"387":{"tf":1.0},"44":{"tf":1.0},"50":{"tf":1.4142135623730951},"69":{"tf":1.0},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":2.6457513110645907},"92":{"tf":1.0},"94":{"tf":1.4142135623730951},"96":{"tf":1.0}}},"6":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"132":{"tf":1.0},"197":{"tf":1.0},"72":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"197":{"tf":1.0},"313":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":7,"docs":{"170":{"tf":1.0},"236":{"tf":1.0},"270":{"tf":1.0},"294":{"tf":1.0},"45":{"tf":1.0},"72":{"tf":1.0},"73":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":9,"docs":{"107":{"tf":1.0},"132":{"tf":1.0},"159":{"tf":1.0},"218":{"tf":1.0},"253":{"tf":1.0},"331":{"tf":1.0},"347":{"tf":1.0},"381":{"tf":1.0},"83":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":14,"docs":{"100":{"tf":1.4142135623730951},"101":{"tf":1.0},"102":{"tf":1.0},"103":{"tf":1.0},"104":{"tf":2.0},"107":{"tf":1.0},"179":{"tf":1.0},"199":{"tf":1.4142135623730951},"268":{"tf":1.0},"360":{"tf":1.4142135623730951},"387":{"tf":1.0},"52":{"tf":1.0},"69":{"tf":1.0},"92":{"tf":1.0}}},"7":{"/":{"4":{"0":{"4":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"381":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"d":{"d":{"/":{"a":{"d":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"170":{"tf":1.0},"198":{"tf":1.0},"219":{"tf":1.0},"237":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"115":{"tf":1.0},"198":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"314":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"170":{"tf":1.0},"237":{"tf":1.0},"271":{"tf":1.0},"294":{"tf":1.0},"331":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"s":{"_":{"b":{"df":0,"docs":{},"y":{"df":0,"docs":{},"t":{"df":1,"docs":{"76":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":7,"docs":{"133":{"tf":1.0},"159":{"tf":1.0},"218":{"tf":1.0},"347":{"tf":1.0},"381":{"tf":1.0},"76":{"tf":1.0},"83":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"76":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"t":{"df":1,"docs":{"76":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":18,"docs":{"101":{"tf":1.4142135623730951},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.7320508075688772},"125":{"tf":1.4142135623730951},"178":{"tf":1.0},"199":{"tf":1.4142135623730951},"361":{"tf":1.0},"388":{"tf":1.4142135623730951},"52":{"tf":1.0},"72":{"tf":1.4142135623730951}}},"8":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"200":{"tf":1.0},"219":{"tf":1.0},"237":{"tf":1.0},"332":{"tf":1.0},"87":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"116":{"tf":1.0},"200":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":4,"docs":{"170":{"tf":1.0},"237":{"tf":1.0},"294":{"tf":1.0},"347":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"87":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"133":{"tf":1.0},"159":{"tf":1.0},"219":{"tf":1.0},"272":{"tf":1.0},"314":{"tf":1.0},"332":{"tf":1.0},"76":{"tf":1.0},"87":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"102":{"tf":1.0},"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.0},"140":{"tf":2.0},"145":{"tf":1.0},"146":{"tf":1.0},"147":{"tf":1.0},"148":{"tf":1.7320508075688772},"162":{"tf":1.0},"187":{"tf":1.0},"200":{"tf":1.4142135623730951},"361":{"tf":1.0},"52":{"tf":1.0},"72":{"tf":1.0}}},"9":{".":{"0":{"2":{".":{"2":{"0":{"2":{"3":{"df":1,"docs":{"0":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"272":{"tf":1.0},"295":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"117":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"200":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"172":{"tf":1.0},"237":{"tf":1.0},"295":{"tf":1.0},"348":{"tf":1.0},"88":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":8,"docs":{"134":{"tf":1.0},"159":{"tf":1.0},"219":{"tf":1.0},"272":{"tf":1.0},"314":{"tf":1.0},"332":{"tf":1.0},"382":{"tf":1.0},"77":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"77":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":11,"docs":{"103":{"tf":1.0},"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"159":{"tf":2.8284271247461903},"164":{"tf":1.4142135623730951},"187":{"tf":1.4142135623730951},"200":{"tf":1.4142135623730951},"361":{"tf":1.0},"52":{"tf":1.0},"73":{"tf":1.0}}},"b":{"1":{"1":{"1":{"1":{"_":{"0":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":32,"docs":{"100":{"tf":1.0},"140":{"tf":1.0},"148":{"tf":1.0},"154":{"tf":1.4142135623730951},"159":{"tf":1.7320508075688772},"196":{"tf":2.0},"209":{"tf":1.0},"238":{"tf":1.0},"250":{"tf":2.0},"252":{"tf":2.0},"261":{"tf":5.0990195135927845},"273":{"tf":1.0},"280":{"tf":1.0},"285":{"tf":1.0},"286":{"tf":1.0},"287":{"tf":2.8284271247461903},"299":{"tf":1.4142135623730951},"329":{"tf":1.4142135623730951},"338":{"tf":3.0},"340":{"tf":2.0},"357":{"tf":1.0},"370":{"tf":1.0},"385":{"tf":1.7320508075688772},"388":{"tf":2.8284271247461903},"52":{"tf":2.23606797749979},"53":{"tf":1.7320508075688772},"60":{"tf":1.0},"61":{"tf":1.7320508075688772},"77":{"tf":1.0},"88":{"tf":1.0},"89":{"tf":1.0},"92":{"tf":1.4142135623730951}},"o":{"7":{"7":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"x":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":1,"docs":{"52":{"tf":1.0}}}}}},"1":{".":{".":{"4":{"df":1,"docs":{"61":{"tf":1.0}}},"=":{"1":{"0":{"0":{"df":1,"docs":{"41":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"0":{".":{"1":{"df":1,"docs":{"258":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":2,"docs":{"189":{"tf":1.0},"388":{"tf":1.0}}},"1":{"0":{"df":1,"docs":{"410":{"tf":1.0}}},"df":1,"docs":{"379":{"tf":1.0}}},"3":{"1":{"df":1,"docs":{"410":{"tf":1.0}}},"df":0,"docs":{}},"4":{"0":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"5":{"0":{"df":1,"docs":{"43":{"tf":1.0}}},"df":1,"docs":{"414":{"tf":1.4142135623730951}}},"6":{"7":{".":{"1":{"df":1,"docs":{"0":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"414":{"tf":1.0}}},"df":0,"docs":{}},"0":{".":{"1":{"5":{"df":1,"docs":{"377":{"tf":1.0}}},"8":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"4":{"df":1,"docs":{"172":{"tf":1.0}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":5,"docs":{"159":{"tf":1.0},"204":{"tf":1.0},"219":{"tf":1.0},"314":{"tf":1.0},"332":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"117":{"tf":1.0},"204":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"159":{"tf":1.0},"296":{"tf":1.0},"314":{"tf":1.0},"348":{"tf":1.0},"89":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":7,"docs":{"135":{"tf":1.0},"172":{"tf":1.0},"219":{"tf":1.0},"238":{"tf":1.0},"273":{"tf":1.0},"332":{"tf":1.0},"384":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"0":{"0":{"df":1,"docs":{"347":{"tf":1.0}}},"df":1,"docs":{"52":{"tf":1.0}}},"df":12,"docs":{"132":{"tf":1.4142135623730951},"154":{"tf":1.0},"164":{"tf":2.6457513110645907},"167":{"tf":1.0},"200":{"tf":2.449489742783178},"227":{"tf":1.0},"283":{"tf":1.4142135623730951},"31":{"tf":1.0},"39":{"tf":1.0},"407":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0}}},"2":{"3":{"df":1,"docs":{"376":{"tf":1.0}}},"df":0,"docs":{}},"4":{"df":1,"docs":{"140":{"tf":1.0}}},"df":84,"docs":{"10":{"tf":1.0},"101":{"tf":1.0},"105":{"tf":1.4142135623730951},"117":{"tf":1.4142135623730951},"130":{"tf":1.0},"135":{"tf":1.4142135623730951},"139":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":2.0},"149":{"tf":1.0},"155":{"tf":1.0},"159":{"tf":1.7320508075688772},"16":{"tf":1.0},"167":{"tf":3.605551275463989},"169":{"tf":2.8284271247461903},"170":{"tf":3.1622776601683795},"172":{"tf":3.4641016151377544},"173":{"tf":1.0},"175":{"tf":1.7320508075688772},"176":{"tf":1.7320508075688772},"177":{"tf":2.23606797749979},"178":{"tf":1.0},"180":{"tf":1.7320508075688772},"182":{"tf":2.6457513110645907},"183":{"tf":2.6457513110645907},"184":{"tf":3.1622776601683795},"186":{"tf":3.4641016151377544},"188":{"tf":1.7320508075688772},"189":{"tf":2.449489742783178},"190":{"tf":2.0},"192":{"tf":1.0},"194":{"tf":1.0},"196":{"tf":1.0},"200":{"tf":1.0},"201":{"tf":1.0},"204":{"tf":2.0},"211":{"tf":1.0},"219":{"tf":1.4142135623730951},"220":{"tf":1.0},"223":{"tf":1.4142135623730951},"238":{"tf":1.4142135623730951},"244":{"tf":1.0},"261":{"tf":1.0},"262":{"tf":1.0},"268":{"tf":1.0},"273":{"tf":1.7320508075688772},"274":{"tf":1.4142135623730951},"279":{"tf":2.0},"284":{"tf":1.0},"286":{"tf":1.0},"296":{"tf":1.7320508075688772},"299":{"tf":2.23606797749979},"310":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.4142135623730951},"315":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.0},"332":{"tf":1.4142135623730951},"335":{"tf":1.7320508075688772},"341":{"tf":1.0},"348":{"tf":1.4142135623730951},"352":{"tf":1.0},"357":{"tf":1.0},"361":{"tf":1.0},"37":{"tf":1.0},"384":{"tf":1.4142135623730951},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"41":{"tf":1.0},"45":{"tf":1.4142135623730951},"49":{"tf":1.0},"53":{"tf":1.7320508075688772},"61":{"tf":1.4142135623730951},"69":{"tf":1.0},"73":{"tf":1.4142135623730951},"74":{"tf":1.0},"85":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951},"89":{"tf":1.4142135623730951},"90":{"tf":1.4142135623730951},"96":{"tf":1.0}}},"1":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{":":{"3":{"df":1,"docs":{"90":{"tf":1.0}}},"9":{":":{"1":{"0":{"df":1,"docs":{"90":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"205":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"118":{"tf":1.0},"205":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"172":{"tf":1.0},"349":{"tf":1.0},"90":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"316":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":9,"docs":{"138":{"tf":1.0},"159":{"tf":1.0},"220":{"tf":1.0},"238":{"tf":1.0},"274":{"tf":1.0},"297":{"tf":1.0},"322":{"tf":1.0},"335":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":44,"docs":{"10":{"tf":1.0},"118":{"tf":1.4142135623730951},"119":{"tf":1.7320508075688772},"121":{"tf":1.0},"124":{"tf":1.0},"138":{"tf":1.4142135623730951},"159":{"tf":1.4142135623730951},"16":{"tf":1.0},"172":{"tf":1.4142135623730951},"190":{"tf":1.0},"192":{"tf":1.0},"196":{"tf":3.4641016151377544},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"200":{"tf":2.8284271247461903},"201":{"tf":1.0},"204":{"tf":2.23606797749979},"205":{"tf":2.449489742783178},"206":{"tf":1.4142135623730951},"208":{"tf":2.0},"209":{"tf":2.449489742783178},"211":{"tf":1.0},"220":{"tf":1.4142135623730951},"223":{"tf":1.0},"238":{"tf":1.4142135623730951},"261":{"tf":1.0},"274":{"tf":1.4142135623730951},"297":{"tf":1.0},"316":{"tf":1.4142135623730951},"318":{"tf":1.0},"319":{"tf":1.4142135623730951},"320":{"tf":1.0},"321":{"tf":1.0},"322":{"tf":1.0},"335":{"tf":1.4142135623730951},"340":{"tf":1.0},"341":{"tf":1.0},"349":{"tf":1.4142135623730951},"362":{"tf":1.0},"385":{"tf":1.4142135623730951},"53":{"tf":1.0},"56":{"tf":1.0},"73":{"tf":1.0},"90":{"tf":1.4142135623730951}}},"2":{".":{".":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"247":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":1.0}}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"118":{"tf":1.0},"220":{"tf":1.0},"385":{"tf":1.0},"90":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"118":{"tf":1.0},"175":{"tf":1.0},"208":{"tf":1.0},"317":{"tf":1.0},"353":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":4,"docs":{"159":{"tf":1.0},"299":{"tf":1.0},"338":{"tf":1.0},"90":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"138":{"tf":1.0},"220":{"tf":1.0},"274":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"7":{".":{"0":{".":{"0":{".":{"1":{":":{"7":{"8":{"7":{"8":{"/":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":1,"docs":{"381":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":2,"docs":{"380":{"tf":1.0},"381":{"tf":1.0}}}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"378":{"tf":1.0}}}}}}},"df":5,"docs":{"376":{"tf":1.7320508075688772},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":2,"docs":{"100":{"tf":1.0},"162":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"52":{"tf":1.0}}},"8":{"df":1,"docs":{"52":{"tf":1.4142135623730951}}},"df":49,"docs":{"10":{"tf":1.4142135623730951},"107":{"tf":1.0},"115":{"tf":1.0},"118":{"tf":1.4142135623730951},"138":{"tf":1.7320508075688772},"140":{"tf":1.0},"159":{"tf":1.4142135623730951},"175":{"tf":1.4142135623730951},"177":{"tf":1.0},"198":{"tf":1.0},"208":{"tf":1.4142135623730951},"209":{"tf":2.0},"213":{"tf":1.7320508075688772},"214":{"tf":1.0},"215":{"tf":2.0},"216":{"tf":2.6457513110645907},"218":{"tf":3.0},"219":{"tf":3.7416573867739413},"220":{"tf":3.3166247903554},"221":{"tf":2.6457513110645907},"223":{"tf":2.6457513110645907},"224":{"tf":3.1622776601683795},"226":{"tf":2.0},"227":{"tf":3.605551275463989},"230":{"tf":1.4142135623730951},"232":{"tf":1.0},"239":{"tf":1.4142135623730951},"241":{"tf":1.4142135623730951},"243":{"tf":1.0},"244":{"tf":2.6457513110645907},"245":{"tf":1.7320508075688772},"247":{"tf":2.0},"259":{"tf":1.0},"262":{"tf":1.0},"274":{"tf":1.7320508075688772},"299":{"tf":1.7320508075688772},"317":{"tf":1.4142135623730951},"338":{"tf":1.7320508075688772},"341":{"tf":1.0},"353":{"tf":1.7320508075688772},"362":{"tf":1.4142135623730951},"364":{"tf":1.0},"37":{"tf":1.0},"380":{"tf":1.4142135623730951},"385":{"tf":2.23606797749979},"50":{"tf":1.0},"53":{"tf":1.4142135623730951},"73":{"tf":1.4142135623730951},"90":{"tf":1.7320508075688772}}},"3":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"209":{"tf":1.0},"299":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"119":{"tf":1.0},"353":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":5,"docs":{"176":{"tf":1.0},"221":{"tf":1.0},"240":{"tf":1.0},"318":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"299":{"tf":1.0},"338":{"tf":1.0},"92":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"138":{"tf":1.0},"164":{"tf":1.0},"274":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}}},"5":{"df":1,"docs":{"140":{"tf":1.0}}},"df":45,"docs":{"10":{"tf":1.0},"107":{"tf":1.0},"119":{"tf":2.0},"138":{"tf":1.4142135623730951},"157":{"tf":1.7320508075688772},"164":{"tf":1.4142135623730951},"176":{"tf":1.4142135623730951},"177":{"tf":1.0},"178":{"tf":1.0},"179":{"tf":1.0},"209":{"tf":1.7320508075688772},"211":{"tf":1.0},"213":{"tf":1.0},"218":{"tf":1.0},"219":{"tf":1.7320508075688772},"221":{"tf":1.4142135623730951},"224":{"tf":1.4142135623730951},"234":{"tf":2.0},"235":{"tf":2.8284271247461903},"236":{"tf":3.605551275463989},"237":{"tf":3.4641016151377544},"238":{"tf":2.449489742783178},"239":{"tf":1.7320508075688772},"240":{"tf":2.23606797749979},"241":{"tf":2.8284271247461903},"242":{"tf":1.7320508075688772},"244":{"tf":3.3166247903554},"245":{"tf":2.449489742783178},"246":{"tf":1.4142135623730951},"274":{"tf":1.4142135623730951},"291":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.4142135623730951},"307":{"tf":1.0},"318":{"tf":1.4142135623730951},"331":{"tf":1.0},"338":{"tf":1.7320508075688772},"353":{"tf":1.7320508075688772},"362":{"tf":1.0},"385":{"tf":1.7320508075688772},"53":{"tf":1.0},"73":{"tf":1.0},"76":{"tf":1.0},"92":{"tf":1.4142135623730951},"94":{"tf":1.0}}},"4":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"241":{"tf":1.0},"276":{"tf":1.0},"299":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"177":{"tf":1.0},"319":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":5,"docs":{"119":{"tf":1.0},"276":{"tf":1.0},"299":{"tf":1.0},"354":{"tf":1.0},"94":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"138":{"tf":1.0},"221":{"tf":1.0},"241":{"tf":1.0},"338":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"n":{"df":1,"docs":{"140":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"140":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"1":{"df":1,"docs":{"140":{"tf":1.0}}},"df":31,"docs":{"10":{"tf":1.0},"107":{"tf":1.0},"109":{"tf":1.0},"119":{"tf":1.4142135623730951},"121":{"tf":1.0},"138":{"tf":1.4142135623730951},"140":{"tf":1.0},"164":{"tf":1.0},"177":{"tf":1.4142135623730951},"196":{"tf":1.0},"221":{"tf":1.7320508075688772},"241":{"tf":1.7320508075688772},"252":{"tf":3.4641016151377544},"253":{"tf":4.58257569495584},"261":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":1.0},"299":{"tf":1.4142135623730951},"302":{"tf":1.0},"310":{"tf":1.0},"319":{"tf":1.4142135623730951},"338":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"362":{"tf":1.0},"385":{"tf":2.0},"40":{"tf":1.0},"53":{"tf":1.0},"58":{"tf":1.0},"74":{"tf":1.4142135623730951},"90":{"tf":1.0},"94":{"tf":1.7320508075688772}}},"5":{".":{"1":{"7":{"df":1,"docs":{"279":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"277":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"180":{"tf":1.0},"354":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"119":{"tf":1.0},"223":{"tf":1.0},"320":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"299":{"tf":1.0},"338":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"139":{"tf":1.0},"241":{"tf":1.0},"277":{"tf":1.0},"94":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"1":{"df":2,"docs":{"140":{"tf":1.0},"142":{"tf":1.0}}},"df":47,"docs":{"10":{"tf":1.0},"106":{"tf":1.0},"119":{"tf":1.4142135623730951},"120":{"tf":1.4142135623730951},"133":{"tf":1.0},"139":{"tf":1.7320508075688772},"180":{"tf":1.4142135623730951},"197":{"tf":1.0},"223":{"tf":1.4142135623730951},"241":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"268":{"tf":4.47213595499958},"270":{"tf":1.7320508075688772},"271":{"tf":2.6457513110645907},"272":{"tf":3.0},"273":{"tf":2.449489742783178},"274":{"tf":3.605551275463989},"276":{"tf":2.0},"277":{"tf":3.605551275463989},"279":{"tf":3.1622776601683795},"280":{"tf":2.23606797749979},"283":{"tf":4.0},"284":{"tf":2.6457513110645907},"286":{"tf":3.605551275463989},"287":{"tf":3.605551275463989},"293":{"tf":1.0},"298":{"tf":1.0},"299":{"tf":2.0},"300":{"tf":1.4142135623730951},"303":{"tf":1.0},"320":{"tf":1.4142135623730951},"338":{"tf":1.7320508075688772},"339":{"tf":1.0},"354":{"tf":1.4142135623730951},"357":{"tf":1.0},"359":{"tf":1.0},"360":{"tf":1.0},"362":{"tf":1.0},"364":{"tf":1.0},"385":{"tf":1.7320508075688772},"387":{"tf":1.0},"53":{"tf":1.0},"72":{"tf":1.0},"74":{"tf":1.0},"77":{"tf":1.0},"94":{"tf":1.4142135623730951},"96":{"tf":1.4142135623730951}}},"6":{".":{"1":{"0":{"df":1,"docs":{"297":{"tf":1.0}}},"1":{"df":1,"docs":{"297":{"tf":1.0}}},"df":0,"docs":{}},"4":{"df":1,"docs":{"293":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"182":{"tf":1.0},"223":{"tf":1.0},"277":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"242":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"120":{"tf":1.0},"223":{"tf":1.0},"321":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"182":{"tf":1.0},"338":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"139":{"tf":1.0},"277":{"tf":1.0},"355":{"tf":1.0},"96":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"df":1,"docs":{"338":{"tf":1.0}}},"4":{"df":1,"docs":{"140":{"tf":2.23606797749979}}},"5":{"df":1,"docs":{"140":{"tf":1.4142135623730951}}},"8":{"df":1,"docs":{"140":{"tf":1.0}}},"df":36,"docs":{"10":{"tf":1.0},"106":{"tf":1.0},"120":{"tf":1.7320508075688772},"139":{"tf":1.4142135623730951},"182":{"tf":1.7320508075688772},"183":{"tf":1.0},"223":{"tf":1.4142135623730951},"226":{"tf":1.0},"236":{"tf":1.0},"242":{"tf":1.4142135623730951},"245":{"tf":1.0},"277":{"tf":1.4142135623730951},"278":{"tf":1.0},"282":{"tf":1.0},"284":{"tf":1.0},"291":{"tf":1.7320508075688772},"292":{"tf":2.449489742783178},"293":{"tf":3.872983346207417},"294":{"tf":3.1622776601683795},"295":{"tf":2.23606797749979},"296":{"tf":2.449489742783178},"297":{"tf":1.4142135623730951},"299":{"tf":4.0},"302":{"tf":1.0},"321":{"tf":1.4142135623730951},"338":{"tf":1.4142135623730951},"339":{"tf":1.7320508075688772},"348":{"tf":1.0},"349":{"tf":1.0},"355":{"tf":1.4142135623730951},"364":{"tf":1.0},"385":{"tf":2.6457513110645907},"52":{"tf":1.0},"54":{"tf":1.4142135623730951},"74":{"tf":1.0},"96":{"tf":1.4142135623730951}}},"7":{".":{"1":{"7":{"df":1,"docs":{"321":{"tf":1.0}}},"df":0,"docs":{}},"3":{"df":1,"docs":{"313":{"tf":1.0}}},"4":{"df":1,"docs":{"313":{"tf":1.0}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"279":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"121":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"224":{"tf":1.0},"321":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"183":{"tf":1.0},"279":{"tf":1.0},"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"139":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"4":{"df":1,"docs":{"140":{"tf":1.0}}},"df":42,"docs":{"10":{"tf":1.0},"106":{"tf":1.0},"121":{"tf":1.4142135623730951},"125":{"tf":1.0},"134":{"tf":1.0},"139":{"tf":1.4142135623730951},"159":{"tf":1.0},"163":{"tf":1.0},"179":{"tf":1.0},"182":{"tf":1.0},"183":{"tf":1.4142135623730951},"184":{"tf":1.0},"193":{"tf":1.0},"211":{"tf":1.0},"220":{"tf":1.0},"224":{"tf":1.4142135623730951},"244":{"tf":1.4142135623730951},"266":{"tf":1.4142135623730951},"268":{"tf":1.0},"279":{"tf":1.4142135623730951},"309":{"tf":2.449489742783178},"313":{"tf":3.1622776601683795},"314":{"tf":3.7416573867739413},"315":{"tf":1.4142135623730951},"316":{"tf":1.7320508075688772},"317":{"tf":1.7320508075688772},"318":{"tf":2.0},"319":{"tf":2.23606797749979},"320":{"tf":2.0},"321":{"tf":3.1622776601683795},"322":{"tf":3.4641016151377544},"339":{"tf":1.0},"355":{"tf":1.4142135623730951},"359":{"tf":1.0},"362":{"tf":1.0},"364":{"tf":1.0},"365":{"tf":1.0},"385":{"tf":1.4142135623730951},"387":{"tf":1.4142135623730951},"55":{"tf":1.4142135623730951},"77":{"tf":1.0},"91":{"tf":1.0}}},"8":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"224":{"tf":1.0},"321":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"183":{"tf":1.0},"279":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":5,"docs":{"123":{"tf":1.0},"139":{"tf":1.0},"244":{"tf":1.0},"339":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"df":1,"docs":{"142":{"tf":1.0}}},"4":{"df":1,"docs":{"140":{"tf":1.0}}},"df":34,"docs":{"10":{"tf":1.0},"102":{"tf":1.0},"106":{"tf":1.0},"123":{"tf":1.4142135623730951},"139":{"tf":2.0},"140":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.0},"224":{"tf":1.4142135623730951},"244":{"tf":1.4142135623730951},"279":{"tf":1.4142135623730951},"280":{"tf":1.0},"284":{"tf":1.4142135623730951},"294":{"tf":1.0},"321":{"tf":1.4142135623730951},"327":{"tf":2.0},"328":{"tf":1.7320508075688772},"329":{"tf":2.23606797749979},"330":{"tf":2.6457513110645907},"331":{"tf":2.449489742783178},"332":{"tf":3.4641016151377544},"335":{"tf":1.7320508075688772},"338":{"tf":4.242640687119285},"339":{"tf":5.477225575051661},"340":{"tf":3.1622776601683795},"341":{"tf":1.7320508075688772},"355":{"tf":2.0},"365":{"tf":1.4142135623730951},"368":{"tf":1.0},"382":{"tf":1.0},"385":{"tf":1.7320508075688772},"42":{"tf":1.0},"55":{"tf":1.4142135623730951},"77":{"tf":1.0}}},"9":{",":{"2":{"3":{"4":{",":{"9":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"6":{"2":{"0":{",":{"3":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":4,"docs":{"140":{"tf":1.0},"224":{"tf":1.0},"280":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"123":{"tf":1.0},"322":{"tf":1.0}},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"3":{"df":1,"docs":{"245":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"224":{"tf":1.0},"244":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"184":{"tf":1.0},"355":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"140":{"tf":1.0},"280":{"tf":1.0},"339":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"6":{"0":{"df":1,"docs":{"306":{"tf":1.0}}},"7":{"df":1,"docs":{"306":{"tf":1.0}}},"df":0,"docs":{}},"7":{"2":{"df":1,"docs":{"194":{"tf":1.0}}},"df":0,"docs":{}},"9":{"4":{"df":1,"docs":{"308":{"tf":1.0}}},"9":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}},"df":40,"docs":{"10":{"tf":1.0},"123":{"tf":1.7320508075688772},"140":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":1.0},"224":{"tf":1.4142135623730951},"23":{"tf":1.0},"239":{"tf":1.0},"244":{"tf":1.4142135623730951},"245":{"tf":1.4142135623730951},"252":{"tf":1.0},"273":{"tf":1.0},"280":{"tf":1.4142135623730951},"281":{"tf":1.0},"302":{"tf":1.0},"304":{"tf":1.0},"313":{"tf":1.0},"322":{"tf":1.7320508075688772},"339":{"tf":1.4142135623730951},"346":{"tf":3.3166247903554},"347":{"tf":4.123105625617661},"348":{"tf":2.449489742783178},"349":{"tf":1.7320508075688772},"353":{"tf":2.8284271247461903},"354":{"tf":2.449489742783178},"355":{"tf":5.0990195135927845},"356":{"tf":1.7320508075688772},"357":{"tf":1.7320508075688772},"359":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.0},"364":{"tf":1.7320508075688772},"365":{"tf":1.0},"368":{"tf":2.0},"369":{"tf":1.4142135623730951},"370":{"tf":4.358898943540674},"385":{"tf":1.7320508075688772},"398":{"tf":1.0},"56":{"tf":1.4142135623730951},"77":{"tf":1.4142135623730951}}},":":{"1":{"df":1,"docs":{"290":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"_":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":88,"docs":{"0":{"tf":1.0},"10":{"tf":1.0},"100":{"tf":1.7320508075688772},"102":{"tf":1.7320508075688772},"104":{"tf":1.4142135623730951},"110":{"tf":1.0},"113":{"tf":2.23606797749979},"114":{"tf":1.4142135623730951},"130":{"tf":2.0},"140":{"tf":1.0},"148":{"tf":1.4142135623730951},"154":{"tf":2.0},"164":{"tf":2.6457513110645907},"167":{"tf":1.7320508075688772},"176":{"tf":1.0},"177":{"tf":1.0},"196":{"tf":2.0},"197":{"tf":1.0},"200":{"tf":1.7320508075688772},"201":{"tf":1.0},"203":{"tf":1.0},"213":{"tf":1.4142135623730951},"215":{"tf":1.0},"218":{"tf":1.0},"219":{"tf":2.0},"22":{"tf":1.4142135623730951},"222":{"tf":1.0},"227":{"tf":1.0},"234":{"tf":1.4142135623730951},"235":{"tf":2.449489742783178},"237":{"tf":1.0},"241":{"tf":1.7320508075688772},"250":{"tf":1.7320508075688772},"252":{"tf":2.8284271247461903},"26":{"tf":2.0},"261":{"tf":2.449489742783178},"262":{"tf":1.0},"267":{"tf":1.4142135623730951},"268":{"tf":2.6457513110645907},"280":{"tf":1.7320508075688772},"286":{"tf":1.7320508075688772},"287":{"tf":2.6457513110645907},"291":{"tf":2.0},"292":{"tf":2.449489742783178},"293":{"tf":1.0},"296":{"tf":1.4142135623730951},"299":{"tf":1.4142135623730951},"309":{"tf":1.4142135623730951},"31":{"tf":1.0},"32":{"tf":1.4142135623730951},"326":{"tf":1.0},"327":{"tf":1.7320508075688772},"328":{"tf":1.0},"33":{"tf":2.0},"330":{"tf":1.4142135623730951},"334":{"tf":1.0},"337":{"tf":2.0},"340":{"tf":1.0},"346":{"tf":1.7320508075688772},"356":{"tf":1.4142135623730951},"368":{"tf":1.0},"370":{"tf":1.4142135623730951},"374":{"tf":1.4142135623730951},"376":{"tf":1.4142135623730951},"377":{"tf":1.7320508075688772},"381":{"tf":1.0},"385":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"39":{"tf":1.0},"396":{"tf":1.4142135623730951},"407":{"tf":1.0},"41":{"tf":1.4142135623730951},"410":{"tf":1.0},"42":{"tf":1.0},"50":{"tf":1.0},"52":{"tf":3.0},"53":{"tf":2.0},"56":{"tf":2.23606797749979},"57":{"tf":1.0},"61":{"tf":1.7320508075688772},"67":{"tf":1.4142135623730951},"69":{"tf":1.7320508075688772},"78":{"tf":1.4142135623730951},"81":{"tf":1.7320508075688772},"86":{"tf":2.0},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":1.0}}},"2":{".":{"0":{"df":1,"docs":{"255":{"tf":1.4142135623730951}}},"5":{"3":{"df":2,"docs":{"40":{"tf":1.4142135623730951},"41":{"tf":1.0}}},"df":0,"docs":{}},"8":{"5":{"df":1,"docs":{"27":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"0":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"184":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"123":{"tf":1.0},"283":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"226":{"tf":1.0},"244":{"tf":1.0},"322":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"145":{"tf":1.0},"184":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"8":{"df":1,"docs":{"103":{"tf":1.0}}},"9":{"df":1,"docs":{"101":{"tf":1.0}}},"df":2,"docs":{"200":{"tf":1.4142135623730951},"379":{"tf":1.7320508075688772}}},"1":{"2":{"df":1,"docs":{"247":{"tf":1.0}}},"3":{"df":1,"docs":{"16":{"tf":1.0}}},"5":{"df":3,"docs":{"394":{"tf":1.4142135623730951},"410":{"tf":2.23606797749979},"414":{"tf":1.0}}},"8":{"df":2,"docs":{"394":{"tf":1.4142135623730951},"410":{"tf":2.0}}},"df":0,"docs":{}},"2":{"1":{"df":2,"docs":{"255":{"tf":1.0},"26":{"tf":1.0}}},"2":{"df":1,"docs":{"16":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":2,"docs":{"140":{"tf":2.0},"142":{"tf":1.4142135623730951}}},"df":28,"docs":{"10":{"tf":1.4142135623730951},"123":{"tf":1.4142135623730951},"145":{"tf":1.4142135623730951},"184":{"tf":1.4142135623730951},"189":{"tf":1.4142135623730951},"226":{"tf":1.4142135623730951},"244":{"tf":1.4142135623730951},"283":{"tf":1.4142135623730951},"305":{"tf":1.0},"322":{"tf":1.7320508075688772},"339":{"tf":1.4142135623730951},"343":{"tf":1.0},"355":{"tf":1.4142135623730951},"370":{"tf":1.4142135623730951},"374":{"tf":1.4142135623730951},"376":{"tf":1.7320508075688772},"377":{"tf":1.7320508075688772},"379":{"tf":1.7320508075688772},"380":{"tf":2.449489742783178},"381":{"tf":3.4641016151377544},"382":{"tf":2.23606797749979},"384":{"tf":2.23606797749979},"385":{"tf":6.557438524302},"386":{"tf":1.4142135623730951},"387":{"tf":2.0},"388":{"tf":3.0},"56":{"tf":1.0},"61":{"tf":1.0}}},"1":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"227":{"tf":1.0},"283":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"227":{"tf":1.0},"283":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"322":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"146":{"tf":1.0},"186":{"tf":1.0},"339":{"tf":1.0},"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":15,"docs":{"125":{"tf":2.0},"146":{"tf":1.4142135623730951},"186":{"tf":1.4142135623730951},"192":{"tf":1.0},"209":{"tf":1.0},"227":{"tf":1.4142135623730951},"245":{"tf":1.4142135623730951},"246":{"tf":1.0},"283":{"tf":1.4142135623730951},"322":{"tf":1.4142135623730951},"339":{"tf":1.7320508075688772},"355":{"tf":1.4142135623730951},"370":{"tf":1.0},"385":{"tf":1.0},"57":{"tf":1.4142135623730951}}},"2":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"227":{"tf":1.0},"245":{"tf":1.0},"283":{"tf":1.0},"387":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"227":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"147":{"tf":1.0},"186":{"tf":1.0},"339":{"tf":1.0},"356":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"4":{"df":1,"docs":{"140":{"tf":2.449489742783178}}},"df":13,"docs":{"125":{"tf":1.7320508075688772},"147":{"tf":1.4142135623730951},"186":{"tf":1.4142135623730951},"227":{"tf":1.7320508075688772},"245":{"tf":1.4142135623730951},"246":{"tf":1.0},"283":{"tf":1.7320508075688772},"339":{"tf":1.4142135623730951},"353":{"tf":1.0},"356":{"tf":1.4142135623730951},"385":{"tf":1.4142135623730951},"387":{"tf":1.4142135623730951},"57":{"tf":1.0}}},"3":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"186":{"tf":1.0},"227":{"tf":1.0},"283":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"227":{"tf":1.0},"283":{"tf":1.0},"388":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"357":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"148":{"tf":1.0},"186":{"tf":1.0},"339":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":10,"docs":{"148":{"tf":1.4142135623730951},"182":{"tf":1.0},"186":{"tf":1.7320508075688772},"227":{"tf":1.4142135623730951},"244":{"tf":2.0},"283":{"tf":1.7320508075688772},"339":{"tf":1.0},"357":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"57":{"tf":1.4142135623730951}}},"4":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"284":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"188":{"tf":1.0},"284":{"tf":1.0},"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"148":{"tf":1.0},"230":{"tf":1.0},"360":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"3":{".":{"3":{"df":1,"docs":{"262":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":12,"docs":{"140":{"tf":1.0},"148":{"tf":1.7320508075688772},"188":{"tf":1.0},"190":{"tf":1.0},"230":{"tf":1.0},"244":{"tf":1.4142135623730951},"284":{"tf":1.4142135623730951},"286":{"tf":1.0},"339":{"tf":1.4142135623730951},"360":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"58":{"tf":1.0}}},"5":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"286":{"tf":1.0},"339":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":4,"docs":{"148":{"tf":1.0},"189":{"tf":1.0},"360":{"tf":1.0},"388":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"5":{"df":3,"docs":{"100":{"tf":1.0},"338":{"tf":1.0},"52":{"tf":1.4142135623730951}}},"6":{"df":1,"docs":{"52":{"tf":1.4142135623730951}}},"7":{"df":1,"docs":{"52":{"tf":1.0}}},"df":9,"docs":{"103":{"tf":1.0},"148":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.7320508075688772},"286":{"tf":2.0},"339":{"tf":1.4142135623730951},"360":{"tf":1.4142135623730951},"388":{"tf":1.4142135623730951},"58":{"tf":1.0}}},"6":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"286":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"286":{"tf":1.0},"340":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"286":{"tf":1.4142135623730951},"287":{"tf":1.0},"340":{"tf":1.4142135623730951},"361":{"tf":2.0},"60":{"tf":1.4142135623730951}}},"7":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"340":{"tf":1.0},"364":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"287":{"tf":1.7320508075688772},"340":{"tf":1.4142135623730951},"364":{"tf":1.4142135623730951},"60":{"tf":1.4142135623730951}}},"8":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"368":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"287":{"tf":1.0},"340":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"0":{"df":2,"docs":{"175":{"tf":1.0},"176":{"tf":1.0}}},"df":4,"docs":{"287":{"tf":1.4142135623730951},"340":{"tf":1.4142135623730951},"368":{"tf":1.7320508075688772},"60":{"tf":1.4142135623730951}}},"9":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"287":{"tf":1.0},"341":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"287":{"tf":1.4142135623730951},"341":{"tf":1.4142135623730951},"369":{"tf":1.4142135623730951},"60":{"tf":1.0}}},"df":70,"docs":{"10":{"tf":2.23606797749979},"100":{"tf":2.0},"110":{"tf":1.0},"113":{"tf":1.4142135623730951},"122":{"tf":1.4142135623730951},"123":{"tf":1.0},"130":{"tf":1.7320508075688772},"132":{"tf":1.0},"140":{"tf":1.0},"141":{"tf":1.0},"148":{"tf":1.0},"154":{"tf":2.0},"155":{"tf":1.0},"158":{"tf":1.4142135623730951},"164":{"tf":1.0},"167":{"tf":2.0},"194":{"tf":1.4142135623730951},"196":{"tf":2.0},"198":{"tf":1.0},"205":{"tf":1.0},"215":{"tf":1.4142135623730951},"218":{"tf":1.0},"219":{"tf":1.4142135623730951},"235":{"tf":1.4142135623730951},"252":{"tf":2.0},"26":{"tf":1.7320508075688772},"261":{"tf":1.0},"268":{"tf":3.605551275463989},"286":{"tf":1.7320508075688772},"287":{"tf":1.0},"291":{"tf":1.4142135623730951},"292":{"tf":2.6457513110645907},"299":{"tf":1.0},"30":{"tf":1.4142135623730951},"309":{"tf":1.4142135623730951},"328":{"tf":1.7320508075688772},"33":{"tf":1.4142135623730951},"330":{"tf":1.4142135623730951},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"339":{"tf":1.7320508075688772},"340":{"tf":2.0},"346":{"tf":1.4142135623730951},"361":{"tf":1.0},"368":{"tf":2.0},"37":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"377":{"tf":1.4142135623730951},"381":{"tf":1.4142135623730951},"385":{"tf":1.7320508075688772},"388":{"tf":1.4142135623730951},"397":{"tf":1.4142135623730951},"40":{"tf":2.0},"408":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"45":{"tf":2.0},"48":{"tf":1.4142135623730951},"50":{"tf":1.4142135623730951},"51":{"tf":1.0},"52":{"tf":3.0},"53":{"tf":2.0},"60":{"tf":2.6457513110645907},"61":{"tf":2.23606797749979},"69":{"tf":2.23606797749979},"78":{"tf":1.7320508075688772},"81":{"tf":1.4142135623730951},"83":{"tf":1.0},"86":{"tf":1.7320508075688772},"93":{"tf":1.4142135623730951}}},"3":{".":{".":{"=":{"7":{"df":1,"docs":{"341":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"1":{"4":{"1":{"5":{"df":1,"docs":{"408":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"180":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"0":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"327":{"tf":1.7320508075688772},"370":{"tf":2.6457513110645907},"60":{"tf":1.4142135623730951},"89":{"tf":1.0},"90":{"tf":1.4142135623730951}}},"1":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"6":{":":{"1":{"2":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"370":{"tf":1.4142135623730951},"60":{"tf":1.4142135623730951}}},"2":{"df":5,"docs":{"339":{"tf":1.7320508075688772},"370":{"tf":1.7320508075688772},"42":{"tf":1.7320508075688772},"52":{"tf":2.23606797749979},"61":{"tf":1.7320508075688772}}},"3":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"370":{"tf":1.7320508075688772},"61":{"tf":1.0}}},"4":{"df":1,"docs":{"61":{"tf":1.0}}},"8":{"df":1,"docs":{"42":{"tf":1.7320508075688772}}},"df":65,"docs":{"10":{"tf":1.4142135623730951},"102":{"tf":2.0},"106":{"tf":2.0},"114":{"tf":2.0},"130":{"tf":1.4142135623730951},"131":{"tf":1.7320508075688772},"140":{"tf":1.0},"154":{"tf":1.7320508075688772},"155":{"tf":1.7320508075688772},"167":{"tf":1.7320508075688772},"169":{"tf":1.0},"171":{"tf":1.0},"194":{"tf":1.0},"196":{"tf":1.4142135623730951},"198":{"tf":1.0},"216":{"tf":1.4142135623730951},"219":{"tf":1.0},"224":{"tf":1.0},"235":{"tf":1.4142135623730951},"238":{"tf":1.4142135623730951},"250":{"tf":1.7320508075688772},"252":{"tf":1.0},"253":{"tf":2.449489742783178},"268":{"tf":3.0},"279":{"tf":1.7320508075688772},"287":{"tf":1.4142135623730951},"291":{"tf":1.4142135623730951},"292":{"tf":2.0},"293":{"tf":2.23606797749979},"30":{"tf":1.0},"313":{"tf":1.0},"324":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.7320508075688772},"330":{"tf":1.4142135623730951},"331":{"tf":1.7320508075688772},"337":{"tf":1.4142135623730951},"339":{"tf":1.0},"34":{"tf":1.4142135623730951},"346":{"tf":1.7320508075688772},"348":{"tf":1.4142135623730951},"356":{"tf":1.4142135623730951},"368":{"tf":2.0},"379":{"tf":1.4142135623730951},"385":{"tf":2.0},"388":{"tf":2.449489742783178},"397":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"46":{"tf":1.0},"48":{"tf":1.0},"49":{"tf":1.4142135623730951},"52":{"tf":2.0},"53":{"tf":3.0},"56":{"tf":2.0},"60":{"tf":2.23606797749979},"61":{"tf":3.605551275463989},"68":{"tf":1.0},"69":{"tf":1.7320508075688772},"70":{"tf":1.4142135623730951},"71":{"tf":1.0},"78":{"tf":1.7320508075688772},"81":{"tf":1.4142135623730951},"86":{"tf":1.7320508075688772},"87":{"tf":1.0}},"m":{"df":1,"docs":{"262":{"tf":1.0}}}},"4":{".":{"0":{"df":1,"docs":{"170":{"tf":1.0}}},"2":{"df":1,"docs":{"69":{"tf":1.0}}},"4":{"5":{"df":1,"docs":{"45":{"tf":1.0}}},"df":0,"docs":{}},"7":{"df":1,"docs":{"77":{"tf":1.0}}},"9":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"0":{"4":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"381":{"tf":2.0}}}}}}},"df":2,"docs":{"381":{"tf":2.0},"382":{"tf":1.0}}},"df":1,"docs":{"382":{"tf":1.0}}},"2":{"\"":{".":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"(":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"(":{"\"":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"51":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},":":{":":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"5":{"df":1,"docs":{"43":{"tf":1.4142135623730951}}},"8":{"df":1,"docs":{"385":{"tf":1.0}}},"9":{"9":{"7":{"9":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"4":{"0":{"6":{"8":{"6":{"df":0,"docs":{},"f":{"a":{"8":{"df":0,"docs":{},"e":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"385":{"tf":1.0}}},"df":74,"docs":{"10":{"tf":1.0},"100":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"107":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.0},"123":{"tf":1.0},"132":{"tf":1.7320508075688772},"136":{"tf":1.0},"137":{"tf":1.0},"140":{"tf":1.4142135623730951},"141":{"tf":1.0},"154":{"tf":1.4142135623730951},"155":{"tf":1.4142135623730951},"156":{"tf":1.4142135623730951},"158":{"tf":1.0},"159":{"tf":1.0},"169":{"tf":1.4142135623730951},"181":{"tf":1.0},"184":{"tf":1.0},"189":{"tf":1.7320508075688772},"196":{"tf":1.7320508075688772},"198":{"tf":2.23606797749979},"204":{"tf":1.0},"216":{"tf":1.4142135623730951},"217":{"tf":1.0},"236":{"tf":2.0},"253":{"tf":2.449489742783178},"265":{"tf":1.0},"266":{"tf":1.0},"268":{"tf":1.4142135623730951},"279":{"tf":1.0},"280":{"tf":1.0},"282":{"tf":1.0},"286":{"tf":1.4142135623730951},"291":{"tf":1.4142135623730951},"292":{"tf":2.0},"293":{"tf":1.7320508075688772},"313":{"tf":1.0},"330":{"tf":1.4142135623730951},"337":{"tf":1.4142135623730951},"339":{"tf":2.0},"340":{"tf":2.6457513110645907},"346":{"tf":1.0},"347":{"tf":1.7320508075688772},"35":{"tf":1.0},"362":{"tf":1.0},"380":{"tf":1.7320508075688772},"385":{"tf":1.4142135623730951},"394":{"tf":1.0},"397":{"tf":1.4142135623730951},"402":{"tf":1.4142135623730951},"407":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"46":{"tf":1.0},"48":{"tf":1.0},"53":{"tf":1.7320508075688772},"56":{"tf":1.0},"60":{"tf":1.0},"61":{"tf":2.23606797749979},"67":{"tf":1.4142135623730951},"69":{"tf":3.872983346207417},"70":{"tf":1.4142135623730951},"71":{"tf":2.6457513110645907},"72":{"tf":2.23606797749979},"73":{"tf":1.0},"76":{"tf":2.23606797749979},"77":{"tf":2.0},"78":{"tf":1.4142135623730951},"81":{"tf":1.4142135623730951},"82":{"tf":1.0},"86":{"tf":1.4142135623730951},"89":{"tf":1.0}}},"5":{".":{"0":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}},"0":{"df":8,"docs":{"103":{"tf":1.4142135623730951},"133":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.0},"148":{"tf":1.7320508075688772},"194":{"tf":1.0},"42":{"tf":1.7320508075688772},"89":{"tf":1.0}}},"7":{"df":0,"docs":{},"u":{"8":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}},"8":{"df":1,"docs":{"42":{"tf":1.0}}},"9":{"df":1,"docs":{"43":{"tf":1.7320508075688772}}},"\\":{"df":0,"docs":{},"n":{"df":1,"docs":{"42":{"tf":1.0}}}},"df":89,"docs":{"10":{"tf":1.0},"100":{"tf":1.0},"104":{"tf":2.0},"115":{"tf":2.0},"132":{"tf":1.4142135623730951},"154":{"tf":1.0},"156":{"tf":1.4142135623730951},"157":{"tf":1.4142135623730951},"169":{"tf":1.4142135623730951},"170":{"tf":1.0},"172":{"tf":1.7320508075688772},"173":{"tf":1.0},"180":{"tf":1.0},"182":{"tf":1.0},"194":{"tf":1.0},"196":{"tf":1.0},"197":{"tf":2.8284271247461903},"198":{"tf":2.23606797749979},"218":{"tf":1.4142135623730951},"224":{"tf":1.0},"236":{"tf":1.4142135623730951},"238":{"tf":1.0},"252":{"tf":1.0},"253":{"tf":1.7320508075688772},"267":{"tf":1.4142135623730951},"268":{"tf":1.4142135623730951},"270":{"tf":1.7320508075688772},"273":{"tf":1.4142135623730951},"279":{"tf":2.23606797749979},"284":{"tf":1.7320508075688772},"286":{"tf":1.4142135623730951},"287":{"tf":1.4142135623730951},"291":{"tf":1.4142135623730951},"292":{"tf":1.4142135623730951},"293":{"tf":1.4142135623730951},"313":{"tf":1.4142135623730951},"314":{"tf":1.0},"315":{"tf":1.0},"326":{"tf":1.0},"330":{"tf":2.23606797749979},"331":{"tf":1.7320508075688772},"332":{"tf":1.0},"335":{"tf":1.4142135623730951},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"34":{"tf":2.0},"340":{"tf":2.449489742783178},"341":{"tf":1.0},"347":{"tf":1.7320508075688772},"357":{"tf":1.0},"361":{"tf":1.0},"364":{"tf":1.0},"37":{"tf":1.4142135623730951},"380":{"tf":1.4142135623730951},"384":{"tf":2.0},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"404":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"45":{"tf":1.4142135623730951},"46":{"tf":1.0},"48":{"tf":1.7320508075688772},"50":{"tf":1.0},"53":{"tf":2.6457513110645907},"55":{"tf":1.7320508075688772},"56":{"tf":1.0},"57":{"tf":2.23606797749979},"60":{"tf":1.0},"61":{"tf":2.449489742783178},"68":{"tf":1.0},"69":{"tf":2.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.7320508075688772},"76":{"tf":1.7320508075688772},"77":{"tf":1.0},"78":{"tf":1.4142135623730951},"79":{"tf":1.0},"81":{"tf":2.8284271247461903},"82":{"tf":2.23606797749979},"83":{"tf":2.449489742783178},"86":{"tf":1.0},"87":{"tf":1.4142135623730951},"88":{"tf":1.4142135623730951},"89":{"tf":1.4142135623730951},"90":{"tf":2.0},"92":{"tf":1.4142135623730951},"94":{"tf":2.449489742783178},"96":{"tf":2.0}}},"6":{".":{"4":{"4":{"df":1,"docs":{"38":{"tf":1.0}}},"df":1,"docs":{"53":{"tf":1.0}}},"5":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}},"0":{"df":3,"docs":{"43":{"tf":1.4142135623730951},"49":{"tf":2.0},"90":{"tf":1.0}}},"1":{"df":1,"docs":{"45":{"tf":1.7320508075688772}}},"4":{"df":2,"docs":{"42":{"tf":1.0},"52":{"tf":2.0}},"}":{":":{":":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"5":{"7":{",":{"2":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":60,"docs":{"10":{"tf":1.0},"100":{"tf":2.449489742783178},"102":{"tf":2.0},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"107":{"tf":2.6457513110645907},"115":{"tf":1.7320508075688772},"132":{"tf":2.0},"133":{"tf":1.0},"134":{"tf":1.0},"154":{"tf":1.4142135623730951},"155":{"tf":1.0},"159":{"tf":2.8284271247461903},"166":{"tf":1.0},"170":{"tf":1.4142135623730951},"171":{"tf":1.0},"172":{"tf":1.0},"197":{"tf":1.4142135623730951},"218":{"tf":1.4142135623730951},"236":{"tf":1.4142135623730951},"244":{"tf":1.0},"253":{"tf":1.4142135623730951},"268":{"tf":1.7320508075688772},"270":{"tf":1.4142135623730951},"271":{"tf":1.7320508075688772},"292":{"tf":1.4142135623730951},"293":{"tf":1.0},"294":{"tf":1.4142135623730951},"299":{"tf":1.0},"313":{"tf":1.4142135623730951},"324":{"tf":1.0},"326":{"tf":1.4142135623730951},"327":{"tf":1.0},"331":{"tf":1.4142135623730951},"334":{"tf":1.0},"338":{"tf":1.7320508075688772},"340":{"tf":2.6457513110645907},"347":{"tf":1.4142135623730951},"36":{"tf":1.0},"361":{"tf":1.0},"364":{"tf":1.0},"368":{"tf":1.0},"38":{"tf":1.4142135623730951},"381":{"tf":1.4142135623730951},"397":{"tf":1.4142135623730951},"42":{"tf":1.0},"45":{"tf":1.4142135623730951},"46":{"tf":1.0},"48":{"tf":1.7320508075688772},"50":{"tf":1.4142135623730951},"56":{"tf":2.8284271247461903},"57":{"tf":1.0},"60":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"73":{"tf":1.0},"76":{"tf":1.0},"77":{"tf":1.7320508075688772},"80":{"tf":1.0},"83":{"tf":1.4142135623730951},"91":{"tf":1.0}}},"7":{"5":{"4":{"df":1,"docs":{"52":{"tf":1.0}}},"df":1,"docs":{"283":{"tf":1.4142135623730951}}},"6":{"df":1,"docs":{"42":{"tf":1.7320508075688772}}},"8":{"7":{"8":{"df":1,"docs":{"376":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":48,"docs":{"10":{"tf":1.0},"100":{"tf":1.0},"106":{"tf":2.0},"113":{"tf":2.6457513110645907},"114":{"tf":2.8284271247461903},"115":{"tf":3.4641016151377544},"116":{"tf":1.4142135623730951},"117":{"tf":2.0},"118":{"tf":2.449489742783178},"119":{"tf":3.3166247903554},"120":{"tf":2.23606797749979},"121":{"tf":1.7320508075688772},"123":{"tf":2.6457513110645907},"125":{"tf":2.449489742783178},"133":{"tf":1.7320508075688772},"154":{"tf":1.0},"159":{"tf":2.23606797749979},"170":{"tf":1.4142135623730951},"182":{"tf":1.0},"197":{"tf":1.4142135623730951},"198":{"tf":1.4142135623730951},"209":{"tf":2.0},"211":{"tf":1.0},"213":{"tf":1.0},"218":{"tf":1.4142135623730951},"237":{"tf":1.4142135623730951},"253":{"tf":1.0},"261":{"tf":1.4142135623730951},"271":{"tf":1.7320508075688772},"272":{"tf":1.0},"292":{"tf":1.4142135623730951},"294":{"tf":1.4142135623730951},"309":{"tf":1.0},"314":{"tf":1.4142135623730951},"319":{"tf":1.4142135623730951},"331":{"tf":1.4142135623730951},"338":{"tf":1.0},"347":{"tf":1.4142135623730951},"381":{"tf":1.4142135623730951},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"41":{"tf":1.0},"52":{"tf":1.4142135623730951},"68":{"tf":1.0},"76":{"tf":1.7320508075688772},"83":{"tf":1.7320508075688772},"92":{"tf":1.0},"95":{"tf":1.0}}},"8":{".":{"0":{"df":1,"docs":{"408":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"0":{"0":{"df":1,"docs":{"49":{"tf":1.0}}},"df":2,"docs":{"283":{"tf":1.0},"376":{"tf":1.4142135623730951}}},"3":{"df":1,"docs":{"41":{"tf":1.0}}},"df":55,"docs":{"10":{"tf":1.0},"116":{"tf":1.4142135623730951},"130":{"tf":2.23606797749979},"131":{"tf":1.4142135623730951},"132":{"tf":2.6457513110645907},"133":{"tf":3.1622776601683795},"134":{"tf":1.4142135623730951},"135":{"tf":1.4142135623730951},"136":{"tf":2.0},"137":{"tf":2.0},"138":{"tf":3.3166247903554},"139":{"tf":3.3166247903554},"140":{"tf":3.0},"141":{"tf":1.0},"142":{"tf":1.0},"143":{"tf":1.4142135623730951},"145":{"tf":1.4142135623730951},"146":{"tf":1.4142135623730951},"147":{"tf":1.4142135623730951},"148":{"tf":2.6457513110645907},"150":{"tf":1.0},"159":{"tf":1.4142135623730951},"166":{"tf":1.0},"170":{"tf":1.4142135623730951},"197":{"tf":1.7320508075688772},"200":{"tf":1.7320508075688772},"204":{"tf":1.0},"211":{"tf":1.0},"219":{"tf":1.7320508075688772},"237":{"tf":1.4142135623730951},"265":{"tf":1.4142135623730951},"272":{"tf":1.7320508075688772},"274":{"tf":1.0},"292":{"tf":1.4142135623730951},"294":{"tf":1.7320508075688772},"296":{"tf":1.4142135623730951},"312":{"tf":1.4142135623730951},"314":{"tf":1.4142135623730951},"332":{"tf":1.7320508075688772},"339":{"tf":1.7320508075688772},"34":{"tf":1.0},"347":{"tf":1.4142135623730951},"368":{"tf":1.0},"377":{"tf":1.0},"381":{"tf":1.4142135623730951},"382":{"tf":1.0},"397":{"tf":1.4142135623730951},"52":{"tf":2.0},"53":{"tf":1.0},"68":{"tf":1.0},"72":{"tf":1.0},"76":{"tf":1.4142135623730951},"77":{"tf":2.23606797749979},"78":{"tf":1.0},"87":{"tf":1.4142135623730951}}},"9":{"1":{"5":{",":{"7":{"0":{"0":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"8":{"_":{"2":{"2":{"2":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"9":{"df":2,"docs":{"154":{"tf":1.7320508075688772},"45":{"tf":1.4142135623730951}}},"df":42,"docs":{"10":{"tf":1.0},"117":{"tf":1.4142135623730951},"134":{"tf":1.4142135623730951},"154":{"tf":2.449489742783178},"155":{"tf":2.23606797749979},"156":{"tf":2.0},"157":{"tf":1.4142135623730951},"158":{"tf":1.0},"159":{"tf":5.196152422706632},"164":{"tf":1.4142135623730951},"166":{"tf":1.0},"171":{"tf":1.4142135623730951},"172":{"tf":1.4142135623730951},"189":{"tf":1.4142135623730951},"196":{"tf":1.0},"200":{"tf":2.0},"211":{"tf":1.0},"219":{"tf":2.6457513110645907},"220":{"tf":1.4142135623730951},"237":{"tf":1.4142135623730951},"272":{"tf":1.4142135623730951},"273":{"tf":1.7320508075688772},"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"294":{"tf":1.0},"295":{"tf":1.7320508075688772},"312":{"tf":1.0},"314":{"tf":1.4142135623730951},"315":{"tf":1.0},"321":{"tf":1.0},"332":{"tf":1.4142135623730951},"348":{"tf":1.4142135623730951},"36":{"tf":1.0},"382":{"tf":1.7320508075688772},"384":{"tf":1.4142135623730951},"385":{"tf":1.0},"397":{"tf":1.4142135623730951},"52":{"tf":1.0},"53":{"tf":1.0},"61":{"tf":1.0},"77":{"tf":1.0},"88":{"tf":1.4142135623730951}}},"_":{"df":9,"docs":{"106":{"tf":2.23606797749979},"107":{"tf":1.4142135623730951},"326":{"tf":1.7320508075688772},"330":{"tf":1.0},"339":{"tf":3.7416573867739413},"397":{"tf":1.0},"45":{"tf":1.0},"52":{"tf":1.0},"77":{"tf":1.0}},"i":{"df":1,"docs":{"407":{"tf":2.0}}},"s":{"df":1,"docs":{"339":{"tf":1.0}}},"x":{"df":1,"docs":{"339":{"tf":1.4142135623730951}}}},"a":{".":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"279":{"tf":1.0}}}}}},"df":0,"docs":{}},"[":{"1":{".":{".":{"3":{"df":1,"docs":{"78":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"332":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"1":{"tf":1.0}}}}}},"b":{"c":{"a":{"b":{"c":{"a":{"b":{"c":{"df":1,"docs":{"17":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"d":{"df":1,"docs":{"184":{"tf":1.0}},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"j":{"df":0,"docs":{},"k":{"df":0,"docs":{},"l":{"df":0,"docs":{},"m":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"q":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"v":{"df":0,"docs":{},"w":{"df":0,"docs":{},"x":{"df":0,"docs":{},"y":{"df":0,"docs":{},"z":{"0":{"1":{"2":{"3":{"4":{"5":{"df":1,"docs":{"254":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"347":{"tf":1.0}},"i":{"df":1,"docs":{"347":{"tf":2.23606797749979}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"153":{"tf":1.7320508075688772}}}},"v":{"df":1,"docs":{"58":{"tf":1.0}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"101":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":0,"docs":{},"t":{"df":3,"docs":{"247":{"tf":1.0},"248":{"tf":1.0},"393":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"c":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.7320508075688772}}}},"s":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"69":{"tf":1.0}}}}}}}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":3,"docs":{"81":{"tf":1.0},"83":{"tf":1.7320508075688772},"86":{"tf":2.0}}}},"u":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"198":{"tf":1.0}}}},"df":0,"docs":{}}}},"d":{"d":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":2,"docs":{"139":{"tf":1.0},"354":{"tf":1.0}}}}}}},",":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":1,"docs":{"309":{"tf":1.0}}}}}}}},"/":{"a":{"d":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"260":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"260":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"354":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"h":{"df":1,"docs":{"354":{"tf":1.0}}}}},"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":4,"docs":{"252":{"tf":2.8284271247461903},"260":{"tf":1.0},"261":{"tf":5.196152422706632},"364":{"tf":1.7320508075688772}},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":2.0}},"s":{":":{"1":{":":{"5":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"261":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"v":{"1":{"df":1,"docs":{"235":{"tf":1.0}}},"2":{"df":1,"docs":{"235":{"tf":1.0}}},"3":{"df":1,"docs":{"235":{"tf":1.4142135623730951}}},"4":{"df":1,"docs":{"235":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"318":{"tf":2.449489742783178},"319":{"tf":1.0},"322":{"tf":1.0}}}}},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":6,"docs":{"113":{"tf":1.0},"114":{"tf":3.4641016151377544},"115":{"tf":2.6457513110645907},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"121":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"(":{"2":{"df":1,"docs":{"198":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":5,"docs":{"194":{"tf":1.4142135623730951},"198":{"tf":1.7320508075688772},"205":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.0}}}}}},"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":12,"docs":{"139":{"tf":3.0},"150":{"tf":1.4142135623730951},"198":{"tf":1.4142135623730951},"205":{"tf":1.7320508075688772},"260":{"tf":2.23606797749979},"261":{"tf":2.6457513110645907},"309":{"tf":2.0},"347":{"tf":1.7320508075688772},"354":{"tf":4.123105625617661},"396":{"tf":1.0},"406":{"tf":1.0},"408":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":2.0}},"s":{":":{"2":{":":{"5":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"196":{"tf":2.449489742783178},"208":{"tf":1.0},"209":{"tf":2.0},"260":{"tf":2.8284271247461903},"261":{"tf":3.872983346207417}}}},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"100":{"tf":1.4142135623730951}}}}}}},"df":2,"docs":{"197":{"tf":1.4142135623730951},"48":{"tf":1.4142135623730951}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":1,"docs":{"227":{"tf":1.0}}}}},"v":{"a":{"df":0,"docs":{},"n":{"c":{"df":16,"docs":{"346":{"tf":1.7320508075688772},"347":{"tf":2.8284271247461903},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"353":{"tf":1.7320508075688772},"354":{"tf":1.4142135623730951},"355":{"tf":3.1622776601683795},"356":{"tf":2.0},"357":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":2.0},"365":{"tf":1.7320508075688772},"368":{"tf":1.0},"370":{"tf":2.6457513110645907}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.0}}}}}}}}},"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"61":{"tf":2.449489742783178}}}}},"df":1,"docs":{"327":{"tf":2.449489742783178}},"e":{"=":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.0}}}}},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":2,"docs":{"175":{"tf":1.0},"176":{"tf":2.8284271247461903}}}}}}},"l":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{},"v":{"df":1,"docs":{"377":{"tf":1.0}}}},"l":{"df":0,"docs":{},"o":{"c":{":":{":":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{":":{":":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{"<":{"df":0,"docs":{},"t":{",":{"a":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"69":{"tf":1.0}}},"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"73":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"i":{"df":2,"docs":{"176":{"tf":1.0},"283":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"w":{"a":{"df":0,"docs":{},"y":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":1,"docs":{"85":{"tf":2.0}}}}}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":1,"docs":{"150":{"tf":1.0}}}}},"n":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"y":{"df":0,"docs":{},"z":{"df":2,"docs":{"20":{"tf":1.0},"409":{"tf":2.23606797749979}}}}}},"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"211":{"tf":1.0}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"l":{":":{":":{"b":{"a":{"b":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"355":{"tf":3.4641016151377544}}}},"n":{"df":1,"docs":{"192":{"tf":1.0}},"o":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"74":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"51":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"72":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"n":{"c":{"df":2,"docs":{"107":{"tf":1.4142135623730951},"190":{"tf":1.0}}},"df":0,"docs":{}}}}},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":2,"docs":{"196":{"tf":1.7320508075688772},"197":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":2,"docs":{"54":{"tf":2.0},"55":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"140":{"tf":1.7320508075688772}}}}}}},"p":{"a":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"255":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"df":40,"docs":{"10":{"tf":1.0},"108":{"tf":1.4142135623730951},"114":{"tf":1.0},"115":{"tf":2.23606797749979},"121":{"tf":1.0},"134":{"tf":1.0},"138":{"tf":1.0},"144":{"tf":1.0},"148":{"tf":1.4142135623730951},"150":{"tf":1.0},"163":{"tf":1.0},"164":{"tf":1.4142135623730951},"19":{"tf":1.0},"196":{"tf":1.0},"209":{"tf":1.0},"210":{"tf":1.0},"211":{"tf":1.0},"221":{"tf":1.0},"240":{"tf":1.0},"252":{"tf":1.0},"253":{"tf":3.0},"254":{"tf":2.0},"256":{"tf":1.0},"265":{"tf":1.0},"274":{"tf":1.0},"281":{"tf":1.0},"283":{"tf":1.4142135623730951},"290":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.7320508075688772},"316":{"tf":1.0},"345":{"tf":1.0},"353":{"tf":1.0},"359":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"385":{"tf":1.7320508075688772},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"77":{"tf":1.7320508075688772},"92":{"tf":1.0}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"x":{"df":1,"docs":{"198":{"tf":1.0}}}}},"df":0,"docs":{}},"t":{"df":1,"docs":{"117":{"tf":1.0}}}},"l":{"df":2,"docs":{"150":{"tf":1.4142135623730951},"34":{"tf":1.7320508075688772}},"i":{"c":{"df":5,"docs":{"110":{"tf":1.0},"212":{"tf":1.0},"260":{"tf":1.0},"347":{"tf":1.0},"376":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":2,"docs":{"321":{"tf":3.0},"322":{"tf":2.8284271247461903}}},"x":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":1,"docs":{"408":{"tf":1.0}}}}}}}},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"53":{"tf":1.0}}}}}},"r":{"c":{"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"t":{"df":4,"docs":{"299":{"tf":2.23606797749979},"300":{"tf":1.7320508075688772},"302":{"tf":1.0},"305":{"tf":1.0}}}},"df":1,"docs":{"385":{"tf":2.0}},"h":{"df":1,"docs":{"52":{"tf":1.0}}}},"df":0,"docs":{},"e":{"a":{"df":5,"docs":{"408":{"tf":1.4142135623730951},"87":{"tf":1.7320508075688772},"89":{"tf":1.7320508075688772},"90":{"tf":1.7320508075688772},"92":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"g":{"df":6,"docs":{"213":{"tf":1.7320508075688772},"214":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":1.7320508075688772},"244":{"tf":3.0},"364":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"214":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"[":{"0":{"df":1,"docs":{"215":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":3,"docs":{"219":{"tf":1.0},"229":{"tf":1.4142135623730951},"230":{"tf":1.4142135623730951}}}}}}}},"m":{"df":5,"docs":{"102":{"tf":1.0},"355":{"tf":1.0},"361":{"tf":1.0},"42":{"tf":1.0},"60":{"tf":1.4142135623730951}}},"r":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"53":{"tf":1.7320508075688772}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"t":{"df":1,"docs":{"253":{"tf":3.7416573867739413}},"h":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.0}}}}},"i":{"c":{"df":0,"docs":{},"l":{"df":1,"docs":{"177":{"tf":1.0}}}},"df":0,"docs":{}}}},"s":{"_":{"b":{"df":0,"docs":{},"y":{"df":0,"docs":{},"t":{"df":2,"docs":{"379":{"tf":1.0},"76":{"tf":1.0}}}}},"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"321":{"tf":1.7320508075688772}}}}}},"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"i":{"df":5,"docs":{"143":{"tf":1.0},"337":{"tf":1.0},"397":{"tf":1.0},"52":{"tf":1.0},"77":{"tf":1.0}}}}},"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":1,"docs":{"112":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"!":{"(":{"df":0,"docs":{},"r":{"#":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"h":{"(":{"\"":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":1,"docs":{"394":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":1,"docs":{"201":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"!":{"(":{"5":{"df":1,"docs":{"270":{"tf":1.0}}},"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"(":{"2":{"df":1,"docs":{"198":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"c":{"df":1,"docs":{"78":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":9,"docs":{"196":{"tf":1.0},"198":{"tf":3.0},"199":{"tf":1.0},"201":{"tf":1.0},"252":{"tf":1.0},"273":{"tf":1.0},"316":{"tf":1.0},"399":{"tf":1.0},"400":{"tf":1.0}}}},"n":{"df":2,"docs":{"198":{"tf":2.23606797749979},"199":{"tf":1.0}}}},"df":7,"docs":{"197":{"tf":3.1622776601683795},"198":{"tf":2.0},"199":{"tf":1.4142135623730951},"316":{"tf":1.0},"322":{"tf":1.0},"347":{"tf":1.4142135623730951},"385":{"tf":1.4142135623730951}}}}},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"48":{"tf":2.0}}}}},"o":{"c":{"df":0,"docs":{},"i":{"df":2,"docs":{"239":{"tf":1.0},"95":{"tf":1.0}}}},"df":0,"docs":{}}},"t":{".":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"y":{"df":0,"docs":{},"n":{"c":{"df":1,"docs":{"392":{"tf":1.0}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"299":{"tf":1.7320508075688772}}}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":2,"docs":{"366":{"tf":1.0},"369":{"tf":1.0}}}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"53":{"tf":1.0}}}}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":11,"docs":{"196":{"tf":2.449489742783178},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"199":{"tf":2.23606797749979},"200":{"tf":2.6457513110645907},"201":{"tf":1.0},"204":{"tf":1.7320508075688772},"205":{"tf":2.0},"206":{"tf":1.7320508075688772},"208":{"tf":1.4142135623730951},"209":{"tf":2.449489742783178}}}}}},"v":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"177":{"tf":1.0}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"309":{"tf":3.1622776601683795}},"e":{"d":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"309":{"tf":2.8284271247461903}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"392":{"tf":1.0}}}}},"df":0,"docs":{}},"x":{"df":0,"docs":{},"i":{"df":1,"docs":{"338":{"tf":1.4142135623730951}}}},"y":{"df":1,"docs":{"150":{"tf":1.0}}}},"b":{"'":{"a":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"3":{"5":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"a":{"9":{"a":{"1":{"5":{"6":{"df":0,"docs":{},"f":{"7":{"4":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},">":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"189":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"a":{"b":{"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":1.0}}},"y":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"355":{"tf":2.8284271247461903}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"c":{"df":0,"docs":{},"k":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"116":{"tf":1.7320508075688772}},"e":{":":{":":{"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"327":{"tf":1.0}}},"df":0,"docs":{}}}}}},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":3,"docs":{"154":{"tf":1.4142135623730951},"43":{"tf":1.0},"53":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"y":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"112":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"n":{"a":{"df":1,"docs":{"34":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"r":{"df":1,"docs":{"361":{"tf":1.4142135623730951}}}},"df":16,"docs":{"10":{"tf":1.0},"113":{"tf":1.7320508075688772},"142":{"tf":1.0},"183":{"tf":2.449489742783178},"189":{"tf":1.4142135623730951},"24":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"279":{"tf":3.0},"280":{"tf":1.0},"284":{"tf":1.7320508075688772},"286":{"tf":3.3166247903554},"338":{"tf":1.4142135623730951},"395":{"tf":1.0},"396":{"tf":1.0},"397":{"tf":2.23606797749979},"52":{"tf":1.0}},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"393":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"277":{"tf":1.0}}}}},"h":{"a":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"154":{"tf":1.0}}}}}}},"df":0,"docs":{}},"n":{"c":{"df":0,"docs":{},"h":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"c":{"df":0,"docs":{},"h":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":1,"docs":{"247":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"t":{"a":{"df":2,"docs":{"414":{"tf":3.7416573867739413},"416":{"tf":1.0}}},"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"299":{"tf":1.0}}}}}}}},"i":{"df":0,"docs":{},"g":{"df":3,"docs":{"42":{"tf":1.4142135623730951},"43":{"tf":1.0},"45":{"tf":1.0}}},"n":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":7,"docs":{"110":{"tf":1.0},"212":{"tf":1.0},"260":{"tf":1.0},"262":{"tf":1.0},"347":{"tf":1.0},"376":{"tf":1.0},"40":{"tf":1.0}}}}},"d":{"df":3,"docs":{"106":{"tf":1.0},"376":{"tf":2.0},"396":{"tf":1.0}}},"df":1,"docs":{"262":{"tf":1.0}}},"t":{"a":{"df":0,"docs":{},"n":{"d":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}}},"x":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}}}}}},"l":{"a":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"84":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"56":{"tf":1.0}}}},"df":0,"docs":{},"g":{"df":2,"docs":{"316":{"tf":1.7320508075688772},"322":{"tf":1.4142135623730951}}}},"u":{"df":0,"docs":{},"e":{"df":5,"docs":{"145":{"tf":1.0},"146":{"tf":1.7320508075688772},"148":{"tf":2.449489742783178},"234":{"tf":1.0},"338":{"tf":1.0}}}}},"o":{"d":{"df":0,"docs":{},"i":{"df":3,"docs":{"224":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}}}},"df":0,"docs":{},"g":{"df":1,"docs":{"227":{"tf":1.0}}},"o":{"df":0,"docs":{},"k":{".":{"c":{"df":0,"docs":{},"s":{".":{"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"u":{"df":1,"docs":{"0":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":1,"docs":{"0":{"tf":1.4142135623730951}}},"l":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":6,"docs":{"242":{"tf":1.0},"394":{"tf":1.7320508075688772},"52":{"tf":1.0},"60":{"tf":1.7320508075688772},"69":{"tf":1.0},"86":{"tf":1.7320508075688772}},"e":{"a":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":4,"docs":{"283":{"tf":2.0},"284":{"tf":1.4142135623730951},"286":{"tf":1.0},"287":{"tf":1.0}}}}}},"df":5,"docs":{"132":{"tf":1.0},"166":{"tf":1.0},"182":{"tf":1.0},"283":{"tf":2.6457513110645907},"74":{"tf":1.4142135623730951}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}}}},"s":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"236":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}},"u":{"df":0,"docs":{},"n":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"y":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"141":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}},"df":7,"docs":{"154":{"tf":1.0},"174":{"tf":1.0},"178":{"tf":1.0},"217":{"tf":1.0},"219":{"tf":1.0},"311":{"tf":1.0},"53":{"tf":1.0}}},"df":0,"docs":{}}},"x":{"<":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"313":{"tf":1.0}}}}}}}},"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":8,"docs":{"159":{"tf":2.23606797749979},"220":{"tf":1.7320508075688772},"313":{"tf":1.0},"314":{"tf":1.0},"317":{"tf":1.0},"321":{"tf":1.0},"360":{"tf":1.0},"362":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"271":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"320":{"tf":1.4142135623730951}}}}},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}}},"t":{"df":14,"docs":{"265":{"tf":1.0},"266":{"tf":2.0},"267":{"tf":2.23606797749979},"268":{"tf":3.1622776601683795},"269":{"tf":1.4142135623730951},"271":{"tf":2.6457513110645907},"272":{"tf":2.23606797749979},"276":{"tf":1.0},"277":{"tf":1.0},"279":{"tf":2.0},"282":{"tf":2.23606797749979},"288":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.0}},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"313":{"tf":1.0}}},"df":0,"docs":{}}}}}}}}}},"df":10,"docs":{"266":{"tf":2.0},"267":{"tf":2.8284271247461903},"268":{"tf":3.605551275463989},"276":{"tf":1.0},"313":{"tf":1.0},"317":{"tf":1.4142135623730951},"320":{"tf":1.4142135623730951},"321":{"tf":1.0},"385":{"tf":1.0},"393":{"tf":1.0}}}},"r":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"h":{".":{"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"287":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":2,"docs":{"287":{"tf":5.0990195135927845},"60":{"tf":1.0}}}},"df":0,"docs":{}}},"df":3,"docs":{"377":{"tf":1.0},"397":{"tf":1.7320508075688772},"411":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"k":{"df":4,"docs":{"361":{"tf":1.4142135623730951},"392":{"tf":1.0},"44":{"tf":1.4142135623730951},"61":{"tf":3.1622776601683795}},"f":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"401":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"[":{"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":1.4142135623730951}}}},"df":2,"docs":{"154":{"tf":1.0},"247":{"tf":1.7320508075688772}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"377":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"g":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"197":{"tf":1.0},"199":{"tf":1.0},"200":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"197":{"tf":1.0},"199":{"tf":1.0},"200":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"198":{"tf":1.4142135623730951}}},"i":{"df":0,"docs":{},"l":{"d":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"_":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":2,"docs":{"81":{"tf":1.4142135623730951},"82":{"tf":1.7320508075688772}}}}},"df":16,"docs":{"15":{"tf":1.0},"154":{"tf":1.0},"208":{"tf":1.0},"219":{"tf":2.0},"221":{"tf":1.0},"244":{"tf":1.4142135623730951},"250":{"tf":2.23606797749979},"260":{"tf":1.4142135623730951},"261":{"tf":2.23606797749979},"27":{"tf":2.6457513110645907},"28":{"tf":1.4142135623730951},"29":{"tf":1.0},"370":{"tf":1.0},"385":{"tf":1.4142135623730951},"40":{"tf":2.449489742783178},"407":{"tf":1.0}},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"149":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"312":{"tf":1.4142135623730951},"313":{"tf":1.0},"314":{"tf":2.8284271247461903}}}}}}},"y":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":1,"docs":{"142":{"tf":1.4142135623730951}},"s":{"(":{"9":{"5":{".":{".":{"1":{"0":{"3":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"c":{"a":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"377":{"tf":1.0}}}},"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"61":{"tf":1.0}}}}},"df":0,"docs":{}},"l":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"72":{"tf":2.0}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"l":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"c":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":6,"docs":{"100":{"tf":1.4142135623730951},"158":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":2.0},"347":{"tf":1.0},"355":{"tf":1.0}}}},"n":{"'":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}},"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"df":2,"docs":{"197":{"tf":3.0},"94":{"tf":2.6457513110645907}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"t":{"df":6,"docs":{"101":{"tf":1.4142135623730951},"162":{"tf":1.0},"283":{"tf":1.4142135623730951},"362":{"tf":1.0},"50":{"tf":1.4142135623730951},"69":{"tf":1.4142135623730951}}}},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":7,"docs":{"112":{"tf":1.0},"209":{"tf":1.4142135623730951},"258":{"tf":1.4142135623730951},"260":{"tf":1.4142135623730951},"261":{"tf":2.449489742783178},"27":{"tf":1.0},"40":{"tf":3.0}}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":15,"docs":{"110":{"tf":2.0},"112":{"tf":1.0},"122":{"tf":2.23606797749979},"153":{"tf":1.0},"209":{"tf":1.4142135623730951},"250":{"tf":2.23606797749979},"255":{"tf":2.6457513110645907},"257":{"tf":1.0},"26":{"tf":2.449489742783178},"260":{"tf":2.0},"261":{"tf":2.6457513110645907},"32":{"tf":1.4142135623730951},"370":{"tf":1.7320508075688772},"40":{"tf":2.449489742783178},"410":{"tf":1.4142135623730951}}}}}}},"/":{"b":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":1,"docs":{"262":{"tf":1.0}}}}},"df":0,"docs":{}}}},"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":1,"docs":{"254":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"261":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":2,"docs":{"260":{"tf":1.0},"261":{"tf":2.23606797749979}}}}},"df":72,"docs":{"10":{"tf":1.4142135623730951},"109":{"tf":1.7320508075688772},"110":{"tf":3.4641016151377544},"113":{"tf":1.0},"12":{"tf":1.0},"122":{"tf":1.0},"154":{"tf":1.7320508075688772},"196":{"tf":3.0},"201":{"tf":1.0},"202":{"tf":2.8284271247461903},"203":{"tf":1.0},"204":{"tf":1.4142135623730951},"205":{"tf":2.23606797749979},"206":{"tf":2.23606797749979},"208":{"tf":2.23606797749979},"209":{"tf":2.6457513110645907},"212":{"tf":2.449489742783178},"221":{"tf":1.0},"227":{"tf":1.4142135623730951},"229":{"tf":1.0},"230":{"tf":1.4142135623730951},"24":{"tf":1.0},"248":{"tf":1.0},"249":{"tf":2.449489742783178},"25":{"tf":3.872983346207417},"250":{"tf":3.605551275463989},"251":{"tf":1.4142135623730951},"252":{"tf":2.6457513110645907},"253":{"tf":1.7320508075688772},"254":{"tf":2.0},"255":{"tf":2.0},"256":{"tf":1.7320508075688772},"257":{"tf":1.4142135623730951},"258":{"tf":2.6457513110645907},"259":{"tf":2.23606797749979},"26":{"tf":4.69041575982343},"260":{"tf":2.6457513110645907},"261":{"tf":4.358898943540674},"262":{"tf":2.8284271247461903},"263":{"tf":3.605551275463989},"264":{"tf":1.7320508075688772},"27":{"tf":5.744562646538029},"28":{"tf":1.7320508075688772},"29":{"tf":2.6457513110645907},"30":{"tf":1.4142135623730951},"32":{"tf":2.8284271247461903},"370":{"tf":2.23606797749979},"376":{"tf":1.7320508075688772},"377":{"tf":1.0},"379":{"tf":1.0},"38":{"tf":1.4142135623730951},"380":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":2.449489742783178},"388":{"tf":1.4142135623730951},"4":{"tf":1.0},"40":{"tf":5.5677643628300215},"406":{"tf":2.0},"407":{"tf":2.23606797749979},"408":{"tf":1.7320508075688772},"41":{"tf":2.23606797749979},"410":{"tf":1.4142135623730951},"416":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"48":{"tf":1.4142135623730951},"53":{"tf":1.0},"55":{"tf":1.0},"61":{"tf":1.0},"86":{"tf":1.0},"87":{"tf":1.4142135623730951}}}}},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"226":{"tf":1.0}}}}}}}}},"df":3,"docs":{"335":{"tf":1.0},"340":{"tf":1.0},"54":{"tf":1.0}}}},"t":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"106":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"255":{"tf":1.0}}}}},"d":{"df":9,"docs":{"196":{"tf":1.0},"21":{"tf":2.0},"212":{"tf":1.0},"26":{"tf":1.0},"260":{"tf":1.0},"29":{"tf":1.0},"32":{"tf":1.0},"376":{"tf":1.0},"416":{"tf":1.0}}},"df":37,"docs":{"10":{"tf":1.0},"142":{"tf":1.0},"15":{"tf":2.23606797749979},"154":{"tf":1.4142135623730951},"159":{"tf":1.0},"16":{"tf":1.0},"172":{"tf":1.4142135623730951},"198":{"tf":1.0},"2":{"tf":1.0},"227":{"tf":1.0},"24":{"tf":1.4142135623730951},"247":{"tf":2.0},"265":{"tf":1.0},"276":{"tf":1.0},"277":{"tf":1.0},"279":{"tf":2.449489742783178},"280":{"tf":1.7320508075688772},"284":{"tf":1.7320508075688772},"337":{"tf":1.0},"346":{"tf":1.0},"347":{"tf":2.8284271247461903},"364":{"tf":1.4142135623730951},"367":{"tf":1.0},"376":{"tf":1.0},"386":{"tf":1.0},"398":{"tf":1.0},"399":{"tf":1.0},"400":{"tf":1.0},"401":{"tf":1.0},"402":{"tf":1.0},"403":{"tf":1.0},"404":{"tf":1.0},"56":{"tf":1.0},"61":{"tf":2.0},"69":{"tf":1.0},"90":{"tf":1.0},"93":{"tf":1.4142135623730951}},"e":{"b":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"411":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"303":{"tf":1.0}}}},"df":1,"docs":{"300":{"tf":1.0}}}}},"f":{"df":0,"docs":{},"g":{"(":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"208":{"tf":2.23606797749979},"209":{"tf":1.0}}}}}}},"df":2,"docs":{"208":{"tf":1.4142135623730951},"40":{"tf":1.4142135623730951}}}},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":4,"docs":{"196":{"tf":1.4142135623730951},"338":{"tf":1.0},"50":{"tf":1.7320508075688772},"73":{"tf":1.4142135623730951}},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"100":{"tf":1.0},"338":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"337":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":11,"docs":{"140":{"tf":1.4142135623730951},"141":{"tf":1.0},"142":{"tf":2.0},"159":{"tf":1.0},"167":{"tf":1.0},"169":{"tf":1.7320508075688772},"172":{"tf":1.4142135623730951},"337":{"tf":1.7320508075688772},"52":{"tf":2.449489742783178},"55":{"tf":1.0},"69":{"tf":1.0}}}},"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"k":{"df":3,"docs":{"27":{"tf":2.6457513110645907},"385":{"tf":1.4142135623730951},"407":{"tf":1.0}},"e":{"d":{"_":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"r":{"df":2,"docs":{"132":{"tf":1.0},"182":{"tf":1.0}}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"113":{"tf":1.0}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"287":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"255":{"tf":1.0}}}}}}},"i":{"df":1,"docs":{"414":{"tf":1.0}},"r":{"c":{"df":0,"docs":{},"l":{"df":2,"docs":{"408":{"tf":1.4142135623730951},"99":{"tf":1.0}}}},"df":0,"docs":{}},"s":{"c":{"df":0,"docs":{},"o":{"df":1,"docs":{"414":{"tf":1.0}}}},"df":0,"docs":{}}},"l":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"15":{"tf":1.0},"24":{"tf":1.0}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"178":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"77":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"i":{"df":1,"docs":{"1":{"tf":1.0}},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":3.0}}},"y":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"#":{"a":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"’":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":10,"docs":{"178":{"tf":1.4142135623730951},"218":{"tf":2.0},"244":{"tf":2.23606797749979},"279":{"tf":1.0},"280":{"tf":1.0},"29":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":1.4142135623730951},"402":{"tf":4.123105625617661},"69":{"tf":2.449489742783178}}}},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":4,"docs":{"157":{"tf":1.0},"248":{"tf":1.0},"293":{"tf":1.0},"365":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"365":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"365":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"364":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"m":{"d":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"16":{"tf":1.0}}}}},"df":3,"docs":{"17":{"tf":1.0},"21":{"tf":1.0},"24":{"tf":1.4142135623730951}}},"df":0,"docs":{},"p":{"_":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"180":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":3,"docs":{"401":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"45":{"tf":1.0}}}},"o":{"d":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"158":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"339":{"tf":1.0},"379":{"tf":1.0},"409":{"tf":1.0}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":2.0}},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.0}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"r":{"c":{"df":1,"docs":{"139":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":4,"docs":{"139":{"tf":1.0},"269":{"tf":1.0},"274":{"tf":1.4142135623730951},"321":{"tf":1.0}}}}}},"df":0,"docs":{}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"176":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":1,"docs":{"102":{"tf":1.4142135623730951}}}}}}},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"103":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"r":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"103":{"tf":1.0}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{":":{":":{"a":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":4,"docs":{"102":{"tf":1.7320508075688772},"103":{"tf":1.7320508075688772},"104":{"tf":1.0},"107":{"tf":1.0}}}},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":5,"docs":{"213":{"tf":1.0},"214":{"tf":1.7320508075688772},"241":{"tf":1.4142135623730951},"242":{"tf":1.0},"245":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":13,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.0},"140":{"tf":2.0},"145":{"tf":1.0},"146":{"tf":1.0},"147":{"tf":1.0},"148":{"tf":1.7320508075688772}}}}}},"n":{"df":0,"docs":{},"o":{"df":2,"docs":{"139":{"tf":1.4142135623730951},"146":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"141":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"s":{"df":0,"docs":{},"v":{"df":1,"docs":{"338":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"g":{"b":{"df":1,"docs":{"338":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":3,"docs":{"327":{"tf":1.0},"338":{"tf":1.0},"84":{"tf":1.4142135623730951}}}}},"m":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"1":{"tf":1.0},"25":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"417":{"tf":1.0},"58":{"tf":1.4142135623730951}}}}},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"209":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":27,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.449489742783178},"140":{"tf":2.0},"141":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":1.7320508075688772},"209":{"tf":2.23606797749979},"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"51":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":2.0},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.605551275463989},"61":{"tf":3.0}}}}},"p":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"270":{"tf":1.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":16,"docs":{"256":{"tf":1.0},"261":{"tf":2.8284271247461903},"262":{"tf":1.0},"27":{"tf":1.4142135623730951},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.4142135623730951},"388":{"tf":1.0},"40":{"tf":3.0},"407":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0},"86":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"n":{"df":5,"docs":{"312":{"tf":1.7320508075688772},"313":{"tf":1.7320508075688772},"314":{"tf":1.0},"406":{"tf":1.0},"408":{"tf":1.0}}}},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.0}}}}}},"n":{"a":{"df":0,"docs":{},"n":{"df":1,"docs":{"247":{"tf":1.0}}}},"c":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"139":{"tf":1.0}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"56":{"tf":1.0},"60":{"tf":1.4142135623730951},"61":{"tf":2.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":11,"docs":{"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":1.7320508075688772},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.3166247903554},"61":{"tf":2.23606797749979}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"51":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":1,"docs":{"48":{"tf":1.0}},"e":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"y":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":8,"docs":{"291":{"tf":1.0},"292":{"tf":1.0},"293":{"tf":2.0},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.449489742783178}}}}}},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"292":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"293":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.4142135623730951}}}}},"df":4,"docs":{"268":{"tf":5.656854249492381},"279":{"tf":2.0},"284":{"tf":1.7320508075688772},"286":{"tf":2.449489742783178}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"224":{"tf":1.0}}}}}}}},":":{":":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"d":{"df":5,"docs":{"219":{"tf":2.449489742783178},"220":{"tf":1.7320508075688772},"221":{"tf":1.0},"243":{"tf":1.0},"244":{"tf":3.7416573867739413}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":2,"docs":{"218":{"tf":1.7320508075688772},"385":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"x":{"df":1,"docs":{"107":{"tf":1.0}}}},"df":0,"docs":{}}},"df":6,"docs":{"218":{"tf":4.242640687119285},"219":{"tf":2.0},"220":{"tf":1.4142135623730951},"221":{"tf":2.0},"227":{"tf":1.4142135623730951},"244":{"tf":2.23606797749979}}}}},"n":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":2,"docs":{"376":{"tf":2.23606797749979},"377":{"tf":1.0}}}},"df":0,"docs":{}}},"s":{"(":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"268":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"d":{"df":3,"docs":{"407":{"tf":1.0},"408":{"tf":1.0},"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"t":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}},"df":4,"docs":{"346":{"tf":1.4142135623730951},"392":{"tf":1.0},"396":{"tf":1.0},"49":{"tf":1.4142135623730951}},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}},"df":0,"docs":{}}}},"u":{"df":0,"docs":{},"m":{"df":2,"docs":{"239":{"tf":1.0},"294":{"tf":1.0}}}}},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":4,"docs":{"143":{"tf":1.0},"224":{"tf":1.4142135623730951},"227":{"tf":1.4142135623730951},"74":{"tf":1.0}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":16,"docs":{"138":{"tf":1.0},"216":{"tf":1.0},"217":{"tf":1.0},"223":{"tf":2.449489742783178},"224":{"tf":1.4142135623730951},"226":{"tf":1.0},"245":{"tf":1.0},"247":{"tf":1.0},"316":{"tf":1.7320508075688772},"317":{"tf":1.0},"318":{"tf":2.23606797749979},"319":{"tf":2.0},"320":{"tf":1.0},"321":{"tf":4.0},"322":{"tf":3.4641016151377544},"380":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":5,"docs":{"164":{"tf":1.0},"361":{"tf":2.449489742783178},"392":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.7320508075688772}}}}},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":2,"docs":{"375":{"tf":1.0},"377":{"tf":1.0}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"42":{"tf":1.0}}}}}}},"p":{"df":0,"docs":{},"i":{"df":5,"docs":{"146":{"tf":1.0},"147":{"tf":1.0},"402":{"tf":3.605551275463989},"69":{"tf":3.3166247903554},"83":{"tf":1.0}}},"y":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{":":{":":{"c":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"c":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"i":{">":{">":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"154":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"c":{"_":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"s":{"_":{"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"154":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"m":{"df":0,"docs":{},"t":{"df":1,"docs":{"154":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{":":{":":{"<":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"[":{"df":0,"docs":{},"t":{"]":{">":{">":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"247":{"tf":1.0},"248":{"tf":1.0}}}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":5,"docs":{"107":{"tf":1.4142135623730951},"148":{"tf":1.0},"265":{"tf":1.0},"280":{"tf":1.0},"287":{"tf":3.1622776601683795}},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"9":{"df":1,"docs":{"353":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"299":{"tf":1.7320508075688772},"300":{"tf":1.0},"348":{"tf":2.0},"353":{"tf":2.449489742783178},"61":{"tf":2.0}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"61":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}}},"r":{"df":0,"docs":{},"s":{"df":1,"docs":{"176":{"tf":1.0}}}}}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"/":{"a":{"d":{"d":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"260":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"118":{"tf":1.4142135623730951},"119":{"tf":1.0},"126":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"g":{"a":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{":":{":":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":1,"docs":{"112":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":12,"docs":{"113":{"tf":1.7320508075688772},"114":{"tf":1.7320508075688772},"115":{"tf":1.0},"116":{"tf":1.0},"252":{"tf":1.0},"255":{"tf":1.0},"256":{"tf":1.0},"26":{"tf":1.0},"261":{"tf":1.0},"262":{"tf":1.0},"392":{"tf":1.0},"40":{"tf":1.7320508075688772}},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":25,"docs":{"122":{"tf":1.4142135623730951},"142":{"tf":1.0},"149":{"tf":1.0},"212":{"tf":1.0},"249":{"tf":2.23606797749979},"250":{"tf":1.0},"251":{"tf":2.449489742783178},"252":{"tf":1.4142135623730951},"253":{"tf":1.4142135623730951},"254":{"tf":2.6457513110645907},"255":{"tf":2.0},"256":{"tf":2.8284271247461903},"257":{"tf":1.4142135623730951},"258":{"tf":2.449489742783178},"259":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.7320508075688772},"262":{"tf":2.0},"263":{"tf":1.0},"264":{"tf":1.7320508075688772},"370":{"tf":1.0},"374":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":2.0},"58":{"tf":1.0}}}}},"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"6":{":":{"7":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"261":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":11,"docs":{"110":{"tf":1.0},"157":{"tf":1.0},"196":{"tf":1.0},"212":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.0},"273":{"tf":1.0},"276":{"tf":1.0},"277":{"tf":1.0},"362":{"tf":1.0},"376":{"tf":1.0}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"f":{"df":2,"docs":{"378":{"tf":2.6457513110645907},"379":{"tf":2.0}}}}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"+":{"c":{"df":1,"docs":{"43":{"tf":1.0}}},"df":0,"docs":{}},"df":3,"docs":{"376":{"tf":1.0},"386":{"tf":1.0},"61":{"tf":1.4142135623730951}}}}},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":1,"docs":{"15":{"tf":1.0}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"331":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":4,"docs":{"118":{"tf":2.0},"199":{"tf":1.4142135623730951},"339":{"tf":1.0},"369":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"114":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"276":{"tf":2.6457513110645907},"277":{"tf":1.7320508075688772}}}}}}}}}},"df":0,"docs":{}}}}}}}},"y":{"c":{"df":0,"docs":{},"l":{"df":1,"docs":{"265":{"tf":1.0}}}},"df":0,"docs":{}}},"d":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"347":{"tf":1.7320508075688772}}}},"l":{"df":2,"docs":{"182":{"tf":1.0},"74":{"tf":2.6457513110645907}},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"74":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"k":{"df":1,"docs":{"411":{"tf":1.0}}}}},"t":{"a":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":10,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":2.23606797749979},"92":{"tf":1.0},"94":{"tf":1.4142135623730951},"96":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":5,"docs":{"84":{"tf":1.0},"85":{"tf":1.0},"90":{"tf":1.4142135623730951},"92":{"tf":1.0},"95":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"90":{"tf":1.7320508075688772}}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"255":{"tf":1.0},"277":{"tf":1.4142135623730951},"280":{"tf":1.0},"370":{"tf":1.0}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"y":{"df":1,"docs":{"227":{"tf":1.0}}}},"b":{"df":0,"docs":{},"g":{"df":1,"docs":{"90":{"tf":3.3166247903554}}}},"d":{"df":1,"docs":{"17":{"tf":1.0}}},"df":11,"docs":{"10":{"tf":1.0},"20":{"tf":1.0},"21":{"tf":1.0},"226":{"tf":1.0},"23":{"tf":1.0},"276":{"tf":1.0},"405":{"tf":1.0},"406":{"tf":1.0},"407":{"tf":1.0},"408":{"tf":1.0},"409":{"tf":1.0}},"e":{"a":{"d":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"300":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{":":{"3":{"df":1,"docs":{"90":{"tf":1.0}}},"9":{":":{"1":{"0":{"df":1,"docs":{"90":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"90":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},">":{"(":{"df":0,"docs":{},"t":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}},"df":5,"docs":{"154":{"tf":1.0},"198":{"tf":1.7320508075688772},"27":{"tf":1.0},"399":{"tf":2.23606797749979},"90":{"tf":2.6457513110645907}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":16,"docs":{"250":{"tf":1.0},"256":{"tf":1.0},"261":{"tf":2.23606797749979},"262":{"tf":1.0},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}}}}}}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}},"l":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"366":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{":":{":":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"404":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":11,"docs":{"177":{"tf":2.0},"239":{"tf":1.0},"261":{"tf":1.0},"335":{"tf":1.0},"340":{"tf":1.0},"354":{"tf":1.0},"385":{"tf":1.0},"404":{"tf":3.1622776601683795},"407":{"tf":1.0},"408":{"tf":1.0},"416":{"tf":1.0}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":3,"docs":{"100":{"tf":1.7320508075688772},"385":{"tf":2.23606797749979},"99":{"tf":1.0}},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"26":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"361":{"tf":1.0},"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"l":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.0}}}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"116":{"tf":2.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"t":{"a":{"df":1,"docs":{"247":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"149":{"tf":1.0},"385":{"tf":1.0}}}},"df":0,"docs":{}},"y":{"(":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"y":{":":{":":{"a":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":4,"docs":{"255":{"tf":1.0},"26":{"tf":1.4142135623730951},"261":{"tf":1.0},"40":{"tf":2.0}},"e":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"y":{"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"6":{":":{"7":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{":":{":":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"274":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"=":{"df":0,"docs":{},"u":{"df":1,"docs":{"275":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":17,"docs":{"139":{"tf":1.0},"265":{"tf":1.4142135623730951},"268":{"tf":1.0},"269":{"tf":2.8284271247461903},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.4142135623730951},"273":{"tf":4.47213595499958},"274":{"tf":3.7416573867739413},"275":{"tf":1.7320508075688772},"283":{"tf":1.0},"288":{"tf":1.0},"299":{"tf":1.0},"321":{"tf":1.0},"357":{"tf":1.4142135623730951},"396":{"tf":1.0},"77":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"c":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}}}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"=":{"df":0,"docs":{},"u":{"df":1,"docs":{"275":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":1,"docs":{"275":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"v":{"df":10,"docs":{"196":{"tf":1.0},"366":{"tf":1.4142135623730951},"367":{"tf":1.0},"369":{"tf":1.4142135623730951},"370":{"tf":2.0},"371":{"tf":1.4142135623730951},"398":{"tf":3.4641016151377544},"403":{"tf":1.4142135623730951},"404":{"tf":1.0},"90":{"tf":1.4142135623730951}},"e":{"(":{"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{",":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"y":{",":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"93":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"90":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":1,"docs":{"370":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":2.449489742783178}}}}}}}}}}},"s":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{},"k":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"16":{"tf":1.0}}}}}},"t":{"df":1,"docs":{"377":{"tf":1.0}},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"277":{"tf":1.0}}}},"u":{"df":0,"docs":{},"r":{"df":2,"docs":{"338":{"tf":1.0},"53":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"411":{"tf":1.0}}}},"df":0,"docs":{}}}},"v":{"a":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"140":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":15,"docs":{"250":{"tf":2.6457513110645907},"256":{"tf":1.0},"261":{"tf":1.7320508075688772},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"16":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"6":{"tf":1.0}}}}}},"i":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"144":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":6,"docs":{"100":{"tf":1.0},"125":{"tf":1.0},"126":{"tf":1.0},"127":{"tf":1.0},"273":{"tf":1.0},"361":{"tf":1.0}}}}}},"j":{"df":0,"docs":{},"k":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"a":{"df":1,"docs":{"194":{"tf":1.0}}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"e":{"df":1,"docs":{"114":{"tf":1.0}}}},"r":{"df":1,"docs":{"24":{"tf":1.0}},"e":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}},"y":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"158":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}}},"s":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"388":{"tf":2.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"y":{">":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":1,"docs":{"178":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":12,"docs":{"138":{"tf":1.0},"176":{"tf":1.7320508075688772},"178":{"tf":1.7320508075688772},"180":{"tf":2.23606797749979},"192":{"tf":1.4142135623730951},"356":{"tf":3.4641016151377544},"357":{"tf":2.449489742783178},"364":{"tf":1.0},"398":{"tf":1.0},"43":{"tf":1.0},"53":{"tf":1.0},"90":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"t":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"93":{"tf":1.0}}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"172":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"v":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":1,"docs":{"361":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"s":{"df":1,"docs":{"60":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"377":{"tf":1.0}}}},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"407":{"tf":2.23606797749979}}}}}}}},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"c":{"df":1,"docs":{"364":{"tf":2.449489742783178}}},"df":0,"docs":{}}}}},"c":{"df":9,"docs":{"0":{"tf":1.0},"19":{"tf":1.0},"196":{"tf":1.4142135623730951},"209":{"tf":1.0},"252":{"tf":2.0},"253":{"tf":1.4142135623730951},"261":{"tf":1.4142135623730951},"385":{"tf":1.0},"41":{"tf":1.4142135623730951}},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"255":{"tf":1.0},"377":{"tf":1.0}}}}}}}},"df":2,"docs":{"149":{"tf":1.0},"385":{"tf":1.0}},"g":{":":{":":{"b":{"a":{"b":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"355":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"355":{"tf":3.3166247903554}}},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"57":{"tf":1.4142135623730951}}}},"u":{"b":{"df":0,"docs":{},"l":{"df":2,"docs":{"277":{"tf":1.0},"69":{"tf":1.0}}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"n":{"df":1,"docs":{"388":{"tf":3.0}},"l":{"df":0,"docs":{},"o":{"a":{"d":{"df":3,"docs":{"261":{"tf":1.0},"262":{"tf":1.4142135623730951},"40":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"y":{"df":0,"docs":{},"l":{"df":1,"docs":{"247":{"tf":1.0}}}}},"r":{"a":{"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":4,"docs":{"317":{"tf":2.0},"320":{"tf":1.7320508075688772},"321":{"tf":1.4142135623730951},"322":{"tf":1.4142135623730951}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"322":{"tf":3.4641016151377544}}}}}}}},"w":{"df":3,"docs":{"312":{"tf":2.6457513110645907},"313":{"tf":3.1622776601683795},"314":{"tf":4.0}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":2,"docs":{"227":{"tf":1.0},"230":{"tf":1.0}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}}}},"o":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"293":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":15,"docs":{"265":{"tf":1.4142135623730951},"268":{"tf":1.0},"276":{"tf":4.898979485566356},"277":{"tf":5.0},"280":{"tf":1.0},"287":{"tf":1.0},"288":{"tf":1.0},"293":{"tf":1.7320508075688772},"299":{"tf":1.0},"376":{"tf":1.0},"386":{"tf":1.0},"387":{"tf":2.23606797749979},"388":{"tf":2.449489742783178},"69":{"tf":2.23606797749979},"71":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"362":{"tf":1.7320508075688772}}}},"u":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"314":{"tf":1.4142135623730951}}},"t":{"df":2,"docs":{"223":{"tf":1.4142135623730951},"226":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"e":{"df":1,"docs":{"86":{"tf":1.0}}},"r":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"296":{"tf":1.0}}}},"df":0,"docs":{}}},"y":{"df":0,"docs":{},"n":{"df":4,"docs":{"220":{"tf":1.0},"313":{"tf":1.0},"362":{"tf":1.0},"392":{"tf":1.0}}}}},"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"g":{"df":2,"docs":{"268":{"tf":1.0},"397":{"tf":1.0}}}},"0":{"1":{"0":{"6":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"337":{"tf":1.0}}},"y":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"292":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"t":{"_":{"a":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":6,"docs":{"114":{"tf":2.8284271247461903},"115":{"tf":2.8284271247461903},"117":{"tf":2.23606797749979},"118":{"tf":1.7320508075688772},"119":{"tf":1.0},"126":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":1,"docs":{"17":{"tf":1.7320508075688772}}}}},"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":3,"docs":{"255":{"tf":1.0},"26":{"tf":1.4142135623730951},"410":{"tf":1.7320508075688772}}}},"s":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"194":{"tf":1.0}}}}}}},"df":18,"docs":{"10":{"tf":1.0},"151":{"tf":1.4142135623730951},"155":{"tf":2.23606797749979},"157":{"tf":2.0},"158":{"tf":1.0},"159":{"tf":3.0},"166":{"tf":1.0},"171":{"tf":2.23606797749979},"201":{"tf":2.6457513110645907},"211":{"tf":1.0},"219":{"tf":1.0},"220":{"tf":1.0},"26":{"tf":1.0},"294":{"tf":1.7320508075688772},"360":{"tf":2.8284271247461903},"376":{"tf":1.0},"394":{"tf":1.0},"410":{"tf":1.7320508075688772}},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"211":{"tf":1.0}}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"239":{"tf":1.0}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"107":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":4,"docs":{"81":{"tf":2.0},"82":{"tf":3.1622776601683795},"83":{"tf":2.0},"86":{"tf":2.0}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":2,"docs":{"255":{"tf":1.0},"361":{"tf":1.0}}}}}},"n":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}}},"d":{"df":4,"docs":{"277":{"tf":1.0},"335":{"tf":1.0},"58":{"tf":1.0},"61":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"77":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":1,"docs":{"377":{"tf":1.0}},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"150":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":3,"docs":{"219":{"tf":1.0},"229":{"tf":1.0},"230":{"tf":1.0}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.7320508075688772}}}},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"148":{"tf":3.0}}}}},"u":{"df":0,"docs":{},"m":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"100":{"tf":3.4641016151377544},"101":{"tf":2.23606797749979},"102":{"tf":1.4142135623730951},"103":{"tf":1.7320508075688772},"104":{"tf":2.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"117":{"tf":1.0},"134":{"tf":1.0},"155":{"tf":1.0},"171":{"tf":1.4142135623730951},"173":{"tf":1.4142135623730951},"268":{"tf":1.4142135623730951},"321":{"tf":1.0},"36":{"tf":1.0},"392":{"tf":1.0},"397":{"tf":1.0},"98":{"tf":1.0},"99":{"tf":2.0}},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"329":{"tf":1.0},"76":{"tf":1.7320508075688772},"98":{"tf":1.0}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"99":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"n":{"_":{"c":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"100":{"tf":1.0}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"100":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"v":{":":{":":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":3,"docs":{"214":{"tf":1.0},"241":{"tf":1.0},"244":{"tf":2.23606797749979}}}}},"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"227":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":1.0}},"e":{"=":{"1":{"df":1,"docs":{"227":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"17":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":1,"docs":{"227":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":2,"docs":{"43":{"tf":1.0},"53":{"tf":1.0}}}}}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"n":{"df":2,"docs":{"230":{"tf":1.7320508075688772},"231":{"tf":1.0}}}}}}}}},"q":{"df":2,"docs":{"400":{"tf":2.6457513110645907},"401":{"tf":1.4142135623730951}},"u":{"a":{"df":0,"docs":{},"l":{"df":3,"docs":{"200":{"tf":1.7320508075688772},"42":{"tf":1.0},"60":{"tf":1.0}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"308":{"tf":1.0}}}},"df":0,"docs":{}},"l":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"289":{"tf":1.0}}}}},"df":0,"docs":{}},"r":{"(":{"_":{"df":1,"docs":{"45":{"tf":1.0}}},"df":3,"docs":{"155":{"tf":1.0},"159":{"tf":1.0},"171":{"tf":1.0}}},"df":18,"docs":{"155":{"tf":2.23606797749979},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":3.0},"160":{"tf":1.0},"162":{"tf":1.7320508075688772},"171":{"tf":1.0},"201":{"tf":2.0},"219":{"tf":2.8284271247461903},"220":{"tf":1.0},"227":{"tf":1.0},"244":{"tf":1.0},"294":{"tf":1.0},"36":{"tf":2.23606797749979},"361":{"tf":1.0},"385":{"tf":1.0},"42":{"tf":1.0},"45":{"tf":2.0}},"o":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"156":{"tf":1.7320508075688772},"157":{"tf":1.0}}},"df":0,"docs":{}}}}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"[":{"df":0,"docs":{},"e":{"0":{"1":{"0":{"6":{"df":1,"docs":{"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{"8":{"4":{"df":1,"docs":{"48":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"4":{"3":{"2":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":16,"docs":{"153":{"tf":1.4142135623730951},"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"157":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"159":{"tf":3.7416573867739413},"162":{"tf":1.0},"164":{"tf":1.4142135623730951},"220":{"tf":2.23606797749979},"230":{"tf":1.0},"255":{"tf":1.4142135623730951},"360":{"tf":1.0},"394":{"tf":1.0},"408":{"tf":1.0},"86":{"tf":1.7320508075688772}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"156":{"tf":1.0},"157":{"tf":1.0}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"156":{"tf":1.0}}},"df":0,"docs":{}}}}}}}},"s":{"c":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"397":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"ñ":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":1,"docs":{"15":{"tf":1.0}}}}}}},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"376":{"tf":2.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"c":{"df":1,"docs":{"397":{"tf":2.23606797749979}}},"df":0,"docs":{}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"340":{"tf":1.0}}}}},"x":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":2,"docs":{"212":{"tf":1.0},"252":{"tf":1.7320508075688772}},"e":{".":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"29":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}}}}},"df":0,"docs":{}}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"/":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"235":{"tf":1.7320508075688772}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"255":{"tf":1.0}}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"299":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"262":{"tf":1.0},"385":{"tf":5.0990195135927845},"388":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"h":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"105":{"tf":1.4142135623730951},"326":{"tf":1.0},"327":{"tf":1.0}}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}},"t":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"159":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"36":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":15,"docs":{"158":{"tf":2.8284271247461903},"161":{"tf":1.4142135623730951},"162":{"tf":2.0},"198":{"tf":1.0},"200":{"tf":1.7320508075688772},"217":{"tf":1.4142135623730951},"220":{"tf":1.4142135623730951},"227":{"tf":1.0},"36":{"tf":2.23606797749979},"370":{"tf":1.0},"385":{"tf":1.0},"394":{"tf":1.4142135623730951},"42":{"tf":1.7320508075688772},"45":{"tf":1.0},"86":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"206":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}}}}}}},"l":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"86":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"185":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"196":{"tf":1.7320508075688772}}}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"121":{"tf":1.0}}}}},"r":{".":{".":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"396":{"tf":1.0}}}}}}},"=":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"396":{"tf":1.0}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"396":{"tf":1.0}}}}}}},"0":{"df":1,"docs":{"397":{"tf":1.0}}},"1":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"396":{"tf":1.0}}},"df":0,"docs":{}}},"[":{".":{".":{"b":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{".":{".":{"b":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"397":{"tf":1.0}}}}}}},"df":2,"docs":{"396":{"tf":7.874007874011811},"397":{"tf":2.6457513110645907}},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":2,"docs":{"326":{"tf":1.7320508075688772},"330":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"56":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"56":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":3,"docs":{"261":{"tf":1.4142135623730951},"347":{"tf":3.1622776601683795},"392":{"tf":1.0}}}}},"r":{"a":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"125":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"f":{"0":{"2":{"5":{"3":{"1":{"5":{"9":{"1":{"9":{"7":{"df":0,"docs":{},"f":{"7":{"8":{"4":{"1":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{"2":{"df":2,"docs":{"172":{"tf":1.4142135623730951},"52":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"6":{"4":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"(":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"i":{"df":1,"docs":{"93":{"tf":1.0}}},"x":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}}},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"(":{"df":0,"docs":{},"x":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":6,"docs":{"172":{"tf":1.0},"173":{"tf":1.4142135623730951},"397":{"tf":1.0},"52":{"tf":1.7320508075688772},"69":{"tf":1.0},"93":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"162":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":5,"docs":{"196":{"tf":2.0},"198":{"tf":1.4142135623730951},"252":{"tf":1.0},"255":{"tf":1.0},"261":{"tf":2.23606797749979}},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"199":{"tf":1.4142135623730951}}}}}},"l":{"df":0,"docs":{},"s":{"df":11,"docs":{"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"227":{"tf":1.0},"242":{"tf":1.0},"340":{"tf":1.0},"392":{"tf":1.0},"52":{"tf":1.0},"60":{"tf":1.0},"69":{"tf":1.0},"92":{"tf":1.0},"94":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":1,"docs":{"411":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"223":{"tf":1.0}}}},"v":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"df":1,"docs":{"376":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"y":{"df":1,"docs":{"150":{"tf":1.0}}}},"df":5,"docs":{"10":{"tf":1.0},"237":{"tf":3.4641016151377544},"364":{"tf":2.0},"385":{"tf":3.1622776601683795},"411":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":8,"docs":{"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":2.23606797749979},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.449489742783178}}}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":2,"docs":{"109":{"tf":1.0},"415":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":24,"docs":{"234":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"236":{"tf":2.23606797749979},"237":{"tf":2.23606797749979},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.7320508075688772},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.0},"346":{"tf":1.7320508075688772},"347":{"tf":2.449489742783178},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"353":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"355":{"tf":3.1622776601683795},"356":{"tf":1.0},"357":{"tf":1.0},"360":{"tf":1.4142135623730951},"364":{"tf":1.0},"368":{"tf":1.0},"370":{"tf":2.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":9,"docs":{"347":{"tf":1.0},"353":{"tf":1.0},"356":{"tf":1.7320508075688772},"360":{"tf":2.23606797749979},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":1.7320508075688772},"365":{"tf":1.7320508075688772},"370":{"tf":1.7320508075688772}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}}},"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"53":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"10":{"tf":1.4142135623730951}}}}},"t":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"377":{"tf":2.0}}}},"df":0,"docs":{}}},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}}},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"147":{"tf":1.0}}}},"df":0,"docs":{}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"147":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":5,"docs":{"255":{"tf":1.0},"273":{"tf":1.0},"370":{"tf":1.0},"385":{"tf":1.7320508075688772},"92":{"tf":1.0}}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"e":{":":{"/":{"/":{"/":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}},"df":1,"docs":{"261":{"tf":2.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":7,"docs":{"256":{"tf":1.7320508075688772},"38":{"tf":1.0},"40":{"tf":1.4142135623730951},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"p":{"a":{"c":{"df":0,"docs":{},"k":{"a":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"256":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":1,"docs":{"27":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":3,"docs":{"377":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0}}}}}}},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"61":{"tf":1.0}}}}}},"m":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"407":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"86":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"c":{"df":0,"docs":{},"r":{"df":1,"docs":{"156":{"tf":1.4142135623730951}},"e":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"\"":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"(":{"df":0,"docs":{},"|":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"157":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"\"":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"(":{"df":0,"docs":{},"|":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"157":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"159":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":3,"docs":{"155":{"tf":2.6457513110645907},"156":{"tf":2.0},"159":{"tf":3.0}}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":5,"docs":{"215":{"tf":1.0},"216":{"tf":1.4142135623730951},"217":{"tf":1.0},"218":{"tf":2.6457513110645907},"244":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":11,"docs":{"125":{"tf":1.0},"126":{"tf":1.0},"127":{"tf":1.0},"155":{"tf":1.0},"157":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"159":{"tf":1.0},"209":{"tf":1.0},"217":{"tf":1.0},"24":{"tf":1.0},"255":{"tf":1.4142135623730951}},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"382":{"tf":1.4142135623730951}},"e":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"212":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":6,"docs":{"196":{"tf":1.0},"205":{"tf":1.0},"242":{"tf":2.23606797749979},"245":{"tf":1.4142135623730951},"252":{"tf":1.0},"261":{"tf":2.23606797749979}}}}}},"n":{"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"388":{"tf":1.4142135623730951},"393":{"tf":1.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":17,"docs":{"250":{"tf":1.4142135623730951},"252":{"tf":1.0},"256":{"tf":1.0},"261":{"tf":3.1622776601683795},"262":{"tf":1.0},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.7320508075688772},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"/":{"9":{"9":{".":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"6":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"(":{"df":3,"docs":{"189":{"tf":1.0},"76":{"tf":1.0},"77":{"tf":1.0}}},"<":{"'":{"a":{">":{"(":{"df":1,"docs":{"189":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":3,"docs":{"189":{"tf":1.0},"76":{"tf":2.0},"77":{"tf":2.23606797749979}}},"df":0,"docs":{}}}}},"df":5,"docs":{"150":{"tf":1.0},"339":{"tf":1.0},"48":{"tf":1.0},"53":{"tf":1.0},"77":{"tf":1.0}}}}},"v":{"df":0,"docs":{},"e":{"df":1,"docs":{"57":{"tf":2.23606797749979}}}},"x":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"116":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":5,"docs":{"209":{"tf":1.0},"387":{"tf":1.4142135623730951},"407":{"tf":2.449489742783178},"410":{"tf":1.0},"73":{"tf":1.0}}}},"l":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"415":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":3.605551275463989}}},"o":{"a":{"df":0,"docs":{},"t":{"df":2,"docs":{"173":{"tf":1.4142135623730951},"52":{"tf":1.0}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"t":{"df":1,"docs":{"406":{"tf":1.4142135623730951}}}},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":41,"docs":{"115":{"tf":1.0},"139":{"tf":1.0},"157":{"tf":1.0},"169":{"tf":1.0},"172":{"tf":1.0},"173":{"tf":1.0},"175":{"tf":1.0},"178":{"tf":2.449489742783178},"189":{"tf":3.1622776601683795},"196":{"tf":1.0},"22":{"tf":1.0},"23":{"tf":1.0},"235":{"tf":1.4142135623730951},"237":{"tf":3.0},"239":{"tf":1.0},"26":{"tf":1.0},"33":{"tf":1.0},"347":{"tf":1.4142135623730951},"354":{"tf":1.0},"360":{"tf":1.0},"362":{"tf":1.0},"364":{"tf":3.1622776601683795},"365":{"tf":1.0},"369":{"tf":1.0},"371":{"tf":1.7320508075688772},"372":{"tf":1.0},"385":{"tf":2.23606797749979},"392":{"tf":1.0},"394":{"tf":2.0},"396":{"tf":1.0},"397":{"tf":1.0},"407":{"tf":2.0},"408":{"tf":1.4142135623730951},"48":{"tf":1.0},"54":{"tf":1.4142135623730951},"67":{"tf":1.0},"76":{"tf":1.4142135623730951},"77":{"tf":1.4142135623730951},"86":{"tf":1.0},"91":{"tf":1.0},"93":{"tf":1.0}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"237":{"tf":2.23606797749979},"364":{"tf":1.0},"385":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"n":{"c":{"df":3,"docs":{"237":{"tf":3.1622776601683795},"364":{"tf":1.0},"385":{"tf":2.8284271247461903}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"o":{"<":{"'":{"a":{">":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"189":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":1,"docs":{"189":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}}},"df":0,"docs":{}},"b":{"a":{"df":0,"docs":{},"r":{"df":2,"docs":{"139":{"tf":1.0},"394":{"tf":1.0}}}},"df":0,"docs":{}},"df":3,"docs":{"331":{"tf":1.0},"370":{"tf":1.0},"45":{"tf":1.0}}},"r":{"c":{"df":1,"docs":{"293":{"tf":1.0}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"k":{"/":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"385":{"tf":1.0}}}}}}},"df":0,"docs":{}},"m":{"a":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"139":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":4,"docs":{"139":{"tf":2.449489742783178},"199":{"tf":1.4142135623730951},"370":{"tf":1.0},"380":{"tf":1.0}}}},"df":0,"docs":{}},"r":{"c":{"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"299":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"n":{"d":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.0}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"'":{"df":1,"docs":{"255":{"tf":1.0}}},"df":0,"docs":{}}}}}},"df":5,"docs":{"25":{"tf":1.0},"341":{"tf":1.0},"381":{"tf":1.0},"394":{"tf":1.4142135623730951},"408":{"tf":1.0}}},"df":0,"docs":{}}}},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"ç":{"a":{"df":0,"docs":{},"i":{"df":1,"docs":{"411":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":2,"docs":{"277":{"tf":1.0},"69":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"g":{"df":1,"docs":{"224":{"tf":1.0}}},"m":{"<":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"u":{"df":1,"docs":{"159":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":6,"docs":{"113":{"tf":2.23606797749979},"114":{"tf":1.4142135623730951},"115":{"tf":2.8284271247461903},"118":{"tf":1.0},"125":{"tf":2.8284271247461903},"126":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"114":{"tf":1.4142135623730951}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"s":{":":{":":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"159":{"tf":2.0},"216":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"380":{"tf":1.0}}},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"'":{"df":1,"docs":{"74":{"tf":1.0}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"364":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"205":{"tf":1.0},"234":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"236":{"tf":2.23606797749979},"237":{"tf":2.23606797749979},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.7320508075688772},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.0},"268":{"tf":1.0},"347":{"tf":1.4142135623730951},"361":{"tf":1.0},"366":{"tf":1.0},"369":{"tf":1.0},"54":{"tf":1.0},"55":{"tf":2.23606797749979},"57":{"tf":1.7320508075688772}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"54":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"54":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"95":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":1,"docs":{"255":{"tf":1.0}}},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"355":{"tf":1.0}}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"392":{"tf":1.4142135623730951}}}}}},"{":{"3":{"2":{"df":1,"docs":{"408":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"g":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"211":{"tf":1.0}}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"e":{"df":15,"docs":{"122":{"tf":1.4142135623730951},"255":{"tf":1.0},"32":{"tf":1.7320508075688772},"33":{"tf":2.0},"34":{"tf":1.0},"35":{"tf":1.0},"36":{"tf":1.4142135623730951},"361":{"tf":1.0},"37":{"tf":1.0},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.7320508075688772},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951}}},"m":{"a":{"df":1,"docs":{"308":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":1,"docs":{"112":{"tf":2.449489742783178}}}}},"df":0,"docs":{}}},"c":{"c":{"df":2,"docs":{"15":{"tf":1.0},"24":{"tf":1.0}}},"df":1,"docs":{"69":{"tf":1.0}}},"df":8,"docs":{"10":{"tf":1.0},"211":{"tf":1.0},"412":{"tf":1.0},"413":{"tf":1.0},"414":{"tf":1.0},"415":{"tf":1.0},"416":{"tf":1.0},"417":{"tf":1.0}},"e":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"o":{"/":{"2":{"0":{"1":{"0":{"0":{"1":{"0":{"1":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"401":{"tf":1.0},"41":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":25,"docs":{"155":{"tf":1.0},"166":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.4142135623730951},"261":{"tf":1.0},"268":{"tf":1.0},"362":{"tf":1.7320508075688772},"385":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"164":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"26":{"tf":2.0},"29":{"tf":1.4142135623730951}},"h":{"df":0,"docs":{},"u":{"b":{"df":2,"docs":{"11":{"tf":1.0},"254":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"26":{"tf":1.0}}}}}}}},"v":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"234":{"tf":2.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"o":{"b":{"df":2,"docs":{"111":{"tf":1.0},"124":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"o":{"df":2,"docs":{"294":{"tf":1.0},"298":{"tf":1.0}}},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"15":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"200":{"tf":1.0},"42":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"338":{"tf":1.0}}},"t":{"df":1,"docs":{"199":{"tf":2.0}},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"199":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"199":{"tf":1.4142135623730951}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":2,"docs":{"155":{"tf":1.0},"157":{"tf":1.0}},"e":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":2,"docs":{"155":{"tf":1.4142135623730951},"156":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"p":{"df":4,"docs":{"10":{"tf":1.0},"211":{"tf":2.23606797749979},"212":{"tf":1.0},"262":{"tf":1.0}}}},"o":{"df":0,"docs":{},"w":{"df":12,"docs":{"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0}}}}},"u":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"340":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"(":{"\"":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"36":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"(":{")":{".":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":1,"docs":{"42":{"tf":1.0}},"e":{"(":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"(":{"\"":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"42":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"164":{"tf":2.0},"200":{"tf":1.4142135623730951},"219":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.0}}}}}},"df":19,"docs":{"122":{"tf":1.4142135623730951},"164":{"tf":4.123105625617661},"200":{"tf":3.4641016151377544},"255":{"tf":1.0},"32":{"tf":1.7320508075688772},"33":{"tf":2.0},"34":{"tf":2.23606797749979},"35":{"tf":2.23606797749979},"36":{"tf":1.4142135623730951},"361":{"tf":2.449489742783178},"37":{"tf":1.0},"38":{"tf":1.7320508075688772},"40":{"tf":1.0},"41":{"tf":2.6457513110645907},"42":{"tf":4.58257569495584},"43":{"tf":3.0},"44":{"tf":1.0},"45":{"tf":3.4641016151377544},"51":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":10,"docs":{"255":{"tf":1.7320508075688772},"256":{"tf":2.0},"258":{"tf":1.4142135623730951},"32":{"tf":1.7320508075688772},"38":{"tf":1.0},"40":{"tf":1.7320508075688772},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}},"e":{"@":{"1":{".":{"0":{".":{"1":{"df":1,"docs":{"258":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"i":{"d":{"df":1,"docs":{"410":{"tf":1.0}},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"115":{"tf":1.0}}}}}}},"df":3,"docs":{"312":{"tf":2.8284271247461903},"313":{"tf":1.0},"314":{"tf":1.7320508075688772}}}},"z":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":1,"docs":{"377":{"tf":1.0}}}}}},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"354":{"tf":1.0}},"l":{"df":3,"docs":{"220":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.0}},"e":{".":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"292":{"tf":1.4142135623730951}}}}}}},"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":4,"docs":{"377":{"tf":1.7320508075688772},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":5,"docs":{"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"159":{"tf":2.8284271247461903},"164":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":4,"docs":{"153":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"162":{"tf":1.0},"164":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"h":{"df":3,"docs":{"128":{"tf":1.0},"144":{"tf":1.7320508075688772},"403":{"tf":3.1622776601683795}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"149":{"tf":1.7320508075688772}}}},"m":{"a":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"146":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"359":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"k":{"df":4,"docs":{"144":{"tf":1.4142135623730951},"166":{"tf":1.0},"400":{"tf":1.4142135623730951},"403":{"tf":1.0}}}},"df":11,"docs":{"10":{"tf":1.0},"119":{"tf":1.4142135623730951},"122":{"tf":1.0},"143":{"tf":1.0},"144":{"tf":1.7320508075688772},"145":{"tf":1.7320508075688772},"146":{"tf":2.449489742783178},"147":{"tf":2.449489742783178},"148":{"tf":2.8284271247461903},"149":{"tf":1.4142135623730951},"150":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"309":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":2,"docs":{"357":{"tf":1.0},"385":{"tf":1.0}}}}}},"y":{"df":1,"docs":{"150":{"tf":1.4142135623730951}},"s":{"df":0,"docs":{},"t":{"a":{"c":{"df":0,"docs":{},"k":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"(":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"394":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"394":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":2,"docs":{"140":{"tf":1.0},"55":{"tf":1.0}},"e":{"a":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"378":{"tf":1.0},"379":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":4,"docs":{"314":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.7320508075688772},"99":{"tf":1.0}}}}}},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"\"":{"[":{"0":{"df":1,"docs":{"140":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"(":{"\"":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"274":{"tf":1.0}}}}}}},"df":0,"docs":{}},".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":2,"docs":{"380":{"tf":2.0},"381":{"tf":1.7320508075688772}}}}}},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"155":{"tf":1.0},"158":{"tf":1.4142135623730951}}}}}},"[":{"0":{".":{".":{"1":{"df":1,"docs":{"141":{"tf":1.0}}},"4":{"df":1,"docs":{"141":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"140":{"tf":1.0}}},"df":0,"docs":{}},"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":3,"docs":{"26":{"tf":2.449489742783178},"27":{"tf":2.23606797749979},"29":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":4.0}},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"370":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"370":{"tf":3.872983346207417}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"22":{"tf":1.0}}}},"df":1,"docs":{"21":{"tf":2.23606797749979}}},"df":0,"docs":{}}}}}},"df":28,"docs":{"10":{"tf":1.0},"12":{"tf":1.0},"139":{"tf":1.0},"140":{"tf":1.0},"141":{"tf":1.0},"148":{"tf":1.0},"172":{"tf":1.0},"199":{"tf":1.0},"25":{"tf":1.4142135623730951},"26":{"tf":2.0},"261":{"tf":1.0},"27":{"tf":2.449489742783178},"274":{"tf":2.8284271247461903},"28":{"tf":1.0},"29":{"tf":1.0},"30":{"tf":1.4142135623730951},"32":{"tf":1.4142135623730951},"370":{"tf":2.0},"374":{"tf":1.4142135623730951},"376":{"tf":1.7320508075688772},"377":{"tf":1.0},"385":{"tf":1.7320508075688772},"388":{"tf":1.0},"54":{"tf":1.0},"58":{"tf":1.0},"67":{"tf":1.0},"69":{"tf":1.0},"77":{"tf":1.4142135623730951}},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":1,"docs":{"370":{"tf":3.1622776601683795}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"22":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"m":{"df":1,"docs":{"308":{"tf":1.0}}},"p":{"df":8,"docs":{"202":{"tf":1.4142135623730951},"26":{"tf":1.0},"262":{"tf":1.0},"268":{"tf":1.0},"293":{"tf":1.0},"407":{"tf":1.0},"408":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951}}}}},"i":{"df":5,"docs":{"291":{"tf":3.0},"292":{"tf":5.0990195135927845},"294":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0}}},"o":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}},"df":0,"docs":{},"l":{"a":{"df":1,"docs":{"140":{"tf":1.0}}},"d":{"df":1,"docs":{"94":{"tf":1.4142135623730951}}},"df":0,"docs":{},"m":{"df":1,"docs":{"247":{"tf":1.0}}}},"m":{"df":0,"docs":{},"e":{"/":{".":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"/":{"b":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"262":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"100":{"tf":1.0}},"p":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"255":{"tf":1.0}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":2,"docs":{"176":{"tf":1.0},"177":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"t":{"df":9,"docs":{"113":{"tf":2.0},"114":{"tf":1.4142135623730951},"115":{"tf":3.3166247903554},"118":{"tf":1.7320508075688772},"121":{"tf":1.0},"125":{"tf":2.6457513110645907},"126":{"tf":1.0},"377":{"tf":1.0},"378":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.7320508075688772}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}}}},"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"125":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"118":{"tf":1.0},"119":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"v":{"df":1,"docs":{"338":{"tf":1.0}}}},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"5":{"df":1,"docs":{"380":{"tf":1.0}}},"df":5,"docs":{"0":{"tf":1.0},"252":{"tf":2.6457513110645907},"380":{"tf":3.0},"381":{"tf":3.0},"384":{"tf":1.0}}}},"t":{"df":0,"docs":{},"p":{"/":{"1":{".":{"1":{"df":3,"docs":{"377":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"/":{"/":{"1":{"2":{"7":{".":{"0":{".":{"0":{".":{"1":{":":{"7":{"8":{"7":{"8":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":1,"docs":{"384":{"tf":1.0}}}}}}}},"df":1,"docs":{"384":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"377":{"tf":1.0},"380":{"tf":1.0}}}}}}}}}},"df":10,"docs":{"15":{"tf":1.0},"163":{"tf":1.0},"374":{"tf":2.0},"375":{"tf":2.23606797749979},"376":{"tf":1.0},"377":{"tf":1.0},"378":{"tf":2.449489742783178},"379":{"tf":2.449489742783178},"380":{"tf":1.0},"381":{"tf":1.0}},"s":{":":{"/":{"/":{"c":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"m":{"df":1,"docs":{"254":{"tf":1.0}}}},"df":1,"docs":{"255":{"tf":1.0}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"d":{"df":0,"docs":{},"o":{"c":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"0":{"tf":1.4142135623730951},"255":{"tf":1.4142135623730951},"26":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":2,"docs":{"0":{"tf":1.0},"408":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"h":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"p":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"15":{"tf":1.0}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"w":{"df":0,"docs":{},"w":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"16":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"l":{"df":0,"docs":{},"y":{"(":{"&":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"355":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"355":{"tf":2.449489742783178}}}},"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"194":{"tf":1.0}}}},"df":0,"docs":{}}},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"375":{"tf":1.0}}}}}}}}}}},"i":{"/":{"df":0,"docs":{},"o":{"df":1,"docs":{"211":{"tf":1.4142135623730951}}}},"1":{"2":{"8":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"6":{"df":2,"docs":{"247":{"tf":1.0},"52":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"df":42,"docs":{"100":{"tf":1.0},"130":{"tf":2.0},"131":{"tf":1.0},"133":{"tf":1.0},"145":{"tf":1.0},"147":{"tf":1.0},"164":{"tf":2.23606797749979},"166":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"172":{"tf":1.4142135623730951},"173":{"tf":1.4142135623730951},"178":{"tf":1.4142135623730951},"185":{"tf":2.449489742783178},"189":{"tf":2.23606797749979},"190":{"tf":1.0},"247":{"tf":1.4142135623730951},"267":{"tf":1.7320508075688772},"268":{"tf":2.8284271247461903},"270":{"tf":1.7320508075688772},"273":{"tf":1.0},"286":{"tf":1.0},"287":{"tf":1.0},"299":{"tf":2.23606797749979},"309":{"tf":1.0},"331":{"tf":1.0},"338":{"tf":1.0},"346":{"tf":1.4142135623730951},"347":{"tf":2.0},"359":{"tf":1.0},"360":{"tf":2.449489742783178},"364":{"tf":2.23606797749979},"397":{"tf":1.0},"42":{"tf":1.4142135623730951},"52":{"tf":1.4142135623730951},"53":{"tf":1.4142135623730951},"55":{"tf":1.4142135623730951},"57":{"tf":1.7320508075688772},"60":{"tf":1.0},"69":{"tf":1.7320508075688772},"78":{"tf":1.0},"84":{"tf":1.0}}},"df":0,"docs":{}},"6":{"4":{"df":3,"docs":{"247":{"tf":1.4142135623730951},"42":{"tf":1.0},"52":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":2,"docs":{"101":{"tf":2.0},"52":{"tf":1.4142135623730951}}},"d":{"=":{"1":{"df":1,"docs":{"372":{"tf":1.0}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"341":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":8,"docs":{"20":{"tf":2.23606797749979},"341":{"tf":3.0},"359":{"tf":1.4142135623730951},"385":{"tf":3.0},"386":{"tf":1.0},"4":{"tf":1.0},"405":{"tf":1.0},"409":{"tf":2.449489742783178}},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":3,"docs":{"370":{"tf":2.8284271247461903},"396":{"tf":2.6457513110645907},"397":{"tf":2.8284271247461903}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"394":{"tf":1.4142135623730951}}}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":1,"docs":{"52":{"tf":1.0}}}}},"f":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"g":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":4,"docs":{"196":{"tf":1.0},"206":{"tf":3.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979}},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":3.1622776601683795}},"e":{"=":{"1":{"df":1,"docs":{"227":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"d":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"206":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"m":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"312":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":5,"docs":{"283":{"tf":1.4142135623730951},"300":{"tf":1.0},"346":{"tf":1.0},"48":{"tf":1.7320508075688772},"73":{"tf":1.4142135623730951}}}}},"p":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"t":{"df":2,"docs":{"180":{"tf":1.0},"237":{"tf":1.0}}}},"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":1,"docs":{"370":{"tf":2.23606797749979}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":29,"docs":{"100":{"tf":1.0},"159":{"tf":1.0},"172":{"tf":2.6457513110645907},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":3.0},"179":{"tf":2.8284271247461903},"180":{"tf":2.0},"189":{"tf":1.0},"190":{"tf":1.7320508075688772},"218":{"tf":1.0},"244":{"tf":1.4142135623730951},"308":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.0},"318":{"tf":1.0},"349":{"tf":1.0},"353":{"tf":1.0},"354":{"tf":1.0},"356":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"385":{"tf":1.4142135623730951},"392":{"tf":1.4142135623730951},"397":{"tf":1.0},"92":{"tf":2.449489742783178},"93":{"tf":1.0},"94":{"tf":1.4142135623730951},"95":{"tf":1.7320508075688772},"96":{"tf":2.6457513110645907}},"e":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":4,"docs":{"239":{"tf":1.0},"299":{"tf":1.0},"302":{"tf":1.0},"92":{"tf":1.0}},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"180":{"tf":1.0}}}}}}}}},"i":{"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"362":{"tf":1.0}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":2,"docs":{"188":{"tf":2.449489742783178},"190":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}},"df":1,"docs":{"261":{"tf":1.4142135623730951}}}}}}},"n":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":92,"docs":{"101":{"tf":1.0},"105":{"tf":1.0},"114":{"tf":1.0},"115":{"tf":1.0},"118":{"tf":1.0},"122":{"tf":1.0},"132":{"tf":1.0},"140":{"tf":1.0},"141":{"tf":1.0},"153":{"tf":1.0},"154":{"tf":1.0},"155":{"tf":1.0},"158":{"tf":1.0},"159":{"tf":2.23606797749979},"164":{"tf":1.0},"169":{"tf":1.0},"170":{"tf":1.0},"182":{"tf":1.0},"184":{"tf":1.0},"186":{"tf":1.0},"187":{"tf":1.0},"196":{"tf":1.7320508075688772},"197":{"tf":1.7320508075688772},"198":{"tf":1.4142135623730951},"199":{"tf":1.4142135623730951},"200":{"tf":1.7320508075688772},"204":{"tf":1.4142135623730951},"205":{"tf":1.7320508075688772},"206":{"tf":1.7320508075688772},"209":{"tf":1.7320508075688772},"214":{"tf":1.4142135623730951},"215":{"tf":1.0},"216":{"tf":1.0},"219":{"tf":1.7320508075688772},"220":{"tf":1.0},"223":{"tf":1.4142135623730951},"224":{"tf":2.0},"227":{"tf":1.4142135623730951},"234":{"tf":1.0},"235":{"tf":1.0},"236":{"tf":1.4142135623730951},"237":{"tf":1.4142135623730951},"241":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.7320508075688772},"268":{"tf":1.0},"270":{"tf":1.0},"272":{"tf":1.0},"276":{"tf":1.0},"277":{"tf":1.4142135623730951},"279":{"tf":1.0},"280":{"tf":1.0},"283":{"tf":1.7320508075688772},"284":{"tf":1.0},"286":{"tf":1.0},"293":{"tf":1.4142135623730951},"295":{"tf":1.0},"299":{"tf":1.4142135623730951},"314":{"tf":1.0},"32":{"tf":1.4142135623730951},"329":{"tf":1.0},"330":{"tf":1.0},"332":{"tf":1.4142135623730951},"339":{"tf":1.0},"347":{"tf":1.4142135623730951},"355":{"tf":2.0},"356":{"tf":1.0},"36":{"tf":1.0},"365":{"tf":1.0},"370":{"tf":1.4142135623730951},"380":{"tf":1.0},"381":{"tf":1.0},"385":{"tf":2.23606797749979},"387":{"tf":1.4142135623730951},"40":{"tf":1.0},"42":{"tf":1.0},"48":{"tf":1.0},"50":{"tf":1.4142135623730951},"51":{"tf":1.0},"54":{"tf":1.0},"55":{"tf":1.4142135623730951},"56":{"tf":1.0},"57":{"tf":1.4142135623730951},"60":{"tf":2.449489742783178},"61":{"tf":1.0},"69":{"tf":1.0},"72":{"tf":1.0},"73":{"tf":1.4142135623730951},"74":{"tf":1.0},"77":{"tf":1.0},"87":{"tf":1.0},"90":{"tf":2.6457513110645907}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"376":{"tf":1.4142135623730951}}}}},"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":14,"docs":{"154":{"tf":1.4142135623730951},"217":{"tf":1.0},"219":{"tf":1.4142135623730951},"255":{"tf":1.0},"256":{"tf":1.0},"258":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0},"329":{"tf":1.4142135623730951},"371":{"tf":1.4142135623730951},"397":{"tf":1.0},"40":{"tf":1.4142135623730951},"53":{"tf":1.4142135623730951},"61":{"tf":1.7320508075688772}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"397":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"o":{"df":1,"docs":{"255":{"tf":1.0}},"r":{"df":0,"docs":{},"m":{"df":2,"docs":{"408":{"tf":1.0},"86":{"tf":1.0}}}}}},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"364":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"138":{"tf":1.0},"69":{"tf":1.0}}}}},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":6,"docs":{"370":{"tf":1.0},"38":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":2.0},"45":{"tf":2.0}}}}},"s":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"377":{"tf":1.0}}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":4,"docs":{"145":{"tf":1.0},"147":{"tf":1.0},"148":{"tf":1.0},"268":{"tf":1.0}}}}},"t":{"a":{"df":0,"docs":{},"l":{"df":4,"docs":{"15":{"tf":1.4142135623730951},"262":{"tf":3.1622776601683795},"263":{"tf":1.0},"416":{"tf":1.0}}}},"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"407":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":2,"docs":{"173":{"tf":1.4142135623730951},"52":{"tf":1.0}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"209":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}},"l":{"df":1,"docs":{"377":{"tf":1.0}}},"r":{"a":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"92":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"f":{"a":{"c":{"df":2,"docs":{"1":{"tf":1.0},"347":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"265":{"tf":1.0},"282":{"tf":1.0}}}}},"n":{"a":{"df":0,"docs":{},"l":{"_":{"a":{"d":{"d":{"df":1,"docs":{"208":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"209":{"tf":1.0}}}}},"o":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"239":{"tf":1.0},"242":{"tf":1.0}}}}},"df":0,"docs":{}},"r":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"u":{"c":{"df":2,"docs":{"197":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"d":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"43":{"tf":1.0}}}}}}},"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"234":{"tf":2.23606797749979}}}}}}}}}},"o":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"156":{"tf":1.0},"159":{"tf":2.449489742783178}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"156":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}}}}},"s":{"df":0,"docs":{},"t":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"(":{")":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"36":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":18,"docs":{"156":{"tf":1.0},"213":{"tf":1.0},"214":{"tf":1.4142135623730951},"215":{"tf":1.4142135623730951},"216":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":2.449489742783178},"220":{"tf":2.0},"221":{"tf":1.4142135623730951},"223":{"tf":2.0},"224":{"tf":2.8284271247461903},"226":{"tf":1.0},"227":{"tf":2.449489742783178},"230":{"tf":1.0},"245":{"tf":1.0},"33":{"tf":1.4142135623730951},"35":{"tf":1.4142135623730951},"414":{"tf":1.0}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"120":{"tf":1.0}}}}}}}}},"p":{"a":{"d":{"d":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"v":{"4":{"df":1,"docs":{"100":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":2,"docs":{"100":{"tf":2.449489742783178},"162":{"tf":1.0}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{":":{":":{"df":0,"docs":{},"v":{"4":{"df":1,"docs":{"100":{"tf":1.4142135623730951}}},"6":{"df":1,"docs":{"100":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":2,"docs":{"100":{"tf":2.449489742783178},"99":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":4,"docs":{"100":{"tf":2.449489742783178},"162":{"tf":2.23606797749979},"376":{"tf":1.0},"99":{"tf":2.8284271247461903}},"v":{"4":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"6":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":2,"docs":{"332":{"tf":1.4142135623730951},"335":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"150":{"tf":1.0}}}}},"s":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":1,"docs":{"227":{"tf":1.7320508075688772}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"52":{"tf":1.7320508075688772}}}}},"t":{"_":{"a":{"d":{"d":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":2,"docs":{"198":{"tf":1.0},"209":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":4,"docs":{"196":{"tf":1.7320508075688772},"201":{"tf":1.0},"206":{"tf":1.0},"261":{"tf":1.0}}}}}}},"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"411":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"1":{"df":1,"docs":{"178":{"tf":1.7320508075688772}}},"2":{"df":1,"docs":{"178":{"tf":2.23606797749979}}},"df":6,"docs":{"178":{"tf":2.449489742783178},"227":{"tf":1.4142135623730951},"239":{"tf":2.23606797749979},"353":{"tf":2.449489742783178},"371":{"tf":1.0},"76":{"tf":1.0}}},"r":{"(":{")":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"76":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"<":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"=":{"df":0,"docs":{},"t":{"df":1,"docs":{"397":{"tf":1.0}}}},"df":1,"docs":{"244":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"353":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"df":12,"docs":{"146":{"tf":1.0},"179":{"tf":1.0},"238":{"tf":1.0},"239":{"tf":3.0},"240":{"tf":1.7320508075688772},"241":{"tf":1.4142135623730951},"244":{"tf":2.0},"248":{"tf":1.0},"353":{"tf":3.4641016151377544},"364":{"tf":1.0},"388":{"tf":1.0},"76":{"tf":1.7320508075688772}}}}},"’":{"df":0,"docs":{},"m":{"df":1,"docs":{"216":{"tf":1.0}}}}},"j":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"53":{"tf":1.0}}}}},"df":0,"docs":{}}},"v":{"a":{"df":1,"docs":{"198":{"tf":1.0}},"s":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":2,"docs":{"24":{"tf":1.4142135623730951},"60":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"b":{"df":2,"docs":{"385":{"tf":4.58257569495584},"388":{"tf":1.4142135623730951}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"n":{"df":5,"docs":{"292":{"tf":2.8284271247461903},"299":{"tf":1.0},"386":{"tf":1.0},"387":{"tf":2.8284271247461903},"388":{"tf":2.0}},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"l":{"df":2,"docs":{"292":{"tf":2.0},"385":{"tf":2.449489742783178}},"e":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"s":{"df":1,"docs":{"24":{"tf":1.0}}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"53":{"tf":1.0}}}},"n":{"df":0,"docs":{},"e":{"df":1,"docs":{"53":{"tf":1.0}}}}}},"k":{"b":{"df":1,"docs":{"262":{"tf":1.0}}},"df":2,"docs":{"144":{"tf":1.0},"237":{"tf":1.0}},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":1,"docs":{"377":{"tf":1.0}}}},"y":{"df":2,"docs":{"26":{"tf":1.0},"81":{"tf":1.0}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":2,"docs":{"293":{"tf":1.0},"394":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"360":{"tf":3.0}}}}}}},"n":{"d":{"df":5,"docs":{"100":{"tf":2.0},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"253":{"tf":2.23606797749979},"43":{"tf":1.0}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"176":{"tf":1.0}}}}}},"l":{"a":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"314":{"tf":1.4142135623730951}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"61":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"61":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"u":{"b":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"#":{"df":0,"docs":{},"p":{"a":{"c":{"df":0,"docs":{},"k":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"255":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":2,"docs":{"255":{"tf":1.0},"26":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"/":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":1,"docs":{"0":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"16":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"u":{"/":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":1,"docs":{"0":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"g":{"df":5,"docs":{"2":{"tf":1.0},"26":{"tf":1.0},"377":{"tf":1.0},"4":{"tf":1.0},"409":{"tf":1.0}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{".":{"c":{"a":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"(":{"&":{"df":0,"docs":{},"s":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"197":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"197":{"tf":1.0}}}}},"df":0,"docs":{}}}},"_":{"c":{"a":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"197":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{">":{"(":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"169":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"_":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"169":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"169":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":2,"docs":{"167":{"tf":2.23606797749979},"169":{"tf":2.6457513110645907}}}}}}},"s":{"df":0,"docs":{},"t":{"_":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"159":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":2,"docs":{"159":{"tf":1.0},"339":{"tf":1.0}}}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"150":{"tf":1.0}}}}},"z":{"df":0,"docs":{},"i":{"df":1,"docs":{"238":{"tf":1.0}}}}},"df":1,"docs":{"139":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"f":{".":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"287":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"df":1,"docs":{"287":{"tf":5.656854249492381}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":1,"docs":{"198":{"tf":2.449489742783178}}}},"n":{"df":8,"docs":{"140":{"tf":1.0},"154":{"tf":1.0},"219":{"tf":1.0},"347":{"tf":1.4142135623730951},"396":{"tf":1.0},"397":{"tf":2.0},"53":{"tf":1.0},"77":{"tf":1.4142135623730951}},"g":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"380":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"s":{"df":2,"docs":{"200":{"tf":1.4142135623730951},"42":{"tf":1.0}}}},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"107":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"337":{"tf":1.0}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":2,"docs":{"190":{"tf":1.0},"250":{"tf":3.0}}}}}},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":3,"docs":{"209":{"tf":1.4142135623730951},"218":{"tf":2.449489742783178},"261":{"tf":1.0}}}},"c":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":5,"docs":{"113":{"tf":1.0},"196":{"tf":1.0},"261":{"tf":1.4142135623730951},"370":{"tf":1.4142135623730951},"385":{"tf":1.0}},"r":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":3,"docs":{"196":{"tf":1.0},"261":{"tf":1.0},"40":{"tf":1.0}}}}},"df":0,"docs":{}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":1,"docs":{"255":{"tf":2.8284271247461903}}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":5,"docs":{"166":{"tf":1.0},"185":{"tf":1.4142135623730951},"190":{"tf":1.4142135623730951},"191":{"tf":1.0},"86":{"tf":2.449489742783178}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"187":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"187":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":14,"docs":{"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":1.0},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"188":{"tf":1.0},"189":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":7,"docs":{"176":{"tf":1.0},"177":{"tf":2.0},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"187":{"tf":1.7320508075688772},"190":{"tf":1.4142135623730951},"192":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"223":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"192":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"283":{"tf":2.8284271247461903}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"e":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"(":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"245":{"tf":1.0}}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"58":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":7,"docs":{"1":{"tf":1.0},"159":{"tf":1.0},"224":{"tf":2.0},"227":{"tf":1.7320508075688772},"252":{"tf":1.0},"36":{"tf":1.0},"377":{"tf":1.4142135623730951}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"102":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"k":{"df":1,"docs":{"286":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"15":{"tf":1.0}}}}},"t":{"df":1,"docs":{"408":{"tf":1.0}}},"u":{"df":0,"docs":{},"x":{"df":8,"docs":{"12":{"tf":1.0},"15":{"tf":2.0},"17":{"tf":1.0},"21":{"tf":1.0},"22":{"tf":1.0},"24":{"tf":1.7320508075688772},"255":{"tf":1.0},"27":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"p":{"df":1,"docs":{"268":{"tf":1.7320508075688772}}},"t":{"df":92,"docs":{"100":{"tf":2.6457513110645907},"101":{"tf":1.7320508075688772},"102":{"tf":1.0},"103":{"tf":1.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":1.7320508075688772},"123":{"tf":1.0},"125":{"tf":1.4142135623730951},"139":{"tf":1.4142135623730951},"146":{"tf":1.0},"150":{"tf":1.0},"153":{"tf":1.4142135623730951},"158":{"tf":1.4142135623730951},"162":{"tf":1.0},"164":{"tf":1.0},"167":{"tf":1.4142135623730951},"169":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":2.0},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"187":{"tf":1.7320508075688772},"190":{"tf":1.4142135623730951},"192":{"tf":1.0},"196":{"tf":1.4142135623730951},"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"199":{"tf":2.23606797749979},"200":{"tf":2.0},"201":{"tf":1.0},"206":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"220":{"tf":1.0},"224":{"tf":1.4142135623730951},"236":{"tf":3.605551275463989},"237":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":2.23606797749979},"263":{"tf":1.0},"268":{"tf":5.916079783099616},"279":{"tf":2.0},"283":{"tf":1.4142135623730951},"284":{"tf":1.7320508075688772},"286":{"tf":2.6457513110645907},"292":{"tf":1.0},"309":{"tf":2.449489742783178},"32":{"tf":1.7320508075688772},"334":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"347":{"tf":1.0},"353":{"tf":1.0},"356":{"tf":1.7320508075688772},"36":{"tf":1.0},"360":{"tf":2.23606797749979},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":1.7320508075688772},"365":{"tf":1.7320508075688772},"370":{"tf":1.7320508075688772},"385":{"tf":2.6457513110645907},"387":{"tf":2.0},"388":{"tf":1.4142135623730951},"416":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"44":{"tf":1.0},"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":1.7320508075688772},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.3166247903554},"61":{"tf":2.23606797749979},"68":{"tf":1.0},"69":{"tf":2.449489742783178},"72":{"tf":1.7320508075688772},"73":{"tf":2.8284271247461903},"74":{"tf":2.0},"77":{"tf":2.0},"84":{"tf":1.0},"85":{"tf":1.0},"90":{"tf":1.4142135623730951},"92":{"tf":1.0},"95":{"tf":1.0},"99":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"s":{"/":{"c":{"df":0,"docs":{},"h":{"0":{"2":{"df":14,"docs":{"122":{"tf":1.4142135623730951},"32":{"tf":1.7320508075688772},"33":{"tf":2.0},"34":{"tf":1.0},"35":{"tf":1.0},"36":{"tf":1.4142135623730951},"361":{"tf":1.0},"37":{"tf":1.0},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.7320508075688772},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951}}},"3":{"df":12,"docs":{"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"51":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":2.0},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.605551275463989},"61":{"tf":3.0}}},"4":{"df":10,"docs":{"67":{"tf":1.0},"68":{"tf":1.0},"69":{"tf":2.6457513110645907},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":2.23606797749979},"73":{"tf":2.6457513110645907},"74":{"tf":2.0},"76":{"tf":2.23606797749979},"77":{"tf":2.449489742783178}}},"5":{"df":13,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}}},"6":{"df":10,"docs":{"100":{"tf":3.0},"101":{"tf":1.7320508075688772},"102":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"268":{"tf":1.0},"99":{"tf":1.0}}},"7":{"df":12,"docs":{"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0}}},"8":{"df":14,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":2.0},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.449489742783178},"140":{"tf":2.0},"141":{"tf":1.0},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":1.7320508075688772}}},"9":{"df":8,"docs":{"153":{"tf":1.4142135623730951},"154":{"tf":1.4142135623730951},"155":{"tf":1.7320508075688772},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":2.8284271247461903},"162":{"tf":1.0},"164":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"1":{"0":{"df":19,"docs":{"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.0}}},"1":{"df":11,"docs":{"196":{"tf":2.449489742783178},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"199":{"tf":2.23606797749979},"200":{"tf":2.6457513110645907},"201":{"tf":1.0},"204":{"tf":1.7320508075688772},"205":{"tf":2.0},"206":{"tf":1.7320508075688772},"208":{"tf":1.4142135623730951},"209":{"tf":2.449489742783178}}},"2":{"df":14,"docs":{"213":{"tf":1.0},"214":{"tf":1.4142135623730951},"215":{"tf":1.4142135623730951},"216":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":2.449489742783178},"220":{"tf":2.0},"221":{"tf":1.4142135623730951},"223":{"tf":2.0},"224":{"tf":2.8284271247461903},"226":{"tf":1.0},"227":{"tf":2.449489742783178},"230":{"tf":1.0},"245":{"tf":1.0}}},"3":{"df":11,"docs":{"234":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"236":{"tf":2.23606797749979},"237":{"tf":2.23606797749979},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.7320508075688772},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.0}}},"4":{"df":4,"docs":{"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"260":{"tf":1.0},"261":{"tf":2.449489742783178}}},"5":{"df":15,"docs":{"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.4142135623730951},"271":{"tf":1.0},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.7320508075688772},"280":{"tf":1.4142135623730951},"283":{"tf":2.8284271247461903},"284":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":2.23606797749979}}},"6":{"df":8,"docs":{"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":2.23606797749979},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.449489742783178}}},"7":{"df":10,"docs":{"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":2.23606797749979},"316":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":2.0}}},"8":{"df":14,"docs":{"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.4142135623730951},"330":{"tf":1.7320508075688772},"331":{"tf":1.4142135623730951},"332":{"tf":2.23606797749979},"334":{"tf":1.0},"335":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":2.449489742783178},"339":{"tf":3.1622776601683795},"340":{"tf":1.7320508075688772},"341":{"tf":1.0}}},"9":{"df":16,"docs":{"346":{"tf":1.7320508075688772},"347":{"tf":2.8284271247461903},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"353":{"tf":1.7320508075688772},"354":{"tf":1.4142135623730951},"355":{"tf":3.1622776601683795},"356":{"tf":2.0},"357":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.0},"362":{"tf":2.0},"364":{"tf":2.0},"365":{"tf":1.7320508075688772},"368":{"tf":1.0},"370":{"tf":2.6457513110645907}}},"df":0,"docs":{}},"2":{"0":{"df":10,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.4142135623730951},"381":{"tf":1.7320508075688772},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":4.47213595499958},"387":{"tf":2.449489742783178},"388":{"tf":2.23606797749979}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"t":{"df":0,"docs":{},"e":{"8":{"6":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"334":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"227":{"tf":1.0}}}}}}}}},"o":{"b":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"211":{"tf":1.0}}}},"df":0,"docs":{}},"c":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"331":{"tf":1.0}}}},"df":0,"docs":{},"k":{"df":2,"docs":{"299":{"tf":2.449489742783178},"385":{"tf":1.4142135623730951}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"d":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"df":1,"docs":{"299":{"tf":1.0}}}}}}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"254":{"tf":1.4142135623730951}}}}},"l":{"df":1,"docs":{"139":{"tf":1.0}}},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"186":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"189":{"tf":1.0}}}},"<":{"'":{"a":{"df":1,"docs":{"189":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":6,"docs":{"184":{"tf":2.449489742783178},"185":{"tf":1.0},"186":{"tf":3.0},"187":{"tf":1.7320508075688772},"189":{"tf":1.4142135623730951},"192":{"tf":1.0}}}}}}},"o":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"61":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"b":{"a":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":6,"docs":{"361":{"tf":1.4142135623730951},"392":{"tf":1.0},"396":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":3.3166247903554}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"43":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"s":{"df":2,"docs":{"110":{"tf":1.7320508075688772},"24":{"tf":1.4142135623730951}}},"u":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":1,"docs":{"102":{"tf":1.0}}}}},"df":0,"docs":{}}},"m":{".":{"c":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":1,"docs":{"100":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"c":{"df":1,"docs":{"377":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"377":{"tf":1.0}}}}}}}},"o":{"df":7,"docs":{"12":{"tf":1.0},"15":{"tf":2.0},"17":{"tf":1.0},"21":{"tf":1.0},"22":{"tf":1.0},"24":{"tf":1.4142135623730951},"27":{"tf":1.0}}},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"90":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"90":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"368":{"tf":1.0}}}}}}}},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":3,"docs":{"366":{"tf":1.0},"368":{"tf":2.449489742783178},"372":{"tf":2.0}}}}}},"df":4,"docs":{"369":{"tf":1.0},"370":{"tf":2.0},"371":{"tf":1.0},"393":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":2,"docs":{"22":{"tf":1.4142135623730951},"24":{"tf":2.0}}}},"p":{"d":{"b":{"df":1,"docs":{"24":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"r":{"df":9,"docs":{"110":{"tf":1.4142135623730951},"112":{"tf":1.0},"218":{"tf":2.23606797749979},"22":{"tf":2.23606797749979},"24":{"tf":2.0},"26":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":1.0},"385":{"tf":1.0}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"220":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":60,"docs":{"110":{"tf":1.4142135623730951},"154":{"tf":1.0},"157":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":3.872983346207417},"172":{"tf":1.0},"173":{"tf":1.0},"184":{"tf":1.0},"186":{"tf":1.0},"188":{"tf":1.0},"214":{"tf":1.0},"216":{"tf":1.4142135623730951},"217":{"tf":1.7320508075688772},"218":{"tf":3.872983346207417},"219":{"tf":2.449489742783178},"22":{"tf":1.7320508075688772},"220":{"tf":2.6457513110645907},"221":{"tf":1.0},"23":{"tf":2.23606797749979},"230":{"tf":1.0},"234":{"tf":1.0},"24":{"tf":2.0},"244":{"tf":1.0},"26":{"tf":1.0},"261":{"tf":1.0},"267":{"tf":1.0},"272":{"tf":1.0},"273":{"tf":1.0},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.0},"280":{"tf":1.4142135623730951},"286":{"tf":1.4142135623730951},"287":{"tf":1.0},"291":{"tf":2.0},"292":{"tf":3.1622776601683795},"314":{"tf":1.0},"322":{"tf":2.449489742783178},"33":{"tf":1.0},"355":{"tf":1.4142135623730951},"364":{"tf":1.4142135623730951},"377":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.4142135623730951},"394":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"408":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"44":{"tf":1.0},"48":{"tf":1.0},"53":{"tf":1.0},"54":{"tf":2.0},"56":{"tf":1.0},"67":{"tf":1.4142135623730951},"70":{"tf":1.0},"86":{"tf":1.0},"89":{"tf":1.4142135623730951},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951}}}},"k":{"df":0,"docs":{},"e":{"df":2,"docs":{"196":{"tf":1.0},"268":{"tf":1.0}}}},"n":{"a":{"df":0,"docs":{},"g":{"df":12,"docs":{"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.0}}}}}}}},"p":{"(":{"df":0,"docs":{},"|":{"(":{"&":{"c":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":6,"docs":{"128":{"tf":1.4142135623730951},"144":{"tf":1.4142135623730951},"241":{"tf":2.449489742783178},"364":{"tf":2.6457513110645907},"377":{"tf":1.0},"381":{"tf":1.0}}},"r":{"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"53":{"tf":1.0}}}},"df":0,"docs":{},"k":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":1,"docs":{"252":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"414":{"tf":2.0},"415":{"tf":1.0},"417":{"tf":1.0}}}}}},"t":{"c":{"df":0,"docs":{},"h":{"(":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"394":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"105":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"105":{"tf":1.0},"107":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":44,"docs":{"10":{"tf":1.0},"101":{"tf":1.0},"102":{"tf":4.0},"103":{"tf":1.7320508075688772},"104":{"tf":2.8284271247461903},"105":{"tf":2.0},"106":{"tf":1.7320508075688772},"107":{"tf":3.3166247903554},"108":{"tf":1.0},"132":{"tf":1.0},"134":{"tf":1.0},"155":{"tf":2.23606797749979},"156":{"tf":2.449489742783178},"157":{"tf":2.6457513110645907},"158":{"tf":1.4142135623730951},"159":{"tf":3.3166247903554},"237":{"tf":1.0},"244":{"tf":1.0},"31":{"tf":1.0},"321":{"tf":1.0},"322":{"tf":1.7320508075688772},"324":{"tf":1.4142135623730951},"326":{"tf":3.3166247903554},"327":{"tf":2.0},"330":{"tf":1.0},"332":{"tf":1.0},"335":{"tf":3.4641016151377544},"336":{"tf":1.4142135623730951},"338":{"tf":2.23606797749979},"339":{"tf":1.7320508075688772},"340":{"tf":2.8284271247461903},"342":{"tf":1.0},"361":{"tf":2.6457513110645907},"368":{"tf":1.7320508075688772},"384":{"tf":1.4142135623730951},"385":{"tf":1.0},"392":{"tf":1.0},"394":{"tf":2.23606797749979},"396":{"tf":1.0},"42":{"tf":2.8284271247461903},"45":{"tf":2.0},"46":{"tf":1.0},"60":{"tf":1.4142135623730951},"98":{"tf":1.0}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"224":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":17,"docs":{"100":{"tf":1.4142135623730951},"102":{"tf":1.0},"103":{"tf":1.0},"104":{"tf":2.0},"107":{"tf":1.0},"268":{"tf":1.0},"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.4142135623730951},"330":{"tf":1.7320508075688772},"331":{"tf":1.4142135623730951},"332":{"tf":2.23606797749979},"335":{"tf":1.0},"338":{"tf":2.23606797749979},"339":{"tf":3.1622776601683795},"340":{"tf":1.7320508075688772},"341":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":12,"docs":{"100":{"tf":2.6457513110645907},"101":{"tf":1.7320508075688772},"102":{"tf":1.0},"103":{"tf":1.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":1.7320508075688772},"334":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"99":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":1,"docs":{"1":{"tf":1.0}}}}},"df":0,"docs":{}}},"x":{"df":3,"docs":{"107":{"tf":2.0},"283":{"tf":1.7320508075688772},"377":{"tf":1.0}}},"y":{"b":{"df":1,"docs":{"362":{"tf":1.0}}},"df":0,"docs":{}}},"df":3,"docs":{"100":{"tf":1.0},"274":{"tf":1.4142135623730951},"299":{"tf":1.4142135623730951}},"e":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":3,"docs":{"196":{"tf":1.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979}}}}}},"df":0,"docs":{},"m":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":7,"docs":{"100":{"tf":2.23606797749979},"158":{"tf":1.4142135623730951},"268":{"tf":1.7320508075688772},"297":{"tf":1.0},"338":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"199":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"199":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"338":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":1,"docs":{"341":{"tf":1.0}}}}}}},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":2,"docs":{"268":{"tf":1.0},"338":{"tf":1.0}}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"268":{"tf":1.0},"338":{"tf":1.4142135623730951}}}}}},"w":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"338":{"tf":1.0}},"e":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":1,"docs":{"100":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":2.23606797749979}}}}}}},"t":{"a":{"d":{"a":{"df":0,"docs":{},"t":{"a":{"df":1,"docs":{"255":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":1,"docs":{"397":{"tf":1.4142135623730951}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"354":{"tf":2.23606797749979},"359":{"tf":1.4142135623730951},"360":{"tf":1.0}}}},"h":{"df":0,"docs":{},"o":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"176":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"36":{"tf":1.0}}}},"df":0,"docs":{}}},"df":5,"docs":{"100":{"tf":1.0},"239":{"tf":1.0},"378":{"tf":1.0},"397":{"tf":1.0},"92":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"177":{"tf":1.0}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"1":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"190":{"tf":1.0}}}}},"3":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"190":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"i":{"d":{"df":1,"docs":{"347":{"tf":3.1622776601683795}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":3,"docs":{"354":{"tf":2.449489742783178},"359":{"tf":1.4142135623730951},"360":{"tf":1.0}}}}}}}},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{":":{":":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":1,"docs":{"221":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":8,"docs":{"212":{"tf":2.23606797749979},"213":{"tf":1.7320508075688772},"215":{"tf":1.0},"221":{"tf":1.4142135623730951},"222":{"tf":1.0},"225":{"tf":1.0},"227":{"tf":1.0},"229":{"tf":1.0}}}}}},"m":{"df":1,"docs":{"26":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"s":{"df":4,"docs":{"223":{"tf":1.0},"255":{"tf":1.0},"347":{"tf":1.0},"86":{"tf":1.4142135623730951}}}},"t":{"df":1,"docs":{"255":{"tf":2.23606797749979}}},"x":{"df":1,"docs":{"253":{"tf":2.23606797749979}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"172":{"tf":1.7320508075688772}}}}}},"k":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":2,"docs":{"21":{"tf":2.0},"260":{"tf":1.0}}}}},"df":0,"docs":{}},"m":{"df":1,"docs":{"17":{"tf":1.0}}},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"283":{"tf":1.0}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":3.1622776601683795}}}}}}}}}}},"d":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"126":{"tf":1.4142135623730951},"209":{"tf":1.0}}}},"df":7,"docs":{"112":{"tf":2.8284271247461903},"113":{"tf":1.0},"115":{"tf":1.4142135623730951},"125":{"tf":2.0},"126":{"tf":1.0},"209":{"tf":1.0},"392":{"tf":1.0}},"e":{"df":2,"docs":{"150":{"tf":1.0},"377":{"tf":1.0}},"l":{"df":1,"docs":{"414":{"tf":1.0}}}},"u":{"df":0,"docs":{},"l":{"df":3,"docs":{"125":{"tf":1.0},"126":{"tf":1.0},"127":{"tf":1.0}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"p":{"df":0,"docs":{},"h":{"df":1,"docs":{"224":{"tf":1.0}}}}}}}},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"53":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"e":{"df":9,"docs":{"177":{"tf":1.4142135623730951},"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"255":{"tf":1.0},"26":{"tf":1.0},"260":{"tf":1.0},"261":{"tf":2.449489742783178},"297":{"tf":1.0},"86":{"tf":1.0}}}},"v":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"106":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":6,"docs":{"100":{"tf":1.0},"236":{"tf":2.23606797749979},"293":{"tf":3.4641016151377544},"294":{"tf":1.0},"299":{"tf":1.0},"392":{"tf":1.0}}}},"z":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"a":{"/":{"5":{".":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"p":{"df":0,"docs":{},"s":{"c":{":":{":":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"294":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":2,"docs":{"294":{"tf":1.0},"297":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"g":{"df":2,"docs":{"200":{"tf":1.4142135623730951},"338":{"tf":1.0}}},"v":{"c":{"df":2,"docs":{"16":{"tf":1.0},"416":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":8,"docs":{"102":{"tf":1.0},"139":{"tf":1.0},"205":{"tf":1.0},"224":{"tf":1.0},"294":{"tf":1.0},"336":{"tf":1.0},"55":{"tf":1.4142135623730951},"73":{"tf":1.4142135623730951}}}}}}},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"48":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"48":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"a":{"b":{"df":0,"docs":{},"l":{"df":4,"docs":{"185":{"tf":1.0},"265":{"tf":1.0},"282":{"tf":1.0},"73":{"tf":1.4142135623730951}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"283":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"283":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"t":{"df":1,"docs":{"68":{"tf":1.0}}}},"df":25,"docs":{"131":{"tf":1.0},"148":{"tf":1.0},"185":{"tf":1.0},"189":{"tf":1.0},"244":{"tf":1.0},"247":{"tf":1.0},"275":{"tf":1.7320508075688772},"283":{"tf":1.4142135623730951},"320":{"tf":1.0},"34":{"tf":2.0},"346":{"tf":1.4142135623730951},"347":{"tf":1.0},"348":{"tf":1.0},"35":{"tf":1.4142135623730951},"368":{"tf":1.0},"387":{"tf":1.0},"392":{"tf":1.0},"396":{"tf":2.0},"42":{"tf":1.0},"48":{"tf":1.7320508075688772},"49":{"tf":1.0},"50":{"tf":2.23606797749979},"73":{"tf":2.449489742783178},"92":{"tf":1.0},"93":{"tf":1.4142135623730951}},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"299":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":6,"docs":{"284":{"tf":1.4142135623730951},"299":{"tf":4.242640687119285},"300":{"tf":2.6457513110645907},"303":{"tf":1.4142135623730951},"305":{"tf":1.0},"385":{"tf":1.0}}}},"df":2,"docs":{"299":{"tf":1.0},"385":{"tf":2.23606797749979}},"g":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"d":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}},"df":2,"docs":{"299":{"tf":1.7320508075688772},"300":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"u":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"299":{"tf":1.0}}}},"df":0,"docs":{}}}},"y":{"_":{"c":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"252":{"tf":2.449489742783178}},"e":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{":":{":":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"253":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"253":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"272":{"tf":1.0}}}}}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"274":{"tf":2.449489742783178}}}}},"t":{"df":4,"docs":{"269":{"tf":1.0},"272":{"tf":2.23606797749979},"273":{"tf":1.7320508075688772},"274":{"tf":1.4142135623730951}}}},"df":2,"docs":{"272":{"tf":2.0},"273":{"tf":1.0}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"407":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}}}},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"196":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"196":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":10,"docs":{"199":{"tf":1.0},"227":{"tf":1.0},"24":{"tf":1.0},"255":{"tf":2.0},"26":{"tf":1.0},"273":{"tf":1.0},"274":{"tf":1.0},"367":{"tf":1.0},"370":{"tf":3.1622776601683795},"86":{"tf":2.0}}}},"n":{"df":2,"docs":{"400":{"tf":1.0},"401":{"tf":1.4142135623730951}}},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":1,"docs":{"377":{"tf":1.0}}}}}},"df":6,"docs":{"340":{"tf":2.0},"378":{"tf":1.0},"385":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"52":{"tf":2.0},"62":{"tf":1.0}},"e":{"df":0,"docs":{},"g":{"df":1,"docs":{"396":{"tf":1.0}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"361":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":3,"docs":{"343":{"tf":1.0},"361":{"tf":2.23606797749979},"385":{"tf":1.7320508075688772}}}}},"w":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"32":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"32":{"tf":1.0},"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"387":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"32":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"339":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"df":30,"docs":{"110":{"tf":1.7320508075688772},"113":{"tf":1.0},"138":{"tf":1.0},"145":{"tf":1.0},"164":{"tf":2.0},"176":{"tf":1.0},"177":{"tf":1.4142135623730951},"178":{"tf":1.0},"180":{"tf":1.0},"196":{"tf":1.4142135623730951},"200":{"tf":1.4142135623730951},"212":{"tf":1.7320508075688772},"218":{"tf":2.0},"219":{"tf":2.0},"26":{"tf":2.449489742783178},"260":{"tf":1.4142135623730951},"261":{"tf":1.0},"27":{"tf":1.0},"272":{"tf":1.4142135623730951},"283":{"tf":1.4142135623730951},"299":{"tf":1.4142135623730951},"317":{"tf":1.4142135623730951},"32":{"tf":1.7320508075688772},"34":{"tf":2.0},"370":{"tf":1.7320508075688772},"376":{"tf":1.4142135623730951},"385":{"tf":3.1622776601683795},"410":{"tf":1.0},"48":{"tf":1.0},"95":{"tf":1.4142135623730951}},"s":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"l":{"df":5,"docs":{"175":{"tf":1.4142135623730951},"176":{"tf":2.0},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":6,"docs":{"343":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"357":{"tf":2.23606797749979},"358":{"tf":1.4142135623730951},"359":{"tf":3.0},"360":{"tf":1.0}}}}}},"x":{"df":0,"docs":{},"t":{"(":{"&":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":1,"docs":{"355":{"tf":1.0}}}}},"df":0,"docs":{}},"df":6,"docs":{"159":{"tf":1.7320508075688772},"239":{"tf":3.1622776601683795},"240":{"tf":2.0},"244":{"tf":2.23606797749979},"353":{"tf":2.0},"381":{"tf":1.0}}}}},"h":{"df":0,"docs":{},"i":{"df":1,"docs":{"159":{"tf":1.0}}}},"i":{"c":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"a":{"df":1,"docs":{"1":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":7,"docs":{"10":{"tf":1.0},"412":{"tf":1.7320508075688772},"413":{"tf":1.0},"414":{"tf":3.605551275463989},"415":{"tf":1.0},"416":{"tf":2.449489742783178},"417":{"tf":1.0}}}}}}},"l":{"df":2,"docs":{"268":{"tf":2.449489742783178},"286":{"tf":1.7320508075688772}}}},"o":{"_":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":1,"docs":{"347":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}},"b":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"i":{"df":3,"docs":{"216":{"tf":1.0},"227":{"tf":1.0},"230":{"tf":1.0}}}},"df":0,"docs":{}}},"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"287":{"tf":3.7416573867739413}}}},"df":0,"docs":{},"n":{"df":1,"docs":{"105":{"tf":1.4142135623730951}},"e":{"df":28,"docs":{"101":{"tf":2.8284271247461903},"104":{"tf":2.23606797749979},"105":{"tf":1.4142135623730951},"107":{"tf":1.0},"132":{"tf":1.7320508075688772},"146":{"tf":1.0},"159":{"tf":2.0},"163":{"tf":1.0},"171":{"tf":1.4142135623730951},"173":{"tf":1.4142135623730951},"234":{"tf":1.0},"237":{"tf":1.7320508075688772},"239":{"tf":1.0},"244":{"tf":1.0},"287":{"tf":2.23606797749979},"320":{"tf":1.4142135623730951},"321":{"tf":1.0},"326":{"tf":1.7320508075688772},"328":{"tf":1.4142135623730951},"332":{"tf":1.7320508075688772},"335":{"tf":1.4142135623730951},"339":{"tf":1.0},"361":{"tf":1.0},"377":{"tf":1.0},"387":{"tf":2.0},"401":{"tf":1.4142135623730951},"404":{"tf":1.0},"52":{"tf":1.0}}}},"t":{"df":0,"docs":{},"e":{"df":7,"docs":{"154":{"tf":1.0},"261":{"tf":1.0},"385":{"tf":1.0},"407":{"tf":1.0},"408":{"tf":1.0},"43":{"tf":1.0},"53":{"tf":1.0}}},"f":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":2,"docs":{"156":{"tf":1.0},"158":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"178":{"tf":2.449489742783178}}},"y":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"1":{"df":1,"docs":{"178":{"tf":1.0}}},"df":1,"docs":{"178":{"tf":1.0}}}}}}},"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"178":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"188":{"tf":1.7320508075688772}}},"m":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}},"w":{"df":1,"docs":{"15":{"tf":1.0}}}},"s":{"/":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"247":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":5,"docs":{"101":{"tf":5.291502622129181},"105":{"tf":1.0},"182":{"tf":1.4142135623730951},"268":{"tf":1.0},"346":{"tf":1.0}}}},"m":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"237":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}}},"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"167":{"tf":1.0}}}}}}},"df":12,"docs":{"255":{"tf":1.0},"291":{"tf":3.0},"292":{"tf":5.0990195135927845},"339":{"tf":1.0},"340":{"tf":1.0},"38":{"tf":1.0},"41":{"tf":2.0},"42":{"tf":1.7320508075688772},"43":{"tf":1.7320508075688772},"45":{"tf":1.4142135623730951},"51":{"tf":1.0},"60":{"tf":3.1622776601683795}}}}},"df":4,"docs":{"299":{"tf":1.4142135623730951},"340":{"tf":1.4142135623730951},"346":{"tf":1.4142135623730951},"45":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}}}}}}},"o":{"(":{"1":{"df":1,"docs":{"140":{"tf":1.0}}},"df":0,"docs":{}},"b":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{")":{".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"93":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"93":{"tf":1.0}}}}}}}}},"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"365":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":3,"docs":{"144":{"tf":1.0},"266":{"tf":1.0},"93":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":1,"docs":{"26":{"tf":1.0}}}}}}},"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"k":{"(":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"327":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":1,"docs":{"45":{"tf":1.0}}}}},"t":{"df":2,"docs":{"155":{"tf":1.0},"171":{"tf":1.0}}}},"\\":{"df":0,"docs":{},"r":{"\\":{"df":0,"docs":{},"n":{"\\":{"df":0,"docs":{},"r":{"\\":{"df":0,"docs":{},"n":{"df":1,"docs":{"379":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":1.0}}}}},"df":19,"docs":{"155":{"tf":2.449489742783178},"158":{"tf":1.4142135623730951},"159":{"tf":3.1622776601683795},"162":{"tf":1.0},"171":{"tf":1.0},"196":{"tf":1.7320508075688772},"198":{"tf":1.4142135623730951},"201":{"tf":1.0},"219":{"tf":1.7320508075688772},"220":{"tf":2.0},"227":{"tf":1.0},"252":{"tf":1.4142135623730951},"261":{"tf":2.6457513110645907},"294":{"tf":1.0},"327":{"tf":1.0},"36":{"tf":2.23606797749979},"379":{"tf":1.0},"42":{"tf":1.4142135623730951},"45":{"tf":2.0}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"154":{"tf":1.0}}}}},"n":{"c":{"df":1,"docs":{"385":{"tf":1.0}}},"df":5,"docs":{"179":{"tf":1.0},"187":{"tf":1.0},"261":{"tf":1.7320508075688772},"334":{"tf":1.0},"336":{"tf":1.0}},"e":{"_":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"205":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"226":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":10,"docs":{"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":2.23606797749979},"316":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":2.0}}}}}}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":5,"docs":{"157":{"tf":1.0},"252":{"tf":1.4142135623730951},"385":{"tf":1.0},"41":{"tf":1.4142135623730951},"7":{"tf":1.4142135623730951}}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":1,"docs":{"354":{"tf":1.0}}}},"t":{"df":1,"docs":{"250":{"tf":3.0}},"i":{"df":0,"docs":{},"m":{"df":2,"docs":{"250":{"tf":1.0},"262":{"tf":1.0}}},"o":{"df":0,"docs":{},"n":{"<":{"&":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"<":{"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":1,"docs":{"321":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"146":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":1,"docs":{"132":{"tf":1.0}}},"v":{"df":1,"docs":{"146":{"tf":1.0}}}},"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"<":{"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":1,"docs":{"321":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"df":2,"docs":{"101":{"tf":1.0},"159":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"3":{"2":{"df":4,"docs":{"101":{"tf":1.4142135623730951},"104":{"tf":1.4142135623730951},"146":{"tf":1.0},"326":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":1,"docs":{"101":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"401":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"r":{"c":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"287":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":2,"docs":{"239":{"tf":1.0},"353":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"237":{"tf":1.0}}}}},"t":{"df":14,"docs":{"101":{"tf":4.123105625617661},"104":{"tf":2.23606797749979},"105":{"tf":1.0},"108":{"tf":1.0},"159":{"tf":1.7320508075688772},"166":{"tf":1.0},"171":{"tf":2.23606797749979},"173":{"tf":2.23606797749979},"234":{"tf":2.0},"237":{"tf":1.4142135623730951},"287":{"tf":1.0},"317":{"tf":1.4142135623730951},"361":{"tf":1.0},"404":{"tf":1.7320508075688772}},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{":":{":":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"387":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"u":{"8":{"df":1,"docs":{"107":{"tf":1.0}}},"df":0,"docs":{}},"v":{"df":0,"docs":{},"e":{"c":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"237":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"f":{"6":{"4":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"(":{"5":{".":{"0":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"3":{"2":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"(":{"5":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":18,"docs":{"100":{"tf":1.0},"101":{"tf":3.4641016151377544},"146":{"tf":1.0},"155":{"tf":1.0},"159":{"tf":3.0},"163":{"tf":1.0},"165":{"tf":1.0},"237":{"tf":1.7320508075688772},"24":{"tf":1.0},"314":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.4142135623730951},"322":{"tf":1.0},"353":{"tf":1.0},"381":{"tf":1.0},"387":{"tf":1.7320508075688772},"388":{"tf":1.0},"98":{"tf":1.0}}}}}}},"r":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"148":{"tf":1.4142135623730951}}}}}}}}},"d":{"df":1,"docs":{"401":{"tf":2.449489742783178}},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"401":{"tf":1.0},"42":{"tf":2.0},"45":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"42":{"tf":2.23606797749979}}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"42":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"84":{"tf":1.0}}}}}},"p":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"df":2,"docs":{"176":{"tf":1.0},"357":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"s":{"df":2,"docs":{"158":{"tf":1.4142135623730951},"377":{"tf":1.0}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"214":{"tf":1.4142135623730951}}}}}},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":1.7320508075688772}}}}}}}},"t":{"df":9,"docs":{"154":{"tf":1.0},"164":{"tf":1.0},"196":{"tf":1.0},"205":{"tf":1.0},"217":{"tf":1.0},"219":{"tf":1.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979},"53":{"tf":1.0}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":2.0}}}}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":3.4641016151377544}}}}}}}}}}},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"203":{"tf":1.0},"229":{"tf":2.0},"230":{"tf":2.23606797749979}}}}}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"204":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":3,"docs":{"204":{"tf":1.7320508075688772},"230":{"tf":1.0},"354":{"tf":1.4142135623730951}}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"146":{"tf":1.0}},"f":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}}}}}}},"h":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"o":{"a":{"d":{"df":1,"docs":{"354":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"d":{"df":2,"docs":{"393":{"tf":1.0},"416":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"339":{"tf":1.0}}}}}}}}},"w":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":7,"docs":{"67":{"tf":1.0},"69":{"tf":1.0},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"76":{"tf":2.23606797749979},"77":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"o":{"df":6,"docs":{"68":{"tf":1.0},"69":{"tf":2.449489742783178},"72":{"tf":1.7320508075688772},"73":{"tf":2.6457513110645907},"74":{"tf":2.0},"77":{"tf":2.0}}}}},"df":1,"docs":{"293":{"tf":1.0}}}}}}}}}}},"p":{"1":{")":{".":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"p":{"2":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},".":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"p":{"2":{"df":1,"docs":{"93":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":2,"docs":{"172":{"tf":1.4142135623730951},"93":{"tf":1.0}}},"2":{"df":2,"docs":{"172":{"tf":1.7320508075688772},"93":{"tf":1.0}}},"3":{".":{"df":0,"docs":{},"i":{"df":1,"docs":{"172":{"tf":1.0}}},"x":{"df":1,"docs":{"172":{"tf":1.0}}}},"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"a":{"c":{"df":0,"docs":{},"k":{"a":{"df":0,"docs":{},"g":{"df":7,"docs":{"110":{"tf":1.0},"255":{"tf":2.449489742783178},"256":{"tf":1.0},"26":{"tf":1.4142135623730951},"260":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"180":{"tf":2.0}}}},"df":0,"docs":{}}},"n":{"c":{"a":{"df":0,"docs":{},"k":{"df":1,"docs":{"370":{"tf":3.1622776601683795}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"p":{"a":{"df":0,"docs":{},"n":{"c":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"/":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{":":{"7":{":":{"9":{"df":1,"docs":{"370":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"c":{"!":{"(":{"\"":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":1,"docs":{"157":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"153":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"153":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":24,"docs":{"151":{"tf":1.4142135623730951},"152":{"tf":2.23606797749979},"153":{"tf":3.1622776601683795},"154":{"tf":3.1622776601683795},"155":{"tf":1.4142135623730951},"156":{"tf":1.4142135623730951},"158":{"tf":2.23606797749979},"159":{"tf":1.7320508075688772},"160":{"tf":3.0},"161":{"tf":1.7320508075688772},"162":{"tf":1.4142135623730951},"163":{"tf":2.449489742783178},"164":{"tf":2.0},"165":{"tf":2.0},"196":{"tf":1.7320508075688772},"197":{"tf":1.0},"200":{"tf":2.0},"219":{"tf":3.0},"220":{"tf":1.0},"252":{"tf":1.0},"283":{"tf":1.0},"361":{"tf":1.7320508075688772},"370":{"tf":1.0},"52":{"tf":1.0}},"k":{"df":6,"docs":{"154":{"tf":1.0},"158":{"tf":1.4142135623730951},"196":{"tf":1.0},"43":{"tf":1.0},"52":{"tf":1.0},"53":{"tf":1.0}}}},"df":0,"docs":{}}},"r":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":5,"docs":{"155":{"tf":1.0},"339":{"tf":1.0},"354":{"tf":1.0},"57":{"tf":1.0},"86":{"tf":2.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"55":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"178":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"55":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"113":{"tf":1.0},"287":{"tf":3.1622776601683795}}}}},"s":{"df":8,"docs":{"162":{"tf":1.0},"229":{"tf":1.0},"230":{"tf":1.0},"370":{"tf":1.0},"42":{"tf":2.23606797749979},"43":{"tf":1.0},"45":{"tf":2.23606797749979},"51":{"tf":1.0}},"e":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":1,"docs":{"218":{"tf":4.47213595499958}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"43":{"tf":1.0}}}}}}}}}}}},"t":{"df":1,"docs":{"188":{"tf":1.4142135623730951}},"i":{"a":{"df":0,"docs":{},"l":{"_":{"c":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":1,"docs":{"401":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":4,"docs":{"198":{"tf":1.4142135623730951},"396":{"tf":1.4142135623730951},"400":{"tf":2.8284271247461903},"401":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"r":{"d":{"df":4,"docs":{"169":{"tf":1.4142135623730951},"180":{"tf":1.0},"396":{"tf":2.449489742783178},"401":{"tf":3.1622776601683795}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"s":{"df":3,"docs":{"196":{"tf":1.0},"252":{"tf":1.0},"261":{"tf":2.23606797749979}}}},"t":{"df":1,"docs":{"396":{"tf":2.23606797749979}},"h":{"df":6,"docs":{"111":{"tf":1.0},"17":{"tf":1.7320508075688772},"262":{"tf":1.4142135623730951},"263":{"tf":1.0},"370":{"tf":1.0},"397":{"tf":1.7320508075688772}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"103":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":27,"docs":{"100":{"tf":3.0},"101":{"tf":1.7320508075688772},"102":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"105":{"tf":1.4142135623730951},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"268":{"tf":1.0},"326":{"tf":1.7320508075688772},"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.4142135623730951},"330":{"tf":2.23606797749979},"331":{"tf":1.4142135623730951},"332":{"tf":2.23606797749979},"334":{"tf":1.0},"335":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":2.449489742783178},"339":{"tf":3.1622776601683795},"340":{"tf":1.7320508075688772},"341":{"tf":1.0},"357":{"tf":1.0},"396":{"tf":1.0},"99":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"336":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"c":{"df":1,"docs":{"416":{"tf":1.7320508075688772}}},"d":{"b":{"df":1,"docs":{"24":{"tf":1.0}}},"df":0,"docs":{}},"df":3,"docs":{"211":{"tf":1.0},"261":{"tf":2.23606797749979},"338":{"tf":2.23606797749979}},"e":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":4,"docs":{"317":{"tf":1.0},"320":{"tf":2.6457513110645907},"321":{"tf":1.7320508075688772},"322":{"tf":2.0}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"322":{"tf":3.1622776601683795}}}}}}}}}}}}}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":1,"docs":{"102":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":2,"docs":{"176":{"tf":1.0},"359":{"tf":1.7320508075688772}}}}},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"f":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}},"h":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":1,"docs":{"379":{"tf":1.0}}}}},"df":0,"docs":{}}},"i":{"df":2,"docs":{"1":{"tf":1.0},"408":{"tf":1.4142135623730951}},"g":{"df":1,"docs":{"150":{"tf":1.0}}},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}}}}},"l":{"a":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"df":2,"docs":{"167":{"tf":1.0},"314":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"=":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"354":{"tf":1.0}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":6,"docs":{"255":{"tf":1.0},"38":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":2.23606797749979},"45":{"tf":2.0}}}},"df":0,"docs":{}},"u":{"df":1,"docs":{"261":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"104":{"tf":1.7320508075688772},"105":{"tf":1.0},"57":{"tf":1.0}},"e":{"(":{"df":0,"docs":{},"f":{"df":1,"docs":{"104":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"216":{"tf":1.7320508075688772},"227":{"tf":1.4142135623730951},"230":{"tf":1.0}}}}}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"52":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"356":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"f":{"3":{"2":{"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":2,"docs":{"170":{"tf":2.449489742783178},"172":{"tf":2.449489742783178}}}},"df":8,"docs":{"170":{"tf":2.0},"172":{"tf":2.6457513110645907},"338":{"tf":2.23606797749979},"339":{"tf":1.4142135623730951},"354":{"tf":2.8284271247461903},"356":{"tf":2.449489742783178},"84":{"tf":1.4142135623730951},"93":{"tf":2.23606797749979}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"346":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":15,"docs":{"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.7320508075688772},"280":{"tf":1.4142135623730951},"283":{"tf":2.449489742783178},"284":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":2.23606797749979}}}}}},"n":{"df":0,"docs":{},"o":{"df":1,"docs":{"283":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"270":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"df":0,"docs":{},"i":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"l":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}},"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"p":{"df":2,"docs":{"134":{"tf":1.0},"328":{"tf":2.0}}},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"376":{"tf":1.0}},"u":{"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"ê":{"df":1,"docs":{"411":{"tf":1.4142135623730951}}}}}}}},"s":{"df":0,"docs":{},"t":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"321":{"tf":1.0}}}}}},"df":0,"docs":{}},":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"316":{"tf":1.0},"317":{"tf":1.0},"322":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"df":9,"docs":{"316":{"tf":1.7320508075688772},"317":{"tf":3.4641016151377544},"318":{"tf":1.4142135623730951},"319":{"tf":1.0},"320":{"tf":3.1622776601683795},"321":{"tf":3.1622776601683795},"322":{"tf":4.58257569495584},"372":{"tf":1.0},"378":{"tf":1.0}}}},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":6,"docs":{"14":{"tf":1.0},"16":{"tf":1.0},"17":{"tf":1.0},"21":{"tf":1.0},"227":{"tf":1.0},"24":{"tf":1.4142135623730951}}}}}}}}}},"p":{"df":0,"docs":{},"v":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}},"r":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":3,"docs":{"124":{"tf":1.0},"145":{"tf":1.0},"155":{"tf":1.0}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"s":{"df":2,"docs":{"0":{"tf":1.0},"2":{"tf":1.0}}}},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":1,"docs":{"90":{"tf":1.0}}}}},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":1,"docs":{"86":{"tf":1.0}}}}}}},"i":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"y":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"253":{"tf":2.23606797749979}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"l":{"a":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"d":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":1,"docs":{"55":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"n":{"!":{"(":{"\"":{"b":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":2,"docs":{"26":{"tf":1.0},"367":{"tf":1.4142135623730951}}}}}}},"j":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"1":{"df":1,"docs":{"90":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"t":{"df":0,"docs":{},"h":{"df":2,"docs":{"408":{"tf":1.4142135623730951},"48":{"tf":1.7320508075688772}}}},"x":{"df":1,"docs":{"37":{"tf":1.0}}},"{":{"b":{"df":1,"docs":{"142":{"tf":1.0}}},"c":{"df":1,"docs":{"142":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":29,"docs":{"103":{"tf":1.0},"139":{"tf":1.0},"172":{"tf":1.0},"186":{"tf":1.7320508075688772},"204":{"tf":1.7320508075688772},"216":{"tf":1.0},"22":{"tf":1.0},"223":{"tf":1.0},"228":{"tf":1.4142135623730951},"23":{"tf":2.0},"230":{"tf":1.0},"236":{"tf":1.4142135623730951},"276":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":1.0},"293":{"tf":1.0},"33":{"tf":1.0},"335":{"tf":1.4142135623730951},"366":{"tf":1.0},"367":{"tf":1.0},"37":{"tf":1.7320508075688772},"370":{"tf":1.0},"379":{"tf":1.0},"45":{"tf":1.0},"53":{"tf":1.0},"55":{"tf":1.0},"73":{"tf":1.7320508075688772},"77":{"tf":1.0},"90":{"tf":3.1622776601683795}}}}}},"v":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"208":{"tf":1.0}}}},"df":1,"docs":{"393":{"tf":1.0}}}},"o":{"b":{"a":{"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"176":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"209":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"/":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}}}}},"df":2,"docs":{"229":{"tf":1.0},"230":{"tf":1.0}}}}}},"c":{"_":{"df":0,"docs":{},"m":{"a":{"c":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"_":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"371":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"370":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"df":3,"docs":{"369":{"tf":1.4142135623730951},"370":{"tf":1.7320508075688772},"372":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"371":{"tf":1.0}},"e":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":2,"docs":{"366":{"tf":1.0},"369":{"tf":1.0}}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"(":{"1":{"df":1,"docs":{"220":{"tf":1.0}}},"df":0,"docs":{}},"df":1,"docs":{"219":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"219":{"tf":1.0}}}}}},"d":{"df":0,"docs":{},"u":{"c":{"df":1,"docs":{"294":{"tf":1.0}},"t":{"df":1,"docs":{"223":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"308":{"tf":1.0}}}}}}}},"i":{"df":0,"docs":{},"l":{"df":2,"docs":{"153":{"tf":1.0},"250":{"tf":1.4142135623730951}},"e":{".":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":1,"docs":{"250":{"tf":1.4142135623730951}}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":2,"docs":{"153":{"tf":1.0},"250":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"m":{"df":13,"docs":{"2":{"tf":1.0},"48":{"tf":1.4142135623730951},"50":{"tf":2.23606797749979},"51":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":2.0},"56":{"tf":2.0},"57":{"tf":2.23606797749979},"58":{"tf":1.4142135623730951},"60":{"tf":3.605551275463989},"61":{"tf":3.0}},"m":{"df":1,"docs":{"194":{"tf":1.0}}}}},"df":0,"docs":{}}},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":14,"docs":{"213":{"tf":1.0},"214":{"tf":1.0},"215":{"tf":1.4142135623730951},"216":{"tf":1.7320508075688772},"218":{"tf":1.7320508075688772},"219":{"tf":2.449489742783178},"220":{"tf":1.7320508075688772},"221":{"tf":1.4142135623730951},"223":{"tf":1.7320508075688772},"224":{"tf":2.0},"226":{"tf":1.0},"227":{"tf":2.449489742783178},"230":{"tf":1.0},"245":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"o":{"df":2,"docs":{"220":{"tf":1.0},"224":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":3,"docs":{"214":{"tf":1.0},"223":{"tf":1.0},"224":{"tf":1.4142135623730951}}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"df":1,"docs":{"110":{"tf":1.0}}},"df":0,"docs":{}}}},"df":10,"docs":{"110":{"tf":2.0},"158":{"tf":1.0},"196":{"tf":1.0},"21":{"tf":2.0},"212":{"tf":1.0},"26":{"tf":1.0},"32":{"tf":1.0},"376":{"tf":1.0},"48":{"tf":1.0},"60":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"22":{"tf":1.0}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":11,"docs":{"113":{"tf":1.0},"114":{"tf":1.4142135623730951},"115":{"tf":1.7320508075688772},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.7320508075688772},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.7320508075688772},"125":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"e":{"df":1,"docs":{"416":{"tf":1.4142135623730951}}},"o":{"df":2,"docs":{"123":{"tf":1.0},"125":{"tf":1.4142135623730951}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"112":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"159":{"tf":1.0}}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":2,"docs":{"375":{"tf":1.4142135623730951},"409":{"tf":1.0}}}}},"df":1,"docs":{"15":{"tf":1.0}}}}}},"s":{"df":1,"docs":{"227":{"tf":1.4142135623730951}}},"t":{"df":1,"docs":{"411":{"tf":1.0}},"r":{"df":1,"docs":{"347":{"tf":1.7320508075688772}}}},"u":{"b":{"df":23,"docs":{"111":{"tf":1.0},"112":{"tf":2.23606797749979},"114":{"tf":2.0},"115":{"tf":3.4641016151377544},"117":{"tf":2.8284271247461903},"121":{"tf":3.0},"126":{"tf":1.0},"127":{"tf":1.0},"175":{"tf":1.0},"178":{"tf":2.23606797749979},"208":{"tf":1.0},"221":{"tf":1.0},"237":{"tf":1.0},"239":{"tf":1.0},"253":{"tf":3.0},"309":{"tf":1.7320508075688772},"318":{"tf":1.0},"347":{"tf":1.0},"369":{"tf":1.0},"371":{"tf":1.0},"372":{"tf":1.0},"385":{"tf":1.7320508075688772},"392":{"tf":1.0}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":6,"docs":{"255":{"tf":1.7320508075688772},"256":{"tf":1.4142135623730951},"257":{"tf":1.0},"317":{"tf":1.0},"321":{"tf":2.23606797749979},"322":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"355":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"327":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"h":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"139":{"tf":2.23606797749979},"318":{"tf":1.0}}}}}},"df":5,"docs":{"131":{"tf":1.4142135623730951},"134":{"tf":1.0},"139":{"tf":2.0},"224":{"tf":1.0},"283":{"tf":1.0}}}}},"y":{"df":1,"docs":{"24":{"tf":1.0}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"24":{"tf":1.4142135623730951}}}}}}}},"q":{"df":0,"docs":{},"l":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":1,"docs":{"247":{"tf":2.0}}}}}}}},"df":0,"docs":{}}},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"103":{"tf":1.7320508075688772},"107":{"tf":1.0}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":9,"docs":{"215":{"tf":1.0},"217":{"tf":1.0},"218":{"tf":2.6457513110645907},"223":{"tf":1.4142135623730951},"224":{"tf":1.4142135623730951},"227":{"tf":2.23606797749979},"244":{"tf":1.4142135623730951},"245":{"tf":1.0},"247":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"t":{"df":2,"docs":{"100":{"tf":1.0},"43":{"tf":1.4142135623730951}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"44":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":2.8284271247461903}}}}}},"r":{"#":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"h":{"(":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"394":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"394":{"tf":1.0}}}}}},".":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"237":{"tf":1.0}}}}},"df":0,"docs":{}}}},"1":{"df":1,"docs":{"73":{"tf":1.7320508075688772}}},"2":{"df":1,"docs":{"73":{"tf":1.4142135623730951}}},"3":{"df":1,"docs":{"73":{"tf":1.0}}},"\\":{"df":0,"docs":{},"n":{"df":2,"docs":{"378":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951}}}},"a":{"c":{"df":0,"docs":{},"e":{"df":1,"docs":{"280":{"tf":1.0}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"i":{"df":1,"docs":{"69":{"tf":1.4142135623730951}}}},"l":{"df":0,"docs":{},"p":{"df":0,"docs":{},"h":{"df":1,"docs":{"308":{"tf":1.0}}}}},"n":{"d":{":":{":":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"41":{"tf":1.4142135623730951}}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"122":{"tf":1.0},"41":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"_":{"c":{"df":0,"docs":{},"h":{"a":{"c":{"df":0,"docs":{},"h":{"a":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"df":7,"docs":{"110":{"tf":1.0},"122":{"tf":2.6457513110645907},"261":{"tf":4.58257569495584},"39":{"tf":1.0},"40":{"tf":4.123105625617661},"401":{"tf":1.0},"41":{"tf":1.7320508075688772}}},"df":0,"docs":{},"g":{"df":4,"docs":{"337":{"tf":1.0},"341":{"tf":1.0},"397":{"tf":1.0},"61":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"61":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"164":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"397":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"397":{"tf":1.0}}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"337":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"t":{"df":0,"docs":{},"o":{"df":1,"docs":{"397":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"p":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"1":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"w":{"df":1,"docs":{"346":{"tf":1.0}}}},"b":{"df":1,"docs":{"24":{"tf":1.0}}},"c":{":":{":":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"(":{"&":{"a":{"df":1,"docs":{"279":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":3,"docs":{"279":{"tf":2.6457513110645907},"280":{"tf":1.0},"287":{"tf":1.0}}}}}}},"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"d":{"df":1,"docs":{"287":{"tf":2.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"280":{"tf":1.0},"287":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"w":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"287":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"<":{"d":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"df":1,"docs":{"362":{"tf":1.0}}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":3,"docs":{"279":{"tf":2.23606797749979},"280":{"tf":1.7320508075688772},"286":{"tf":3.0}}}}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"302":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":1,"docs":{"299":{"tf":1.0}}}}}}},"n":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"287":{"tf":3.1622776601683795}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"<":{"df":0,"docs":{},"i":{"3":{"2":{"df":1,"docs":{"284":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}}},"t":{"df":14,"docs":{"265":{"tf":1.0},"278":{"tf":2.8284271247461903},"279":{"tf":2.6457513110645907},"280":{"tf":3.1622776601683795},"282":{"tf":2.23606797749979},"284":{"tf":2.8284271247461903},"285":{"tf":1.0},"286":{"tf":1.0},"287":{"tf":4.0},"288":{"tf":1.0},"299":{"tf":3.0},"300":{"tf":2.23606797749979},"302":{"tf":2.0},"303":{"tf":1.0}}}},"df":1,"docs":{"268":{"tf":1.0}}},"df":9,"docs":{"182":{"tf":2.6457513110645907},"183":{"tf":2.23606797749979},"211":{"tf":1.0},"226":{"tf":1.0},"237":{"tf":1.0},"378":{"tf":1.0},"394":{"tf":1.4142135623730951},"397":{"tf":1.7320508075688772},"408":{"tf":2.449489742783178}},"e":{"a":{"d":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":3,"docs":{"35":{"tf":1.7320508075688772},"36":{"tf":1.7320508075688772},"42":{"tf":1.4142135623730951}},"e":{"(":{"&":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"35":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"159":{"tf":3.0}}}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"159":{"tf":1.7320508075688772}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":4,"docs":{"177":{"tf":1.4142135623730951},"217":{"tf":1.0},"36":{"tf":1.0},"385":{"tf":1.7320508075688772}},"m":{"df":2,"docs":{"26":{"tf":1.0},"262":{"tf":1.0}}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"379":{"tf":1.0}}}}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":3,"docs":{"294":{"tf":1.0},"355":{"tf":1.0},"385":{"tf":2.449489742783178}},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"(":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"(":{")":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"v":{"(":{")":{".":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"151":{"tf":1.0}}}}}},"t":{"1":{".":{"c":{"a":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"d":{"(":{"&":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"2":{"df":1,"docs":{"94":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"92":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":4,"docs":{"89":{"tf":1.0},"90":{"tf":2.23606797749979},"92":{"tf":1.0},"94":{"tf":2.0}}},"2":{"df":1,"docs":{"94":{"tf":2.449489742783178}}},"3":{"df":1,"docs":{"94":{"tf":1.4142135623730951}}},"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":9,"docs":{"197":{"tf":2.6457513110645907},"237":{"tf":1.0},"87":{"tf":1.0},"89":{"tf":2.6457513110645907},"90":{"tf":2.6457513110645907},"92":{"tf":3.7416573867739413},"94":{"tf":3.3166247903554},"95":{"tf":1.4142135623730951},"99":{"tf":1.4142135623730951}},"e":{":":{":":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"(":{"3":{"df":1,"docs":{"95":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"v":{"df":4,"docs":{"294":{"tf":2.23606797749979},"296":{"tf":1.0},"385":{"tf":1.4142135623730951},"388":{"tf":1.7320508075688772}}}},"d":{"df":2,"docs":{"234":{"tf":1.0},"338":{"tf":1.0}}},"df":1,"docs":{"121":{"tf":1.0}},"f":{"<":{"df":0,"docs":{},"t":{"df":2,"docs":{"265":{"tf":1.0},"283":{"tf":1.7320508075688772}}}},"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"287":{"tf":2.0}},"l":{"<":{"df":0,"docs":{},"r":{"c":{"<":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"286":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"t":{"df":12,"docs":{"265":{"tf":1.0},"280":{"tf":1.0},"281":{"tf":2.0},"282":{"tf":4.0},"283":{"tf":4.358898943540674},"284":{"tf":3.4641016151377544},"285":{"tf":1.0},"286":{"tf":1.4142135623730951},"287":{"tf":1.0},"288":{"tf":1.0},"300":{"tf":1.7320508075688772},"303":{"tf":1.4142135623730951}}},"v":{"df":0,"docs":{},"e":{"c":{"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"283":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"<":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"287":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":1,"docs":{"392":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":10,"docs":{"112":{"tf":1.7320508075688772},"182":{"tf":1.0},"185":{"tf":1.7320508075688772},"187":{"tf":1.0},"193":{"tf":1.0},"265":{"tf":1.4142135623730951},"350":{"tf":1.0},"72":{"tf":1.0},"73":{"tf":1.0},"74":{"tf":1.0}},"e":{"df":0,"docs":{},"n":{"c":{"df":2,"docs":{"293":{"tf":1.0},"93":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":2,"docs":{"270":{"tf":1.0},"74":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"74":{"tf":1.0}},"s":{":":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"72":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"72":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"370":{"tf":1.0}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"df":3,"docs":{"265":{"tf":1.0},"283":{"tf":1.7320508075688772},"284":{"tf":1.0}}}},"df":0,"docs":{}}}},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"332":{"tf":1.4142135623730951}}}}},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":2,"docs":{"255":{"tf":1.0},"40":{"tf":1.0}}}}}}}},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"322":{"tf":1.0}}}},"df":0,"docs":{}}},"l":{"a":{"df":0,"docs":{},"t":{"df":13,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}}}},"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":6,"docs":{"154":{"tf":1.0},"250":{"tf":2.8284271247461903},"262":{"tf":1.0},"28":{"tf":2.0},"414":{"tf":1.0},"52":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"255":{"tf":1.0}}},"v":{"df":2,"docs":{"227":{"tf":1.4142135623730951},"309":{"tf":2.0}}}}},"p":{"df":0,"docs":{},"l":{"a":{"c":{"df":1,"docs":{"143":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"159":{"tf":1.0}}}},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"255":{"tf":1.0}}}}}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"268":{"tf":1.0}}}}}}},"o":{"d":{"df":0,"docs":{},"u":{"c":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"3":{"df":1,"docs":{"244":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"c":{"df":0,"docs":{},"h":{"1":{"3":{"df":1,"docs":{"244":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":2,"docs":{"381":{"tf":1.4142135623730951},"384":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"320":{"tf":3.1622776601683795},"321":{"tf":1.7320508075688772},"322":{"tf":2.8284271247461903}}}}}}}}},"df":4,"docs":{"375":{"tf":1.0},"377":{"tf":1.4142135623730951},"378":{"tf":1.0},"417":{"tf":1.0}}}}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"376":{"tf":1.0}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"c":{"df":1,"docs":{"69":{"tf":1.0}}},"df":0,"docs":{}}}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"255":{"tf":1.0}}},"df":0,"docs":{},"s":{"df":2,"docs":{"375":{"tf":1.0},"379":{"tf":1.4142135623730951}}}}}},"t":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"121":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{":":{":":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"121":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"113":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"159":{"tf":1.0},"377":{"tf":1.0}}}}},"t":{"df":13,"docs":{"151":{"tf":1.4142135623730951},"155":{"tf":1.4142135623730951},"157":{"tf":2.0},"158":{"tf":1.0},"159":{"tf":2.0},"166":{"tf":1.0},"171":{"tf":1.0},"201":{"tf":2.6457513110645907},"219":{"tf":1.0},"220":{"tf":1.0},"294":{"tf":1.7320508075688772},"360":{"tf":2.449489742783178},"376":{"tf":1.0}},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"385":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":33,"docs":{"119":{"tf":2.0},"120":{"tf":1.4142135623730951},"154":{"tf":1.0},"155":{"tf":3.605551275463989},"156":{"tf":1.0},"157":{"tf":1.0},"158":{"tf":1.7320508075688772},"159":{"tf":4.898979485566356},"160":{"tf":2.0},"162":{"tf":2.23606797749979},"163":{"tf":1.4142135623730951},"165":{"tf":2.0},"171":{"tf":1.7320508075688772},"186":{"tf":2.8284271247461903},"187":{"tf":1.4142135623730951},"196":{"tf":1.4142135623730951},"201":{"tf":1.4142135623730951},"219":{"tf":3.1622776601683795},"220":{"tf":2.0},"227":{"tf":1.7320508075688772},"245":{"tf":1.4142135623730951},"252":{"tf":1.4142135623730951},"261":{"tf":2.23606797749979},"299":{"tf":1.0},"36":{"tf":3.3166247903554},"360":{"tf":1.7320508075688772},"370":{"tf":1.0},"377":{"tf":1.4142135623730951},"381":{"tf":1.0},"385":{"tf":1.4142135623730951},"42":{"tf":2.23606797749979},"45":{"tf":1.4142135623730951},"61":{"tf":1.7320508075688772}}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"57":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":9,"docs":{"159":{"tf":2.23606797749979},"179":{"tf":1.4142135623730951},"361":{"tf":1.0},"365":{"tf":1.7320508075688772},"392":{"tf":1.0},"57":{"tf":2.23606797749979},"60":{"tf":1.4142135623730951},"61":{"tf":1.0},"74":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"179":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"v":{"df":1,"docs":{"61":{"tf":1.0}}}},"f":{"c":{"df":1,"docs":{"417":{"tf":2.23606797749979}}},"df":0,"docs":{}},"g":{"b":{"df":1,"docs":{"338":{"tf":1.0}}},"df":1,"docs":{"262":{"tf":1.7320508075688772}}},"h":{"df":1,"docs":{"354":{"tf":3.1622776601683795}},"s":{"=":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"354":{"tf":1.0}}}}}}},"df":0,"docs":{}}},"i":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"308":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":2,"docs":{"198":{"tf":2.449489742783178},"354":{"tf":1.0}}}}},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"211":{"tf":1.0}}}},"p":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":2,"docs":{"211":{"tf":1.4142135623730951},"262":{"tf":2.8284271247461903}}}}}}}},"n":{"df":0,"docs":{},"g":{"df":2,"docs":{"122":{"tf":1.0},"41":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"371":{"tf":1.4142135623730951}},"e":{"(":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"371":{"tf":1.0}}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"371":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"s":{"df":2,"docs":{"22":{"tf":1.0},"24":{"tf":1.0}}},"u":{"b":{"df":0,"docs":{},"i":{"df":3,"docs":{"24":{"tf":1.4142135623730951},"56":{"tf":1.0},"60":{"tf":1.0}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":3,"docs":{"176":{"tf":1.0},"257":{"tf":1.0},"357":{"tf":1.4142135623730951}}}},"n":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"224":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"224":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":37,"docs":{"154":{"tf":1.7320508075688772},"196":{"tf":1.0},"202":{"tf":1.0},"206":{"tf":1.0},"209":{"tf":1.4142135623730951},"212":{"tf":1.4142135623730951},"218":{"tf":1.4142135623730951},"220":{"tf":4.242640687119285},"221":{"tf":2.23606797749979},"224":{"tf":2.0},"227":{"tf":2.23606797749979},"229":{"tf":1.0},"230":{"tf":1.4142135623730951},"252":{"tf":1.0},"261":{"tf":3.3166247903554},"27":{"tf":2.8284271247461903},"313":{"tf":1.7320508075688772},"314":{"tf":1.7320508075688772},"32":{"tf":1.4142135623730951},"370":{"tf":1.0},"376":{"tf":1.7320508075688772},"377":{"tf":1.4142135623730951},"38":{"tf":1.7320508075688772},"380":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":2.0},"388":{"tf":1.7320508075688772},"41":{"tf":2.0},"42":{"tf":1.4142135623730951},"43":{"tf":1.7320508075688772},"45":{"tf":1.4142135623730951},"48":{"tf":1.0},"53":{"tf":1.4142135623730951},"55":{"tf":1.0},"61":{"tf":1.4142135623730951},"86":{"tf":1.0},"87":{"tf":1.0}}},"s":{"df":0,"docs":{},"t":{"_":{"b":{"a":{"c":{"df":0,"docs":{},"k":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"a":{"c":{"df":2,"docs":{"154":{"tf":1.7320508075688772},"219":{"tf":1.0}},"e":{"=":{"1":{"df":3,"docs":{"154":{"tf":1.0},"43":{"tf":1.0},"53":{"tf":1.0}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"154":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"a":{"c":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"n":{"df":9,"docs":{"110":{"tf":1.0},"137":{"tf":1.0},"17":{"tf":1.0},"27":{"tf":1.0},"48":{"tf":1.0},"50":{"tf":1.0},"61":{"tf":1.0},"73":{"tf":1.0},"77":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"c":{"df":11,"docs":{"110":{"tf":1.4142135623730951},"17":{"tf":1.4142135623730951},"22":{"tf":1.4142135623730951},"23":{"tf":1.0},"24":{"tf":1.7320508075688772},"29":{"tf":1.0},"30":{"tf":1.0},"406":{"tf":1.0},"414":{"tf":1.0},"416":{"tf":1.0},"86":{"tf":1.0}}},"d":{"df":0,"docs":{},"o":{"c":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":217,"docs":{"100":{"tf":3.0},"101":{"tf":1.4142135623730951},"102":{"tf":1.4142135623730951},"103":{"tf":1.4142135623730951},"104":{"tf":2.0},"105":{"tf":1.0},"106":{"tf":1.7320508075688772},"107":{"tf":2.0},"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"114":{"tf":1.0},"115":{"tf":1.4142135623730951},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.4142135623730951},"119":{"tf":1.7320508075688772},"120":{"tf":1.0},"121":{"tf":1.0},"122":{"tf":1.0},"123":{"tf":2.0},"125":{"tf":2.0},"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"132":{"tf":1.7320508075688772},"133":{"tf":1.4142135623730951},"134":{"tf":1.0},"135":{"tf":1.0},"138":{"tf":2.0},"139":{"tf":2.449489742783178},"140":{"tf":1.7320508075688772},"145":{"tf":1.0},"146":{"tf":1.4142135623730951},"147":{"tf":1.0},"148":{"tf":1.7320508075688772},"153":{"tf":1.0},"154":{"tf":1.0},"155":{"tf":1.4142135623730951},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":1.7320508075688772},"162":{"tf":1.0},"164":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.4142135623730951},"170":{"tf":1.7320508075688772},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.0},"183":{"tf":1.4142135623730951},"184":{"tf":1.4142135623730951},"186":{"tf":1.7320508075688772},"187":{"tf":1.4142135623730951},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.0},"196":{"tf":1.7320508075688772},"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"199":{"tf":1.7320508075688772},"200":{"tf":2.0},"201":{"tf":1.0},"204":{"tf":1.0},"205":{"tf":1.0},"206":{"tf":1.0},"208":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"213":{"tf":1.0},"215":{"tf":1.0},"216":{"tf":1.4142135623730951},"218":{"tf":1.7320508075688772},"219":{"tf":1.7320508075688772},"220":{"tf":1.7320508075688772},"221":{"tf":1.4142135623730951},"223":{"tf":1.4142135623730951},"224":{"tf":2.0},"226":{"tf":1.0},"227":{"tf":2.0},"230":{"tf":1.0},"234":{"tf":1.0},"235":{"tf":1.4142135623730951},"236":{"tf":1.7320508075688772},"237":{"tf":1.7320508075688772},"238":{"tf":1.4142135623730951},"239":{"tf":1.0},"240":{"tf":1.0},"241":{"tf":1.4142135623730951},"242":{"tf":1.0},"244":{"tf":2.23606797749979},"245":{"tf":1.4142135623730951},"252":{"tf":1.4142135623730951},"253":{"tf":2.0},"261":{"tf":1.7320508075688772},"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.4142135623730951},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.0},"277":{"tf":1.4142135623730951},"279":{"tf":1.4142135623730951},"280":{"tf":1.0},"283":{"tf":2.23606797749979},"284":{"tf":1.0},"286":{"tf":1.4142135623730951},"287":{"tf":2.23606797749979},"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":1.7320508075688772},"294":{"tf":1.7320508075688772},"295":{"tf":1.0},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.0},"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":2.0},"316":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"32":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":2.0},"327":{"tf":1.0},"328":{"tf":1.0},"329":{"tf":1.0},"33":{"tf":2.0},"330":{"tf":1.4142135623730951},"331":{"tf":1.4142135623730951},"332":{"tf":1.7320508075688772},"334":{"tf":1.0},"335":{"tf":1.0},"336":{"tf":1.0},"337":{"tf":1.4142135623730951},"338":{"tf":2.449489742783178},"339":{"tf":3.0},"34":{"tf":1.0},"340":{"tf":1.7320508075688772},"341":{"tf":1.0},"346":{"tf":1.7320508075688772},"347":{"tf":2.449489742783178},"348":{"tf":1.4142135623730951},"349":{"tf":1.0},"35":{"tf":1.0},"353":{"tf":1.7320508075688772},"354":{"tf":1.4142135623730951},"355":{"tf":2.449489742783178},"356":{"tf":1.7320508075688772},"357":{"tf":1.0},"36":{"tf":1.0},"360":{"tf":2.6457513110645907},"361":{"tf":2.23606797749979},"362":{"tf":2.0},"364":{"tf":2.0},"365":{"tf":1.4142135623730951},"368":{"tf":1.0},"37":{"tf":1.0},"370":{"tf":2.23606797749979},"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.4142135623730951},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":3.872983346207417},"387":{"tf":2.0},"388":{"tf":2.23606797749979},"41":{"tf":1.0},"42":{"tf":1.4142135623730951},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951},"48":{"tf":1.0},"50":{"tf":1.7320508075688772},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.0},"55":{"tf":1.4142135623730951},"56":{"tf":1.7320508075688772},"57":{"tf":1.7320508075688772},"58":{"tf":1.4142135623730951},"60":{"tf":2.6457513110645907},"61":{"tf":2.8284271247461903},"67":{"tf":1.0},"68":{"tf":1.0},"69":{"tf":2.449489742783178},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":2.0},"73":{"tf":2.23606797749979},"74":{"tf":1.7320508075688772},"76":{"tf":2.23606797749979},"77":{"tf":2.23606797749979},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.4142135623730951},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":1.7320508075688772},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0},"99":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":1,"docs":{"252":{"tf":1.0}}},"df":0,"docs":{}}},"df":267,"docs":{"0":{"tf":2.8284271247461903},"1":{"tf":3.4641016151377544},"10":{"tf":4.58257569495584},"101":{"tf":3.1622776601683795},"102":{"tf":1.0},"104":{"tf":1.0},"105":{"tf":2.0},"106":{"tf":2.23606797749979},"107":{"tf":1.0},"108":{"tf":1.4142135623730951},"109":{"tf":1.0},"110":{"tf":1.7320508075688772},"114":{"tf":2.23606797749979},"115":{"tf":1.0},"119":{"tf":1.7320508075688772},"12":{"tf":1.7320508075688772},"122":{"tf":1.4142135623730951},"126":{"tf":1.7320508075688772},"127":{"tf":1.0},"13":{"tf":3.0},"130":{"tf":2.23606797749979},"131":{"tf":1.0},"132":{"tf":1.0},"134":{"tf":1.7320508075688772},"136":{"tf":1.4142135623730951},"137":{"tf":1.7320508075688772},"139":{"tf":1.0},"140":{"tf":3.4641016151377544},"141":{"tf":1.4142135623730951},"143":{"tf":1.4142135623730951},"15":{"tf":2.0},"151":{"tf":2.0},"152":{"tf":1.4142135623730951},"153":{"tf":1.4142135623730951},"154":{"tf":2.6457513110645907},"159":{"tf":1.7320508075688772},"16":{"tf":1.0},"163":{"tf":1.0},"164":{"tf":1.0},"165":{"tf":1.4142135623730951},"166":{"tf":1.0},"169":{"tf":1.7320508075688772},"17":{"tf":2.0},"172":{"tf":1.0},"173":{"tf":2.0},"174":{"tf":1.0},"176":{"tf":1.0},"178":{"tf":1.0},"18":{"tf":1.4142135623730951},"180":{"tf":1.4142135623730951},"181":{"tf":1.4142135623730951},"182":{"tf":2.0},"183":{"tf":2.0},"184":{"tf":1.0},"185":{"tf":1.0},"186":{"tf":2.6457513110645907},"187":{"tf":1.4142135623730951},"189":{"tf":2.6457513110645907},"19":{"tf":1.0},"190":{"tf":1.0},"193":{"tf":1.4142135623730951},"194":{"tf":2.449489742783178},"195":{"tf":1.4142135623730951},"196":{"tf":2.23606797749979},"198":{"tf":1.4142135623730951},"2":{"tf":2.449489742783178},"20":{"tf":2.449489742783178},"204":{"tf":1.0},"207":{"tf":1.0},"208":{"tf":2.6457513110645907},"209":{"tf":2.0},"21":{"tf":1.0},"210":{"tf":1.4142135623730951},"211":{"tf":1.7320508075688772},"213":{"tf":1.0},"214":{"tf":1.4142135623730951},"217":{"tf":1.0},"218":{"tf":2.0},"22":{"tf":2.23606797749979},"220":{"tf":1.0},"223":{"tf":1.7320508075688772},"224":{"tf":1.0},"226":{"tf":1.7320508075688772},"227":{"tf":2.6457513110645907},"23":{"tf":3.3166247903554},"231":{"tf":1.4142135623730951},"232":{"tf":2.0},"233":{"tf":1.0},"235":{"tf":1.0},"238":{"tf":1.0},"24":{"tf":2.449489742783178},"246":{"tf":1.0},"247":{"tf":2.23606797749979},"248":{"tf":1.7320508075688772},"25":{"tf":2.449489742783178},"250":{"tf":1.4142135623730951},"251":{"tf":1.0},"252":{"tf":1.7320508075688772},"255":{"tf":1.4142135623730951},"256":{"tf":1.0},"26":{"tf":1.4142135623730951},"262":{"tf":1.7320508075688772},"264":{"tf":1.4142135623730951},"265":{"tf":2.23606797749979},"268":{"tf":3.3166247903554},"269":{"tf":1.0},"272":{"tf":1.0},"273":{"tf":1.7320508075688772},"274":{"tf":2.8284271247461903},"275":{"tf":1.7320508075688772},"276":{"tf":2.449489742783178},"277":{"tf":2.449489742783178},"278":{"tf":1.0},"279":{"tf":1.0},"28":{"tf":1.0},"281":{"tf":1.4142135623730951},"282":{"tf":2.449489742783178},"283":{"tf":1.4142135623730951},"285":{"tf":2.0},"286":{"tf":2.0},"287":{"tf":1.0},"288":{"tf":1.4142135623730951},"289":{"tf":2.6457513110645907},"29":{"tf":1.0},"290":{"tf":1.4142135623730951},"291":{"tf":1.0},"293":{"tf":3.0},"294":{"tf":1.7320508075688772},"295":{"tf":1.4142135623730951},"298":{"tf":1.0},"299":{"tf":1.7320508075688772},"3":{"tf":1.7320508075688772},"30":{"tf":2.23606797749979},"300":{"tf":1.7320508075688772},"301":{"tf":1.0},"302":{"tf":1.4142135623730951},"304":{"tf":1.4142135623730951},"305":{"tf":2.0},"306":{"tf":2.6457513110645907},"307":{"tf":1.7320508075688772},"308":{"tf":1.4142135623730951},"309":{"tf":1.4142135623730951},"31":{"tf":1.4142135623730951},"310":{"tf":2.0},"311":{"tf":2.0},"312":{"tf":1.4142135623730951},"313":{"tf":1.7320508075688772},"314":{"tf":1.7320508075688772},"315":{"tf":1.7320508075688772},"316":{"tf":1.7320508075688772},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.4142135623730951},"321":{"tf":1.0},"322":{"tf":2.6457513110645907},"323":{"tf":2.449489742783178},"324":{"tf":1.0},"325":{"tf":1.0},"33":{"tf":1.0},"330":{"tf":1.7320508075688772},"332":{"tf":2.23606797749979},"337":{"tf":1.4142135623730951},"338":{"tf":1.0},"339":{"tf":2.23606797749979},"34":{"tf":1.7320508075688772},"340":{"tf":1.0},"342":{"tf":1.7320508075688772},"343":{"tf":2.23606797749979},"344":{"tf":3.7416573867739413},"345":{"tf":2.23606797749979},"346":{"tf":1.7320508075688772},"347":{"tf":4.47213595499958},"348":{"tf":2.449489742783178},"349":{"tf":1.4142135623730951},"35":{"tf":1.0},"350":{"tf":1.7320508075688772},"351":{"tf":1.0},"352":{"tf":1.0},"354":{"tf":1.0},"355":{"tf":3.4641016151377544},"357":{"tf":1.0},"358":{"tf":1.0},"36":{"tf":1.0},"360":{"tf":1.0},"361":{"tf":2.23606797749979},"362":{"tf":2.449489742783178},"365":{"tf":1.0},"366":{"tf":1.0},"367":{"tf":1.4142135623730951},"368":{"tf":3.0},"369":{"tf":1.0},"370":{"tf":4.123105625617661},"372":{"tf":1.0},"373":{"tf":1.0},"374":{"tf":1.7320508075688772},"376":{"tf":1.0},"382":{"tf":1.0},"385":{"tf":1.7320508075688772},"387":{"tf":1.0},"389":{"tf":2.0},"39":{"tf":1.4142135623730951},"390":{"tf":1.0},"391":{"tf":1.0},"393":{"tf":1.0},"394":{"tf":1.4142135623730951},"395":{"tf":1.0},"396":{"tf":1.0},"398":{"tf":1.0},"4":{"tf":2.449489742783178},"40":{"tf":2.23606797749979},"405":{"tf":1.0},"406":{"tf":1.7320508075688772},"407":{"tf":1.7320508075688772},"408":{"tf":1.4142135623730951},"409":{"tf":2.6457513110645907},"410":{"tf":4.0},"412":{"tf":2.6457513110645907},"413":{"tf":2.23606797749979},"414":{"tf":4.242640687119285},"415":{"tf":2.23606797749979},"416":{"tf":3.3166247903554},"417":{"tf":3.3166247903554},"42":{"tf":3.605551275463989},"46":{"tf":1.7320508075688772},"47":{"tf":2.6457513110645907},"48":{"tf":2.0},"49":{"tf":1.4142135623730951},"5":{"tf":1.7320508075688772},"51":{"tf":2.0},"52":{"tf":4.58257569495584},"53":{"tf":2.6457513110645907},"54":{"tf":2.0},"55":{"tf":1.0},"56":{"tf":1.7320508075688772},"57":{"tf":1.7320508075688772},"58":{"tf":1.4142135623730951},"59":{"tf":1.0},"6":{"tf":1.0},"60":{"tf":2.8284271247461903},"61":{"tf":2.449489742783178},"62":{"tf":1.0},"63":{"tf":1.7320508075688772},"64":{"tf":2.0},"65":{"tf":1.0},"66":{"tf":1.0},"67":{"tf":1.0},"68":{"tf":1.4142135623730951},"69":{"tf":4.123105625617661},"7":{"tf":1.7320508075688772},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"73":{"tf":2.0},"74":{"tf":1.7320508075688772},"76":{"tf":1.0},"77":{"tf":1.7320508075688772},"79":{"tf":1.7320508075688772},"8":{"tf":2.8284271247461903},"80":{"tf":1.0},"81":{"tf":1.0},"84":{"tf":1.0},"86":{"tf":1.0},"90":{"tf":2.0},"92":{"tf":2.0},"93":{"tf":2.449489742783178},"97":{"tf":1.0},"99":{"tf":1.0}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"x":{"df":1,"docs":{"407":{"tf":2.0}}}},"m":{"df":0,"docs":{},"t":{"df":3,"docs":{"23":{"tf":1.4142135623730951},"4":{"tf":1.0},"406":{"tf":2.8284271247461903}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"132":{"tf":1.0},"288":{"tf":1.0},"304":{"tf":1.0}}}}},"df":0,"docs":{}}}}}},"u":{"df":0,"docs":{},"p":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"262":{"tf":1.0}}}},"df":10,"docs":{"0":{"tf":1.4142135623730951},"13":{"tf":1.4142135623730951},"15":{"tf":1.7320508075688772},"16":{"tf":1.4142135623730951},"18":{"tf":2.0},"19":{"tf":1.0},"30":{"tf":1.0},"406":{"tf":1.0},"408":{"tf":1.0},"416":{"tf":3.1622776601683795}}}}}}},"v":{":":{"9":{"9":{".":{"0":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"x":{"df":2,"docs":{"294":{"tf":1.4142135623730951},"296":{"tf":1.0}}}},"s":{".":{"c":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"76":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":2,"docs":{"76":{"tf":1.0},"77":{"tf":1.4142135623730951}}}}}},"1":{"df":4,"docs":{"139":{"tf":2.23606797749979},"362":{"tf":1.4142135623730951},"69":{"tf":3.605551275463989},"72":{"tf":2.0}}},"2":{"df":3,"docs":{"139":{"tf":3.3166247903554},"362":{"tf":1.4142135623730951},"69":{"tf":3.1622776601683795}}},"3":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"[":{".":{".":{"2":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"0":{".":{".":{"2":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{".":{".":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"77":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":1,"docs":{"77":{"tf":1.0}}},"6":{".":{".":{"1":{"1":{"df":1,"docs":{"77":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":3,"docs":{"223":{"tf":1.0},"284":{"tf":1.0},"299":{"tf":1.0}}}},"l":{"a":{"d":{"df":1,"docs":{"117":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":1,"docs":{"150":{"tf":1.0}}},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"150":{"tf":1.0}}}}},"m":{"df":0,"docs":{},"e":{"df":1,"docs":{"60":{"tf":1.4142135623730951}}},"p":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"215":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}},"c":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":1,"docs":{"90":{"tf":1.4142135623730951}}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"d":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"322":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"69":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":1,"docs":{"73":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"r":{"df":0,"docs":{},"e":{"df":2,"docs":{"146":{"tf":1.7320508075688772},"148":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"348":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":2,"docs":{"313":{"tf":2.8284271247461903},"314":{"tf":3.0}}}}}}},"d":{"df":0,"docs":{},"k":{"df":1,"docs":{"16":{"tf":1.0}}}},"df":16,"docs":{"138":{"tf":1.0},"139":{"tf":2.6457513110645907},"141":{"tf":1.7320508075688772},"180":{"tf":1.0},"191":{"tf":1.0},"247":{"tf":1.4142135623730951},"339":{"tf":2.0},"67":{"tf":2.0},"68":{"tf":1.0},"69":{"tf":1.0},"70":{"tf":1.4142135623730951},"72":{"tf":2.23606797749979},"73":{"tf":2.0},"74":{"tf":1.4142135623730951},"76":{"tf":2.0},"77":{"tf":2.8284271247461903}},"e":{"a":{"df":0,"docs":{},"r":{"c":{"df":0,"docs":{},"h":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":3,"docs":{"226":{"tf":2.0},"227":{"tf":2.8284271247461903},"245":{"tf":1.0}}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":9,"docs":{"211":{"tf":1.0},"222":{"tf":1.0},"223":{"tf":3.0},"224":{"tf":3.3166247903554},"226":{"tf":1.7320508075688772},"227":{"tf":2.0},"243":{"tf":1.0},"245":{"tf":2.0},"247":{"tf":1.4142135623730951}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"212":{"tf":1.0}}}}}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"l":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":2.23606797749979}}}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"t":{"_":{"a":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"t":{"df":1,"docs":{"113":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"c":{"df":3,"docs":{"27":{"tf":2.0},"377":{"tf":2.0},"40":{"tf":1.0}},"o":{"df":0,"docs":{},"n":{"d":{"_":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"(":{"df":2,"docs":{"76":{"tf":1.0},"77":{"tf":1.0}}},"df":2,"docs":{"76":{"tf":1.0},"77":{"tf":1.0}}},"df":0,"docs":{}}}}},"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"y":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"253":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}}},"df":2,"docs":{"339":{"tf":2.0},"53":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"42":{"tf":2.449489742783178}}},"df":0,"docs":{}}}}},"df":4,"docs":{"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":2,"docs":{"255":{"tf":1.4142135623730951},"26":{"tf":1.0}}},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"df":2,"docs":{"312":{"tf":1.4142135623730951},"314":{"tf":2.6457513110645907}}}}},"df":1,"docs":{"15":{"tf":1.0}}}},"df":0,"docs":{}},"f":{".":{"0":{"df":2,"docs":{"273":{"tf":1.0},"357":{"tf":1.4142135623730951}}},"df":0,"docs":{},"i":{"df":1,"docs":{"93":{"tf":1.0}}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"234":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"t":{"a":{"df":0,"docs":{},"t":{"df":1,"docs":{"320":{"tf":1.0}},"e":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"320":{"tf":1.0}}}}}}}}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"x":{"df":1,"docs":{"93":{"tf":1.0}}}},":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"354":{"tf":1.0}}}}}}}},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"397":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":30,"docs":{"100":{"tf":1.4142135623730951},"114":{"tf":1.0},"123":{"tf":1.0},"139":{"tf":1.4142135623730951},"164":{"tf":1.0},"172":{"tf":1.0},"18":{"tf":1.0},"180":{"tf":1.0},"189":{"tf":2.0},"190":{"tf":2.23606797749979},"234":{"tf":1.0},"237":{"tf":1.0},"239":{"tf":1.0},"273":{"tf":1.4142135623730951},"276":{"tf":1.0},"283":{"tf":2.0},"318":{"tf":1.0},"320":{"tf":2.23606797749979},"321":{"tf":1.7320508075688772},"322":{"tf":1.7320508075688772},"354":{"tf":1.7320508075688772},"355":{"tf":2.0},"356":{"tf":1.0},"387":{"tf":1.0},"392":{"tf":1.4142135623730951},"91":{"tf":1.0},"92":{"tf":4.358898943540674},"93":{"tf":2.0},"94":{"tf":1.7320508075688772},"95":{"tf":1.4142135623730951}}}},"m":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"257":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"370":{"tf":1.0}}}}}}}},"df":1,"docs":{"370":{"tf":1.0}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}}}}},"n":{"d":{"df":14,"docs":{"283":{"tf":2.8284271247461903},"289":{"tf":1.0},"294":{"tf":1.4142135623730951},"295":{"tf":1.0},"299":{"tf":1.0},"300":{"tf":1.0},"301":{"tf":2.0},"302":{"tf":3.4641016151377544},"303":{"tf":2.0},"304":{"tf":2.449489742783178},"305":{"tf":1.0},"349":{"tf":2.23606797749979},"360":{"tf":1.0},"385":{"tf":2.8284271247461903}},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"388":{"tf":2.6457513110645907}}}},"i":{"df":1,"docs":{"299":{"tf":1.0}}}},"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"283":{"tf":2.23606797749979}}}},"df":0,"docs":{}}}}}},"df":1,"docs":{"299":{"tf":1.0}}}},"p":{"a":{"df":0,"docs":{},"r":{"df":4,"docs":{"125":{"tf":1.0},"126":{"tf":1.0},"127":{"tf":1.0},"73":{"tf":1.0}}}},"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"v":{"df":1,"docs":{"113":{"tf":1.7320508075688772}},"e":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"113":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"r":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":10,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.4142135623730951},"381":{"tf":1.7320508075688772},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":3.605551275463989},"387":{"tf":1.4142135623730951},"388":{"tf":1.7320508075688772}}}}}},"n":{"df":0,"docs":{},"o":{"df":3,"docs":{"385":{"tf":2.6457513110645907},"387":{"tf":2.0},"388":{"tf":1.4142135623730951}}}}},"df":3,"docs":{"255":{"tf":1.0},"4":{"tf":1.0},"409":{"tf":1.0}}}},"i":{"c":{"df":2,"docs":{"149":{"tf":1.0},"385":{"tf":1.0}}},"df":0,"docs":{}}}},"t":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"283":{"tf":2.0}}}}},"df":0,"docs":{}}},"df":2,"docs":{"339":{"tf":1.0},"416":{"tf":1.0}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"339":{"tf":2.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"209":{"tf":2.0}}}}}},"h":{"a":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"50":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"50":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"50":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":1,"docs":{"209":{"tf":1.7320508075688772}}}}},"df":1,"docs":{"15":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"247":{"tf":1.0}}}},"df":0,"docs":{}}}}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.7320508075688772}}}}}}},"df":1,"docs":{"234":{"tf":1.0}}}}},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}},"o":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"242":{"tf":1.7320508075688772}}}}}},"df":1,"docs":{"242":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"s":{"df":1,"docs":{"242":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}},"s":{"df":1,"docs":{"242":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":3,"docs":{"195":{"tf":1.0},"200":{"tf":3.605551275463989},"201":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"w":{"df":2,"docs":{"204":{"tf":2.0},"24":{"tf":1.0}}}},"r":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}}},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"388":{"tf":3.0}}}}},"i":{"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"113":{"tf":1.0}}}},"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"354":{"tf":1.0}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":3,"docs":{"81":{"tf":1.0},"83":{"tf":1.7320508075688772},"86":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"l":{"a":{"df":1,"docs":{"306":{"tf":1.0}}},"df":0,"docs":{}}}},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":3,"docs":{"205":{"tf":1.0},"209":{"tf":1.0},"294":{"tf":1.0}}}}},"p":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"149":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"r":{"df":1,"docs":{"247":{"tf":1.0}}},"t":{"df":0,"docs":{},"e":{"df":1,"docs":{"377":{"tf":1.0}}}},"z":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":5,"docs":{"313":{"tf":1.0},"362":{"tf":3.0},"365":{"tf":1.0},"385":{"tf":2.8284271247461903},"397":{"tf":1.0}}}}},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":2,"docs":{"384":{"tf":2.0},"385":{"tf":2.0}}}}},"i":{"c":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"77":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"_":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"w":{"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":2.0}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":3,"docs":{"137":{"tf":1.0},"77":{"tf":2.8284271247461903},"78":{"tf":1.0}}}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":2,"docs":{"43":{"tf":1.0},"45":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{".":{"df":0,"docs":{},"w":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"197":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"t":{"df":15,"docs":{"267":{"tf":1.0},"268":{"tf":2.0},"270":{"tf":1.4142135623730951},"271":{"tf":1.0},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.4142135623730951},"277":{"tf":2.0},"279":{"tf":1.7320508075688772},"280":{"tf":1.4142135623730951},"283":{"tf":2.8284271247461903},"284":{"tf":1.4142135623730951},"286":{"tf":1.7320508075688772},"287":{"tf":2.23606797749979}}}}},"df":0,"docs":{}},"n":{"a":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":1,"docs":{"54":{"tf":1.0}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":6,"docs":{"100":{"tf":1.4142135623730951},"180":{"tf":1.0},"255":{"tf":1.0},"261":{"tf":1.4142135623730951},"262":{"tf":1.0},"370":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"f":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"a":{"df":0,"docs":{},"r":{"df":2,"docs":{"255":{"tf":1.0},"414":{"tf":1.0}}}},"df":0,"docs":{}}}},"m":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"132":{"tf":1.0}}}}},"4":{"df":1,"docs":{"340":{"tf":1.0}}},"5":{".":{"0":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":5,"docs":{"104":{"tf":1.7320508075688772},"173":{"tf":1.0},"335":{"tf":1.7320508075688772},"339":{"tf":1.0},"340":{"tf":1.4142135623730951}}},"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"r":{"df":1,"docs":{"324":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"f":{"6":{"4":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"i":{"3":{"2":{"df":1,"docs":{"173":{"tf":1.0}}},"df":0,"docs":{}},"df":3,"docs":{"104":{"tf":1.0},"326":{"tf":1.7320508075688772},"340":{"tf":1.0}}},"m":{"a":{"df":0,"docs":{},"x":{"df":1,"docs":{"107":{"tf":1.0}}}},"df":0,"docs":{}},"n":{"df":1,"docs":{"340":{"tf":1.0}},"o":{"d":{"df":1,"docs":{"287":{"tf":1.0}}},"df":0,"docs":{}}},"t":{"df":2,"docs":{"101":{"tf":1.7320508075688772},"171":{"tf":1.0}}},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"328":{"tf":1.0}}}}},"df":0,"docs":{}},"x":{"df":3,"docs":{"237":{"tf":1.0},"332":{"tf":2.449489742783178},"340":{"tf":1.4142135623730951}}}},"_":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"369":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}}},"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"101":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"178":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"369":{"tf":1.0}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"b":{"df":1,"docs":{"101":{"tf":1.0}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"332":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"73":{"tf":1.0}}}}}},"b":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"i":{"df":2,"docs":{"227":{"tf":1.0},"230":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"@":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{".":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"86":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"29":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"t":{"df":0,"docs":{},"h":{"df":3,"docs":{"263":{"tf":1.4142135623730951},"60":{"tf":1.0},"93":{"tf":1.0}}}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"1":{"2":{"3":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"r":{"df":0,"docs":{},"t":{"_":{"b":{"df":0,"docs":{},"y":{"_":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"y":{"df":1,"docs":{"237":{"tf":3.3166247903554}}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"237":{"tf":1.7320508075688772}}}}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"117":{"tf":1.0}}},"r":{"c":{"df":1,"docs":{"7":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"p":{"a":{"c":{"df":0,"docs":{},"e":{"df":1,"docs":{"50":{"tf":1.7320508075688772}},"s":{"_":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"m":{"df":1,"docs":{"50":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"50":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"n":{"df":1,"docs":{"370":{"tf":1.0}}},"w":{"df":0,"docs":{},"n":{"<":{"df":0,"docs":{},"f":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}},"df":3,"docs":{"291":{"tf":2.6457513110645907},"292":{"tf":4.242640687119285},"385":{"tf":2.0}}}}},"d":{"df":0,"docs":{},"x":{"df":1,"docs":{"255":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"86":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"_":{"a":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":2.8284271247461903}}}}}},"df":0,"docs":{}}},"df":0,"docs":{},"w":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"p":{"a":{"c":{"df":1,"docs":{"148":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"t":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"312":{"tf":1.0}}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"q":{"df":1,"docs":{"95":{"tf":1.0}},"l":{"!":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"372":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":1,"docs":{"372":{"tf":1.0}}}}}}}},"df":1,"docs":{"372":{"tf":2.0}}},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"95":{"tf":1.0}}}},"df":0,"docs":{}}},"r":{"c":{"/":{"b":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":1,"docs":{"110":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":1,"docs":{"125":{"tf":1.4142135623730951}},"e":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"125":{"tf":2.6457513110645907},"126":{"tf":1.0}}}},"/":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"125":{"tf":1.0},"126":{"tf":1.0}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"126":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}}},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"126":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"g":{"a":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":2.0}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.4142135623730951}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":62,"docs":{"110":{"tf":1.7320508075688772},"112":{"tf":1.0},"113":{"tf":1.7320508075688772},"114":{"tf":1.0},"115":{"tf":2.0},"116":{"tf":1.0},"117":{"tf":1.4142135623730951},"118":{"tf":1.4142135623730951},"119":{"tf":1.4142135623730951},"120":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.4142135623730951},"125":{"tf":1.7320508075688772},"126":{"tf":1.0},"175":{"tf":1.0},"176":{"tf":1.0},"177":{"tf":1.0},"180":{"tf":1.0},"189":{"tf":1.0},"196":{"tf":2.449489742783178},"197":{"tf":2.0},"198":{"tf":1.0},"199":{"tf":1.0},"200":{"tf":1.4142135623730951},"204":{"tf":1.0},"205":{"tf":1.0},"206":{"tf":1.0},"208":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772},"218":{"tf":1.0},"221":{"tf":2.6457513110645907},"222":{"tf":1.0},"223":{"tf":2.0},"224":{"tf":2.0},"226":{"tf":1.0},"227":{"tf":2.23606797749979},"239":{"tf":1.0},"240":{"tf":1.0},"242":{"tf":1.0},"244":{"tf":2.0},"245":{"tf":1.4142135623730951},"252":{"tf":2.449489742783178},"253":{"tf":1.4142135623730951},"261":{"tf":1.4142135623730951},"283":{"tf":2.0},"309":{"tf":1.4142135623730951},"313":{"tf":2.0},"314":{"tf":1.0},"317":{"tf":1.0},"318":{"tf":1.0},"319":{"tf":1.0},"320":{"tf":1.0},"321":{"tf":1.7320508075688772},"322":{"tf":1.4142135623730951},"353":{"tf":1.0},"354":{"tf":1.0},"368":{"tf":1.0},"369":{"tf":1.0},"370":{"tf":1.4142135623730951},"385":{"tf":3.605551275463989},"387":{"tf":2.0},"388":{"tf":1.7320508075688772}},"s":{":":{"4":{"8":{":":{"5":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"9":{":":{"5":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"7":{":":{"5":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":133,"docs":{"110":{"tf":2.0},"112":{"tf":1.7320508075688772},"113":{"tf":1.0},"115":{"tf":1.0},"119":{"tf":1.0},"123":{"tf":1.4142135623730951},"125":{"tf":1.0},"153":{"tf":1.4142135623730951},"154":{"tf":1.4142135623730951},"155":{"tf":1.4142135623730951},"156":{"tf":1.0},"158":{"tf":1.4142135623730951},"159":{"tf":2.23606797749979},"167":{"tf":1.7320508075688772},"169":{"tf":1.4142135623730951},"170":{"tf":1.7320508075688772},"172":{"tf":1.7320508075688772},"173":{"tf":1.0},"184":{"tf":1.4142135623730951},"186":{"tf":1.7320508075688772},"187":{"tf":1.4142135623730951},"188":{"tf":1.0},"209":{"tf":2.0},"213":{"tf":1.0},"215":{"tf":1.0},"216":{"tf":1.4142135623730951},"218":{"tf":2.0},"219":{"tf":1.7320508075688772},"220":{"tf":2.0},"221":{"tf":2.6457513110645907},"222":{"tf":1.0},"223":{"tf":1.0},"230":{"tf":1.0},"234":{"tf":1.0},"235":{"tf":1.4142135623730951},"236":{"tf":1.7320508075688772},"237":{"tf":1.7320508075688772},"241":{"tf":1.4142135623730951},"244":{"tf":1.7320508075688772},"253":{"tf":1.4142135623730951},"26":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0},"267":{"tf":1.0},"268":{"tf":1.7320508075688772},"270":{"tf":1.0},"271":{"tf":1.0},"272":{"tf":1.4142135623730951},"273":{"tf":1.0},"274":{"tf":1.7320508075688772},"276":{"tf":1.0},"277":{"tf":1.4142135623730951},"279":{"tf":1.4142135623730951},"280":{"tf":1.0},"284":{"tf":1.0},"286":{"tf":1.4142135623730951},"287":{"tf":2.23606797749979},"291":{"tf":1.0},"292":{"tf":1.4142135623730951},"293":{"tf":1.7320508075688772},"294":{"tf":1.7320508075688772},"295":{"tf":1.0},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":2.0},"314":{"tf":1.7320508075688772},"316":{"tf":1.0},"32":{"tf":1.7320508075688772},"322":{"tf":1.4142135623730951},"327":{"tf":1.0},"33":{"tf":1.4142135623730951},"331":{"tf":1.0},"335":{"tf":1.0},"338":{"tf":2.0},"339":{"tf":2.0},"340":{"tf":1.0},"347":{"tf":1.0},"348":{"tf":1.4142135623730951},"354":{"tf":1.0},"355":{"tf":2.449489742783178},"356":{"tf":1.7320508075688772},"357":{"tf":1.0},"364":{"tf":1.0},"370":{"tf":1.4142135623730951},"376":{"tf":1.4142135623730951},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.0},"381":{"tf":1.4142135623730951},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":2.23606797749979},"388":{"tf":1.4142135623730951},"394":{"tf":1.4142135623730951},"40":{"tf":1.4142135623730951},"407":{"tf":2.0},"408":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.4142135623730951},"48":{"tf":2.0},"50":{"tf":1.0},"52":{"tf":2.0},"53":{"tf":2.449489742783178},"54":{"tf":1.4142135623730951},"55":{"tf":1.7320508075688772},"56":{"tf":1.7320508075688772},"57":{"tf":1.7320508075688772},"58":{"tf":1.4142135623730951},"60":{"tf":2.6457513110645907},"61":{"tf":2.449489742783178},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":1.4142135623730951},"73":{"tf":1.4142135623730951},"74":{"tf":1.4142135623730951},"76":{"tf":1.4142135623730951},"77":{"tf":1.7320508075688772},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"86":{"tf":1.0},"87":{"tf":1.4142135623730951},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":2.0},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0}},"s":{":":{"1":{"9":{":":{"1":{"9":{"df":1,"docs":{"53":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"2":{"8":{":":{"4":{"7":{"df":1,"docs":{"43":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"1":{"3":{"df":1,"docs":{"408":{"tf":1.0}}},"df":0,"docs":{}},"5":{"df":1,"docs":{"153":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{":":{"1":{"5":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"4":{":":{"1":{"2":{"df":1,"docs":{"86":{"tf":1.0}}},"df":0,"docs":{}},"4":{"9":{"df":1,"docs":{"158":{"tf":1.0}}},"df":1,"docs":{"394":{"tf":1.0}}},"5":{"df":2,"docs":{"154":{"tf":1.4142135623730951},"48":{"tf":1.0}}},"9":{"df":1,"docs":{"407":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"5":{":":{"1":{"0":{"df":1,"docs":{"158":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":9,"docs":{"110":{"tf":1.4142135623730951},"112":{"tf":1.0},"125":{"tf":1.0},"208":{"tf":1.0},"209":{"tf":2.0},"26":{"tf":2.0},"260":{"tf":1.0},"261":{"tf":1.4142135623730951},"380":{"tf":1.0}}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"f":{"df":1,"docs":{"15":{"tf":1.0}}}},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":2,"docs":{"414":{"tf":2.23606797749979},"416":{"tf":1.0}}}},"c":{"df":0,"docs":{},"k":{".":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"328":{"tf":1.0}}}}}},"df":1,"docs":{"154":{"tf":1.0}}}},"df":0,"docs":{},"n":{"d":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"230":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"r":{"c":{"df":0,"docs":{},"h":{"df":2,"docs":{"0":{"tf":1.0},"2":{"tf":1.0}}}},"df":0,"docs":{},"t":{"+":{"1":{"df":1,"docs":{"61":{"tf":1.0}}},"2":{"df":1,"docs":{"61":{"tf":1.0}}},"df":0,"docs":{}},".":{".":{"=":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"41":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"61":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"61":{"tf":1.0}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{".":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"77":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":1,"docs":{"77":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"t":{"df":0,"docs":{},"e":{"df":7,"docs":{"103":{"tf":2.0},"317":{"tf":2.8284271247461903},"318":{"tf":1.0},"320":{"tf":3.1622776601683795},"321":{"tf":4.358898943540674},"322":{"tf":2.449489742783178},"385":{"tf":1.0}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"56":{"tf":1.4142135623730951},"57":{"tf":1.4142135623730951}}}}}}},"i":{"c":{"df":8,"docs":{"191":{"tf":3.0},"219":{"tf":1.4142135623730951},"348":{"tf":1.7320508075688772},"360":{"tf":1.0},"385":{"tf":2.449489742783178},"392":{"tf":1.0},"397":{"tf":1.4142135623730951},"51":{"tf":1.0}}},"df":0,"docs":{}},"u":{"df":1,"docs":{"379":{"tf":1.0}},"s":{":":{":":{"df":0,"docs":{},"v":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"df":1,"docs":{"364":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"382":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}},"d":{":":{":":{"c":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{":":{":":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"42":{"tf":1.0}}}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"169":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"124":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"p":{"df":2,"docs":{"122":{"tf":1.0},"145":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"v":{":":{":":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":3,"docs":{"213":{"tf":1.7320508075688772},"214":{"tf":1.4142135623730951},"244":{"tf":1.0}},"s":{"_":{"df":0,"docs":{},"o":{"df":1,"docs":{"214":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":2,"docs":{"213":{"tf":1.4142135623730951},"227":{"tf":1.0}}}},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"220":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"f":{"6":{"4":{":":{":":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"216":{"tf":1.0}},"m":{"df":0,"docs":{},"t":{":":{":":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"119":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"120":{"tf":1.0}}}},"s":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":3,"docs":{"155":{"tf":1.0},"157":{"tf":1.0},"171":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"i":{"df":0,"docs":{},"o":{":":{":":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"377":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":5,"docs":{"155":{"tf":1.0},"159":{"tf":1.0},"171":{"tf":1.0},"360":{"tf":1.7320508075688772},"377":{"tf":1.0}},"k":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"157":{"tf":1.0}}},"df":0,"docs":{}}}}}}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"u":{"d":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}}}}}},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":1,"docs":{"216":{"tf":1.0}}}}},"t":{"df":1,"docs":{"360":{"tf":1.0}}}},"df":2,"docs":{"119":{"tf":1.0},"120":{"tf":1.0}}}}}}}},"s":{"df":0,"docs":{},"t":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"35":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}},"w":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"123":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"df":4,"docs":{"123":{"tf":1.7320508075688772},"33":{"tf":1.0},"35":{"tf":1.4142135623730951},"360":{"tf":2.23606797749979}}}},"m":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"301":{"tf":1.0}}}}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{":":{":":{"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"277":{"tf":2.449489742783178}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":1,"docs":{"376":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"354":{"tf":1.0}}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{":":{":":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"159":{"tf":1.0}}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"y":{"df":0,"docs":{},"n":{"c":{":":{":":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"299":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{":":{":":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":3,"docs":{"122":{"tf":1.7320508075688772},"123":{"tf":1.4142135623730951},"33":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":6,"docs":{"211":{"tf":1.0},"228":{"tf":1.4142135623730951},"229":{"tf":1.0},"230":{"tf":1.0},"231":{"tf":1.0},"90":{"tf":1.4142135623730951}}}}},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"35":{"tf":1.4142135623730951}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":6,"docs":{"211":{"tf":1.0},"228":{"tf":1.4142135623730951},"229":{"tf":1.0},"230":{"tf":1.0},"231":{"tf":1.0},"90":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":1,"docs":{"234":{"tf":1.0}}}}},"r":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"362":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":14,"docs":{"137":{"tf":1.7320508075688772},"139":{"tf":2.0},"141":{"tf":1.0},"143":{"tf":1.0},"189":{"tf":3.7416573867739413},"191":{"tf":1.0},"219":{"tf":1.0},"274":{"tf":2.0},"318":{"tf":1.0},"348":{"tf":1.0},"362":{"tf":3.605551275463989},"394":{"tf":2.449489742783178},"77":{"tf":2.449489742783178},"86":{"tf":3.0}},"e":{"a":{"df":0,"docs":{},"m":{"df":3,"docs":{"376":{"tf":1.0},"377":{"tf":1.4142135623730951},"379":{"tf":1.0}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"68":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"1":{"df":1,"docs":{"186":{"tf":2.23606797749979}}},"2":{"df":1,"docs":{"186":{"tf":2.23606797749979}}},":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"(":{"\"":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":2,"docs":{"68":{"tf":1.0},"77":{"tf":1.7320508075688772}}}}}}}},"df":0,"docs":{}},"df":3,"docs":{"138":{"tf":1.7320508075688772},"69":{"tf":1.0},"95":{"tf":1.0}}}}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":3,"docs":{"218":{"tf":1.0},"34":{"tf":1.4142135623730951},"42":{"tf":1.0}}}}}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":1,"docs":{"68":{"tf":1.0}}}}}}},"df":53,"docs":{"100":{"tf":2.23606797749979},"101":{"tf":1.0},"128":{"tf":1.4142135623730951},"135":{"tf":1.0},"136":{"tf":2.0},"137":{"tf":2.449489742783178},"138":{"tf":2.8284271247461903},"139":{"tf":4.242640687119285},"140":{"tf":2.0},"143":{"tf":1.4142135623730951},"145":{"tf":1.0},"147":{"tf":1.0},"159":{"tf":2.449489742783178},"166":{"tf":1.0},"175":{"tf":1.0},"178":{"tf":1.0},"180":{"tf":1.0},"184":{"tf":1.0},"186":{"tf":1.7320508075688772},"188":{"tf":1.0},"194":{"tf":1.0},"201":{"tf":1.4142135623730951},"214":{"tf":1.4142135623730951},"218":{"tf":2.0},"227":{"tf":1.4142135623730951},"235":{"tf":1.7320508075688772},"237":{"tf":1.4142135623730951},"244":{"tf":2.6457513110645907},"247":{"tf":1.0},"265":{"tf":1.4142135623730951},"274":{"tf":2.6457513110645907},"283":{"tf":1.0},"314":{"tf":1.7320508075688772},"317":{"tf":1.0},"318":{"tf":1.0},"34":{"tf":2.23606797749979},"359":{"tf":1.0},"370":{"tf":1.0},"377":{"tf":1.0},"42":{"tf":2.0},"45":{"tf":1.0},"51":{"tf":1.0},"67":{"tf":1.0},"68":{"tf":3.0},"69":{"tf":4.0},"72":{"tf":2.8284271247461903},"73":{"tf":1.0},"74":{"tf":1.4142135623730951},"76":{"tf":3.0},"77":{"tf":3.872983346207417},"83":{"tf":1.4142135623730951},"86":{"tf":1.4142135623730951},"95":{"tf":1.0}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"370":{"tf":1.7320508075688772}}}}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"139":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"280":{"tf":1.0},"287":{"tf":2.6457513110645907}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"287":{"tf":2.23606797749979}}}}},"u":{"c":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"385":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"370":{"tf":1.0}}}}}},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"396":{"tf":1.0}}}}}},"df":25,"docs":{"100":{"tf":2.23606797749979},"135":{"tf":1.0},"273":{"tf":1.0},"338":{"tf":1.0},"350":{"tf":1.0},"370":{"tf":1.7320508075688772},"392":{"tf":1.0},"397":{"tf":1.4142135623730951},"79":{"tf":1.0},"80":{"tf":1.0},"81":{"tf":2.23606797749979},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.4142135623730951},"85":{"tf":1.4142135623730951},"86":{"tf":2.23606797749979},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"93":{"tf":1.0},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":2,"docs":{"84":{"tf":1.0},"85":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"r":{"df":13,"docs":{"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}}}}}},"df":0,"docs":{}}},"u":{"d":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":2,"docs":{"16":{"tf":1.4142135623730951},"409":{"tf":1.0}}}}},"df":0,"docs":{}}},"u":{"b":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"n":{"df":1,"docs":{"396":{"tf":1.0}}}}}}}},"df":1,"docs":{"396":{"tf":1.0}},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"85":{"tf":1.0}}}},"df":0,"docs":{}}}},"c":{"df":0,"docs":{},"h":{"df":1,"docs":{"158":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"m":{":":{":":{"<":{"df":0,"docs":{},"i":{"6":{"4":{"df":1,"docs":{"247":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"240":{"tf":2.23606797749979}},"m":{"a":{"df":0,"docs":{},"r":{"df":5,"docs":{"175":{"tf":1.7320508075688772},"176":{"tf":1.4142135623730951},"177":{"tf":2.8284271247461903},"178":{"tf":2.0},"310":{"tf":1.7320508075688772}},"i":{"df":6,"docs":{"175":{"tf":2.0},"176":{"tf":2.8284271247461903},"177":{"tf":2.8284271247461903},"178":{"tf":3.3166247903554},"179":{"tf":1.7320508075688772},"310":{"tf":1.7320508075688772}},"z":{"df":0,"docs":{},"e":{"(":{"&":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"175":{"tf":1.0}}}}}}},"df":0,"docs":{}},"_":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"177":{"tf":2.449489742783178}}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"y":{">":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"1":{"df":1,"docs":{"178":{"tf":1.0}}},"df":1,"docs":{"178":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"117":{"tf":1.0}}}}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"118":{"tf":1.0}}}}}},"p":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"397":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":5,"docs":{"114":{"tf":1.0},"116":{"tf":2.8284271247461903},"197":{"tf":1.0},"208":{"tf":1.0},"392":{"tf":1.0}},"t":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"356":{"tf":1.0}}}}},"df":0,"docs":{}}}}}}},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"411":{"tf":1.0}}},"df":0,"docs":{}}}}}},"y":{"df":0,"docs":{},"m":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}},"n":{":":{":":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":1,"docs":{"370":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"c":{"df":8,"docs":{"289":{"tf":1.0},"300":{"tf":1.0},"301":{"tf":2.0},"302":{"tf":1.0},"303":{"tf":3.4641016151377544},"304":{"tf":2.449489742783178},"305":{"tf":1.0},"349":{"tf":2.23606797749979}}},"df":1,"docs":{"370":{"tf":2.6457513110645907}}}}},"t":{">":{"(":{"df":0,"docs":{},"f":{"df":1,"docs":{"385":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"]":{">":{":":{":":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"154":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"b":{"df":0,"docs":{},"l":{"df":1,"docs":{"144":{"tf":1.0}}}},"c":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"g":{"df":1,"docs":{"411":{"tf":1.0}}}}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"286":{"tf":1.7320508075688772}}}},"k":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"113":{"tf":1.0}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"y":{"df":1,"docs":{"113":{"tf":1.0}}}},"df":0,"docs":{}}},"df":4,"docs":{"293":{"tf":1.0},"320":{"tf":1.0},"387":{"tf":1.7320508075688772},"388":{"tf":1.4142135623730951}},"s":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":1,"docs":{"70":{"tf":1.0}}}}}}}}}}}},"df":0,"docs":{}}}},"p":{"df":0,"docs":{},"e":{"df":1,"docs":{"226":{"tf":1.0}}}},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"(":{"df":16,"docs":{"250":{"tf":1.4142135623730951},"256":{"tf":1.0},"261":{"tf":2.23606797749979},"262":{"tf":1.0},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}},"/":{"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"/":{"a":{"d":{"d":{"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":0,"docs":{},"s":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"261":{"tf":1.4142135623730951}}}}},"df":1,"docs":{"261":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"u":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"df":0,"docs":{},"g":{"a":{"df":0,"docs":{},"m":{"df":5,"docs":{"38":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}}}}},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":1,"docs":{"27":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":4,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0}}}}}}},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"61":{"tf":1.0}}}}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":1,"docs":{"214":{"tf":1.0}}}}}}}}}}},"df":2,"docs":{"27":{"tf":1.0},"28":{"tf":1.0}}}}},"df":0,"docs":{}},"o":{"c":{"df":1,"docs":{"252":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"28":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}},"\\":{"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"\\":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"_":{"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":1,"docs":{"27":{"tf":1.4142135623730951}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":4,"docs":{"260":{"tf":2.6457513110645907},"261":{"tf":1.0},"262":{"tf":1.0},"273":{"tf":1.0}}}}}}},"c":{"df":0,"docs":{},"p":{"df":4,"docs":{"374":{"tf":1.4142135623730951},"375":{"tf":2.23606797749979},"376":{"tf":2.449489742783178},"377":{"tf":1.0}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"376":{"tf":1.7320508075688772}}}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"m":{"df":2,"docs":{"376":{"tf":1.4142135623730951},"377":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"d":{"d":{"df":3,"docs":{"222":{"tf":1.4142135623730951},"223":{"tf":1.0},"226":{"tf":1.0}}},"df":0,"docs":{}},"df":25,"docs":{"101":{"tf":3.605551275463989},"104":{"tf":1.0},"155":{"tf":1.7320508075688772},"159":{"tf":1.0},"169":{"tf":3.1622776601683795},"170":{"tf":2.449489742783178},"171":{"tf":2.449489742783178},"172":{"tf":2.449489742783178},"178":{"tf":2.449489742783178},"180":{"tf":1.4142135623730951},"192":{"tf":1.4142135623730951},"227":{"tf":1.0},"234":{"tf":1.0},"237":{"tf":2.449489742783178},"272":{"tf":1.7320508075688772},"273":{"tf":1.0},"275":{"tf":2.8284271247461903},"303":{"tf":1.7320508075688772},"346":{"tf":1.4142135623730951},"347":{"tf":1.0},"361":{"tf":1.4142135623730951},"362":{"tf":2.449489742783178},"385":{"tf":2.6457513110645907},"397":{"tf":3.0},"404":{"tf":1.0}},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":1,"docs":{"227":{"tf":1.0}}}},"m":{"df":0,"docs":{},"p":{"_":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{".":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"(":{"1":{"df":1,"docs":{"368":{"tf":1.0}}},"2":{"df":1,"docs":{"368":{"tf":1.0}}},"3":{"df":1,"docs":{"368":{"tf":1.0}}},"df":0,"docs":{}},"df":1,"docs":{"368":{"tf":1.0}}}}}}},"df":1,"docs":{"368":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"159":{"tf":1.0}}}}}},"s":{"df":0,"docs":{},"t":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"197":{"tf":1.0},"205":{"tf":1.0},"206":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"206":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"197":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":20,"docs":{"124":{"tf":1.0},"195":{"tf":1.0},"196":{"tf":4.242640687119285},"197":{"tf":2.0},"198":{"tf":1.0},"200":{"tf":1.0},"201":{"tf":1.0},"202":{"tf":2.6457513110645907},"203":{"tf":2.0},"204":{"tf":1.4142135623730951},"205":{"tf":2.23606797749979},"206":{"tf":2.449489742783178},"208":{"tf":2.6457513110645907},"209":{"tf":5.0},"215":{"tf":1.0},"223":{"tf":1.0},"247":{"tf":1.4142135623730951},"252":{"tf":2.6457513110645907},"261":{"tf":4.69041575982343},"385":{"tf":1.0}},"s":{"/":{"a":{"d":{"d":{"/":{"a":{"d":{"d":{"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"261":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"m":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":2.0}}}},"/":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"d":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"209":{"tf":2.8284271247461903}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":8,"docs":{"196":{"tf":2.0},"197":{"tf":1.7320508075688772},"198":{"tf":1.4142135623730951},"200":{"tf":1.7320508075688772},"204":{"tf":1.4142135623730951},"205":{"tf":1.4142135623730951},"208":{"tf":1.4142135623730951},"209":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"o":{"df":8,"docs":{"196":{"tf":1.4142135623730951},"197":{"tf":2.0},"198":{"tf":1.4142135623730951},"199":{"tf":2.23606797749979},"200":{"tf":2.0},"201":{"tf":1.0},"206":{"tf":1.4142135623730951},"209":{"tf":1.7320508075688772}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"205":{"tf":1.0}}}}}},"df":4,"docs":{"204":{"tf":1.0},"205":{"tf":1.4142135623730951},"206":{"tf":1.0},"209":{"tf":1.0}}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"201":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":1,"docs":{"196":{"tf":1.0}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"_":{"a":{"d":{"d":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"t":{"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":1,"docs":{"261":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"x":{"df":0,"docs":{},"t":{"df":3,"docs":{"148":{"tf":1.0},"159":{"tf":2.23606797749979},"318":{"tf":1.0}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"df":3,"docs":{"312":{"tf":1.0},"313":{"tf":1.0},"314":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}}}}}},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{":":{":":{"df":0,"docs":{},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"l":{"df":1,"docs":{"385":{"tf":1.7320508075688772}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"p":{"df":3,"docs":{"291":{"tf":1.0},"296":{"tf":1.0},"297":{"tf":1.0}}}}}},"p":{"a":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"(":{"df":0,"docs":{},"m":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":1,"docs":{"293":{"tf":1.0}}}}}},"df":6,"docs":{"291":{"tf":1.0},"292":{"tf":1.7320508075688772},"293":{"tf":2.0},"294":{"tf":1.0},"299":{"tf":1.0},"385":{"tf":3.605551275463989}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":15,"docs":{"154":{"tf":1.0},"158":{"tf":1.4142135623730951},"203":{"tf":1.0},"219":{"tf":1.0},"284":{"tf":1.0},"291":{"tf":3.0},"292":{"tf":5.0990195135927845},"296":{"tf":1.0},"297":{"tf":1.0},"299":{"tf":1.0},"385":{"tf":2.0},"386":{"tf":1.0},"387":{"tf":2.0},"43":{"tf":1.0},"53":{"tf":1.0}},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"385":{"tf":2.6457513110645907}}}}}},"df":0,"docs":{}},"df":3,"docs":{"385":{"tf":6.4031242374328485},"387":{"tf":1.7320508075688772},"388":{"tf":3.3166247903554}}}}}},"s":{"=":{"1":{"df":1,"docs":{"203":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"49":{"tf":1.4142135623730951}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"360":{"tf":2.0}}}}}},"i":{"c":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"s":{"df":0,"docs":{},"v":{"1":{".":{"2":{"df":1,"docs":{"15":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"o":{"_":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"227":{"tf":2.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":4,"docs":{"138":{"tf":2.0},"180":{"tf":1.0},"356":{"tf":1.7320508075688772},"364":{"tf":1.4142135623730951}}}}},"v":{"df":0,"docs":{},"e":{"c":{"df":1,"docs":{"402":{"tf":1.7320508075688772}}},"df":0,"docs":{}}}},"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"117":{"tf":1.7320508075688772}}}}},"df":0,"docs":{},"e":{"df":1,"docs":{"139":{"tf":1.4142135623730951}}},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"254":{"tf":1.0}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"m":{"df":5,"docs":{"366":{"tf":1.0},"369":{"tf":2.6457513110645907},"370":{"tf":3.1622776601683795},"371":{"tf":2.0},"372":{"tf":2.0}}}},"df":0,"docs":{}}}}}}}},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"26":{"tf":1.0}}},"’":{"df":1,"docs":{"26":{"tf":1.0}}}},"n":{"df":0,"docs":{},"i":{"df":1,"docs":{"101":{"tf":1.0}}}},"o":{"df":0,"docs":{},"l":{"c":{"df":0,"docs":{},"h":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"416":{"tf":2.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"180":{"tf":1.7320508075688772},"364":{"tf":1.0}}}}}},"r":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"414":{"tf":1.4142135623730951}}},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"360":{"tf":1.0}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"179":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},">":{":":{":":{"df":0,"docs":{},"f":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"c":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"(":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"i":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"f":{"_":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"355":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"i":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":34,"docs":{"166":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":1.7320508075688772},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"174":{"tf":1.0},"175":{"tf":1.4142135623730951},"176":{"tf":1.7320508075688772},"177":{"tf":2.23606797749979},"178":{"tf":3.0},"179":{"tf":2.6457513110645907},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.4142135623730951},"239":{"tf":1.0},"244":{"tf":1.0},"266":{"tf":1.0},"299":{"tf":1.0},"302":{"tf":1.0},"311":{"tf":1.0},"349":{"tf":1.0},"354":{"tf":1.0},"362":{"tf":2.0},"365":{"tf":1.0},"392":{"tf":1.0},"396":{"tf":1.7320508075688772},"397":{"tf":1.7320508075688772}}}},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"375":{"tf":1.0}}}}},"m":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":1,"docs":{"375":{"tf":1.0}}}}}}}}},"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":0,"docs":{},"l":{"df":1,"docs":{"99":{"tf":1.0}}}}}},"df":3,"docs":{"393":{"tf":1.0},"394":{"tf":1.4142135623730951},"86":{"tf":1.0}},"m":{"df":1,"docs":{"42":{"tf":1.4142135623730951}}}},"u":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":13,"docs":{"197":{"tf":1.7320508075688772},"242":{"tf":1.4142135623730951},"245":{"tf":1.0},"340":{"tf":1.0},"392":{"tf":1.0},"52":{"tf":1.0},"60":{"tf":1.4142135623730951},"61":{"tf":1.0},"69":{"tf":1.0},"81":{"tf":1.0},"86":{"tf":1.0},"92":{"tf":1.0},"94":{"tf":1.4142135623730951}}},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"226":{"tf":1.0}}}}},"y":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"v":{"df":1,"docs":{"294":{"tf":2.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"u":{"df":0,"docs":{},"p":{"df":1,"docs":{"53":{"tf":1.7320508075688772}},"l":{"df":3,"docs":{"273":{"tf":1.0},"53":{"tf":1.0},"84":{"tf":1.0}},"e":{"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"53":{"tf":1.4142135623730951}},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"338":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"r":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"397":{"tf":1.0}}}}}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"1":{"tf":1.0}}}}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":11,"docs":{"122":{"tf":1.4142135623730951},"33":{"tf":2.0},"34":{"tf":1.0},"35":{"tf":1.0},"36":{"tf":1.0},"361":{"tf":1.0},"37":{"tf":1.0},"40":{"tf":1.0},"41":{"tf":1.0},"42":{"tf":1.4142135623730951},"45":{"tf":1.4142135623730951}}}}}},"n":{"df":0,"docs":{},"o":{"df":5,"docs":{"32":{"tf":1.7320508075688772},"36":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"44":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"w":{"df":0,"docs":{},"e":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":5,"docs":{"175":{"tf":1.4142135623730951},"176":{"tf":2.6457513110645907},"177":{"tf":1.7320508075688772},"178":{"tf":1.4142135623730951},"179":{"tf":1.7320508075688772}}}}},"i":{"c":{"df":0,"docs":{},"e":{"df":1,"docs":{"48":{"tf":1.7320508075688772}}}},"df":0,"docs":{}},"o":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"198":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"283":{"tf":1.0}}}}}}}},"df":0,"docs":{}},"df":2,"docs":{"261":{"tf":1.7320508075688772},"336":{"tf":1.0}}}},"x":{".":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"d":{"df":1,"docs":{"295":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":1,"docs":{"294":{"tf":2.23606797749979}}},"y":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"60":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"b":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"179":{"tf":1.0},"361":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"60":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},":":{":":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"397":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"<":{"df":0,"docs":{},"i":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"=":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":1,"docs":{"397":{"tf":1.0}}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"df":34,"docs":{"155":{"tf":1.0},"167":{"tf":1.7320508075688772},"169":{"tf":2.0},"170":{"tf":2.0},"172":{"tf":1.7320508075688772},"175":{"tf":1.0},"176":{"tf":1.4142135623730951},"177":{"tf":2.23606797749979},"178":{"tf":1.4142135623730951},"179":{"tf":1.4142135623730951},"180":{"tf":1.0},"182":{"tf":1.4142135623730951},"183":{"tf":1.4142135623730951},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"188":{"tf":1.0},"189":{"tf":1.0},"190":{"tf":1.4142135623730951},"192":{"tf":1.0},"239":{"tf":1.7320508075688772},"273":{"tf":1.4142135623730951},"314":{"tf":1.4142135623730951},"354":{"tf":1.4142135623730951},"355":{"tf":1.0},"360":{"tf":1.0},"361":{"tf":1.4142135623730951},"392":{"tf":1.0},"396":{"tf":3.3166247903554},"397":{"tf":3.1622776601683795},"42":{"tf":1.0},"43":{"tf":1.0},"51":{"tf":1.4142135623730951},"74":{"tf":1.0}},"n":{"a":{"df":0,"docs":{},"m":{"df":1,"docs":{"370":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"o":{"df":0,"docs":{},"f":{"df":1,"docs":{"393":{"tf":1.0}}}},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"50":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":2,"docs":{"361":{"tf":1.0},"50":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"u":{"+":{"0":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"1":{"0":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":1,"docs":{"52":{"tf":1.0}}}}}}},"df":0,"docs":{}},"d":{"7":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":1,"docs":{"52":{"tf":1.0}}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"0":{"0":{"0":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"1":{"2":{"8":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"6":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"3":{"2":{"df":14,"docs":{"163":{"tf":1.0},"164":{"tf":1.0},"235":{"tf":2.0},"353":{"tf":1.4142135623730951},"359":{"tf":1.4142135623730951},"361":{"tf":1.7320508075688772},"364":{"tf":1.0},"42":{"tf":2.6457513110645907},"45":{"tf":1.0},"49":{"tf":1.0},"51":{"tf":1.4142135623730951},"52":{"tf":1.4142135623730951},"69":{"tf":1.0},"89":{"tf":1.0}}},"df":0,"docs":{}},"6":{"4":{"df":2,"docs":{"52":{"tf":1.0},"86":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":6,"docs":{"100":{"tf":1.0},"106":{"tf":1.0},"140":{"tf":1.0},"379":{"tf":1.0},"397":{"tf":1.0},"52":{"tf":2.23606797749979}}},"b":{"df":1,"docs":{"154":{"tf":1.0}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"df":1,"docs":{"15":{"tf":1.0}}}}}}},"df":6,"docs":{"170":{"tf":1.7320508075688772},"178":{"tf":1.7320508075688772},"227":{"tf":1.0},"275":{"tf":2.23606797749979},"397":{"tf":1.4142135623730951},"52":{"tf":1.0}},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"154":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"s":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"106":{"tf":1.4142135623730951}}}}},"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"n":{"d":{"df":10,"docs":{"67":{"tf":1.0},"68":{"tf":1.0},"69":{"tf":2.6457513110645907},"70":{"tf":1.0},"71":{"tf":1.4142135623730951},"72":{"tf":2.23606797749979},"73":{"tf":2.6457513110645907},"74":{"tf":2.0},"76":{"tf":2.23606797749979},"77":{"tf":2.449489742783178}}},"df":0,"docs":{}}},"df":0,"docs":{}}}}},"o":{"df":1,"docs":{"258":{"tf":1.4142135623730951}}}},"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"d":{"df":5,"docs":{"140":{"tf":1.7320508075688772},"142":{"tf":1.0},"214":{"tf":1.7320508075688772},"227":{"tf":1.4142135623730951},"52":{"tf":1.7320508075688772}}},"df":0,"docs":{}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"18":{"tf":1.0}}}},"df":0,"docs":{}}}},"o":{"df":0,"docs":{},"n":{"df":3,"docs":{"345":{"tf":1.0},"350":{"tf":2.0},"392":{"tf":1.0}}}},"t":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"106":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"l":{"a":{"b":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":1,"docs":{"55":{"tf":1.7320508075688772}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":4,"docs":{"370":{"tf":1.0},"385":{"tf":1.0},"53":{"tf":1.0},"85":{"tf":1.0}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"261":{"tf":1.7320508075688772}}}}}}}},"l":{"df":0,"docs":{},"o":{"c":{"df":0,"docs":{},"k":{"df":1,"docs":{"385":{"tf":1.0}}}},"df":0,"docs":{}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"d":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":0,"docs":{},"s":{":":{"df":0,"docs":{},"h":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"123":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":15,"docs":{"250":{"tf":1.0},"256":{"tf":1.0},"261":{"tf":2.23606797749979},"27":{"tf":2.0},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.4142135623730951},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0}}}}}}},"r":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"151":{"tf":1.0}}}}}}},"df":0,"docs":{},"l":{"df":1,"docs":{"187":{"tf":1.4142135623730951}}},"s":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"v":{"df":1,"docs":{"261":{"tf":1.0}}}}}}}},"s":{"a":{"df":0,"docs":{},"f":{"df":11,"docs":{"252":{"tf":1.0},"281":{"tf":1.4142135623730951},"344":{"tf":1.7320508075688772},"345":{"tf":3.1622776601683795},"346":{"tf":1.7320508075688772},"347":{"tf":4.0},"348":{"tf":1.0},"349":{"tf":2.6457513110645907},"350":{"tf":1.0},"351":{"tf":2.0},"392":{"tf":1.0}},"e":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"347":{"tf":1.0}}}}}},"df":0,"docs":{}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"z":{"df":1,"docs":{"393":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"s":{"df":2,"docs":{"261":{"tf":1.0},"407":{"tf":1.0}}}},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"/":{"df":0,"docs":{},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"_":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"_":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"404":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"s":{"df":5,"docs":{"157":{"tf":1.4142135623730951},"219":{"tf":2.0},"220":{"tf":1.7320508075688772},"234":{"tf":2.6457513110645907},"237":{"tf":3.0}},"e":{"(":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"c":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":1,"docs":{"237":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"<":{"df":0,"docs":{},"f":{">":{"(":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"f":{"df":1,"docs":{"237":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}}}},"df":1,"docs":{"146":{"tf":1.0}}}}},"df":18,"docs":{"158":{"tf":3.3166247903554},"161":{"tf":1.7320508075688772},"162":{"tf":1.7320508075688772},"219":{"tf":1.0},"220":{"tf":1.0},"227":{"tf":1.0},"294":{"tf":1.0},"299":{"tf":1.4142135623730951},"321":{"tf":1.0},"361":{"tf":1.7320508075688772},"370":{"tf":1.4142135623730951},"376":{"tf":1.4142135623730951},"377":{"tf":1.0},"379":{"tf":1.0},"381":{"tf":1.7320508075688772},"385":{"tf":2.449489742783178},"387":{"tf":1.0},"388":{"tf":1.0}}}},"df":0,"docs":{}}},"y":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"258":{"tf":1.0}}}}},"df":0,"docs":{}}},"p":{"d":{"a":{"df":0,"docs":{},"t":{"df":8,"docs":{"18":{"tf":1.0},"255":{"tf":1.0},"256":{"tf":1.0},"258":{"tf":1.4142135623730951},"261":{"tf":1.0},"262":{"tf":1.0},"387":{"tf":1.4142135623730951},"40":{"tf":2.449489742783178}},"e":{"_":{"a":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"g":{"df":1,"docs":{"309":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{},"g":{"df":0,"docs":{},"r":{"a":{"d":{"df":2,"docs":{"287":{"tf":1.7320508075688772},"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"l":{"df":0,"docs":{},"o":{"a":{"d":{"df":2,"docs":{"255":{"tf":1.0},"256":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"c":{"a":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"c":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"169":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"r":{"df":0,"docs":{},"i":{"df":2,"docs":{"378":{"tf":2.449489742783178},"384":{"tf":1.7320508075688772}}},"l":{"df":1,"docs":{"378":{"tf":1.7320508075688772}}}},"s":{",":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{";":{"df":0,"docs":{},"q":{"=":{"0":{".":{"5":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}}}},"df":56,"docs":{"101":{"tf":1.4142135623730951},"109":{"tf":1.0},"111":{"tf":1.0},"112":{"tf":2.0},"117":{"tf":1.7320508075688772},"118":{"tf":3.7416573867739413},"119":{"tf":3.4641016151377544},"120":{"tf":1.7320508075688772},"121":{"tf":3.4641016151377544},"122":{"tf":2.23606797749979},"123":{"tf":3.3166247903554},"124":{"tf":1.7320508075688772},"126":{"tf":1.4142135623730951},"127":{"tf":1.0},"145":{"tf":1.0},"157":{"tf":1.4142135623730951},"197":{"tf":1.0},"208":{"tf":1.0},"209":{"tf":1.7320508075688772},"213":{"tf":1.4142135623730951},"216":{"tf":1.0},"219":{"tf":1.0},"220":{"tf":1.0},"221":{"tf":1.4142135623730951},"224":{"tf":1.4142135623730951},"253":{"tf":3.605551275463989},"261":{"tf":2.23606797749979},"273":{"tf":1.0},"279":{"tf":1.0},"293":{"tf":1.0},"299":{"tf":1.0},"327":{"tf":1.0},"33":{"tf":1.0},"339":{"tf":1.0},"35":{"tf":1.4142135623730951},"369":{"tf":1.0},"380":{"tf":1.0},"392":{"tf":1.4142135623730951},"407":{"tf":1.0},"408":{"tf":1.0},"41":{"tf":1.4142135623730951},"42":{"tf":1.4142135623730951},"69":{"tf":1.4142135623730951},"81":{"tf":2.0},"82":{"tf":1.0},"83":{"tf":1.4142135623730951},"84":{"tf":1.0},"85":{"tf":1.0},"87":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.0},"90":{"tf":3.1622776601683795},"92":{"tf":1.4142135623730951},"94":{"tf":1.4142135623730951},"95":{"tf":1.0},"96":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"1":{".":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"81":{"tf":1.0}}}}},"df":0,"docs":{}}}},"df":2,"docs":{"83":{"tf":3.1622776601683795},"86":{"tf":1.0}}},"2":{"df":1,"docs":{"83":{"tf":2.449489742783178}}},"<":{"'":{"a":{"df":1,"docs":{"86":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.0}}}}}}}}},"df":5,"docs":{"377":{"tf":1.4142135623730951},"81":{"tf":2.449489742783178},"82":{"tf":1.0},"83":{"tf":1.7320508075688772},"86":{"tf":1.7320508075688772}},"n":{"a":{"df":0,"docs":{},"m":{"df":5,"docs":{"159":{"tf":2.23606797749979},"81":{"tf":1.0},"82":{"tf":1.4142135623730951},"83":{"tf":1.7320508075688772},"86":{"tf":2.23606797749979}},"e":{"_":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"159":{"tf":2.23606797749979}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"%":{"\\":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"j":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"21":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}}}}},"i":{"df":0,"docs":{},"z":{"df":6,"docs":{"154":{"tf":1.0},"362":{"tf":1.0},"385":{"tf":2.23606797749979},"397":{"tf":1.0},"52":{"tf":1.7320508075688772},"76":{"tf":1.7320508075688772}}}},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":2,"docs":{"103":{"tf":1.4142135623730951},"107":{"tf":1.0}},"e":{":":{":":{"a":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"f":{"df":14,"docs":{"136":{"tf":2.0},"137":{"tf":2.0},"138":{"tf":1.4142135623730951},"139":{"tf":1.0},"140":{"tf":2.449489742783178},"141":{"tf":1.0},"142":{"tf":1.0},"143":{"tf":1.4142135623730951},"150":{"tf":1.0},"265":{"tf":1.0},"34":{"tf":1.0},"377":{"tf":1.0},"52":{"tf":1.0},"77":{"tf":1.7320508075688772}}},"i":{"df":0,"docs":{},"l":{"df":1,"docs":{"253":{"tf":2.23606797749979}}}}}},"v":{"0":{".":{"1":{".":{"0":{"df":15,"docs":{"256":{"tf":2.0},"261":{"tf":2.6457513110645907},"27":{"tf":1.7320508075688772},"377":{"tf":1.0},"38":{"tf":1.0},"385":{"tf":1.0},"388":{"tf":1.0},"40":{"tf":1.4142135623730951},"407":{"tf":1.4142135623730951},"41":{"tf":1.0},"42":{"tf":1.0},"43":{"tf":1.0},"45":{"tf":1.0},"61":{"tf":1.0},"86":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"2":{".":{"1":{"2":{"7":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"6":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"7":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{".":{"1":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"6":{".":{"3":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"8":{".":{"5":{"df":2,"docs":{"261":{"tf":1.4142135623730951},"40":{"tf":1.7320508075688772}}},"6":{"df":1,"docs":{"40":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"1":{".":{"0":{".":{"0":{"df":1,"docs":{"40":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"3":{".":{"0":{".":{"0":{"df":1,"docs":{"262":{"tf":2.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":3,"docs":{"238":{"tf":1.4142135623730951},"239":{"tf":1.7320508075688772},"240":{"tf":1.0}}}}}}},"df":2,"docs":{"238":{"tf":1.0},"239":{"tf":1.0}}},"4":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"v":{"4":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":2,"docs":{"100":{"tf":1.4142135623730951},"99":{"tf":1.0}}},"6":{"(":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"v":{"6":{"a":{"d":{"d":{"df":0,"docs":{},"r":{"df":1,"docs":{"100":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":2,"docs":{"100":{"tf":1.7320508075688772},"99":{"tf":1.0}}},"[":{"1":{"0":{"0":{"df":1,"docs":{"132":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"295":{"tf":1.7320508075688772},"361":{"tf":1.0}},"i":{"d":{"df":1,"docs":{"181":{"tf":1.0}}},"df":0,"docs":{}},"u":{"df":20,"docs":{"158":{"tf":1.0},"164":{"tf":3.605551275463989},"200":{"tf":2.449489742783178},"204":{"tf":1.4142135623730951},"219":{"tf":1.0},"237":{"tf":2.6457513110645907},"283":{"tf":1.7320508075688772},"284":{"tf":2.8284271247461903},"287":{"tf":2.449489742783178},"326":{"tf":1.0},"329":{"tf":1.4142135623730951},"339":{"tf":1.0},"347":{"tf":1.0},"408":{"tf":1.0},"48":{"tf":1.7320508075688772},"55":{"tf":1.7320508075688772},"57":{"tf":1.0},"61":{"tf":1.0},"74":{"tf":1.4142135623730951},"81":{"tf":1.0}},"e":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"_":{"c":{"df":1,"docs":{"102":{"tf":1.0}},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"s":{"(":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{":":{":":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"(":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{":":{":":{"a":{"df":0,"docs":{},"l":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"k":{"a":{"df":1,"docs":{"103":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{},"s":{"/":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"p":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{".":{"df":0,"docs":{},"t":{"df":0,"docs":{},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"57":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}}}}}}},"s":{"df":0,"docs":{},"r":{"c":{"/":{"df":0,"docs":{},"m":{"a":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"57":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"df":0,"docs":{}}}}},"r":{"df":2,"docs":{"227":{"tf":1.0},"396":{"tf":3.3166247903554}},"i":{"a":{"b":{"df":0,"docs":{},"l":{"df":6,"docs":{"103":{"tf":1.0},"293":{"tf":1.0},"407":{"tf":1.0},"43":{"tf":1.0},"48":{"tf":2.449489742783178},"53":{"tf":1.0}}}},"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"(":{"df":0,"docs":{},"x":{"df":1,"docs":{"396":{"tf":1.0}}}},"df":1,"docs":{"100":{"tf":1.0}}}}},"df":0,"docs":{}}}},"c":{"df":1,"docs":{"26":{"tf":1.0}},"s":{"=":{"df":0,"docs":{},"g":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"26":{"tf":1.0}}}}}},"df":0,"docs":{}}},"df":9,"docs":{"130":{"tf":1.4142135623730951},"144":{"tf":1.7320508075688772},"148":{"tf":1.0},"166":{"tf":1.0},"235":{"tf":1.0},"293":{"tf":4.358898943540674},"368":{"tf":1.0},"400":{"tf":1.4142135623730951},"403":{"tf":1.0}},"e":{"c":{"!":{"[":{"1":{"df":1,"docs":{"368":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":4,"docs":{"130":{"tf":1.0},"235":{"tf":1.0},"368":{"tf":1.0},"385":{"tf":1.4142135623730951}}}}}},"df":0,"docs":{}},"<":{"_":{"df":1,"docs":{"377":{"tf":1.0}}},"df":0,"docs":{},"i":{"3":{"2":{"df":3,"docs":{"130":{"tf":1.4142135623730951},"131":{"tf":1.0},"309":{"tf":1.4142135623730951}}},"df":0,"docs":{}},"df":0,"docs":{}},"r":{"c":{"<":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"287":{"tf":1.0}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"s":{"df":0,"docs":{},"h":{"df":0,"docs":{},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":1,"docs":{"234":{"tf":1.0}}}}}}},"df":0,"docs":{}}}}},"t":{"df":0,"docs":{},"r":{"df":2,"docs":{"283":{"tf":1.0},"357":{"tf":1.0}}}}},"t":{"df":14,"docs":{"129":{"tf":1.0},"130":{"tf":1.7320508075688772},"132":{"tf":1.0},"134":{"tf":1.0},"138":{"tf":1.4142135623730951},"139":{"tf":1.0},"166":{"tf":1.0},"176":{"tf":1.7320508075688772},"238":{"tf":1.0},"265":{"tf":1.0},"268":{"tf":1.0},"287":{"tf":1.0},"313":{"tf":1.0},"357":{"tf":2.8284271247461903}}},"u":{"3":{"2":{"df":1,"docs":{"368":{"tf":1.0}}},"df":0,"docs":{}},"8":{"df":2,"docs":{"140":{"tf":1.0},"397":{"tf":1.0}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"k":{"df":1,"docs":{"385":{"tf":1.0}}}}}}},"df":5,"docs":{"130":{"tf":1.0},"235":{"tf":1.0},"283":{"tf":1.0},"367":{"tf":1.0},"368":{"tf":2.8284271247461903}},"t":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":2,"docs":{"128":{"tf":1.0},"129":{"tf":1.0}}}}}},"df":0,"docs":{},"g":{"df":0,"docs":{},"e":{"df":0,"docs":{},"t":{"a":{"b":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"r":{"df":1,"docs":{"112":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":1,"docs":{"112":{"tf":2.0}}}}},"r":{"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":2,"docs":{"154":{"tf":1.0},"360":{"tf":1.0}}}}},"df":1,"docs":{"258":{"tf":1.4142135623730951}},"i":{"df":0,"docs":{},"f":{"df":0,"docs":{},"i":{"df":1,"docs":{"256":{"tf":1.0}}}}},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":7,"docs":{"17":{"tf":1.0},"25":{"tf":1.0},"255":{"tf":1.0},"257":{"tf":1.4142135623730951},"26":{"tf":1.0},"378":{"tf":1.0},"379":{"tf":1.0}}}}}},"t":{";":{"&":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"396":{"tf":1.4142135623730951}}}}}}},".":{".":{".":{"&":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":2,"docs":{"396":{"tf":1.0},"397":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"396":{"tf":2.449489742783178}}}}},"i":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"393":{"tf":1.0}}}},"df":0,"docs":{}}}},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"408":{"tf":1.0}}}},"u":{"a":{"df":0,"docs":{},"l":{"df":2,"docs":{"16":{"tf":1.4142135623730951},"409":{"tf":1.0}}}},"df":0,"docs":{}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"d":{"df":1,"docs":{"308":{"tf":1.0}}},"df":0,"docs":{}}}}}},"s":{"df":1,"docs":{"56":{"tf":1.4142135623730951}}}},"w":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"n":{"(":{"d":{"df":0,"docs":{},"e":{"a":{"d":{"_":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"d":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"df":1,"docs":{"261":{"tf":1.0}}}}}}}},"v":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":1,"docs":{"407":{"tf":1.0}}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}}}},"df":4,"docs":{"255":{"tf":1.0},"261":{"tf":1.7320508075688772},"385":{"tf":2.23606797749979},"407":{"tf":1.0}}}},"v":{"df":0,"docs":{},"e":{"df":1,"docs":{"355":{"tf":1.0}}}}},"df":1,"docs":{"194":{"tf":1.0}},"e":{"a":{"df":0,"docs":{},"k":{"<":{"df":0,"docs":{},"n":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"287":{"tf":2.449489742783178}}},"df":0,"docs":{}}},"t":{"df":3,"docs":{"280":{"tf":1.0},"287":{"tf":3.1622776601683795},"288":{"tf":1.0}}}},"_":{"c":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":2,"docs":{"280":{"tf":1.4142135623730951},"287":{"tf":2.23606797749979}}}}}}},"df":0,"docs":{}},"df":1,"docs":{"287":{"tf":2.8284271247461903}}}},"b":{"df":10,"docs":{"376":{"tf":1.0},"377":{"tf":1.0},"379":{"tf":1.0},"380":{"tf":1.4142135623730951},"381":{"tf":1.7320508075688772},"382":{"tf":1.0},"384":{"tf":1.0},"385":{"tf":4.47213595499958},"387":{"tf":2.449489742783178},"388":{"tf":2.23606797749979}}},"df":0,"docs":{},"s":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"y":{"df":1,"docs":{"308":{"tf":1.0}}}}}}},"i":{"d":{"df":0,"docs":{},"t":{"df":0,"docs":{},"h":{"df":7,"docs":{"237":{"tf":1.0},"314":{"tf":1.7320508075688772},"88":{"tf":1.0},"89":{"tf":1.7320508075688772},"90":{"tf":1.4142135623730951},"92":{"tf":2.23606797749979},"99":{"tf":1.0}}}}},"df":0,"docs":{},"l":{"d":{"c":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"339":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"n":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":9,"docs":{"12":{"tf":1.0},"16":{"tf":2.0},"17":{"tf":1.0},"21":{"tf":1.4142135623730951},"22":{"tf":1.0},"24":{"tf":2.449489742783178},"27":{"tf":1.7320508075688772},"416":{"tf":2.0},"42":{"tf":1.0}}}}},"df":3,"docs":{"43":{"tf":1.0},"44":{"tf":1.0},"45":{"tf":1.0}}},"t":{"df":0,"docs":{},"h":{"_":{"c":{"a":{"df":0,"docs":{},"p":{"a":{"c":{"df":1,"docs":{"385":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"t":{"df":2,"docs":{"273":{"tf":1.0},"36":{"tf":1.0}}}}}}},"z":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"355":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"o":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"148":{"tf":1.0}}}}},"df":0,"docs":{}},"r":{"d":{"df":2,"docs":{"76":{"tf":2.23606797749979},"77":{"tf":1.7320508075688772}}},"df":0,"docs":{},"k":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{":":{":":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"w":{"df":2,"docs":{"385":{"tf":2.449489742783178},"387":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":4,"docs":{"385":{"tf":6.324555320336759},"386":{"tf":1.0},"387":{"tf":3.7416573867739413},"388":{"tf":3.605551275463989}}}},"s":{"df":0,"docs":{},"p":{"a":{"c":{"df":4,"docs":{"109":{"tf":1.0},"259":{"tf":1.0},"260":{"tf":2.23606797749979},"261":{"tf":2.23606797749979}}},"df":0,"docs":{}},"df":0,"docs":{}}}},"l":{"d":{"df":13,"docs":{"10":{"tf":1.0},"12":{"tf":1.0},"139":{"tf":1.0},"148":{"tf":1.0},"25":{"tf":1.0},"26":{"tf":2.0},"261":{"tf":1.0},"27":{"tf":2.23606797749979},"30":{"tf":1.0},"32":{"tf":1.4142135623730951},"54":{"tf":1.0},"58":{"tf":1.0},"77":{"tf":1.7320508075688772}}},"df":0,"docs":{}}}},"r":{"a":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"357":{"tf":3.3166247903554}}}},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"_":{"a":{"d":{"d":{"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"52":{"tf":1.0}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"_":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"379":{"tf":1.4142135623730951}}}},"df":0,"docs":{}},"df":13,"docs":{"100":{"tf":1.0},"196":{"tf":2.449489742783178},"197":{"tf":2.6457513110645907},"198":{"tf":2.0},"199":{"tf":2.23606797749979},"200":{"tf":2.6457513110645907},"201":{"tf":1.0},"204":{"tf":1.7320508075688772},"205":{"tf":2.0},"206":{"tf":1.7320508075688772},"208":{"tf":1.4142135623730951},"209":{"tf":2.449489742783178},"360":{"tf":1.7320508075688772}}}}}}},"x":{".":{"df":0,"docs":{},"y":{".":{"df":0,"docs":{},"z":{"df":1,"docs":{"17":{"tf":1.0}}}},"df":0,"docs":{}}},"1":{"df":1,"docs":{"172":{"tf":1.7320508075688772}}},"2":{"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"8":{"6":{"_":{"6":{"4":{"df":1,"docs":{"416":{"tf":1.7320508075688772}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}},":":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"r":{"df":1,"docs":{"368":{"tf":1.4142135623730951}}}}}}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"93":{"tf":1.0}}}},"df":0,"docs":{}}}}},"c":{"df":0,"docs":{},"o":{"d":{"df":0,"docs":{},"e":{"df":1,"docs":{"15":{"tf":1.0}}}},"df":0,"docs":{}}},"df":42,"docs":{"104":{"tf":1.4142135623730951},"170":{"tf":3.0},"172":{"tf":3.1622776601683795},"182":{"tf":2.23606797749979},"183":{"tf":2.23606797749979},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.4142135623730951},"235":{"tf":3.0},"237":{"tf":1.0},"270":{"tf":1.7320508075688772},"271":{"tf":1.4142135623730951},"324":{"tf":1.0},"326":{"tf":1.4142135623730951},"329":{"tf":1.4142135623730951},"330":{"tf":3.0},"331":{"tf":2.0},"332":{"tf":2.0},"334":{"tf":1.0},"335":{"tf":3.4641016151377544},"336":{"tf":1.4142135623730951},"337":{"tf":1.0},"338":{"tf":4.242640687119285},"339":{"tf":1.7320508075688772},"340":{"tf":2.449489742783178},"354":{"tf":1.0},"356":{"tf":1.4142135623730951},"368":{"tf":1.7320508075688772},"37":{"tf":1.7320508075688772},"377":{"tf":1.0},"396":{"tf":1.0},"40":{"tf":1.0},"408":{"tf":2.23606797749979},"48":{"tf":3.872983346207417},"50":{"tf":2.6457513110645907},"53":{"tf":1.4142135623730951},"55":{"tf":1.7320508075688772},"56":{"tf":2.449489742783178},"57":{"tf":2.0},"69":{"tf":2.449489742783178},"70":{"tf":1.0},"93":{"tf":1.7320508075688772}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"211":{"tf":1.0}}}}}}}}}}},"y":{".":{"d":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":1,"docs":{"273":{"tf":1.4142135623730951}}}}}}},"df":0,"docs":{}},"1":{"df":1,"docs":{"172":{"tf":1.4142135623730951}}},"2":{"df":1,"docs":{"172":{"tf":1.7320508075688772}}},"_":{"df":0,"docs":{},"s":{"df":0,"docs":{},"q":{"df":0,"docs":{},"u":{"a":{"df":0,"docs":{},"r":{"df":1,"docs":{"93":{"tf":1.4142135623730951}}}},"df":0,"docs":{}}}}},"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"258":{"tf":2.6457513110645907}}}}},"df":23,"docs":{"170":{"tf":2.8284271247461903},"172":{"tf":2.23606797749979},"184":{"tf":1.7320508075688772},"186":{"tf":2.0},"187":{"tf":1.7320508075688772},"189":{"tf":1.7320508075688772},"270":{"tf":2.449489742783178},"271":{"tf":1.4142135623730951},"273":{"tf":1.0},"329":{"tf":1.0},"330":{"tf":1.4142135623730951},"331":{"tf":1.4142135623730951},"335":{"tf":3.3166247903554},"338":{"tf":4.242640687119285},"339":{"tf":2.0},"340":{"tf":4.0},"354":{"tf":1.0},"356":{"tf":1.4142135623730951},"37":{"tf":2.0},"53":{"tf":1.4142135623730951},"56":{"tf":2.449489742783178},"69":{"tf":2.23606797749979},"93":{"tf":1.7320508075688772}},"e":{"df":1,"docs":{"340":{"tf":1.0}},"l":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":3,"docs":{"145":{"tf":1.0},"146":{"tf":1.0},"148":{"tf":2.0}}}}}}},"i":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"d":{"df":1,"docs":{"393":{"tf":1.0}}},"df":0,"docs":{}}}},"y":{"df":0,"docs":{},"y":{"df":0,"docs":{},"i":{"df":1,"docs":{"17":{"tf":1.0}}}}}},"z":{"df":3,"docs":{"330":{"tf":1.4142135623730951},"339":{"tf":1.4142135623730951},"53":{"tf":1.0}},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":3,"docs":{"247":{"tf":1.4142135623730951},"248":{"tf":1.0},"60":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"p":{"(":{"&":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"f":{"df":0,"docs":{},"f":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"[":{"df":0,"docs":{},"i":{"df":1,"docs":{"247":{"tf":1.0}}}},"df":0,"docs":{}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"247":{"tf":1.0}}}}}}},"title":{"root":{"8":{"df":1,"docs":{"136":{"tf":1.0}}},"_":{"df":1,"docs":{"106":{"tf":1.0}}},"a":{"df":0,"docs":{},"n":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"y":{"df":0,"docs":{},"z":{"df":1,"docs":{"409":{"tf":1.0}}}}}},"df":0,"docs":{}},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"253":{"tf":1.0}}},"p":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":1,"docs":{"321":{"tf":1.0}}}}}}},"r":{"c":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"300":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"g":{"df":1,"docs":{"214":{"tf":1.0}}}},"s":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":0,"docs":{},"t":{"_":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":1,"docs":{"198":{"tf":1.0}}}},"n":{"df":1,"docs":{"198":{"tf":1.0}}}},"df":1,"docs":{"197":{"tf":1.0}}}}}}}},"b":{"df":0,"docs":{},"o":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"t":{"df":3,"docs":{"266":{"tf":1.0},"267":{"tf":1.0},"271":{"tf":1.0}}}},"df":1,"docs":{"268":{"tf":1.0}}}}},"c":{"a":{"df":0,"docs":{},"r":{"df":0,"docs":{},"g":{"df":0,"docs":{},"o":{"df":9,"docs":{"249":{"tf":1.0},"25":{"tf":1.0},"258":{"tf":1.0},"259":{"tf":1.0},"26":{"tf":1.0},"262":{"tf":1.0},"263":{"tf":1.0},"27":{"tf":1.0},"29":{"tf":1.0}}}}}},"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"p":{"df":0,"docs":{},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"408":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"e":{"df":2,"docs":{"244":{"tf":1.0},"402":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":1,"docs":{"321":{"tf":1.0}}}}}}},"p":{"df":0,"docs":{},"i":{"df":1,"docs":{"402":{"tf":1.0}}}}},"r":{"a":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"s":{".":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":5,"docs":{"249":{"tf":1.0},"251":{"tf":1.0},"254":{"tf":1.0},"256":{"tf":1.0},"258":{"tf":1.0}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}},"d":{"df":0,"docs":{},"e":{"b":{"df":0,"docs":{},"u":{"df":0,"docs":{},"g":{"df":1,"docs":{"399":{"tf":1.0}}}}},"df":0,"docs":{},"f":{"a":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"df":1,"docs":{"404":{"tf":1.0}}}}}},"df":0,"docs":{}},"r":{"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"df":2,"docs":{"269":{"tf":1.0},"273":{"tf":1.0}}}},"i":{"df":0,"docs":{},"v":{"df":1,"docs":{"370":{"tf":1.0}}}}}},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":2,"docs":{"276":{"tf":1.0},"387":{"tf":1.0}}}}}},"df":0,"docs":{},"e":{"df":3,"docs":{"157":{"tf":1.0},"201":{"tf":1.0},"410":{"tf":1.0}},"q":{"df":1,"docs":{"400":{"tf":1.0}}},"x":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"c":{"df":0,"docs":{},"t":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}}},"f":{"df":0,"docs":{},"n":{"df":1,"docs":{"237":{"tf":1.0}}}},"g":{"df":0,"docs":{},"l":{"df":0,"docs":{},"o":{"b":{"df":1,"docs":{"124":{"tf":1.0}}},"df":0,"docs":{}}},"u":{"a":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"340":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{}}},"h":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"h":{"df":1,"docs":{"403":{"tf":1.0}},"m":{"a":{"df":0,"docs":{},"p":{"df":3,"docs":{"144":{"tf":1.0},"146":{"tf":1.0},"148":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"t":{"df":0,"docs":{},"m":{"df":0,"docs":{},"l":{"df":1,"docs":{"380":{"tf":1.0}}}},"t":{"df":0,"docs":{},"p":{"df":1,"docs":{"378":{"tf":1.0}}}}}},"i":{"/":{"df":0,"docs":{},"o":{"df":1,"docs":{"211":{"tf":1.0}}}},"d":{"df":1,"docs":{"409":{"tf":1.0}}},"df":0,"docs":{},"m":{"df":0,"docs":{},"p":{"df":0,"docs":{},"l":{"df":1,"docs":{"96":{"tf":1.0}}}}},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"a":{"df":0,"docs":{},"l":{"df":1,"docs":{"262":{"tf":1.0}}}},"df":0,"docs":{}}}},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"239":{"tf":1.0}}}}}},"j":{"df":0,"docs":{},"o":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"292":{"tf":1.0}}}}}},"l":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"u":{"df":0,"docs":{},"x":{"df":1,"docs":{"15":{"tf":1.0}}}}}}},"m":{"a":{"c":{"df":0,"docs":{},"o":{"df":1,"docs":{"15":{"tf":1.0}}},"r":{"df":0,"docs":{},"o":{"_":{"df":0,"docs":{},"r":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":1,"docs":{"368":{"tf":1.0}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":1,"docs":{"220":{"tf":1.0}}}},"t":{"c":{"df":0,"docs":{},"h":{"df":6,"docs":{"102":{"tf":1.0},"105":{"tf":1.0},"156":{"tf":1.0},"157":{"tf":1.0},"326":{"tf":1.0},"340":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":1,"docs":{"293":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"t":{"df":0,"docs":{},"e":{"df":0,"docs":{},"x":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"300":{"tf":1.0}}}},"df":0,"docs":{}}}}}},"n":{"df":0,"docs":{},"e":{"df":0,"docs":{},"v":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"361":{"tf":1.0}}}}},"w":{"df":0,"docs":{},"t":{"df":0,"docs":{},"y":{"df":0,"docs":{},"p":{"df":2,"docs":{"357":{"tf":1.0},"359":{"tf":1.0}}}}}},"x":{"df":0,"docs":{},"t":{"df":1,"docs":{"239":{"tf":1.0}}}}},"i":{"df":0,"docs":{},"g":{"df":0,"docs":{},"h":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"i":{"df":1,"docs":{"412":{"tf":1.0}}}}}}}},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"df":1,"docs":{"101":{"tf":1.0}}}}}},"o":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":1,"docs":{"7":{"tf":1.0}}}},"t":{"df":0,"docs":{},"i":{"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"104":{"tf":1.0}}}},"df":1,"docs":{"101":{"tf":1.0}}}}}}},"r":{"d":{"df":1,"docs":{"401":{"tf":1.0}}},"df":0,"docs":{}}},"p":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"c":{"df":3,"docs":{"152":{"tf":1.0},"154":{"tf":1.0},"160":{"tf":1.4142135623730951}}},"df":0,"docs":{}}},"r":{"df":0,"docs":{},"t":{"df":0,"docs":{},"i":{"a":{"df":0,"docs":{},"l":{"df":0,"docs":{},"e":{"df":0,"docs":{},"q":{"df":1,"docs":{"400":{"tf":1.0}}}},"o":{"df":0,"docs":{},"r":{"d":{"df":1,"docs":{"401":{"tf":1.0}}},"df":0,"docs":{}}}}},"df":0,"docs":{}}}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":1,"docs":{"317":{"tf":1.0}}}}},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"t":{"df":0,"docs":{},"l":{"df":0,"docs":{},"n":{"df":1,"docs":{"37":{"tf":1.0}}}}}}}},"u":{"b":{"df":3,"docs":{"115":{"tf":1.0},"121":{"tf":1.0},"253":{"tf":1.0}}},"df":0,"docs":{}}},"r":{"c":{"<":{"df":0,"docs":{},"t":{"df":6,"docs":{"278":{"tf":1.0},"279":{"tf":1.0},"280":{"tf":1.0},"284":{"tf":1.0},"287":{"tf":1.0},"300":{"tf":1.0}}}},"df":0,"docs":{}},"df":0,"docs":{},"e":{"df":0,"docs":{},"f":{"c":{"df":0,"docs":{},"e":{"df":0,"docs":{},"l":{"df":0,"docs":{},"l":{"<":{"df":0,"docs":{},"t":{"df":4,"docs":{"281":{"tf":1.0},"282":{"tf":1.0},"284":{"tf":1.0},"300":{"tf":1.0}}}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"l":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"s":{"df":1,"docs":{"28":{"tf":1.0}}}},"df":0,"docs":{}}},"s":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"df":0,"docs":{},"t":{"<":{"df":0,"docs":{},"t":{"df":2,"docs":{"157":{"tf":1.0},"201":{"tf":1.0}}}},"df":2,"docs":{"155":{"tf":1.0},"36":{"tf":1.0}}}}}}},"f":{"c":{"df":1,"docs":{"417":{"tf":1.0}}},"df":0,"docs":{}},"u":{"df":0,"docs":{},"s":{"df":0,"docs":{},"t":{"df":9,"docs":{"0":{"tf":1.0},"22":{"tf":1.0},"23":{"tf":1.0},"3":{"tf":1.0},"306":{"tf":1.0},"344":{"tf":1.0},"409":{"tf":1.0},"412":{"tf":1.4142135623730951},"416":{"tf":1.0}},"f":{"df":0,"docs":{},"i":{"df":0,"docs":{},"x":{"df":1,"docs":{"407":{"tf":1.0}}}},"m":{"df":0,"docs":{},"t":{"df":1,"docs":{"406":{"tf":1.0}}}}},"u":{"df":0,"docs":{},"p":{"df":3,"docs":{"15":{"tf":1.0},"16":{"tf":1.0},"416":{"tf":1.0}}}}}}}},"s":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"r":{"c":{"df":0,"docs":{},"h":{"_":{"c":{"a":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"_":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"e":{"df":0,"docs":{},"n":{"df":0,"docs":{},"s":{"df":0,"docs":{},"i":{"df":0,"docs":{},"t":{"df":1,"docs":{"227":{"tf":1.0}}}}}}}}}}},"df":0,"docs":{}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":1,"docs":{"226":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{},"n":{"d":{"df":3,"docs":{"301":{"tf":1.0},"302":{"tf":1.0},"304":{"tf":1.0}}},"df":0,"docs":{}}},"h":{"df":0,"docs":{},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"l":{"d":{"_":{"df":0,"docs":{},"p":{"a":{"df":0,"docs":{},"n":{"df":1,"docs":{"200":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"i":{"df":0,"docs":{},"z":{"df":0,"docs":{},"e":{"df":1,"docs":{"362":{"tf":1.0}}}}},"o":{"df":0,"docs":{},"u":{"df":0,"docs":{},"r":{"c":{"df":1,"docs":{"7":{"tf":1.0}}},"df":0,"docs":{}}}},"p":{"a":{"df":0,"docs":{},"w":{"df":0,"docs":{},"n":{"df":1,"docs":{"291":{"tf":1.0}}}}},"df":0,"docs":{}},"t":{"d":{":":{":":{"df":0,"docs":{},"m":{"df":0,"docs":{},"e":{"df":0,"docs":{},"m":{":":{":":{"d":{"df":0,"docs":{},"r":{"df":0,"docs":{},"o":{"df":0,"docs":{},"p":{"df":1,"docs":{"277":{"tf":1.0}}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"df":0,"docs":{}},"df":0,"docs":{}},"df":0,"docs":{},"r":{"df":0,"docs":{},"i":{"df":0,"docs":{},"n":{"df":0,"docs":{},"g":{"df":1,"docs":{"68":{"tf":1.0}}}}}}},"u":{"df":0,"docs":{},"p":{"df":0,"docs":{},"e":{"df":0,"docs":{},"r":{"df":1,"docs":{"116":{"tf":1.0}}}}}},"y":{"df":0,"docs":{},"n":{"c":{"df":3,"docs":{"301":{"tf":1.0},"303":{"tf":1.0},"304":{"tf":1.0}}},"df":0,"docs":{}}}},"t":{"c":{"df":0,"docs":{},"p":{"df":1,"docs":{"376":{"tf":1.0}}}},"df":0,"docs":{},"h":{"df":0,"docs":{},"r":{"df":0,"docs":{},"e":{"a":{"d":{"df":0,"docs":{},"p":{"df":0,"docs":{},"o":{"df":0,"docs":{},"o":{"df":0,"docs":{},"l":{"df":1,"docs":{"387":{"tf":1.0}}}}}}},"df":0,"docs":{}},"df":0,"docs":{}}}}},"u":{"df":0,"docs":{},"n":{"df":0,"docs":{},"i":{"c":{"df":0,"docs":{},"o":{"d":{"df":1,"docs":{"214":{"tf":1.0}}},"df":0,"docs":{}}},"df":0,"docs":{},"o":{"df":0,"docs":{},"n":{"df":1,"docs":{"350":{"tf":1.0}}}}},"s":{"a":{"df":0,"docs":{},"f":{"df":1,"docs":{"344":{"tf":1.0}}}},"df":0,"docs":{}},"w":{"df":0,"docs":{},"r":{"a":{"df":0,"docs":{},"p":{"df":1,"docs":{"158":{"tf":1.0}}}},"df":0,"docs":{}}}},"s":{"df":5,"docs":{"118":{"tf":1.0},"119":{"tf":1.0},"121":{"tf":1.0},"123":{"tf":1.0},"253":{"tf":1.0}}},"t":{"df":0,"docs":{},"f":{"df":1,"docs":{"136":{"tf":1.0}}}}},"w":{"df":0,"docs":{},"e":{"a":{"df":0,"docs":{},"k":{"<":{"df":0,"docs":{},"t":{"df":1,"docs":{"287":{"tf":1.0}}}},"df":0,"docs":{}}},"df":0,"docs":{}},"i":{"df":0,"docs":{},"n":{"d":{"df":0,"docs":{},"o":{"df":0,"docs":{},"w":{"df":1,"docs":{"16":{"tf":1.0}}}}},"df":0,"docs":{}}}},"y":{"a":{"df":0,"docs":{},"n":{"df":0,"docs":{},"k":{"df":1,"docs":{"258":{"tf":1.0}}}}},"df":0,"docs":{}}}}},"lang":"English","pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5"},"results_options":{"limit_results":30,"teaser_word_count":30},"search_options":{"bool":"OR","expand":true,"fields":{"body":{"boost":1},"breadcrumbs":{"boost":1},"title":{"boost":2}}}}